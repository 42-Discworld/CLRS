{
    "docs": [
        {
            "location": "/",
            "text": "Solutions to Introduction to Algorithms 3rd\n\n\nHope to \nre-sort\n solutions to help more people and myself study algorithms.\nBy using .md files, it's much more readable in portable devices now.\n\n\nMany a little makes a mickle.\n\n\nThanks to: the Instructor's Manual by Thomas H. Cormen, @skanev, @cyberzhg, @yinyanghu, @irobot0, @ajl213, etc.\n\n\nPlease don't hesitate to give me your feedback if any adjustment is needed with the sorted-solutions. You can simply press the \"Edit this page\" button in the upper right corner to edit the contents.\n\n\nWorking on following exercises:\n\n\n18.2-1, 19.2-1, 27.2-1, 27.3-4, 27-3.\n\n\nGetting Started\n\n\nThanks to \nMkDocs\n and \nMaterial for MkDocs\n! \n\n\nThe \nMathJax\n is now correctly working and speedy.\n\n\nI add \noverflow-x: auto\n, so you can scroll horizontally in the math display equations.\n\n\nMore Informations\n\n\nFor more informations please visit \nmy github site\n.\n\n\nMy blog: \nJay's Blog\n\n\nMail to: \nwalkccray@gmail.com\n\n\nBy Jay Chen on Jan 19, 2017.\n\n\nUpdated to this new site on Feb 7, 2018.",
            "title": "Preface"
        },
        {
            "location": "/#solutions-to-introduction-to-algorithms-3rd",
            "text": "Hope to  re-sort  solutions to help more people and myself study algorithms.\nBy using .md files, it's much more readable in portable devices now.  Many a little makes a mickle.  Thanks to: the Instructor's Manual by Thomas H. Cormen, @skanev, @cyberzhg, @yinyanghu, @irobot0, @ajl213, etc.  Please don't hesitate to give me your feedback if any adjustment is needed with the sorted-solutions. You can simply press the \"Edit this page\" button in the upper right corner to edit the contents.",
            "title": "Solutions to Introduction to Algorithms 3rd"
        },
        {
            "location": "/#working-on-following-exercises",
            "text": "18.2-1, 19.2-1, 27.2-1, 27.3-4, 27-3.",
            "title": "Working on following exercises:"
        },
        {
            "location": "/#getting-started",
            "text": "Thanks to  MkDocs  and  Material for MkDocs !   The  MathJax  is now correctly working and speedy.  I add  overflow-x: auto , so you can scroll horizontally in the math display equations.",
            "title": "Getting Started"
        },
        {
            "location": "/#more-informations",
            "text": "For more informations please visit  my github site .  My blog:  Jay's Blog  Mail to:  walkccray@gmail.com  By Jay Chen on Jan 19, 2017.  Updated to this new site on Feb 7, 2018.",
            "title": "More Informations"
        },
        {
            "location": "/Chap01/1.1/",
            "text": "1.1-1\n\n\n\n\nGive a real-world example that requires sorting or a real-world example that requires computing a convex hull.\n\n\n\n\n\n\nSorting: browse the price of the restaurants with ascending prices on NTU street.\n\n\nConvex hull: computing the diameter of set of points.\n\n\n\n\n1.1-2\n\n\n\n\nOther than speed, what other measures of efficiency might one use in a real-world setting?\n\n\n\n\nMemory efficiency and coding efficiency.\n\n\n1.1-3\n\n\n\n\nSelect a data structure that you have seen previously, and discuss its strengths and limitations.\n\n\n\n\nLinked-list:\n\n\n\n\nStrengths: insertion and deletion.\n\n\nLimitations: random access.\n\n\n\n\n1.1-4\n\n\n\n\nHow are the shortest-path and traveling-salesman problems given above similar? How are they different?\n\n\n\n\n\n\nSimilar: finding path with shortest distance.\n\n\nDifferent: traveling-salesman has more constrains.\n\n\n\n\n1.1-5\n\n\n\n\nCome up with a real-world problem in which only the best solution will do. Then come up with one in which a solution that is ''approximately'' the best is good enough.\n\n\n\n\n\n\nBest: find the GCD of two positive integer numbers.\n\n\nApproximately: find the solution of differential equations.",
            "title": "1.1 Algorithms"
        },
        {
            "location": "/Chap01/1.1/#11-1",
            "text": "Give a real-world example that requires sorting or a real-world example that requires computing a convex hull.    Sorting: browse the price of the restaurants with ascending prices on NTU street.  Convex hull: computing the diameter of set of points.",
            "title": "1.1-1"
        },
        {
            "location": "/Chap01/1.1/#11-2",
            "text": "Other than speed, what other measures of efficiency might one use in a real-world setting?   Memory efficiency and coding efficiency.",
            "title": "1.1-2"
        },
        {
            "location": "/Chap01/1.1/#11-3",
            "text": "Select a data structure that you have seen previously, and discuss its strengths and limitations.   Linked-list:   Strengths: insertion and deletion.  Limitations: random access.",
            "title": "1.1-3"
        },
        {
            "location": "/Chap01/1.1/#11-4",
            "text": "How are the shortest-path and traveling-salesman problems given above similar? How are they different?    Similar: finding path with shortest distance.  Different: traveling-salesman has more constrains.",
            "title": "1.1-4"
        },
        {
            "location": "/Chap01/1.1/#11-5",
            "text": "Come up with a real-world problem in which only the best solution will do. Then come up with one in which a solution that is ''approximately'' the best is good enough.    Best: find the GCD of two positive integer numbers.  Approximately: find the solution of differential equations.",
            "title": "1.1-5"
        },
        {
            "location": "/Chap01/1.2/",
            "text": "1.2-1\n\n\n\n\nGive an example of an application that requires algorithmic content at the application level, and discuss the function of the algorithms involved.\n\n\n\n\nDrive navigation.\n\n\n1.2-2\n\n\n\n\nSuppose we are comparing implementations of insertion sort and merge sort on the same machine. For inputs of size $n$ , insertion sort runs in $8n^2$ steps, while merge sort runs in $64n\\lg n$ steps. For which values of $n$ does insertion sort beat merge sort?\n\n\n\n\n\\begin{align}\n8n^2 & <   64n\\lg n \\\\\n 2^n & <   n^8 \\\\\n   n & \\le 43.\n\\end{align}\n\n\n1.2-3\n\n\n\n\nWhat is the smallest value of $n$ such that an algorithm whose running time is $100n^2$ runs faster than an algorithm whose running time is $2^n$ on the same machine?\n\n\n\n\n\\begin{align}\n100n^2 & <   2^n \\\\\n     n & \\ge 15.\n\\end{align}",
            "title": "1.2 Algorithms as a technology"
        },
        {
            "location": "/Chap01/1.2/#12-1",
            "text": "Give an example of an application that requires algorithmic content at the application level, and discuss the function of the algorithms involved.   Drive navigation.",
            "title": "1.2-1"
        },
        {
            "location": "/Chap01/1.2/#12-2",
            "text": "Suppose we are comparing implementations of insertion sort and merge sort on the same machine. For inputs of size $n$ , insertion sort runs in $8n^2$ steps, while merge sort runs in $64n\\lg n$ steps. For which values of $n$ does insertion sort beat merge sort?   \\begin{align}\n8n^2 & <   64n\\lg n \\\\\n 2^n & <   n^8 \\\\\n   n & \\le 43.\n\\end{align}",
            "title": "1.2-2"
        },
        {
            "location": "/Chap01/1.2/#12-3",
            "text": "What is the smallest value of $n$ such that an algorithm whose running time is $100n^2$ runs faster than an algorithm whose running time is $2^n$ on the same machine?   \\begin{align}\n100n^2 & <   2^n \\\\\n     n & \\ge 15.\n\\end{align}",
            "title": "1.2-3"
        },
        {
            "location": "/Chap01/Problems/1-1/",
            "text": "For each function $f(n)$ and time $t$ in the following table, determine the largest size $n$ of a problem that can be solved in time $t$, assuming that the algorithm to solve the problem takes $f(n)$ microseconds.\n\n\n\n\n\\begin{array}{cccccccc}\n         & \\text{1 second}  & \\text{1 minute}    & \\text{1 hour}       & \\text{1 day}            & \\text{1 month}          & \\text{1 year}           & \\text{1 century} \\\\\n\\hline\n\\lg n    & 2^{10^6}         & 2^{6 \\times 10^6}  & 2^{3.6 \\times 10^9} & 2^{8.64 \\times 10^{10}} & 2^{2.59 \\times 10^{12}} & 2^{3.15 \\times 10^{13}} & 2^{3.15 \\times 10^{15}} \\\\\n\\sqrt n  & 10^{12}          & 3.6 \\times 10^{15} & 1.3 \\times 10^{19}  & 7.46 \\times 10^{21}     & 6.72 \\times 10^{24}     & 9.95 \\times 10^{26}     & 9.95 \\times 10^{30} \\\\\nn        & 10^6             & 6 \\times 10^7      & 3.6 \\times 10^9     & 8.64 \\times 10^{10}     & 2.59 \\times 10^{12}     & 3.15 \\times 10^{13}     & 3.15 \\times 10^{15} \\\\\nn\\lg n   & 6.24 \\times 10^4 & 2.8 \\times 10^6    & 1.33 \\times 10^8    & 2.76 \\times 10^9        & 7.19 \\times 10^{10}     & 7.98 \\times 10^{11}     & 6.86 \\times 10^{13} \\\\\nn^2      & 1000             & 7745               & 60000               & 293938                  & 1609968                 & 5615692                 & 56156922 \\\\\nn^3      & 100              & 391                & 1532                & 4420                    & 13736                   & 31593                   & 146645 \\\\\n2^n      & 19               & 25                 & 31                  & 36                      & 41                      & 44                      & 51 \\\\\nn!       & 9                & 11                 & 12                  & 13                      & 15                      & 16                      & 17\n\\end{array}",
            "title": "Problem 1-1"
        },
        {
            "location": "/Chap02/2.1/",
            "text": "2.1-1\n\n\n\n\nUsing Figure 2.2 as a model, illustrate the operation of $\\text{INSERTION-SORT}$ on the array $A = \\langle 31, 41, 59, 26, 41, 58 \\rangle$.\n\n\n\n\n\\begin{align}\nA & = \\langle 31, 41, 59, 26, 41, 58 \\rangle \\\\\nA & = \\langle 31, 41, 59, 26, 41, 58 \\rangle \\\\\nA & = \\langle 31, 41, 59, 26, 41, 58 \\rangle \\\\\nA & = \\langle 26, 31, 41, 59, 41, 58 \\rangle \\\\\nA & = \\langle 26, 31, 41, 41, 59, 58 \\rangle \\\\\nA & = \\langle 26, 31, 41, 41, 58, 59 \\rangle\n\\end{align}\n\n\n2.1-2\n\n\n\n\nRewrite the $\\text{INSERTION-SORT}$ procedure to sort into nonincreasing instead of nondecreasing order.\n\n\n\n\nINSERTION\n-\nSORT\n(\nA\n)\n \n    \nfor\n \nj\n \n=\n \n2\n \nto\n \nA\n.\nlength\n\n        \nkey\n \n=\n \nA\n[\nj\n]\n\n        \ni\n \n=\n \nj\n \n-\n \n1\n\n        \nwhile\n \ni\n \n>\n \n0\n \nand\n \nA\n[\ni\n]\n \n<\n \nkey\n\n            \nA\n[\ni\n \n+\n \n1\n]\n \n=\n \nA\n[\ni\n]\n\n            \ni\n \n=\n \ni\n \n-\n \n1\n\n        \nA\n[\ni\n \n+\n \n1\n]\n \n=\n \nkey\n\n\n\n\n\n2.1-3\n\n\n\n\nConsider the \nsearching problem\n:\n\n\nInput\n: A sequence of $n$ numbers $A = \\langle a_1, a_2, \\ldots, a_n \\rangle$ and a value $v$.\n\n\nOutput:\n An index $i$ such that $v = A[i]$ or the special value $\\text{NIL}$ if $v$ does not appear in $A$.\n\n\nWrite pseudocode for \nlinear search\n, which scans through the sequence, looking for $v$. Using a loop invariant, prove that your algorithm is correct. Make sure that your loop invariant fulfills the three necessary properties.\n\n\n\n\nLINEAR\n-\nSEARCH\n(\nA\n,\n \nv\n)\n\n    \nfor\n \ni\n \n=\n \n1\n \nto\n \nA\n.\nlength\n\n       \nif\n \nA\n[\ni\n]\n \n==\n \nv\n\n            \nreturn\n \ni\n\n    \nreturn\n \nNIL\n\n\n\n\n\nLoop invariant:\n At the start of each iteration of the \nfor\n loop, the subarray $A[1..i - 1]$ consists of elements that are different than $v$.\n\n\nInitialization:\n Initially the subarray is the empty array, so the prove is trivial.\n\n\nMaintenance:\n On each step, we know that $A[1..i - 1]$ does not contain $v$. We compare it with $A[i]$. If they are the same, we return $i$, which is a correct result. Otherwise, we continue to the next step. We have already insured that $A[1..i - 1]$ does not contain $v$ and that $A[i]$ is different from $v$, so this step preserves the invariant.\n\n\nTermination:\n The loop terminates when $i > A.length$. Since $i$ increases by $1$ and $i > A.length$, we know that all the elements in $A$ have been checked and it has been found that $v$ is not among them. Thus, we return $\\text{NIL}$.\n\n\n2.1-4\n\n\n\n\nConsider the problem of adding two $n$-bit binary integers, stored in two $n$-element arrays $A$ and $B$. The sum of the two integers should be stored in binary form in an $(n + 1)$-element array $C$. State the problem formally and write pseudocode for adding the two integers.\n\n\nInput:\n An array of booleans $A = \\langle a_1, a_2, \\ldots, a_n \\rangle$ and an array of booleans $B = \\langle b_1, b_2, \\ldots, b_n \\rangle$, each representing an integer stored in binary format (each digit is a number, either $0$ or $1$, least-significant digit first) and each of length $n$.\n\n\nOutput:\n An array $C = \\langle c_1, c_2, \\ldots, c_n + 1 \\rangle$ such that $C' = A' + B'$ where $A'$, $B'$ and $C'$ are the integers, represented by $A$, $B$ and $C$.\n\n\n\n\nADD\n-\nBINARY\n(\nA\n,\n \nB\n)\n\n    \nC\n \n=\n \nnew\n \ninteger\n[\nA\n.\nlength\n \n+\n \n1\n]\n\n    \ncarry\n \n=\n \n0\n\n    \nfor\n \ni\n \n=\n \n1\n \nto\n \nA\n.\nlength\n\n        \nC\n[\ni\n]\n \n=\n \n(\nA\n[\ni\n]\n \n+\n \nB\n[\ni\n]\n \n+\n \ncarry\n)\n \n%\n \n2\n  \n// remainder\n\n        \ncarry\n \n=\n \n(\nA\n[\ni\n]\n \n+\n \nB\n[\ni\n]\n \n+\n \ncarry\n)\n \n/\n \n2\n \n// quotient\n\n    \nC\n[\ni\n]\n \n=\n \ncarry\n\n    \nreturn\n \nADD\n-\nBINARY\n(\nA\n,\n \nB\n)",
            "title": "2.1 Insertion sort"
        },
        {
            "location": "/Chap02/2.1/#21-1",
            "text": "Using Figure 2.2 as a model, illustrate the operation of $\\text{INSERTION-SORT}$ on the array $A = \\langle 31, 41, 59, 26, 41, 58 \\rangle$.   \\begin{align}\nA & = \\langle 31, 41, 59, 26, 41, 58 \\rangle \\\\\nA & = \\langle 31, 41, 59, 26, 41, 58 \\rangle \\\\\nA & = \\langle 31, 41, 59, 26, 41, 58 \\rangle \\\\\nA & = \\langle 26, 31, 41, 59, 41, 58 \\rangle \\\\\nA & = \\langle 26, 31, 41, 41, 59, 58 \\rangle \\\\\nA & = \\langle 26, 31, 41, 41, 58, 59 \\rangle\n\\end{align}",
            "title": "2.1-1"
        },
        {
            "location": "/Chap02/2.1/#21-2",
            "text": "Rewrite the $\\text{INSERTION-SORT}$ procedure to sort into nonincreasing instead of nondecreasing order.   INSERTION - SORT ( A )  \n     for   j   =   2   to   A . length \n         key   =   A [ j ] \n         i   =   j   -   1 \n         while   i   >   0   and   A [ i ]   <   key \n             A [ i   +   1 ]   =   A [ i ] \n             i   =   i   -   1 \n         A [ i   +   1 ]   =   key",
            "title": "2.1-2"
        },
        {
            "location": "/Chap02/2.1/#21-3",
            "text": "Consider the  searching problem :  Input : A sequence of $n$ numbers $A = \\langle a_1, a_2, \\ldots, a_n \\rangle$ and a value $v$.  Output:  An index $i$ such that $v = A[i]$ or the special value $\\text{NIL}$ if $v$ does not appear in $A$.  Write pseudocode for  linear search , which scans through the sequence, looking for $v$. Using a loop invariant, prove that your algorithm is correct. Make sure that your loop invariant fulfills the three necessary properties.   LINEAR - SEARCH ( A ,   v ) \n     for   i   =   1   to   A . length \n        if   A [ i ]   ==   v \n             return   i \n     return   NIL   Loop invariant:  At the start of each iteration of the  for  loop, the subarray $A[1..i - 1]$ consists of elements that are different than $v$.  Initialization:  Initially the subarray is the empty array, so the prove is trivial.  Maintenance:  On each step, we know that $A[1..i - 1]$ does not contain $v$. We compare it with $A[i]$. If they are the same, we return $i$, which is a correct result. Otherwise, we continue to the next step. We have already insured that $A[1..i - 1]$ does not contain $v$ and that $A[i]$ is different from $v$, so this step preserves the invariant.  Termination:  The loop terminates when $i > A.length$. Since $i$ increases by $1$ and $i > A.length$, we know that all the elements in $A$ have been checked and it has been found that $v$ is not among them. Thus, we return $\\text{NIL}$.",
            "title": "2.1-3"
        },
        {
            "location": "/Chap02/2.1/#21-4",
            "text": "Consider the problem of adding two $n$-bit binary integers, stored in two $n$-element arrays $A$ and $B$. The sum of the two integers should be stored in binary form in an $(n + 1)$-element array $C$. State the problem formally and write pseudocode for adding the two integers.  Input:  An array of booleans $A = \\langle a_1, a_2, \\ldots, a_n \\rangle$ and an array of booleans $B = \\langle b_1, b_2, \\ldots, b_n \\rangle$, each representing an integer stored in binary format (each digit is a number, either $0$ or $1$, least-significant digit first) and each of length $n$.  Output:  An array $C = \\langle c_1, c_2, \\ldots, c_n + 1 \\rangle$ such that $C' = A' + B'$ where $A'$, $B'$ and $C'$ are the integers, represented by $A$, $B$ and $C$.   ADD - BINARY ( A ,   B ) \n     C   =   new   integer [ A . length   +   1 ] \n     carry   =   0 \n     for   i   =   1   to   A . length \n         C [ i ]   =   ( A [ i ]   +   B [ i ]   +   carry )   %   2    // remainder \n         carry   =   ( A [ i ]   +   B [ i ]   +   carry )   /   2   // quotient \n     C [ i ]   =   carry \n     return   ADD - BINARY ( A ,   B )",
            "title": "2.1-4"
        },
        {
            "location": "/Chap02/2.2/",
            "text": "2.2-1\n\n\n\n\nExpress the function $n^3 / 1000 - 100n^2 - 100n + 3n$ in terms of $\\Theta$-notation.\n\n\n\n\n$\\Theta(n^3)$.\n\n\n2.2-2\n\n\n\n\nConsider sorting $n$ numbers stored in array $A$ by first finding the smallest element of $A$ and exchanging it with the element in $A[1]$. Then find the second smallest element of $A$, and exchange it with $A[2]$. Continue in this manner for the first $n - 1$ elements of $A$. Write pseudocode for this algorithm, which is known as \nselection sort\n. What loop invariant does this algorithm maintain? Why does it need to run for only the first $n - 1$ elements, rather than for all $n$ elements? Give the best-case and worst-case running times of selection sort in $\\Theta$-notation.\n\n\n\n\nSELECTION\n-\nSORT\n(\nA\n)\n\n    \nn\n \n=\n \nA\n.\nlength\n\n    \nfor\n \nj\n \n=\n \n1\n \nto\n \nn\n \n-\n \n1\n\n        \nsmallest\n \n=\n \nj\n\n        \nfor\n \ni\n \n=\n \nj\n \n+\n \n1\n \nto\n \nn\n\n            \nif\n \nA\n[\ni\n]\n \n<\n \nA\n[\nsmallest\n]\n\n                \nsmallest\n \n=\n \ni\n\n        \nexchange\n \nA\n[\nj\n]\n \nwith\n \nA\n[\nsmallest\n]\n\n\n\n\n\nThe algorithm maintains the loop invariant that at the start of each iteration of the outer \nfor\n loop, the subarray $A[1..j - 1]$\u008d consists of the $j - 1$ smallest elements in the array $A[1..n]$\u008d, and this subarray is in sorted order. After the first $n - 1$ elements, the subarray $A[1..n]$\u008d contains the smallest $n - 1$ elements, sorted, and therefore element $A[n]$\u008d must be the largest element.\n\n\nThe running time of the algorithm is $\\Theta(n^2)$ for all cases.\n\n\n2.2-3\n\n\n\n\nConsider linear search again (see Exercise 2.1-3). How many elements of the in- put sequence need to be checked on the average, assuming that the element being searched for is equally likely to be any element in the array? How about in the worst case? What are the average-case and worst-case running times of linear search in $\\Theta$-notation? Justify your answers.\n\n\n\n\nIf the element is present in the sequence, half of the elements are likely to be checked before it is found in the average case. In the worst case, all of them will be checked. That is, $n / 2$ checks for the average case and $n$ for the worst case. Both of them are $\\Theta(n)$.\n\n\n2.2-4\n\n\n\n\nHow can we modify almost any algorithm to have a good best-case running time?\n\n\n\n\nModify the algorithm so it tests whether the input satisfies some special-case condition and, if it does, output a pre-computed answer. The best-case running time is generally not a good measure of an algorithm.",
            "title": "2.2 Analyzing algorithms"
        },
        {
            "location": "/Chap02/2.2/#22-1",
            "text": "Express the function $n^3 / 1000 - 100n^2 - 100n + 3n$ in terms of $\\Theta$-notation.   $\\Theta(n^3)$.",
            "title": "2.2-1"
        },
        {
            "location": "/Chap02/2.2/#22-2",
            "text": "Consider sorting $n$ numbers stored in array $A$ by first finding the smallest element of $A$ and exchanging it with the element in $A[1]$. Then find the second smallest element of $A$, and exchange it with $A[2]$. Continue in this manner for the first $n - 1$ elements of $A$. Write pseudocode for this algorithm, which is known as  selection sort . What loop invariant does this algorithm maintain? Why does it need to run for only the first $n - 1$ elements, rather than for all $n$ elements? Give the best-case and worst-case running times of selection sort in $\\Theta$-notation.   SELECTION - SORT ( A ) \n     n   =   A . length \n     for   j   =   1   to   n   -   1 \n         smallest   =   j \n         for   i   =   j   +   1   to   n \n             if   A [ i ]   <   A [ smallest ] \n                 smallest   =   i \n         exchange   A [ j ]   with   A [ smallest ]   The algorithm maintains the loop invariant that at the start of each iteration of the outer  for  loop, the subarray $A[1..j - 1]$\u008d consists of the $j - 1$ smallest elements in the array $A[1..n]$\u008d, and this subarray is in sorted order. After the first $n - 1$ elements, the subarray $A[1..n]$\u008d contains the smallest $n - 1$ elements, sorted, and therefore element $A[n]$\u008d must be the largest element.  The running time of the algorithm is $\\Theta(n^2)$ for all cases.",
            "title": "2.2-2"
        },
        {
            "location": "/Chap02/2.2/#22-3",
            "text": "Consider linear search again (see Exercise 2.1-3). How many elements of the in- put sequence need to be checked on the average, assuming that the element being searched for is equally likely to be any element in the array? How about in the worst case? What are the average-case and worst-case running times of linear search in $\\Theta$-notation? Justify your answers.   If the element is present in the sequence, half of the elements are likely to be checked before it is found in the average case. In the worst case, all of them will be checked. That is, $n / 2$ checks for the average case and $n$ for the worst case. Both of them are $\\Theta(n)$.",
            "title": "2.2-3"
        },
        {
            "location": "/Chap02/2.2/#22-4",
            "text": "How can we modify almost any algorithm to have a good best-case running time?   Modify the algorithm so it tests whether the input satisfies some special-case condition and, if it does, output a pre-computed answer. The best-case running time is generally not a good measure of an algorithm.",
            "title": "2.2-4"
        },
        {
            "location": "/Chap02/2.3/",
            "text": "2.3-1\n\n\n\n\nUsing Figure 2.4 as a model, illustrate the operation of merge sort on the array $A = \\langle 3, 41, 52, 26, 38, 57, 9, 49 \\rangle$.\n\n\n\n\n$$\n[3] \\quad [41] \\quad [52] \\quad [26] \\quad [38] \\quad [57] \\quad [9] \\quad [49]\n$$\n\n\n$$\n\\downarrow\n$$\n\n\n$$\n[3|41] \\quad [26| 52] \\quad [38|57] \\quad [9|49]\n$$\n\n\n$$\n\\downarrow\n$$\n\n\n$$\n[3|26|41|52] \\quad [9 |38|49|57]\n$$\n\n\n$$\n\\downarrow\n$$\n\n\n$$\n[3|9|26|38|41|49|52|57]\n$$\n\n\n2.3-2\n\n\n\n\nRewrite the $\\text{MERGE}$ procedure so that it does not use sentinels, instead stopping once either array $L$ or $R$ has had all its elements copied back to $A$ and then copying the remainder of the other array back into $A$.\n\n\n\n\nMERGE\n(\nA\n,\n \np\n,\n \nq\n,\n \nr\n)\n\n    \nn1\n \n=\n \nq\n \n-\n \np\n \n+\n \n1\n\n    \nn2\n \n=\n \nr\n \n-\n \nq\n\n    \nlet\n \nL\n[\n1.\n.\nn1\n]\n \nand\n \nR\n[\n1.\n.\nn2\n]\n \nbe\n \nnew\n \narrays\n\n    \nfor\n \ni\n \n=\n \n1\n \nto\n \nn1\n\n        \nL\n[\ni\n]\n \n=\n \nA\n[\np\n \n+\n \ni\n \n-\n \n1\n]\n\n    \nfor\n \nj\n \n=\n \n1\n \nto\n \nn2\n\n        \nR\n[\nj\n]\n \n=\n \nA\n[\nq\n \n+\n \nj\n]\n\n    \ni\n \n=\n \n1\n\n    \nj\n \n=\n \n1\n\n    \nfor\n \nk\n \n=\n \np\n \nto\n \nr\n\n        \nif\n \ni\n \n>\n \nn1\n\n            \nA\n[\nk\n]\n \n=\n \nR\n[\nj\n]\n\n            \nj\n \n=\n \nj\n \n+\n \n1\n\n        \nelse\n \nif\n \nj\n \n>\n \nn2\n\n            \nA\n[\nk\n]\n \n=\n \nL\n[\ni\n]\n\n            \ni\n \n=\n \ni\n \n+\n \n1\n\n        \nelse\n \nif\n \nL\n[\ni\n]\n \n\u2264\n \nR\n[\nj\n]\n\n            \nA\n[\nk\n]\n \n=\n \nL\n[\ni\n]\n\n            \ni\n \n=\n \ni\n \n+\n \n1\n\n        \nelse\n\n            \nA\n[\nk\n]\n \n=\n \nR\n[\nj\n]\n\n            \nj\n \n=\n \nj\n \n+\n \n1\n\n\n\n\n\n2.3-3\n\n\n\n\nUse mathematical induction to show that when $n$ is an exact power of $2$, the solution of the recurrence\n\n\n\n\nT(n) =\n\\begin{cases}\n    2         & \\text{if } n = 2, \\\\\n    2T(n / 2) & \\text{if } n = 2^k, \\text{for } k > 1\n\\end{cases}\n\n\nis $T(n) = n\\lg n$.\n\n\nThe base case is when $n = 2$, and we have $n\\lg n = 2\\lg 2 = 2 \\cdot 1 = 2$.\n\n\nFor the inductive step, our inductive hypothesis is that $T(n / 2) = (n / 2)\\lg(n / 2)$. Then\n\n\n\\begin{align}\nT(n) & = 2T(n / 2) + n \\\\\n     & = 2(n / 2) \\lg(n / 2) + n \\\\\n     & = n(\\lg n - 1) + n \\\\\n     & = n\\lg n - n + n \\\\\n     & = n\\lg n,\n\\end{align}\n\n\nwhich completes the inductive proof for exact powers of $2$.\n\n\n2.3-4\n\n\n\n\nWe can express insertion sort as a recursive procedure as follows. In order to sort $A[1..n]$\u008d, we recursively sort $A[1..n - 1]$\u008d and then insert $A[n]$ into the sorted array $A[1..n - 1]$\u008d. Write a recurrence for the running time of this recursive version of insertion sort.\n\n\n\n\nSince it takes $\\Theta(n)$ time in the worst case to insert $A[n]$\u008d into the sorted array $A[1..n - 1]$\u008d, we get the recurrence\n\n\nT(n) = \\begin{cases}\n    \\Theta(1)            & \\text{if } n = 1, \\\\\n    T(n - 1) + \\Theta(n) & \\text{if } n > 1.\n\\end{cases}\n\n\nAlthough the exercise does not ask you to solve this recurrence, its solution is $T(n) = \\Theta(n^2)$.\n\n\n2.3-5\n\n\n\n\nReferring back to the searching problem (see Exercise 2.1-3), observe that if the sequence $A$ is sorted, we can check the midpoint of the sequence against $v$ and eliminate half of the sequence from further consideration. The \nbinary search\n algorithm repeats this procedure, halving the size of the remaining portion of the sequence each time. Write pseudocode, either iterative or recursive, for binary search. Argue that the worst-case running time of binary search is $\\Theta(\\lg n)$.\n\n\n\n\nProcedure $\\text{BINARY-SEARCH}$ takes a sorted array $A$, a value $v$, and a range $[low..high]$\u008d of the array, in which we search for the value $v$. The procedure compares to the array entry at the midpoint of the range and decides to eliminate half the range from further consideration. We give both iterative and recursive versions, each of which returns either an index $i$ such that $A[i] = v$, or $\\text{NIL}$ if no entry of $A[low..high]$\u008d contains the value $v$. The initial call to either version should have the parameters $A$, $v$, $1$, $n$.\n\n\nITERATIVE\n-\nBINARY\n-\nSEARCH\n(\nA\n,\n \nv\n,\n \nlow\n,\n \nhigh\n)\n\n    \nwhile\n \nlow\n \n\u2264\n \nhigh\n\n        \nmid\n \n=\n \nfloor\n((\nlow\n \n+\n \nhigh\n)\n \n/\n \n2\n)\n\n        \nif\n \nv\n \n==\n \nA\n[\nmid\n]\n\n            \nreturn\n \nmid\n\n        \nelse\n \nif\n \nv\n \n>\n \nA\n[\nmid\n]\n\n            \nlow\n \n=\n \nmid\n \n+\n \n1\n\n        \nelse\n \nhigh\n \n=\n \nmid\n \n-\n \n1\n\n    \nreturn\n \nNIL\n\n\n\n\n\nRECURSIVE\n-\nBINARY\n-\nSEARCH\n(\nA\n,\n \nv\n,\n \nlow\n,\n \nhigh\n)\n\n    \nif\n \nlow\n \n>\n \nhigh\n\n        \nreturn\n \nNIL\n\n    \nmid\n \n=\n \nfloor\n((\nlow\n \n+\n \nhigh\n)\n \n/\n \n2\n)\n\n    \nif\n \nv\n \n==\n \nA\n[\nmid\n]\n\n        \nreturn\n \nmid\n\n    \nelse\n \nif\n \nv\n \n>\n \nA\n[\nmid\n]\n\n        \nreturn\n \nRECURSIVE\n-\nBINARY\n-\nSEARCH\n(\nA\n,\n \nv\n,\n \nmid\n \n+\n \n1\n,\n \nhigh\n)\n\n    \nelse\n \nreturn\n \nRECURSIVE\n-\nBINARY\n-\nSEARCH\n(\nA\n,\n \nv\n,\n \nlow\n,\n \nmid\n \n-\n \n1\n)\n\n\n\n\n\nBoth procedures terminate the search unsuccessfully when the range is empty (i.e., $low > high$) and terminate it successfully if the value $v$ has been found. Based on the comparison of $v$ to the middle element in the searched range, the search continues with the range halved. The recurrence for these procedures is therefore $T(n) = T(n / 2) + \\Theta(1)$, whose solution is $T(n) = \\Theta(\\lg n)$.\n\n\n2.3-6\n\n\n\n\nObserve that the \nwhile\n loop of lines 5\u20137 of the $\\text{INSERTION-SORT}$ procedure in Section 2.1 uses a linear search to scan (backward) through the sorted subarray $A[i..j - 1]$\u008d. Can we use a binary search (see Exercise 2.3-5) instead to improve the overall worst-case running time of insertion sort to $\\Theta(n\\lg n)$?\n\n\n\n\nThe \nwhile\n loop of lines 5\u20137 of procedure $\\text{INSERTION-SORT}$ scans backward through the sorted array $A[1..j - 1]$\u008d to find the appropriate place for $A[j]$\u008d. The hitch is that the loop not only searches for the proper place for $A[j]$\u008d, but that it also moves each of the array elements that are bigger than $A[j]$\u008d one position to the right (line 6). These movements can take as much as $\\Theta(j)$ time, which occurs when all the $j - 1$ elements preceding $A[j]$\u008d are larger than $A[j]$\u008d. We can use binary search to improve the running time of the search to $\\Theta(\\lg j)$, but binary search will have no effect on the running time of moving the elements. Therefore, binary search alone cannot improve the worst-case running time of $\\text{INSERTION-SORT}$ to $\\Theta(n\\lg n)$.\n\n\n2.3-7 $\\star$\n\n\n\n\nDescribe a $\\Theta(n\\lg n)$-time algorithm that, given a set $S$ of $n$ integers and another integer $x$, determines whether or not there exist two elements in $S$ whose sum is exactly $x$.\n\n\n\n\nThe following algorithm solves the problem:\n\n\n\n\nSort the elements in $S$.\n\n\nForm the set $S' = \\{z: z = x - y$ for some $y \\in S\\}$.\n\n\nSort the elements in $S'$.\n\n\nMerge the two sorted sets $S$ and $S'$.\n\n\nThere exist two elements in $S$ whose sum is exactly $x$ if and only if the same value appears in consecutive positions in the merged output.\n\n\n\n\nTo justify the claim in step 4, first observe that if any value appears twice in the merged output, it must appear in consecutive positions. Thus, we can restate the condition in step 5 as there exist two elements in $S$ whose sum is exactly $x$ if and only if the same value appears twice in the merged output.\n\n\nSuppose that some value $w$ appears twice. Then $w$ appeared once in $S$ and once in $S'$. Because $w$ appeared in $S'$, there exists some $y \\in S$ such that $w = x - y$, or $x = w + y$. Since $w \\in S$, the elements $w$ and $y$ are in $S$ and sum to $x$.\n\n\nConversely, suppose that there are values $w, y \\in S$ such that $w + y = x$. Then, since $x - y = w$, the value $w$ appears in $S'$. Thus, $w$ is in both $S$ and $S'$, and so it will appear twice in the merged output.\n\n\nSteps 1 and 3 require $\\Theta(n\\lg n)$ steps. Steps 2, 4, 5, and 6 require $O(n)$ steps. Thus the overall running time is $O(n\\lg n)$.\n\n\nA reader submitted a simpler solution that also runs in $\\Theta(n\\lg n)$ time. First, sort the elements in $S$, taking $\\Theta(n\\lg n)$ time. Then, for each element $y$ in $S$, perform a binary search in $S$ for $x - y$. Each binary search takes $O(\\lg n)$ time, and there are are most $n$ of them, and so the time for all the binary searches is $O(n\\lg n)$. The overall running time is $\\Theta(n\\lg n)$.\n\n\nAnother reader pointed out that since $S$ is a set, if the value $x / 2$ appears in $S$, it appears in $S$ just once, and so $x / 2$ cannot be a solution.",
            "title": "2.3 Designing algorithms"
        },
        {
            "location": "/Chap02/2.3/#23-1",
            "text": "Using Figure 2.4 as a model, illustrate the operation of merge sort on the array $A = \\langle 3, 41, 52, 26, 38, 57, 9, 49 \\rangle$.   $$\n[3] \\quad [41] \\quad [52] \\quad [26] \\quad [38] \\quad [57] \\quad [9] \\quad [49]\n$$  $$\n\\downarrow\n$$  $$\n[3|41] \\quad [26| 52] \\quad [38|57] \\quad [9|49]\n$$  $$\n\\downarrow\n$$  $$\n[3|26|41|52] \\quad [9 |38|49|57]\n$$  $$\n\\downarrow\n$$  $$\n[3|9|26|38|41|49|52|57]\n$$",
            "title": "2.3-1"
        },
        {
            "location": "/Chap02/2.3/#23-2",
            "text": "Rewrite the $\\text{MERGE}$ procedure so that it does not use sentinels, instead stopping once either array $L$ or $R$ has had all its elements copied back to $A$ and then copying the remainder of the other array back into $A$.   MERGE ( A ,   p ,   q ,   r ) \n     n1   =   q   -   p   +   1 \n     n2   =   r   -   q \n     let   L [ 1. . n1 ]   and   R [ 1. . n2 ]   be   new   arrays \n     for   i   =   1   to   n1 \n         L [ i ]   =   A [ p   +   i   -   1 ] \n     for   j   =   1   to   n2 \n         R [ j ]   =   A [ q   +   j ] \n     i   =   1 \n     j   =   1 \n     for   k   =   p   to   r \n         if   i   >   n1 \n             A [ k ]   =   R [ j ] \n             j   =   j   +   1 \n         else   if   j   >   n2 \n             A [ k ]   =   L [ i ] \n             i   =   i   +   1 \n         else   if   L [ i ]   \u2264   R [ j ] \n             A [ k ]   =   L [ i ] \n             i   =   i   +   1 \n         else \n             A [ k ]   =   R [ j ] \n             j   =   j   +   1",
            "title": "2.3-2"
        },
        {
            "location": "/Chap02/2.3/#23-3",
            "text": "Use mathematical induction to show that when $n$ is an exact power of $2$, the solution of the recurrence   T(n) =\n\\begin{cases}\n    2         & \\text{if } n = 2, \\\\\n    2T(n / 2) & \\text{if } n = 2^k, \\text{for } k > 1\n\\end{cases}  is $T(n) = n\\lg n$.  The base case is when $n = 2$, and we have $n\\lg n = 2\\lg 2 = 2 \\cdot 1 = 2$.  For the inductive step, our inductive hypothesis is that $T(n / 2) = (n / 2)\\lg(n / 2)$. Then  \\begin{align}\nT(n) & = 2T(n / 2) + n \\\\\n     & = 2(n / 2) \\lg(n / 2) + n \\\\\n     & = n(\\lg n - 1) + n \\\\\n     & = n\\lg n - n + n \\\\\n     & = n\\lg n,\n\\end{align}  which completes the inductive proof for exact powers of $2$.",
            "title": "2.3-3"
        },
        {
            "location": "/Chap02/2.3/#23-4",
            "text": "We can express insertion sort as a recursive procedure as follows. In order to sort $A[1..n]$\u008d, we recursively sort $A[1..n - 1]$\u008d and then insert $A[n]$ into the sorted array $A[1..n - 1]$\u008d. Write a recurrence for the running time of this recursive version of insertion sort.   Since it takes $\\Theta(n)$ time in the worst case to insert $A[n]$\u008d into the sorted array $A[1..n - 1]$\u008d, we get the recurrence  T(n) = \\begin{cases}\n    \\Theta(1)            & \\text{if } n = 1, \\\\\n    T(n - 1) + \\Theta(n) & \\text{if } n > 1.\n\\end{cases}  Although the exercise does not ask you to solve this recurrence, its solution is $T(n) = \\Theta(n^2)$.",
            "title": "2.3-4"
        },
        {
            "location": "/Chap02/2.3/#23-5",
            "text": "Referring back to the searching problem (see Exercise 2.1-3), observe that if the sequence $A$ is sorted, we can check the midpoint of the sequence against $v$ and eliminate half of the sequence from further consideration. The  binary search  algorithm repeats this procedure, halving the size of the remaining portion of the sequence each time. Write pseudocode, either iterative or recursive, for binary search. Argue that the worst-case running time of binary search is $\\Theta(\\lg n)$.   Procedure $\\text{BINARY-SEARCH}$ takes a sorted array $A$, a value $v$, and a range $[low..high]$\u008d of the array, in which we search for the value $v$. The procedure compares to the array entry at the midpoint of the range and decides to eliminate half the range from further consideration. We give both iterative and recursive versions, each of which returns either an index $i$ such that $A[i] = v$, or $\\text{NIL}$ if no entry of $A[low..high]$\u008d contains the value $v$. The initial call to either version should have the parameters $A$, $v$, $1$, $n$.  ITERATIVE - BINARY - SEARCH ( A ,   v ,   low ,   high ) \n     while   low   \u2264   high \n         mid   =   floor (( low   +   high )   /   2 ) \n         if   v   ==   A [ mid ] \n             return   mid \n         else   if   v   >   A [ mid ] \n             low   =   mid   +   1 \n         else   high   =   mid   -   1 \n     return   NIL   RECURSIVE - BINARY - SEARCH ( A ,   v ,   low ,   high ) \n     if   low   >   high \n         return   NIL \n     mid   =   floor (( low   +   high )   /   2 ) \n     if   v   ==   A [ mid ] \n         return   mid \n     else   if   v   >   A [ mid ] \n         return   RECURSIVE - BINARY - SEARCH ( A ,   v ,   mid   +   1 ,   high ) \n     else   return   RECURSIVE - BINARY - SEARCH ( A ,   v ,   low ,   mid   -   1 )   Both procedures terminate the search unsuccessfully when the range is empty (i.e., $low > high$) and terminate it successfully if the value $v$ has been found. Based on the comparison of $v$ to the middle element in the searched range, the search continues with the range halved. The recurrence for these procedures is therefore $T(n) = T(n / 2) + \\Theta(1)$, whose solution is $T(n) = \\Theta(\\lg n)$.",
            "title": "2.3-5"
        },
        {
            "location": "/Chap02/2.3/#23-6",
            "text": "Observe that the  while  loop of lines 5\u20137 of the $\\text{INSERTION-SORT}$ procedure in Section 2.1 uses a linear search to scan (backward) through the sorted subarray $A[i..j - 1]$\u008d. Can we use a binary search (see Exercise 2.3-5) instead to improve the overall worst-case running time of insertion sort to $\\Theta(n\\lg n)$?   The  while  loop of lines 5\u20137 of procedure $\\text{INSERTION-SORT}$ scans backward through the sorted array $A[1..j - 1]$\u008d to find the appropriate place for $A[j]$\u008d. The hitch is that the loop not only searches for the proper place for $A[j]$\u008d, but that it also moves each of the array elements that are bigger than $A[j]$\u008d one position to the right (line 6). These movements can take as much as $\\Theta(j)$ time, which occurs when all the $j - 1$ elements preceding $A[j]$\u008d are larger than $A[j]$\u008d. We can use binary search to improve the running time of the search to $\\Theta(\\lg j)$, but binary search will have no effect on the running time of moving the elements. Therefore, binary search alone cannot improve the worst-case running time of $\\text{INSERTION-SORT}$ to $\\Theta(n\\lg n)$.",
            "title": "2.3-6"
        },
        {
            "location": "/Chap02/2.3/#23-7-star",
            "text": "Describe a $\\Theta(n\\lg n)$-time algorithm that, given a set $S$ of $n$ integers and another integer $x$, determines whether or not there exist two elements in $S$ whose sum is exactly $x$.   The following algorithm solves the problem:   Sort the elements in $S$.  Form the set $S' = \\{z: z = x - y$ for some $y \\in S\\}$.  Sort the elements in $S'$.  Merge the two sorted sets $S$ and $S'$.  There exist two elements in $S$ whose sum is exactly $x$ if and only if the same value appears in consecutive positions in the merged output.   To justify the claim in step 4, first observe that if any value appears twice in the merged output, it must appear in consecutive positions. Thus, we can restate the condition in step 5 as there exist two elements in $S$ whose sum is exactly $x$ if and only if the same value appears twice in the merged output.  Suppose that some value $w$ appears twice. Then $w$ appeared once in $S$ and once in $S'$. Because $w$ appeared in $S'$, there exists some $y \\in S$ such that $w = x - y$, or $x = w + y$. Since $w \\in S$, the elements $w$ and $y$ are in $S$ and sum to $x$.  Conversely, suppose that there are values $w, y \\in S$ such that $w + y = x$. Then, since $x - y = w$, the value $w$ appears in $S'$. Thus, $w$ is in both $S$ and $S'$, and so it will appear twice in the merged output.  Steps 1 and 3 require $\\Theta(n\\lg n)$ steps. Steps 2, 4, 5, and 6 require $O(n)$ steps. Thus the overall running time is $O(n\\lg n)$.  A reader submitted a simpler solution that also runs in $\\Theta(n\\lg n)$ time. First, sort the elements in $S$, taking $\\Theta(n\\lg n)$ time. Then, for each element $y$ in $S$, perform a binary search in $S$ for $x - y$. Each binary search takes $O(\\lg n)$ time, and there are are most $n$ of them, and so the time for all the binary searches is $O(n\\lg n)$. The overall running time is $\\Theta(n\\lg n)$.  Another reader pointed out that since $S$ is a set, if the value $x / 2$ appears in $S$, it appears in $S$ just once, and so $x / 2$ cannot be a solution.",
            "title": "2.3-7 $\\star$"
        },
        {
            "location": "/Chap02/Problems/2-1/",
            "text": "Although merge sort runs in $\\Theta(\\lg n)$ worst-case time and insertion sort runs in $\\Theta(n^2)$ worst-case time, the constant factors in insertion sort can make it faster in practice for small problem sizes on many machines. Thus, it makes sense to \ncoarsen\n the leaves of the recursion by using insertion sort within merge sort when subproblems become sufficiently small. Consider a modification to merge sort in which $n / k$ sublists of length $k$ are sorted using insertion sort and then merged using the standard merging mechanism, where $k$ is a value to be determined.\n\n\na.\n Show that insertion sort can sort the $n / k$ sublists, each of length $k$, in $\\Theta(nk)$ worst-case time.\n\n\nb.\n Show how to merge the sublists in $\\Theta(n\\lg(n / k))$ worst-case time.\n\n\nc.\n Given that the modified algorithm runs in $\\Theta(nk + n\\lg(n / k))$ worst-case time, what is the largest value of $k$ as a function of $n$ for which the modified algorithm has the same running time as standard merge sort, in terms of $\\Theta$-notation?\n\n\nd.\n How should we chosse $k$ in practice?\n\n\n\n\na.\n Insertion sort takes $\\Theta(k^2)$ time per $k$-element list in the worst case. Therefore, sorting $n / k$ lists of $k$ elements each takes $\\Theta(k^2n / k) = \\Theta(nk)$ worst-case time.\n\n\nb.\n Just extending the 2-list merge to merge all the lists at once would take $\\Theta(n \\cdot(n / k)) = \\Theta(n^2/k)$ time ($n$ from copying each element once into the result list, $n / k$ from examining $n / k$ lists at each step to select next item for result list).\n\n\nTo achieve $\\Theta(n\\lg(n / k))$-time merging, we merge the lists pairwise, then merge the resulting lists pairwise, and so on, until there's just one list. The pairwise merging requires $\\Theta(n)$ work at each level, since we are still working on $n$ elements, even if they are partitioned among sublists. The number of levels, starting with $n / k$ lists (with $k$ elements each) and finishing with 1 list (with $n$ elements), is $\\lceil \\lg(n / k) \\rceil$. Therefore, the total running time for the merging is $\\Theta(n\\lg(n / k))$.\n\n\nc.\n The modified algorithm has the same asymptotic running time as standard merge sort when $\\Theta(nk + n\\lg(n / k)) = \\Theta(n\\lg n)$. The largest asymptotic value of $k$ as a function of $n$ that satisfies this condition is $k = \\Theta(\\lg n)$.\n\n\nTo see why, first observe that $k$ cannot be more than $\\Theta(\\lg n)$ (i.e., it can't have a higher-order term than $\\lg n$), for otherwise the left-hand expression wouldn't be $\\Theta(n\\lg n)$ (because it would have a higher-order term than $n\\lg n$). So all we need to do is verify that $k = \\Theta(\\lg n)$ works, which we can do by plugging $k = \\lg n$ into $\\Theta(nk + n\\lg(n / k)) = \\Theta(nk + n\\lg n - n\\lg k)$ to get $\\Theta(n\\lg n + n\\lg n - n\\lg\\lg n) = \\Theta(2n\\lg n - n\\lg\\lg n)$, which by taking just the high-order term and ignorin the constant coefficient, equals $\\Theta(n\\lg n)$.\n\n\nd.\n In practice, $k$ should be the largest list length on which insertion sort is faster than merge sort.",
            "title": "2-1 Insertion sort on small arrays in merge sort"
        },
        {
            "location": "/Chap02/Problems/2-2/",
            "text": "Bubblesort is a popular, but inefficient, sorting algorithm. It works by repeatedly swapping adjacent elements that are out of order.\n\n\nBUBBLESORT\n(\nA\n)\n\n    \nfor\n \ni\n \n=\n \n1\n \nto\n \nA\n.\nlength\n \n-\n \n1\n \n        \nfor\n \nj\n \n=\n \nA\n.\nlength\n \ndownto\n \ni\n \n+\n \n1\n \n            \nif\n \nA\n[\nj\n]\n \n<\n \nA\n[\nj\n \n-\n \n1\n]\n\n                \nexchange\n \nA\n[\nj\n]\n \nwith\n \nA\n[\nj\n \n-\n \n1\n]\n\n\n\n\n\na.\n Let $A'$ denote the output of $\\text{BUBBLESORT}(A)$ To prove that $\\text{BUBBLESORT}$ is correct, we need to prove that it terminates and that\n\n\n$$A'[1] \\le A'[2] \\le \\cdots \\le A'[n], \\tag{2.3}$$\n\n\nwhere $n = A.length$. In order to show that BUBBLESORT actually sorts, what else do we need to prove?\n\n\nThe next two parts will prove inequality $\\text{(2.3)}$.\n\n\nb.\n State precisely a loop invariant for the \nfor\n loop in lines 2\u20134, and prove that this loop invariant holds. Your proof should use the structure of the loop invariant proof presented in this chapter.\n\n\nc.\n Using the termination condition of the loop invariant proved in part (b), state a loop invariant for the \nfor\n loop in lines 1\u20134 that will allow you to prove inequality $\\text{(2.3)}$. Your proof should use the structure of the loop invariant proof presented in this chapter.\n\n\nd.\n What is the worst-case running time of bubblesort? How does it compare to the running time of insertion sort?\n\n\n\n\na.\n We need to show that the elements of $A'$ form a permutation of the elements of $A$.\n\n\nb.\n \nLoop invariant:\n At the start of each iteration of the \nfor\n loop of lines 2\u20134, $A[j] = \\min\\{A[k]: j \\le k \\le n\\}$ and the subarray $A[j..n]$ is a permutation of the values that were in $A[j..n]$\u008d at the time that the loop started.\n\n\nInitialization:\n Initially, $j = n$, and the subarray $A[j..n]$\u008d consists of single element $A[n]$\u008d. The loop invariant trivially holds.\n\n\nMaintenance:\n Consider an iteration for a given value of $j$. By the loop invariant, $A[j]$\u008d is the smallest value in $A[j..n]$\u008d. Lines 3\u20134 exchange $A[j]$ \u008d and $A[j - 1]$\u008d if $A[j]$\u008d is less than $A[j - 1]$\u008d, and so $A[j - 1]$\u008d will be the smallest value in $A[j - 1..n]$\u008d afterward. Since the only change to the subarray $A[j - 1..n]$\u008d is this possible exchange, and the subarray $A[j..n]$\u008d is a permutation of the values that were in $A[j..n]$\u008d at the time that the loop started, we see that $A[j - 1..n]$\u008d is a permutation of the values that were in $A[j - 1..n]$\u008d at the time that the loop started. Decrementing $j$ for the next iteration maintains the invariant.\n\n\nTermination:\n The loop terminates when $j$ reaches $i$. By the statement of the loop invariant, $A[i] = \\min\\{A[k]: i \\le k \\le n\\}$ and $A[i..n]$ is a permutation of the values that were in $A[i..n]$\u008d at the time that the loop started.\n\n\nc.\n \nLoop invariant:\n At the start of each iteration of the \nfor\n loop of lines 1\u20134, the subarray $A[1..i - 1]$ consists of the $i - 1$ smallest values originally in $A[1..n]$, in sorted order, and $A[i..n]$\u008d consists of the $n - i + 1$ remaining values originally in $A[1..n]$.\n\n\nInitialization:\n Before the first iteration of the loop, $i = 1$. The subarray $A[1..i - 1]$ is empty, and so the loop invariant vacuously holds.\n\n\nMaintenance:\n Consider an iteration for a given value of $i$. By the loop invariant, $A[1..i - 1]$\u008d consists of the $i$ smallest values in $A[1..n]$, in sorted order. Part (b) showed that after executing the \nfor\n loop of lines 2\u20134, $A[i]$\u008d is the smallest value in $A[i..n]$\u008d, and so $A[1..i]$ is now the $i$ smallest values originally in $A[1..n]$, in sorted order. Moreover, since the \nfor\n loop of lines 2\u20134 permutes $A[i..n]$\u008d, the subarray $A[i + 1..n]$\u008d consists of the $n - i$ remaining values originally in $A[1..n]$\u008d.\n\n\nTermination:\n The \nfor\n loop of lines 1\u20134 terminates when $i = n$, so that $i - 1 = n - 1$. By the statement of the loop invariant, $A[1..i - 1]$\u008d is the subarray $A[1..n - 1]$\u008d, and it consists of the $n - 1$ smallest values originally in $A[1..n]$\u008d, in sorted order. The remaining element must be the largest value in $A[1..n]$\u008d, and it is in $A[n]$\u008d. Therefore, the entire array $A[1..n]$\u008d is sorted.\n\n\nNote:\n Tn the second edition, the \nfor\n loop of lines 1\u20134 had an upper bound of $A.length$. The last iteration of the outer \nfor\n loop would then result in no iterations of the inner \nfor\n loop of lines 1\u20134, but the termination argument would simplify: $A[1..i - 1]$\u008d would be the entire array $A[1..n]$\u008d, which, by the loop invariant, is sorted.\n\n\nd.\n The running time depends on the number of iterations of the \nfor\n loop of lines 2\u20134. For a given value of $i$, this loop makes $n - i$ iterations, and $i$ takes on the values $1, 2, \\ldots, n - 1$. The total number of iterations, therefore, is\n\n\n\\begin{align}\n\\sum_{i = 1}^{n - 1} (n - i) \n    & = \\sum_{i = 1}^{n - 1} - \\sum_{i = 1}^{n - 1} i \\\\\n    & = n(n - 1) - \\frac{n(n - 1)}{2} \\\\\n    & = \\frac{n(n - 1)}{2} \\\\\n    & = \\frac{n^2}{2} - \\frac{n}{2}.\n\\end{align}\n\n\nThus, the running time of bubblesort is $\\Theta(n^2)$ in all cases. The worst-case running time is the same as that of insertion sort.",
            "title": "2-2 Correctness of bubblesort"
        },
        {
            "location": "/Chap02/Problems/2-3/",
            "text": "The following code fragment implements Horner's rule for evaluating a polynomial\n\n\n\\begin{align}\nP(x) & = \\sum_{k = 0}^n a_k x^k \\\\\n     & = a_0 + x(a_1 + x (a_2 + \\cdots + x(a_{n - 1} + x a_n) \\cdots)),\n\\end{align}\n\n\ngiven the coefficients $a_0, a_1, \\ldots, a_n$ and a value of $x$:\n\n\ny\n \n=\n \n0\n\n    \nfor\n \ni\n \n=\n \nn\n \ndown\n \n0\n\n    \ny\n \n=\n \nai\n \n+\n \nx\n \n*\n \ny\n\n\n\n\n\na.\n In terms of $\\Theta$-notation, what is the running time of this code fragment for Horner's rule?\n\n\nb.\n Write pseudocode to implement the naive polynomial-evaluation algorithm that computes each term of the polynomial from scratch. What is the running time of this algorithm? How does it compare to Horner's rule \n\n\nc.\n Consider the following loop invariant: At the start of each iteration of the \nfor\n loop of lines 2-3, \n\n\n$$y = \\sum_{k = 0}^{n - (i + 1)} a_{k + i + 1} x^k.$$\n\n\nInterpret a summation with no terms as equaling $0$. Following the structure of the loop invariant proof presented in this chapter, use this loop invariant to show that, at termination, $y = \\sum_{k = 0}^n a_k x^k$. \n\n\nd.\n Conclude by arguing that the given code fragment correctly evaluates a polynomial characterized by the coefficients $a_0, a_1, \\ldots, a_n$.\n\n\n\n\na.\n $\\Theta(n)$.\n\n\nb.\n \n\n\nNAIVE\n-\nHORNER\n()\n\n    \ny\n \n=\n \n0\n\n    \nfor\n \nk\n \n=\n \n0\n \nto\n \nn\n\n        \ntemp\n \n=\n \n1\n\n        \nfor\n \ni\n \n=\n \n1\n \nto\n \nk\n\n            \ntemp\n \n=\n \ntemp\n \n*\n \nx\n\n            \ny\n \n=\n \ny\n \n+\n \nai\n \n*\n \nm\n\n\n\n\n\nThe running time is $\\Theta(n^2)$, because of the nested loop. It is obviously slower.\n\n\nc.\n \nInitialization:\n It is pretty trivial, since the summation has no terms which implies $y = 0$.\n\n\nMaintenance:\n By using the loop invariant, in the end of the $i$-the iteration, we have\n\n\n\\begin{align}\ny & = a_i + x \\sum_{k = 0}^{n - (i + 1)} a_{k + i + 1} x^k \\\\\n  & = a_i x^0 + \\sum_{k = 0}^{n - i - 1} a_{k + i + 1} x^{k + 1} \\\\\n  & = a_i x^0 \\sum_{k = 1}^{n - i} a_{k + i} x^k \\\\\n  & = \\sum_{k = 0}^{n - i} a_{k + i} x^k.\n\\end{align}\n\n\nTermination:\n The loop terminates at $i = -1$. If we substitute,\n\n\n$$y = \\sum_{k = 0}^{n - i - 1} a_{k + i + 1} x^k = \\sum_{k = 0}^n a_k x^k.$$\n\n\nd.\n  The invariant of the loop is a sum that equals a polynomial with the given coefficients.",
            "title": "2-3 Correctness of Horner's rule"
        },
        {
            "location": "/Chap02/Problems/2-4/",
            "text": "Let $A[1..n]$ be an array of $n$ distinct numbers. If $i < j$ and $A[i] > A[j]$, then the pair $(i, j)$ is called an \ninversion\n of $A$.\n\n\na.\n List the five inversions in the array $\\langle 2, 3, 8, 6, 1 \\rangle$.\n\n\nb.\n What array with elements from the set $\\{1, 2, \\ldots, n\\}$ has the most inversions? How many does it have?\n\n\nc.\n What is the relationship between the running time of insertion sort and the number of inversions in the input array? Justify your answer.\n\n\nd.\n Give an algorithm that determines the number of inversions in any permutation of $n$ elements in $\\Theta(n\\lg n)$ worst-case time. ($\\textit{Hint:}$ Modify merge sort).\n\n\n\n\na.\n The inversions are $(1,5)$, $(2,5)$, $(3,4)$, $(3,5)$, $(4,5)$. (Remember that inversions are specified by indices rather than by the values in the array.)\n\n\nb.\n The array with elements from $\\{1, 2, \\ldots, n\\}$ with the most inversions is $\\langle n, n - 1, n - 2, \\ldots, 2, 1 \\rangle$. For all $1 \\le i < j \\le n$, there is an inversion $(i, j)$. The number of such inversions is $\\binom{n}{2} = n(n - 1) / 2$.\n\n\nc.\n Suppose that the array $A$ starts out with an inversion $(k, j)$. Then $k < j$ and $A[k] > A[j]$. At the time that the outer \nfor\n loop of lines 1\u20138 sets $key = A[j]$\u008d, the value that started in $A[k]$\u008d is still somewhere to the left of $A[j]$\u008d. That is, it's in $A[i]$\u008d, where $1 \\le i < j$, and so the inversion has become $(i, j)$. Some iteration of the \nwhile\n loop of lines 5\u20137 moves $A[i]$\u008d one position to the right. Line 8 will eventually drop $key$ to the left of this element, thus eliminating the inversion. Because line 5 moves only elements that are greater than $key$, it moves only elements that correspond to inversions. In other words, each iteration of the \nwhile\n loop of lines 5\u20137 corresponds to the elimination of one inversion.\n\n\nd.\n We follow the hint and modify merge sort to count the number of inversions in $\\Theta(n\\lg n)$ time.\n\n\nTo start, let us define a \nmerge-inversion\n as a situation within the execution of merge sort in which the $\\text{MERGE}$ procedure, after copying $A[p..q]$\u008d to $L$ and $A[q + 1..r]$ to $R$, has values $x$ in $L$ and $y$ in $R$ such that $x > y$. Consider an inversion $(i, j)$, and let $x = A[i]$\u008d and $y = A[j]$ \u008d, so that $i < j$ and $x > y$. We claim that if we were to run merge sort, there would be exactly one mergeinversion involving $x$ and $y$. To see why, observe that the only way in which array elements change their positions is within the $\\text{MERGE}$ procedure. Moreover, since $\\text{MERGE}$ keeps elements within $L$ in the same relative order to each other, and correspondingly for $R$, the only way in which two elements can change their ordering relative to each other is for the greater one to appear in $L$ and the lesser one to appear in $R$. Thus, there is at least one merge-inversion involving $x$ and $y$. To see that there is exactly one such merge-inversion, observe that after any call of $\\text{MERGE}$ that involves both $x$ and $y$, they are in the same sorted subarray and will therefore both appear in $L$ or both appear in $R$ in any given call thereafter. Thus, we have proven the claim.\n\n\nWe have shown that every inversion implies one merge-inversion. In fact, the correspondence between inversions and merge-inversions is one-to-one. Suppose we have a merge-inversion involving values $x$ and $y$, where $x$ originally was $A[i]$\u008d and $y$ was originally $A[j]$\u008d. Since we have a merge-inversion, $x > y$. And since $x$ is in $L$ and $y$ is in $R$, $x$ must be within a subarray preceding the subarray containing $y$. Therefore $x$ started out in a position $i$ preceding $y$'s original position $j$, and so $(i, j)$ is an inversion.\n\n\nHaving shown a one-to-one correspondence between inversions and mergeinversions, it suffices for us to count merge-inversions.\n\n\nConsider a merge-inversion involving $y$ in $R$. Let $z$ be the smallest value in $L$ that is greater than $y$. At some point during the merging process, $z$ and $y$ will be the \"exposed\" values in $L$ and $R$, i.e., we will have $z = L[i]$\u008d and $y = R[j]$\u008d in line 13 of $\\text{MERGE}$. At that time, there will be merge-inversions involving $y$ and $L[i], L[i + 1], L[i + 2], \\ldots, L[n_1]$\u008d, and these $n_1 - i + 1$ merge-inversions will be the only ones involving $y$. Therefore, we need to detect the first time that $z$ and $y$ become exposed during the $\\text{MERGE}$ procedure and add the value of $n_1 - i + 1$ at that time to our total count of merge-inversions.\n\n\nThe following pseudocode, modeled on merge sort, works as we have just described. It also sorts the array $A$.\n\n\nCOUNT\n-\nINVERSIONS\n(\nA\n,\n \np\n,\n \nr\n)\n\n    \ninversions\n \n=\n \n0\n\n    \nif\n \np\n \n<\n \nr\n\n        \nq\n \n=\n \nfloor\n((\np\n \n+\n \nr\n)\n \n/\n \n2\n)\n\n        \ninversions\n \n=\n \ninversions\n \n+\n \nCOUNT\n-\nINVERSIONS\n(\nA\n,\n \np\n,\n \nq\n)\n\n        \ninversions\n \n=\n \ninversions\n \n+\n \nCOUNT\n-\nINVERSIONS\n(\nA\n,\n \nq\n \n+\n \n1\n,\n \nr\n)\n\n        \ninversions\n \n=\n \ninversions\n \n+\n \nMERGE\n-\nINVERSIONS\n(\nA\n,\n \np\n,\n \nq\n,\n \nr\n)\n\n    \nreturn\n \ninversions\n\n\n\n\n\nMERGE\n-\nINVERSIONS\n(\nA\n,\n \np\n,\n \nq\n,\n \nr\n)\n\n    \nn1\n \n=\n \nq\n \n-\n \np\n \n+\n \n1\n\n    \nn2\n \n=\n \nr\n \n-\n \nq\n\n    \nlet\n \nL\n[\n1.\n.\nn1\n \n+\n \n1\n]\n \nand\n \nR\n[\n1.\n.\nn2\n \n+\n \n1\n]\n \nbe\n \nnew\n \narrays\n\n    \nfor\n \ni\n \n=\n \n1\n \nto\n \nn1\n\n        \nL\n[\ni\n]\n \n=\n \nA\n[\np\n \n+\n \ni\n \n-\n \n1\n]\n\n    \nfor\n \nj\n \n=\n \n1\n \nto\n \nn2\n\n        \nR\n[\nj\n]\n \n=\n \nA\n[\nq\n \n+\n \nj\n]\n\n    \nL\n[\nn1\n \n+\n \n1\n]\n \n=\n \n\u221e\n\n    \nL\n[\nn2\n \n+\n \n1\n]\n \n=\n \n\u221e\n\n    \ni\n \n=\n \n1\n\n    \nj\n \n=\n \n1\n\n    \ninversions\n \n=\n \n0\n\n    \nfor\n \nk\n \n=\n \np\n \nto\n \nr\n\n        \nif\n \nR\n[\nj\n]\n \n<\n \nL\n[\ni\n]\n\n            \ninversions\n \n=\n \ninversions\n \n+\n \nn1\n \n-\n \ni\n \n+\n \n1\n\n            \nA\n[\nk\n]\n \n=\n \nR\n[\nj\n]\n\n            \nj\n \n=\n \nj\n \n+\n \n1\n\n        \nelse\n \nA\n[\nk\n]\n \n=\n \nL\n[\ni\n]\n\n            \ni\n \n=\n \ni\n \n+\n \n1\n\n    \nreturn\n \ninversions\n\n\n\n\n\nThe initial call is $\\text{COUNT-INVERSIONS}(A, 1, n)$.\n\n\nIn $\\text{MERGE-INVERSIONS}$, whenever $R[j]$\u008d is exposed and a value greater than $R[j]$\u008d becomes exposed in the $L$ array, we increase inersions by the number of remaining elements in $L$. Then because $R[j + 1]$\u008d becomes exposed, $R[j]$ \u008dcan never be exposed again. We don't have to worry about merge-inversions involving the sentinel $\\infty$ in $R$, since no value in $L$ will be greater than $\\infty$.\n\n\nSince we have added only a constant amount of additional work to each procedure call and to each iteration of the last \nfor\n loop of the merging procedure, the total running time of the above pseudocode is the same as for merge sort: $\\Theta(n\\lg n)$.",
            "title": "2-4 Inversions"
        },
        {
            "location": "/Chap03/3.1/",
            "text": "3.1-1\n\n\n\n\nLet $f(n) + g(n)$ be asymptotically nonnegative functions. Using the basic definition of $\\Theta$-notation, prove that $\\max(f(n), g(n)) = \\Theta(f(n) + g(n))$.\n\n\n\n\nFirst, let's clarify what the function $\\max(f(n), g(n))$ is. Let's define the function $h(n) = \\max(f(n), g(n))$. Then\n\n\n$$\nh(n) =\n\\begin{cases}\nf(n) & \\text{ if } f(n) \\ge g(n), \\\\\ng(n) & \\text{ if } f(n) <   g(n).\n\\end{cases}\n$$\n\n\nSince $f(n)$ and $g(n)$ are asymptotically nonnegative, there exists $n_0$ such that $f(n) \\ge 0$ and $g(n) \\ge 0$ for all $n \\ge n_0$. Thus for $n \\ge n_0$ , $f(n) + g(n) \\ge f(n) \\ge 0$ and $f(n) + g(n) \\ge g(n) \\ge 0$. Since for any particular $n$, $h(n)$ is either $f(n)$ or $g(n)$, we have $f(n) + g(n) \\ge h(n) \\ge 0$, which shows that \n\n\n$$h(n) = \\max(f(n), g(n)) \\le c_2(f(n) + g(n))$$\n\n\nfor all $n \\ge n_0$ (with $c_2 = 1$ in the definition of $\\Theta$).\n\n\nSimilarly, since for any particular $n$, $h(n)$ is the larger of $f(n)$ and $g(n)$, we have for all $n \\ge n_0$, $0 \\le f(n) \\le h(n)$ and $0 \\le g(n) \\le h(n)$. Adding these two inequalities yields $0 \\le f(n) + g(n) \\le 2h(n)$, or equivalently $0 \\le (f(n) + g(n)) / 2 \\le h(n)$, which shows that\n\n\n$$h(n) = \\max(f(n), g(n)) \\ge c_1(f(n) + g(n))$$\n\n\nfor all $n \\ge n_0$ (with $c_1 = 1 / 2$ in the definition of $\\Theta$).\n\n\n3.1-2\n\n\n\n\nShow that for any real constants $a$ and $b$, where $b > 0$,\n\n\n$$(n + a)^b = \\Theta(n^b). \\tag{3.2}$$\n\n\nTo show that $(n + a)^b = \\Theta(n^b)$, we want to find constants $c_1, c_2, n_0 > 0$ such that $0 \\le c_1 n^b \\le (n + a)^b \\le c_2 n^b$ for all $n \\ge n_0$.\n\n\n\n\nNote that\n\n\n\\begin{align}\nn + a & \\le n + |a| & \\\\\n      & \\le 2n      & \\text{ when } |a| \\le n,\n\\end{align}\n\n\nand\n\n\n\\begin{align}\nn + a & \\ge n - |a|           & \\\\\n      & \\ge \\frac{1}{2}n      & \\text{ when } |a| \\le \\frac{1}{2}n.\n\\end{align}\n\n\nThus, when $n \\ge 2|a|$,\n\n\n0 \\le \\frac{1}{2}n \\le n + a \\le 2n.\n\n\nSince $b > 0$, the inequality still holds when all parts are raised to the power $b$:\n\n\n\\begin{align}\n0 \\le \\Big(\\frac{1}{2}n\\Big)^b    & \\le (n + a)^b \\le (2n)^b, \\\\\n0 \\le \\Big(\\frac{1}{2}\\Big)^b n^b & \\le (n + a)^b \\le 2^b n^b.\n\\end{align}\n\n\nThus, $c_1 = (1 / 2)^b$, $c_2 = 2^b$, and $n_0 = 2|a|$ satisfy the definition.\n\n\n3.1-3\n\n\n\n\nExplain why the statement, ''The running time of algorithm $A$ is at least $O(n^2)$,'' is meaningless.\n\n\n\n\nLet the running time be $T(n)$. $T(n) \\ge O(n^2)$ means that $T(n) \\ge f(n)$ for some function $f(n)$ in the set $O(n^2)$. This statement holds for any running time $T(n)$, since the function $g(n) = 0$ for all $n$ is in $O(n^2)$, and running times are always nonnegative. Thus, the statement tells us nothing about the running time.\n\n\n3.1-4\n\n\n\n\nIs $2^{n + 1} = O(2^n)$? Is $2^{2n} = O(2^n)$?\n\n\n\n\n$2^{n + 1} = O(2^n)$, but $2^{2n} \\ne O(2^n)$.\n\n\n\n\n\n\nTo show that $2^{n + 1} = O(2^n)$, we must find constants $c$; $n_0 > 0$ such that\n\n\n$$\n0 \\le 2^{n + 1} \\le c \\cdot 2^n \\text{ for all } n \\ge n_0.\n$$\n\n\nSince $2^{n + 1} = 2 \\cdot 2^n$ for all $n$, we can satisfy the definition with $c = 2$ and $n_0 = 1$.\n\n\n\n\n\n\nTo show that $2^{2n} \\ne O(2^n)$, assume there exist constants $c, n_0 > 0$ such that\n\n\n$$\n0 \\le 2^{2n} \\le c \\cdot 2^n \\text{ for all } n \\ge n_0.\n$$\n\n\nThen $2^{2n} = 2^n \\cdot 2^n \\le c \\cdot 2^n \\Rightarrow 2^n \\le c$. But no constant is greater than all $2^n$, and so the assumption leads to a contradiction.\n\n\n\n\n\n\n3.1-5\n\n\n\n\nProve Theorem 3.1.\n\n\n\n\nThe theorem states:\n\n\n\n\nFor any two functions $f(n)$ and $g(n)$, we have $f(n) = \\Theta(g(n))$ if and only if $f(n) = O(g(n))$ and $f(n) = \\Theta(g(n))$.\n\n\n\n\nFrom $f = \\Theta(g(n))$, we have that\n\n\n$$0 \\le c_1 g(n) \\le f(n) \\le c_2g(n) \\text{ for } n > n_0.$$\n\n\nWe can pick the constants from here and use them in the definitions of $O$ and $\\Omega$ to show that both hold.\n\n\nFrom $f(n) = \\Omega(g(n))$ and $f(n) = O(g(n))$, we have that\n\n\n\\begin{align}\n            & 0 \\le c_3g(n) \\le f(n) & \\text{ for all } n \\ge n_1 \\\\\n\\text{and } & 0 \\le f(n) \\le c_4g(n) & \\text{ for all } n \\ge n_2.\n\\end{align}\n\n\nIf we let $n_3 = \\max(n_1, n_2)$ and merge the inequalities, we get\n\n\n$$0 \\le c_3g(n) \\le f(n) \\le c_4g(n) \\text{ for all } n > n_3.$$\n\n\nWhich is the definition of $\\Theta$.\n\n\n3.1-6\n\n\n\n\nProve that the running time of an algorithm is $\\Theta(g(n))$ if and only if its worst-case running time is $O(g(n))$ and its best-case running time is $\\Omega(g(n))$.\n\n\n\n\nIf $T_w$ is the worst-case running time and $T_b$ is the best-case running time, we know that\n\n\n\\begin{align}\n            & 0 \\le c_1g(n) \\le T_b(n) & \\text{ for } n > n_b \\\\\n\\text{and } & 0 \\le T_w(n) \\le c_2g(n) & \\text{ for } n > n_w.\n\\end{align}\n\n\nCombining them we get\n\n\n$$0 \\le c_1g(n) \\le T_b(n) \\le T_w(n) \\le c_2g(n) \\text{ for } n > \\max(n_b, n_w).$$\n\n\nSince the running time is bound between $T_b$ and $T_w$ and the above is the definition of the $\\Theta$-notation, proved.\n\n\n3.1-7\n\n\n\n\nProve $o(g(n)) \\cap w(g(n))$ is the empty set.\n\n\n\n\nWe know that for any $c > 0$,\n\n\n\\begin{align}\n            & \\exists n_1 > 0: 0 \\le f(n) < cg(n) \\\\\n\\text{and } & \\exists n_2 > 0: 0 \\le cg(n) < f(n).\n\\end{align}\n\n\nIf we pick $n_0 = \\max(n_1, n_2)$, from the problem definition we get\n\n\n$$f(n) < cg(n) < f(n).$$\n\n\nThere is no solutions, which means that the intersection is the empty set.\n\n\n3.1-8\n\n\n\n\nWe can extend our notation to the case of two parameters $n$ and $m$ that can go to infinity independently at different rates. For a given function $g(n, m)$ we denote $O(g(n, m))$ the set of functions:\n\n\n\\begin{align}\nO(g(n, m) = \\{f(n, m):\n  & \\text{ there exist positive constants } c, n_0, \\text{ and } m_0 \\\\\n  & \\text{ such that } 0 \\le cg(n, m) \\le f(n, m) \\\\\n  & \\text{ for all } n \\ge n_0 \\text{ or } m \\ge m_0.\\}\n\\end{align}\n\n\nGive corresponding definitions for $\\Omega(g(n, m))$ and $\\Theta(g(n, m))$.\n\n\n\n\n\\begin{align}\n\\Omega(g(n, m) = \\{f(n, m): \n  & \\text{ there exist positive constants } c, n_0, \\text{ and } m_0 \\\\\n  & \\text{ such that } 0 \\le f(n, m) \\le cg(n, m) \\\\\n  & \\text{ for all } n \\ge n_0 \\text{ or } m \\ge m_0.\\}\n\\end{align}\n\n\n\\begin{align}\n\\Theta(g(n, m) = \\{f(n, m): \n  & \\text{ there exist positive constants } c_1, c_2, n_0, \\text{ and } m_0 \\\\\n  & \\text{ such that } 0 \\le c_1 g(n, m) \\le f(n, m) \\le c_2 g(n, m) \\\\\n  & \\text{ for all } n \\ge n_0 \\text{ or } m \\ge m_0.\\}\n\\end{align}",
            "title": "3.1 Asymptotic notation"
        },
        {
            "location": "/Chap03/3.1/#31-1",
            "text": "Let $f(n) + g(n)$ be asymptotically nonnegative functions. Using the basic definition of $\\Theta$-notation, prove that $\\max(f(n), g(n)) = \\Theta(f(n) + g(n))$.   First, let's clarify what the function $\\max(f(n), g(n))$ is. Let's define the function $h(n) = \\max(f(n), g(n))$. Then  $$\nh(n) =\n\\begin{cases}\nf(n) & \\text{ if } f(n) \\ge g(n), \\\\\ng(n) & \\text{ if } f(n) <   g(n).\n\\end{cases}\n$$  Since $f(n)$ and $g(n)$ are asymptotically nonnegative, there exists $n_0$ such that $f(n) \\ge 0$ and $g(n) \\ge 0$ for all $n \\ge n_0$. Thus for $n \\ge n_0$ , $f(n) + g(n) \\ge f(n) \\ge 0$ and $f(n) + g(n) \\ge g(n) \\ge 0$. Since for any particular $n$, $h(n)$ is either $f(n)$ or $g(n)$, we have $f(n) + g(n) \\ge h(n) \\ge 0$, which shows that   $$h(n) = \\max(f(n), g(n)) \\le c_2(f(n) + g(n))$$  for all $n \\ge n_0$ (with $c_2 = 1$ in the definition of $\\Theta$).  Similarly, since for any particular $n$, $h(n)$ is the larger of $f(n)$ and $g(n)$, we have for all $n \\ge n_0$, $0 \\le f(n) \\le h(n)$ and $0 \\le g(n) \\le h(n)$. Adding these two inequalities yields $0 \\le f(n) + g(n) \\le 2h(n)$, or equivalently $0 \\le (f(n) + g(n)) / 2 \\le h(n)$, which shows that  $$h(n) = \\max(f(n), g(n)) \\ge c_1(f(n) + g(n))$$  for all $n \\ge n_0$ (with $c_1 = 1 / 2$ in the definition of $\\Theta$).",
            "title": "3.1-1"
        },
        {
            "location": "/Chap03/3.1/#31-2",
            "text": "Show that for any real constants $a$ and $b$, where $b > 0$,  $$(n + a)^b = \\Theta(n^b). \\tag{3.2}$$  To show that $(n + a)^b = \\Theta(n^b)$, we want to find constants $c_1, c_2, n_0 > 0$ such that $0 \\le c_1 n^b \\le (n + a)^b \\le c_2 n^b$ for all $n \\ge n_0$.   Note that  \\begin{align}\nn + a & \\le n + |a| & \\\\\n      & \\le 2n      & \\text{ when } |a| \\le n,\n\\end{align}  and  \\begin{align}\nn + a & \\ge n - |a|           & \\\\\n      & \\ge \\frac{1}{2}n      & \\text{ when } |a| \\le \\frac{1}{2}n.\n\\end{align}  Thus, when $n \\ge 2|a|$,  0 \\le \\frac{1}{2}n \\le n + a \\le 2n.  Since $b > 0$, the inequality still holds when all parts are raised to the power $b$:  \\begin{align}\n0 \\le \\Big(\\frac{1}{2}n\\Big)^b    & \\le (n + a)^b \\le (2n)^b, \\\\\n0 \\le \\Big(\\frac{1}{2}\\Big)^b n^b & \\le (n + a)^b \\le 2^b n^b.\n\\end{align}  Thus, $c_1 = (1 / 2)^b$, $c_2 = 2^b$, and $n_0 = 2|a|$ satisfy the definition.",
            "title": "3.1-2"
        },
        {
            "location": "/Chap03/3.1/#31-3",
            "text": "Explain why the statement, ''The running time of algorithm $A$ is at least $O(n^2)$,'' is meaningless.   Let the running time be $T(n)$. $T(n) \\ge O(n^2)$ means that $T(n) \\ge f(n)$ for some function $f(n)$ in the set $O(n^2)$. This statement holds for any running time $T(n)$, since the function $g(n) = 0$ for all $n$ is in $O(n^2)$, and running times are always nonnegative. Thus, the statement tells us nothing about the running time.",
            "title": "3.1-3"
        },
        {
            "location": "/Chap03/3.1/#31-4",
            "text": "Is $2^{n + 1} = O(2^n)$? Is $2^{2n} = O(2^n)$?   $2^{n + 1} = O(2^n)$, but $2^{2n} \\ne O(2^n)$.    To show that $2^{n + 1} = O(2^n)$, we must find constants $c$; $n_0 > 0$ such that  $$\n0 \\le 2^{n + 1} \\le c \\cdot 2^n \\text{ for all } n \\ge n_0.\n$$  Since $2^{n + 1} = 2 \\cdot 2^n$ for all $n$, we can satisfy the definition with $c = 2$ and $n_0 = 1$.    To show that $2^{2n} \\ne O(2^n)$, assume there exist constants $c, n_0 > 0$ such that  $$\n0 \\le 2^{2n} \\le c \\cdot 2^n \\text{ for all } n \\ge n_0.\n$$  Then $2^{2n} = 2^n \\cdot 2^n \\le c \\cdot 2^n \\Rightarrow 2^n \\le c$. But no constant is greater than all $2^n$, and so the assumption leads to a contradiction.",
            "title": "3.1-4"
        },
        {
            "location": "/Chap03/3.1/#31-5",
            "text": "Prove Theorem 3.1.   The theorem states:   For any two functions $f(n)$ and $g(n)$, we have $f(n) = \\Theta(g(n))$ if and only if $f(n) = O(g(n))$ and $f(n) = \\Theta(g(n))$.   From $f = \\Theta(g(n))$, we have that  $$0 \\le c_1 g(n) \\le f(n) \\le c_2g(n) \\text{ for } n > n_0.$$  We can pick the constants from here and use them in the definitions of $O$ and $\\Omega$ to show that both hold.  From $f(n) = \\Omega(g(n))$ and $f(n) = O(g(n))$, we have that  \\begin{align}\n            & 0 \\le c_3g(n) \\le f(n) & \\text{ for all } n \\ge n_1 \\\\\n\\text{and } & 0 \\le f(n) \\le c_4g(n) & \\text{ for all } n \\ge n_2.\n\\end{align}  If we let $n_3 = \\max(n_1, n_2)$ and merge the inequalities, we get  $$0 \\le c_3g(n) \\le f(n) \\le c_4g(n) \\text{ for all } n > n_3.$$  Which is the definition of $\\Theta$.",
            "title": "3.1-5"
        },
        {
            "location": "/Chap03/3.1/#31-6",
            "text": "Prove that the running time of an algorithm is $\\Theta(g(n))$ if and only if its worst-case running time is $O(g(n))$ and its best-case running time is $\\Omega(g(n))$.   If $T_w$ is the worst-case running time and $T_b$ is the best-case running time, we know that  \\begin{align}\n            & 0 \\le c_1g(n) \\le T_b(n) & \\text{ for } n > n_b \\\\\n\\text{and } & 0 \\le T_w(n) \\le c_2g(n) & \\text{ for } n > n_w.\n\\end{align}  Combining them we get  $$0 \\le c_1g(n) \\le T_b(n) \\le T_w(n) \\le c_2g(n) \\text{ for } n > \\max(n_b, n_w).$$  Since the running time is bound between $T_b$ and $T_w$ and the above is the definition of the $\\Theta$-notation, proved.",
            "title": "3.1-6"
        },
        {
            "location": "/Chap03/3.1/#31-7",
            "text": "Prove $o(g(n)) \\cap w(g(n))$ is the empty set.   We know that for any $c > 0$,  \\begin{align}\n            & \\exists n_1 > 0: 0 \\le f(n) < cg(n) \\\\\n\\text{and } & \\exists n_2 > 0: 0 \\le cg(n) < f(n).\n\\end{align}  If we pick $n_0 = \\max(n_1, n_2)$, from the problem definition we get  $$f(n) < cg(n) < f(n).$$  There is no solutions, which means that the intersection is the empty set.",
            "title": "3.1-7"
        },
        {
            "location": "/Chap03/3.1/#31-8",
            "text": "We can extend our notation to the case of two parameters $n$ and $m$ that can go to infinity independently at different rates. For a given function $g(n, m)$ we denote $O(g(n, m))$ the set of functions:  \\begin{align}\nO(g(n, m) = \\{f(n, m):\n  & \\text{ there exist positive constants } c, n_0, \\text{ and } m_0 \\\\\n  & \\text{ such that } 0 \\le cg(n, m) \\le f(n, m) \\\\\n  & \\text{ for all } n \\ge n_0 \\text{ or } m \\ge m_0.\\}\n\\end{align}  Give corresponding definitions for $\\Omega(g(n, m))$ and $\\Theta(g(n, m))$.   \\begin{align}\n\\Omega(g(n, m) = \\{f(n, m): \n  & \\text{ there exist positive constants } c, n_0, \\text{ and } m_0 \\\\\n  & \\text{ such that } 0 \\le f(n, m) \\le cg(n, m) \\\\\n  & \\text{ for all } n \\ge n_0 \\text{ or } m \\ge m_0.\\}\n\\end{align}  \\begin{align}\n\\Theta(g(n, m) = \\{f(n, m): \n  & \\text{ there exist positive constants } c_1, c_2, n_0, \\text{ and } m_0 \\\\\n  & \\text{ such that } 0 \\le c_1 g(n, m) \\le f(n, m) \\le c_2 g(n, m) \\\\\n  & \\text{ for all } n \\ge n_0 \\text{ or } m \\ge m_0.\\}\n\\end{align}",
            "title": "3.1-8"
        },
        {
            "location": "/Chap03/3.2/",
            "text": "3.2-1\n\n\n\n\nShow that if $f(n)$ and $g(n)$ are monotonically increasing functions, then so are the functions $f(n) + g(n)$ and $f(g(n))$, and if $f(n)$ and $g(n)$ are in addition nonnegative, then $f(n) \\cdot g(n)$ is monotonically increasing.\n\n\n\n\n\\begin{align}\nf(m) \\le f(n) \\quad \\text{ for } m \\le n \\\\\ng(m) \\le g(n) \\quad \\text{ for } m \\le n, \\\\\n\\to f(m) + g(m) \\le f(n) + g(n),\n\\end{align}\n\n\nwhich proves the first function.\n\n\nThen\n\n\nf(g(m)) \\le f(g(n)) \\text{ for } m \\le n.\n\n\nThis is true, since $g(m) > g(n)$ and $f(n)$ is monotonically increasing.\n\n\nIf both functions are nonnegative, then we can multiply the two equalities and we get\n\n\nf(m) \\cdot g(m) \\le f(n) \\cdot g(n).\n\n\n3.2-2\n\n\n\n\nProve equation $\\text{(3.16)}$.\n\n\na^{\\log_b c} = c^{\\log_b a} \\tag{3.16}\na^{\\log_b c} = a^\\frac{\\log_a c}{log_a b} = (a^{\\log_a c})^{\\frac{1}{\\log_a b}} = c^{\\log_b a}.\n\n\n\n\n3.2-3\n\n\n\n\nProve equation $\\text{(3.19)}$. Also prove that $n \\ne \\omega(2^n)$ and $n \\ne o(n^n)$.\n\n\n\\lg(n!) = \\Theta(n\\lg n) \\tag{3.19}\n\n\n\n\nWe use \nStirling's approximation:\n\n\n\\begin{align}\n\\lg(n!) \n  & = \\lg\\Bigg(\\sqrt{2\\pi n}\\Big(\\frac{n}{e}\\Big)^n\\Big(1 + \\Theta(\\frac{1}{n})\\Big)\\Bigg) \\\\\n  & = \\lg\\sqrt{2\\pi n } + \\lg\\Big(\\frac{n}{e}\\Big)^n + \\lg\\Big(1+\\Theta(\\frac{1}{n})\\Big) \\\\\n  & = \\Theta(\\sqrt n) + n\\lg{\\frac{n}{e}} + \\lg\\Big(\\Theta(1) + \\Theta(\\frac{1}{n})\\Big) \\\\\n  & = \\Theta(\\sqrt n) + \\Theta(n\\lg n) + \\Theta(\\frac{1}{n}) \\\\\n  & = \\Theta(n\\lg n).\n\\end{align}\n\n\nThe other two are\n\n\n\\forall n > 3: 2^n = \\underbrace{2 \\cdot 2 \\cdot \\cdots \\cdot 2}_\\text{n times} < 1 \\cdot 2 \\cdot \\cdots \\cdot n = n! \\quad \\Rightarrow \\quad n! = \\omega(2^n).\n\n\nand\n\n\n\\forall n > 1 : n! = 1 \\cdot 2 \\cdot \\cdots n < \\underbrace{n \\cdot n \\cdot \\cdots \\cdot n}_\\text{n times} = n^n \\quad \\Rightarrow \\quad n! = o(n^n).\n\n\n3.2-4 $\\star$\n\n\n\n\nIs the function $\\lceil \\lg n \\rceil!$ polynomially bounded? Is the function $\\lceil \\lg\\lg n \\rceil!$ polynomially bounded?\n\n\n\n\n$\\lceil \\lg n \\rceil!$ is not polynomially bounded, but $\\lceil \\lg\\lg n \\rceil!$ is.\n\n\nProving that a function $f(n)$ is polynomially bounded is equivalent to proving that $\\lg(f(n)) = O(\\lg n)$ for the following reasons.\n\n\n\n\nIf $f$ is polynomially bounded, then there exist constants $c$, $k$, $n_0$ such that for all $n \\ge n_0$, $f(n) \\le cn^k$. Hence, $\\lg(f(n)) \\le kc\\lg n$, which, since $c$ and $k$ are constants, means that $\\lg(f(n)) = O(\\lg n)$.\n\n\nSimilarly, if $\\lg(f(n) = O(\\lg n)$, then $f$ is polynomially bounded.\n\n\n\n\nIn the following proofs, we will make use of the following two facts:\n\n\n\n\n$\\lg(n!) = \\Theta(n\\lg n)$ (by equation $\\text{(3.19)}$).\n\n\n$\\lceil \\lg n \\rceil = \\Theta(\\lg n)$, because\n\n\n$\\lceil \\lg n \\rceil \\ge \\lg n$\n\n\n$\\lceil \\lg n \\rceil <   \\lg n + 1 \\le 2\\lg n \\text{ for all } n \\ge 2$\n\n\n\n\n\n\n\n\n\\begin{align}\n\\lg(\\lceil \\lg n \\rceil!) & = \\Theta(\\lceil \\lg n \\rceil \\lg \\lceil \\lg n \\rceil) \\\\\n                        & = \\Theta(\\lg n\\lg\\lg n) \\\\\n                        & = \\omega(\\lg n).\n\\end{align}\n\n\nTherefore, $\\lg(\\lceil \\lg n \\rceil!) \\ne O(\\lg n)$, and so $\\lceil \\lg n \\rceil!$ is not polynomially bounded.\n\n\n\\begin{align}\n\\lg(\\lceil \\lg\\lg n \\rceil!) & = \\Theta(\\lceil \\lg\\lg n \\rceil \\lg \\lceil \\lg\\lg n \\rceil) \\\\\n                             & = \\Theta(\\lg\\lg n\\lg\\lg\\lg n) \\\\\n                             & = o((\\lg\\lg n)^2) \\\\\n                             & = o(\\lg^2(\\lg n)) \\\\\n                             & = o(\\lg n).\n\\end{align}\n\n\n3.2-5 $\\star$\n\n\n\n\nWhich is asymptotically larger: $\\lg(\\lg^*n)$ or $\\lg^*(\\lg n)$?\n\n\n\n\n$\\lg^*(\\lg n)$ is asymptotically larger because $\\lg^*(\\lg n) = \\lg^*n - 1$.\n\n\n3.2-6\n\n\n\n\nShow that the golden ratio $\\phi$ and its conjugate $\\hat \\phi$ both satisfy the equation $x^2 = x + 1$.\n\n\n\n\n\\begin{align}\n\\phi^2 - \\phi - 1\n  & = \\big(\\frac{1 + \\sqrt 5}{2}\\big)^2 - \\frac{1 + \\sqrt 5}{2} - 1 \\\\\n  & = \\frac{1 + 2\\sqrt 5 + 5 - 2 - 2\\sqrt 5 - 4}{4} \\\\\n  & = 0.\n\\end{align}\n\\begin{align}\n\\hat\\phi^2 - \\hat\\phi - 1 \n  & = \\big(\\frac{1 - \\sqrt 5}{2}\\big)^2 - \\frac{1 - \\sqrt 5}{2} - 1 \\\\\n  & = \\frac{1 - 2\\sqrt 5 + 5 - 2 + 2\\sqrt 5 - 4}{4} \\\\\n  & = 0.\n\\end{align}\n\n\n3.2-7\n\n\n\n\nProve by induction that the $i$th Fibonacci number satisfies the equality  \n\n\n\n$$\nF_i = \\frac{\\phi^i - \\hat\\phi^i}{\\sqrt 5},\n\n\n\n\nwhere $\\phi$ is the golden ratio and $\\hat\\phi$ is its conjugate.\n\n\n\n\n\n\nWe have two base cases: $i = 0$ and $i = 1$. For $i = 0$, we have\n\n\n\\begin{align}\n\\frac{\\phi^0 - \\hat\\phi^0}{\\sqrt 5} \n    & = \\frac{1 - 1}{\\sqrt 5} \\\\\n    & = 0 \\\\\n    & = F_0,\n\\end{align}\n\n\nand for $i = 1$, we have\n\n\n\\begin{align}\n\\frac{\\phi^1 - \\hat\\phi^1}{\\sqrt 5} \n    & = \\frac{(1 + \\sqrt 5) - (1 - \\sqrt 5)}{2\\sqrt 5} \\\\\n    & = \\frac{2\\sqrt 5}{2\\sqrt 5} \\\\\n    & = 1 \\\\\n    & = F_1.\n\\end{align}\n\n\nFor the inductive case, the inductive hypothesis is that $F_{i - 1} - (\\phi^{i - 1} - \\hat\\phi^{i - 1}) / \\sqrt 5$ and $F_{i - 2} = (\\phi^{i - 2} - \\hat\\phi^{i - 2}) / \\sqrt 5$. We have\n\n\n\\begin{align}\nF_i & = F_{i - 1} + F_{i - 2} & \\text{(equation (3.22)} \\\\\n    & = \\frac{\\phi^{i - 1} - \\hat\\phi^{i - 1}}{\\sqrt 5} + \\frac{\\phi^{i - 2} - \\hat\\phi^{i - 2}}{\\sqrt 5} & \\text{(inductive hypothesis)} \\\\\n    & = \\frac{\\phi^{i - 2}(\\phi + 1) - \\hat\\phi^{i - 2}(\\hat\\phi + 1)}{\\sqrt 5}  \\\\\n    & = \\frac{\\phi^{i - 2}\\phi^2 - \\hat\\phi^{i - 2}\\hat\\phi^2}{\\sqrt 5} & \\text{(Exercise 3.2-6)} \\\\\n    & = \\frac{\\phi^i - \\hat\\phi^i}{\\sqrt 5}. \n\\end{align}\n\n\n3.2-8\n\n\n\n\nShow that $k\\ln k = \\Theta(n)$ implies $k = \\Theta(n / \\ln n)$.\n\n\n\n\nFrom the symmetry of $\\Theta$,\n\n\nk\\ln k = \\Theta(n) \\Rightarrow n = \\Theta(k\\ln k).\n\n\nLet's find $\\ln n$,\n\n\n\\ln n = \\Theta(\\ln(k\\ln k)) = \\Theta(\\ln k + \\ln\\ln k) = \\Theta(\\ln k).\n\n\nLet's divide the two,\n\n\n\\frac{n}{\\ln n} = \\frac{\\Theta(k\\ln k)}{\\Theta(\\ln k)} = \\Theta({\\frac{k\\ln k}{\\ln k}}) = \\Theta(k).\n\n\nThe last step above follows from the property that any polylogarithmic function grows more slowly than any positive polynomial function, i.e., that for constants $a, b > 0$, we have $\\lg^b = o(n^a)$. Substitute $\\lg n$ for $n$, $2$ for $b$, and $1$ for $a$, giving $\\lg^2(\\lg n) = o(\\lg n)$.\n\n\nTherefore, $\\lg(\\lceil \\lg\\lg n \\rceil!) = O(\\lg n)$, and so $\\lceil \\lg\\lg n \\rceil!$ is polynomially bounded.",
            "title": "3.2 Standard notations and common functions"
        },
        {
            "location": "/Chap03/3.2/#32-1",
            "text": "Show that if $f(n)$ and $g(n)$ are monotonically increasing functions, then so are the functions $f(n) + g(n)$ and $f(g(n))$, and if $f(n)$ and $g(n)$ are in addition nonnegative, then $f(n) \\cdot g(n)$ is monotonically increasing.   \\begin{align}\nf(m) \\le f(n) \\quad \\text{ for } m \\le n \\\\\ng(m) \\le g(n) \\quad \\text{ for } m \\le n, \\\\\n\\to f(m) + g(m) \\le f(n) + g(n),\n\\end{align}  which proves the first function.  Then  f(g(m)) \\le f(g(n)) \\text{ for } m \\le n.  This is true, since $g(m) > g(n)$ and $f(n)$ is monotonically increasing.  If both functions are nonnegative, then we can multiply the two equalities and we get  f(m) \\cdot g(m) \\le f(n) \\cdot g(n).",
            "title": "3.2-1"
        },
        {
            "location": "/Chap03/3.2/#32-2",
            "text": "Prove equation $\\text{(3.16)}$.  a^{\\log_b c} = c^{\\log_b a} \\tag{3.16}\na^{\\log_b c} = a^\\frac{\\log_a c}{log_a b} = (a^{\\log_a c})^{\\frac{1}{\\log_a b}} = c^{\\log_b a}.",
            "title": "3.2-2"
        },
        {
            "location": "/Chap03/3.2/#32-3",
            "text": "Prove equation $\\text{(3.19)}$. Also prove that $n \\ne \\omega(2^n)$ and $n \\ne o(n^n)$.  \\lg(n!) = \\Theta(n\\lg n) \\tag{3.19}   We use  Stirling's approximation:  \\begin{align}\n\\lg(n!) \n  & = \\lg\\Bigg(\\sqrt{2\\pi n}\\Big(\\frac{n}{e}\\Big)^n\\Big(1 + \\Theta(\\frac{1}{n})\\Big)\\Bigg) \\\\\n  & = \\lg\\sqrt{2\\pi n } + \\lg\\Big(\\frac{n}{e}\\Big)^n + \\lg\\Big(1+\\Theta(\\frac{1}{n})\\Big) \\\\\n  & = \\Theta(\\sqrt n) + n\\lg{\\frac{n}{e}} + \\lg\\Big(\\Theta(1) + \\Theta(\\frac{1}{n})\\Big) \\\\\n  & = \\Theta(\\sqrt n) + \\Theta(n\\lg n) + \\Theta(\\frac{1}{n}) \\\\\n  & = \\Theta(n\\lg n).\n\\end{align}  The other two are  \\forall n > 3: 2^n = \\underbrace{2 \\cdot 2 \\cdot \\cdots \\cdot 2}_\\text{n times} < 1 \\cdot 2 \\cdot \\cdots \\cdot n = n! \\quad \\Rightarrow \\quad n! = \\omega(2^n).  and  \\forall n > 1 : n! = 1 \\cdot 2 \\cdot \\cdots n < \\underbrace{n \\cdot n \\cdot \\cdots \\cdot n}_\\text{n times} = n^n \\quad \\Rightarrow \\quad n! = o(n^n).",
            "title": "3.2-3"
        },
        {
            "location": "/Chap03/3.2/#32-4-star",
            "text": "Is the function $\\lceil \\lg n \\rceil!$ polynomially bounded? Is the function $\\lceil \\lg\\lg n \\rceil!$ polynomially bounded?   $\\lceil \\lg n \\rceil!$ is not polynomially bounded, but $\\lceil \\lg\\lg n \\rceil!$ is.  Proving that a function $f(n)$ is polynomially bounded is equivalent to proving that $\\lg(f(n)) = O(\\lg n)$ for the following reasons.   If $f$ is polynomially bounded, then there exist constants $c$, $k$, $n_0$ such that for all $n \\ge n_0$, $f(n) \\le cn^k$. Hence, $\\lg(f(n)) \\le kc\\lg n$, which, since $c$ and $k$ are constants, means that $\\lg(f(n)) = O(\\lg n)$.  Similarly, if $\\lg(f(n) = O(\\lg n)$, then $f$ is polynomially bounded.   In the following proofs, we will make use of the following two facts:   $\\lg(n!) = \\Theta(n\\lg n)$ (by equation $\\text{(3.19)}$).  $\\lceil \\lg n \\rceil = \\Theta(\\lg n)$, because  $\\lceil \\lg n \\rceil \\ge \\lg n$  $\\lceil \\lg n \\rceil <   \\lg n + 1 \\le 2\\lg n \\text{ for all } n \\ge 2$     \\begin{align}\n\\lg(\\lceil \\lg n \\rceil!) & = \\Theta(\\lceil \\lg n \\rceil \\lg \\lceil \\lg n \\rceil) \\\\\n                        & = \\Theta(\\lg n\\lg\\lg n) \\\\\n                        & = \\omega(\\lg n).\n\\end{align}  Therefore, $\\lg(\\lceil \\lg n \\rceil!) \\ne O(\\lg n)$, and so $\\lceil \\lg n \\rceil!$ is not polynomially bounded.  \\begin{align}\n\\lg(\\lceil \\lg\\lg n \\rceil!) & = \\Theta(\\lceil \\lg\\lg n \\rceil \\lg \\lceil \\lg\\lg n \\rceil) \\\\\n                             & = \\Theta(\\lg\\lg n\\lg\\lg\\lg n) \\\\\n                             & = o((\\lg\\lg n)^2) \\\\\n                             & = o(\\lg^2(\\lg n)) \\\\\n                             & = o(\\lg n).\n\\end{align}",
            "title": "3.2-4 $\\star$"
        },
        {
            "location": "/Chap03/3.2/#32-5-star",
            "text": "Which is asymptotically larger: $\\lg(\\lg^*n)$ or $\\lg^*(\\lg n)$?   $\\lg^*(\\lg n)$ is asymptotically larger because $\\lg^*(\\lg n) = \\lg^*n - 1$.",
            "title": "3.2-5 $\\star$"
        },
        {
            "location": "/Chap03/3.2/#32-6",
            "text": "Show that the golden ratio $\\phi$ and its conjugate $\\hat \\phi$ both satisfy the equation $x^2 = x + 1$.   \\begin{align}\n\\phi^2 - \\phi - 1\n  & = \\big(\\frac{1 + \\sqrt 5}{2}\\big)^2 - \\frac{1 + \\sqrt 5}{2} - 1 \\\\\n  & = \\frac{1 + 2\\sqrt 5 + 5 - 2 - 2\\sqrt 5 - 4}{4} \\\\\n  & = 0.\n\\end{align}\n\\begin{align}\n\\hat\\phi^2 - \\hat\\phi - 1 \n  & = \\big(\\frac{1 - \\sqrt 5}{2}\\big)^2 - \\frac{1 - \\sqrt 5}{2} - 1 \\\\\n  & = \\frac{1 - 2\\sqrt 5 + 5 - 2 + 2\\sqrt 5 - 4}{4} \\\\\n  & = 0.\n\\end{align}",
            "title": "3.2-6"
        },
        {
            "location": "/Chap03/3.2/#32-7",
            "text": "Prove by induction that the $i$th Fibonacci number satisfies the equality    \n$$\nF_i = \\frac{\\phi^i - \\hat\\phi^i}{\\sqrt 5},   where $\\phi$ is the golden ratio and $\\hat\\phi$ is its conjugate.    We have two base cases: $i = 0$ and $i = 1$. For $i = 0$, we have  \\begin{align}\n\\frac{\\phi^0 - \\hat\\phi^0}{\\sqrt 5} \n    & = \\frac{1 - 1}{\\sqrt 5} \\\\\n    & = 0 \\\\\n    & = F_0,\n\\end{align}  and for $i = 1$, we have  \\begin{align}\n\\frac{\\phi^1 - \\hat\\phi^1}{\\sqrt 5} \n    & = \\frac{(1 + \\sqrt 5) - (1 - \\sqrt 5)}{2\\sqrt 5} \\\\\n    & = \\frac{2\\sqrt 5}{2\\sqrt 5} \\\\\n    & = 1 \\\\\n    & = F_1.\n\\end{align}  For the inductive case, the inductive hypothesis is that $F_{i - 1} - (\\phi^{i - 1} - \\hat\\phi^{i - 1}) / \\sqrt 5$ and $F_{i - 2} = (\\phi^{i - 2} - \\hat\\phi^{i - 2}) / \\sqrt 5$. We have  \\begin{align}\nF_i & = F_{i - 1} + F_{i - 2} & \\text{(equation (3.22)} \\\\\n    & = \\frac{\\phi^{i - 1} - \\hat\\phi^{i - 1}}{\\sqrt 5} + \\frac{\\phi^{i - 2} - \\hat\\phi^{i - 2}}{\\sqrt 5} & \\text{(inductive hypothesis)} \\\\\n    & = \\frac{\\phi^{i - 2}(\\phi + 1) - \\hat\\phi^{i - 2}(\\hat\\phi + 1)}{\\sqrt 5}  \\\\\n    & = \\frac{\\phi^{i - 2}\\phi^2 - \\hat\\phi^{i - 2}\\hat\\phi^2}{\\sqrt 5} & \\text{(Exercise 3.2-6)} \\\\\n    & = \\frac{\\phi^i - \\hat\\phi^i}{\\sqrt 5}. \n\\end{align}",
            "title": "3.2-7"
        },
        {
            "location": "/Chap03/3.2/#32-8",
            "text": "Show that $k\\ln k = \\Theta(n)$ implies $k = \\Theta(n / \\ln n)$.   From the symmetry of $\\Theta$,  k\\ln k = \\Theta(n) \\Rightarrow n = \\Theta(k\\ln k).  Let's find $\\ln n$,  \\ln n = \\Theta(\\ln(k\\ln k)) = \\Theta(\\ln k + \\ln\\ln k) = \\Theta(\\ln k).  Let's divide the two,  \\frac{n}{\\ln n} = \\frac{\\Theta(k\\ln k)}{\\Theta(\\ln k)} = \\Theta({\\frac{k\\ln k}{\\ln k}}) = \\Theta(k).  The last step above follows from the property that any polylogarithmic function grows more slowly than any positive polynomial function, i.e., that for constants $a, b > 0$, we have $\\lg^b = o(n^a)$. Substitute $\\lg n$ for $n$, $2$ for $b$, and $1$ for $a$, giving $\\lg^2(\\lg n) = o(\\lg n)$.  Therefore, $\\lg(\\lceil \\lg\\lg n \\rceil!) = O(\\lg n)$, and so $\\lceil \\lg\\lg n \\rceil!$ is polynomially bounded.",
            "title": "3.2-8"
        },
        {
            "location": "/Chap03/Problems/3-1/",
            "text": "Let\n\n\n$$p(n) = \\sum_{i = 0}^d a_i n^i,$$\n\n\nwhere $a_d > 0$, be a degree-$d$ polynomial in $n$, and let $k$ be a constant. Use the definitions of the asymptotic notations to prove the following properties.\n\n\na.\n If $k \\ge d$, then $p(n) = O(n^k)$.\n\n\nb.\n If $k \\le d$, then $p(n) = \\Omega(n^k)$.\n\n\nc.\n If $k = d$, then $p(n) = \\Theta(n^k)$.\n\n\nd.\n If $k > d$, then $p(n) = o(n^k)$.\n\n\ne.\n If $k < d$, then $p(n) = \\omega(n^k)$.\n\n\n\n\nLet's see that $p(n) = O(n^d)$. We need do pick $c = a_d + b$, such that\n\n\n$$\\sum\\limits_{i = 0}^d = a_d n^d + a_{d - 1}n^{d - 1} + \\cdots + a_1n + a_0 \\le cn^d.$$\n\n\nWhen we divide by $n^d$, we get\n\n\n$$c = a_d + b \\ge a_d + \\frac{a_{d - 1}}n + \\frac{a_{d - 2}}{n^2} + \\cdots + \\frac{a_0}{n^d}.$$\n\n\nand\n\n\n$$b \\ge \\frac{a_{d - 1}}n + \\frac{a_{d - 2}}{n^2} + \\cdots + \\frac{a_0}{n^d}.$$\n\n\nIf we choose $b = 1$, then we can choose $n_0$,\n\n\n$$n_0 = \\max(da_{d - 1}, d\\sqrt{a_{d - 2}}, \\ldots, d\\sqrt[d]{a_0}).$$\n\n\nNow we have $n_0$ and $c$, such that\n\n\n$$p(n) \\le cn^d \\quad \\text{for } n \\ge n_0,$$\n\n\nwhich is the definition of $O(n^d)$.\n\n\nBy chosing $b = -1$ we can prove the $\\Omega(n^d)$ inequality and thus the $\\Theta(n^d)$ inequality.\n\n\nIt is very similar to prove the other inequalities.",
            "title": "3-1 Asymptotic behavior of polynomials"
        },
        {
            "location": "/Chap03/Problems/3-2/",
            "text": "Indicate for each pair of expressions $(A, B)$ in the table below, whether $A$ is $O$, $o$, $\\Omega$, $\\omega$, or $\\Theta$ of $B$. Assume that $k \\ge 1$, $\\epsilon > 0$, and $c > 1$ are constants. Your answer should be in the form of the table with ''yes'' or ''no'' written in each box.\n\n\n\n\n\\begin{array}{ccccccc}\nA         & B          & O   &  o  & \\Omega & \\omega & \\Theta \\\\\n\\hline\n\\lg^k n   & n^\\epsilon & yes & yes &  no    & no     & no     \\\\\nn^k       & c^n        & yes & yes &  no    & no     & no     \\\\\n\\sqrt n   & n^{\\sin n} & no  & no  &  no    & no     & no     \\\\\n2^n       & 2^{n / 2}  & no  & no  &  yes   & yes    & no     \\\\\nn^{\\lg c} & c^{\\lg n}  & yes & no  &  yes   & no     & yes    \\\\\n\\lg(n!)   & \\lg(n^n)   & yes & no  &  yes   & no     & yes\n\\end{array}",
            "title": "3-2 Relative asymptotic growths"
        },
        {
            "location": "/Chap03/Problems/3-3/",
            "text": "a.\n Rank the following functions by order of growth; that is, find an arrangement $g_1, g_2, \\ldots , g_{30}$ of the functions $g_1 = \\Omega(g_2), g_2 = \\Omega(g_3), \\ldots, g_{29} = \\Omega(g_{30})$. Partition your list into equivalence classes such that functions $f(n)$ and $g(n)$ are in the same class if and only if $f(n) = \\Theta(g(n))$.\n\n\n\\begin{array}{cccccc}\n\\lg(\\lg^{^*}n) \\quad & \\quad 2^{\\lg^*n} \\quad & \\quad (\\sqrt 2)^{\\lg n} \\quad & \\quad n^2 \\quad & \\quad n! \\quad & \\quad (\\lg n)! \\\\\n(\\frac{3}{2})^n \\quad & \\quad n^3 \\quad & \\quad \\lg^2 n \\quad & \\quad \\lg(n!) \\quad & \\quad 2^{2^n} \\quad & \\quad n^{1/\\lg n} \\\\\n\\lg\\lg n \\quad & \\quad \\lg^* n \\quad & \\quad n\\cdot 2^n \\quad & \\quad n^{\\lg\\lg n} \\quad & \\quad \\lg n \\quad & \\quad 1 \\\\\n2^{\\lg n} \\quad & \\quad (\\lg n)^{\\lg n} \\quad & \\quad e^n \\quad & \\quad 4^{\\lg n}  \\quad & \\quad (n + 1)! \\quad & \\quad \\sqrt{\\lg n} \\\\\n\\lg^*(\\lg n) \\quad & \\quad 2^{\\sqrt{2\\lg n}} \\quad & \\quad n \\quad & \\quad 2^n \\quad & \\quad n\\lg n \\quad & \\quad 2^{2^{n + 1}}\n\\end{array}\n\n\nb.\n Give an example of a single nonnegative function $f(n)$ such that for all functions $g_i(n)$ in part (1), $f(n)$ is neither $O(g_i(n))$ nor $\\Omega(g_i(n))$.\n\n\n\n\na.\n Here is the ordering, where functions on the same line are in the same equivalence class, and those higher on the page are $\\Omega$ of those below them:\n\n\n\\begin{array}{ll}\n2^{2^{n + 1}} & \\\\\n2^{2^n}       & \n(n + 1)! & \\\\\nn! & \\text{see justification 7} \\\\\ne^n & \\text{see justification 1} \\\\\nn\\cdot 2^n & \\\\\n2^n & \\\\\n(3 / 2)^n & \\\\\n(\\lg n)^{\\lg n} = n^{\\lg\\lg n} & \\text{see identity 1} \\\\\n(\\lg n)! & \\text{see justifications 2, 8} \\\\\nn^3 & \\\\\nn^2 = 4^{\\lg n} & \\text{see identity 2} \\\\\nn\\lg n \\text{ and } \\lg(n!) & \\text{see justification 6} \\\\\nn = 2^{\\lg n} & \\text{see identity 3} \\\\\n(\\sqrt 2)^{\\lg n}(= \\sqrt n) & \\text{see identity 6, justification 3} \\\\\n2^{\\sqrt{2\\lg n}} & \\text{see identity 5, justification 4}\\\\\n\\lg^2 n & \\\\\n\\ln n & \\\\\n\\sqrt{\\lg n} & \\\\\n\\ln\\ln n & \\text{see justification 5} \\\\\n2^{\\lg^*n} & \\\\\n\\lg^*n \\text{ and } \\lg^*(\\lg n) & \\text{see identity 7} \\\\\n\\lg(\\lg^*)n & \\\\\nn^{1 / \\lg n}(= 2) \\text{ and } 1 & \\text{see identity 4} \n\\end{array}\n\n\nMuch of the ranking is based on the following properties:\n\n\n\n\nExponential functions grow faster than polynomial functions, which grow faster than polylogarithmic functions.\n\n\nThe base of a logarithm doen't matter asymptotically, but the base of an exponential and the degree of a polynomial do matter.\n\n\n\n\nWe have the following $\\textit{identities}$:\n\n\n\n\n$(\\lg n)^{\\lg n} = n^{\\lg\\lg n}$ because $a^{\\log_b c} = c^{\\log_b a}$.\n\n\n$4^{\\lg n} = n^2$ because $a^{\\log_b c} = c^{\\log_b a}$.\n\n\n$2^{\\lg n} = n$.\n\n\n$2 = n^{1 / \\lg n}$ by raising identity 3 to the power $1 / \\lg n$.\n\n\n$2^{\\sqrt{2\\lg n}} = n^{\\sqrt{2 / \\lg n}}$ by raising identity 4 to the power $\\sqrt{2\\lg n}$.\n\n\n$(\\sqrt 2)^{\\lg n} = \\sqrt n$ because $(\\sqrt 2)^{\\lg n} = 2^{(1 / 2)\\lg n} = 2^{\\lg\\sqrt n} = \\sqrt n$.\n\n\n$\\lg^*(\\lg n) = (\\lg^*n) - 1$.\n\n\n\n\nThe following $\\textit{justifications}$ explain some of the rankings:\n\n\n\n\n$e^n = 2^n(e / 2)^n = \\omega(n2^n)$, since $(e/2)^n = \\omega(n)$.\n\n\n$(\\lg n) \\ne \\omega(n^3)$ by taking logs: $\\lg(\\lg n) \\ne \\Theta(\\lg n\\lg\\lg n)$ by Stirling's approximation, $\\lg(n^3) = 3\\lg n$. $\\lg\\lg n = \\omega(3)$.\n\n\n$(\\sqrt 2)^{\\lg n} = \\omega(2^{\\sqrt{2\\lg n}})$ by taking logs: $\\lg(\\sqrt 2)^{\\lg n} = (1 / 2)\\lg n,\\lg 2^{\\sqrt{2\\lg n}}  =  \\sqrt{2\\lg n}$. $(1 / 2)\\lg n = \\omega(\\sqrt{2\\lg n})$.\n\n\n$2^{\\sqrt{2\\lg n}} = \\omega(\\lg^2 n)$ by taking logs: $\\lg 2^{\\sqrt{2\\lg n}} = \\sqrt{2\\lg n},\\lg\\lg^2n = 2\\lg\\lg n$. $\\sqrt{2\\lg n} = \\omega(2\\lg\\lg n)$.\n\n\n$\\ln\\ln n = \\omega(2^{\\lg^*n})$ by taking logs: $\\lg 2^{\\lg^* n} = \\lg^*n$. $\\lg\\ln\\ln n = \\omega(\\lg^*n)$.\n\n\n$\\lg(n!) = \\Theta(n\\lg n)$ (equation $\\text{(3.18)}$).\n\n\n$n \\ne \\Theta(n^{n + 1}e^{-n})$ by dropping constants and low-order terms in equation $\\text{(3.17)}$.\n\n\n$(\\lg n) \\ne \\Theta((\\lg n)^{\\lg n + 1 / 2} e^{-\\lg n}$ by substituting $\\lg n$ for $n$ in the previous justification. $(\\lg n) \\ne \\Theta((\\lg n)^{\\lg n + 1 / 2}n^{-\\lg e})$ because $a^{\\log_b c} = c^{\\log_b a}$.\n\n\n\n\nb.\n The following $f(n)$ is nonnegative, and for all functions $g_i(n)$ in part (1), $f(n)$ is neither $O(g_i(n))$ nor $\\Omega(g_i(n))$.\n\n\nf(n) =\n\\begin{cases} 2^{2^{n + 2}} & \\text{if $n$ is even}, \\\\\n                          0 & \\text{if $n$ is odd}.\n\\end{cases}",
            "title": "3-3 Ordering by asymptotic growth rates"
        },
        {
            "location": "/Chap03/Problems/3-4/",
            "text": "Let $f(n)$ and $g(n)$ by asymptotically positive functions. Prove or disprove each of the following conjectures.\n\n\na.\n $f(n) = O(g(n))$ implies $g(n) = O(f(n))$.\n\n\nb.\n $f(n) + g(n) = \\Theta(\\min(f(n), g(n)))$.\n\n\nc.\n $f(n) = O(g(n))$ implies $\\lg(f(n)) = O(\\lg(g(n)))$, where $\\lg(g(n)) \\ge 1$ and $f(n) \\ge 1$ for all sufficiently large $n$. \n\n\nd.\n $f(n) = O(g(n))$ implies $2^{f(n)} = O(2^{g(n)})$.\n\n\ne.\n $f(n) = O((f(n))^2)$.\n\n\nf.\n $f(n) = O(g(n))$ implies $g(n) = \\Omega(f(n))$.\n\n\ng.\n $f(n) = \\Theta(f(n / 2))$.\n\n\nh.\n $f(n) + o(f(n)) = \\Theta(f(n))$.\n\n\n\n\na.\n Disprove, $n = O(n^2)$, but $n^2 \\ne O(n)$.\n\n\nb.\n Disprove, $n^2 + n \\ne \\Theta(\\min(n^2, n)) = \\Theta(n)$.\n\n\nc.\n Prove, because $f(n) \\ge 1$ after a certain $n \\ge n_0$.\n\n\n\\begin{align}\n\\exists c, n_0: \\forall n \\ge n_0, 0 \\le f(n) \\le cg(n) \\\\\n\\Rightarrow 0 \\le \\lg f(n) \\le \\lg (cg(n)) = \\lg c + \\lg g(n).\n\\end{align}\n\n\nWe need to prove that\n\n\n$$\\lg f(n) \\le d\\lg g(n).$$\n\n\nWe can find $d$,\n\n\n$$d = \\frac{\\lg c + \\lg g(n)}{\\lg g(n)} = \\frac{\\lg c}{\\lg g(n)} + 1 \\le \\lg c + 1,$$\n\n\nwhere the last step is valid, because $\\lg g(n) \\ge 1$.\n\n\nd.\n Disprove, because $2n = O(n)$, but $2^{2n} = 4^n \\ne O(2^n)$.\n\n\ne.\n Prove, $0 \\le f(n) \\le cf^2(n)$ is trivial when $f(n) \\ge 1$, but if $f(n) < 1$ for all $n$, it's not correct. However, we don't care this case.\n\n\nf.\n Prove, from the first, we know that $0 \\le f(n) \\le cg(n)$ and we need to prove that $0 \\le df(n) \\le g(n)$, which is straightforward with $d = 1 / c$.\n\n\ng.\n Disprove, let's pick $f(n) = 2^n$. We will need to prove that  \n\n\n$$\\exists c_1, c_2, n_0: \\forall n \\ge n_0, 0 \\le c_1 \\cdot 2^{n / 2} \\le 2^n \\le c_2 \\cdot 2^{n / 2},$$\n\n\nwhich is obviously untrue.\n\n\nh.\n Prove, let $g(n) = o(f(n))$. We need to prove that\n\n\n$$\\exists c_1, c_2, n_0: \\forall n \\ge n_0, 0 \\le c_1f(n) \\le f(n) + g(n) \\le c_2f(n).$$\n\n\nThus, if we pick $c_1 = 1$ and $c_2 = 2$, it holds.",
            "title": "3-4 Asymptotic notation properties"
        },
        {
            "location": "/Chap03/Problems/3-5/",
            "text": "Some authors define $\\Omega$ in a slightly different way than we do; let's use ${\\Omega}^{\\infty}$ (read ''omega infinity'') for this alternative definition. We say that $f(n) = {\\Omega}^{\\infty}(g(n))$ if there exists a positive constant $c$ such that $f(n) \\ge cg(n) \\ge 0$ for infinitely many integers $n$.\n\n\na.\n Show that for any two functions $f(n)$ and $g(n)$ that are asymptotically nonnegative, either $f(n) = O(g(n))$ or $f(n) = {\\Omega}^{\\infty}(g(n))$ or both, whereas this is not true if we use $\\Omega$ in place of ${\\Omega}^{\\infty}$.\n\n\nb.\n Describe the potential advantages and disadvantages of using ${\\Omega}^{\\infty}$ instead of $\\Omega$ to characterize the running times of programs.\n\n\nSome authors also define $O$ in a slightly different manner; let's use $O'$ for the alternative definition. We say that $f(n) = O'(g(n))$ if and only if $|f(n)| = O(g(n))$.\n\n\nc.\n What happens to each direction of the \"if and only if\" in Theorem 3.1 if we substitute $O'$ for $O$ but we still use $\\Omega$?\n\n\nSome authors define $\\tilde O$ (read \"soft-oh\") to mean $O$ with logarithmic factors ignored:\n\n\n\\begin{align}\n\\tilde{O}(g(n)) = \n \\{f(n): & \\text{ there exist positive constants $c$, $k$, and $n_0$ such that } \\\\\n          & \\text{ $0 \\le f(n) \\le cg(n) \\lg^k(n)$ for all $n \\ge n_0$ }.\\}\n\\end{align}\n\n\nd.\n Define $\\tilde\\Omega$ and $\\tilde\\Theta$ in a similar manner. Prove the corresponding analog to Theorem 3.1.\n\n\n\n\na.\n We have\n\n\n$$\nf(n) = \n\\begin{cases}\nO(g(n)) \\text{ and } {\\Omega}^{\\infty}(g(n)) & \\text{if $f(n) = \\Theta(g(n))$}, \\\\\n                                     O(g(n)) & \\text{if $0 \\le f(n) \\le cg(n)$}, \\\\\n                     {\\Omega}^{\\infty}(g(n)) & \\text{if $0 \\le cg(n) \\le f(n)$, for infinitely many integers $n$}.\n\\end{cases}\n$$\n\n\nIf there are only finite $n$ such that $f(n) \\ge cg(n) \\ge 0$. When $n \\to \\infty$, $0 \\le f(n) \\le cg(n)$, i.e., $f(n) = O(g(n))$.\n\n\nObviously, it's not hold when we use $\\Omega$ in place of ${\\Omega}^{\\infty}$.\n\n\nb.\n \n\n\n\n\nAdvantages: We can characterize all the relationships between all functions.\n\n\nDisadvantages: We cannot characterize precisely.\n\n\n\n\nc.\n For any two functions $f(n)$ and $g(n)$, we have if $f(n) = \\Theta(g(n))$ then $f(n) = O'(g(n))$ and $f(n) = \\Omega(g(n))$ and $f(n) = \\Omega(g(n))$.\n\n\nBut the conversation is not true.\n\n\nd.\n We have \n\n\n\\begin{align}\n\\tilde\\Omega(g(n)) = \\{f(n): \n    & \\text{ there exist positive constants $c$, $k$, and $n_0$ such that } \\\\\n    & \\text{ $0 \\le cg(n)\\lg^k(n) \\le f(n)$ for all $n \\ge n_0$}.\\}\n\\end{align}\n\n\n\\begin{align}\n\\tilde{\\Theta}(g(n)) = \\{f(n): \n  & \\text{ there exist positive constants $c_1$, $c_2$, $k_1$, $k_2$, and $n_0$ such that } \\\\\n  & \\text{ $0\\le c_1 g(n) \\lg^{k_1}(n) \\le f(n)\\le c_2g (n) \\lg^{k_2}(n)$ for all $n\\ge n_0$.}\\}\n\\end{align}\n\n\nFor any two functions $f(n)$ and $g(n)$, we have $f(n) = \\tilde\\Theta(g(n))$ if and only if $f(n) = \\tilde O(g(n))$ and $f(n) = \\tilde\\Omega(g(n))$.",
            "title": "3-5 Variations on $O$ and $\\Omega$"
        },
        {
            "location": "/Chap03/Problems/3-6/",
            "text": "We can apply the iteration operator $^*$ used in the $\\lg^*$ function to any monotonically increasing function $f(n)$ over the reals. For a given constant $c \\in \\mathbb R$, we define the iterated function ${f_c}^*$ by ${f_c}^*(n) = \\min \\{i \\ge 0 : f^{(i)}(n) \\le c \\}$ which need not be well defined in all cases. In other words, the quantity ${f_c}^*(n)$ is the number of iterated applications of the function $f$ required to reduce its argument down to $c$ or less.\n\n\n\n\nFor each of the following functions $f(n)$ and constants $c$, give as tight a bound as possible on ${f_c}^*(n)$.\n\n\n\\begin{array}{ccl}\nf(n)      & c & {f_c}^*                    \\\\\n\\hline\nn - 1     & 0 &  \\Theta(n)                  \\\\\n\\lg n     & 1 &  \\Theta(\\lg^*{n})          \\\\\nn / 2     & 1 &  \\Theta(\\lg n)              \\\\\nn / 2     & 2 &  \\Theta(\\lg n)              \\\\\n\\sqrt 2   & 2 &  \\Theta(\\lg\\lg n)           \\\\\n\\sqrt 2   & 1 &  \\text{does not converge}   \\\\\nn^{1 / 2} & 2 &  \\Theta(\\log_3{\\lg n})      \\\\\nn / \\lg n & 2 &  \\omega(\\lg\\lg n), o(\\lg n)\n\\end{array}",
            "title": "3-6 Iterated functions"
        },
        {
            "location": "/Chap04/4.1/",
            "text": "4.1-1\n\n\n\n\nWhat does $\\text{FIND-MAXIMUM-SUBARRAY}$ return when all elements of $A$ are negative?\n\n\n\n\nIf the index of the greatest element of $A$ is  $i$, it returns $(i, i, A[i])$.\n\n\n4.1-2\n\n\n\n\nWrite pseudocode for the brute-force method of solving the maximum-subarray problem. Your procedure should run in $\\Theta(n^2)$ time.\n\n\n\n\nMAX\n-\nSUBARRAY\n-\nBRUTE\n-\nFORCE\n(\nA\n)\n\n    \nn\n \n=\n \nA\n.\nlength\n\n    \nmax\n-\nso\n-\nfar\n \n=\n \n-\n\u221e\n\n    \nfor\n \nl\n \n=\n \n1\n \nto\n \nn\n\n        \nsum\n \n=\n \n0\n\n        \nfor\n \nh\n \n=\n \n1\n \nto\n \nn\n\n            \nsum\n \n=\n \nsum\n \n+\n \nA\n[\nh\n]\n\n            \nif\n \nsum\n \n>\n \nmax\n-\nso\n-\nfar\n\n                \nmax\n-\nso\n-\nfar\n \n=\n \nsum\n\n                \nlow\n \n=\n \nl\n\n                \nhigh\n \n=\n \nh\n\n    \nreturn\n \n(\nlow\n,\n \nhigh\n)\n\n\n\n\n\n4.1-3\n\n\n\n\nImplement both the brute-force and recursive algorithms for the maximum-subarray problem on your own computer. What problem size $n_0$ gives the crossover point at which the recursive algorithm beats the brute-force algorithm? Then, change the base case of the recursive algorithm to use the brute-force algorithm whenever the problem size is less than $n_0$. Does that change the crossover point?\n\n\n\n\nOn my computer, $n_0$ is $37$.\n\n\nIf the algorithm is modified to used divide and conquer when $n \\ge 37$ and the brute-force approach when $n$ is less, the performance at the crossover point almost doubles. The performance at $n_0 - 1$ stays the same, though (or even gets worse, because of the added overhead).\n\n\nWhat I find interesting is that if we set $n_0 = 20$ and used the mixed approach to sort $40$ elements, it is still faster than both.\n\n\n4.1-4\n\n\n\n\nSuppose we change the definition of the maximum-subarray problem to allow the result to be an empty subarray, where the sum of the values of an empty subarray is $0$. How would you change any of the algorithms that do not allow empty subarrays to permit an empty subarray to be the result?\n\n\n\n\nIf the algorithm returns a negative sum, toss out the answer and use an empty subarray instead.\n\n\n4.1-5\n\n\n\n\nUse the following ideas to develop a nonrecursive, linear-time algorithm for the maximum-subarray problem. Start at the left end of the array, and progress toward the right, keeping track of the maximum subarray seen so far. Knowing a maximum subarray $A[1..j]$, extend the answer to find a maximum subarray ending at index $j + 1$ by using the following observation: a maximum subarray $A[i..j + 1]$, for some $1 \\le i \\le j + 1$. Determine a maximum subarray of the form $A[i..j + 1]$ in constant time based on knowing a maximum subarray ending at index $j$.\n\n\n\n\nMAX-SUBARRAY-LINEAR(A)\n    n = A.length\n    max-sum = -\u221e\n    ending-here-sum = -\u221e\n    for j = 1 to n\n        ending-here-high = j\n        if ending-here-sum > 0\n            ending-here-sum = ending-here-sum + A[j]\n        else ending-here-low = j\n            ending-here-sum = A[j]\n        if ending-here-sum > max-sum\n            max-sum = ending-here-sum\n            low = ending-here-low\n            high = ending-here-high\n    return (low, high, max-sum)\n\n\n\n\nThe variables are intended as follows:\n\n\n\n\n$low$ and $high$ demarcate a maximum subarray found so far.\n\n\n$max\\text-sum$ gives the sum of the values in a maximum subarray found so far.\n\n\n$ending\\text-here\\text-low$ and $ending\\text-here\\text-high$ demarcate a maximum subarray ending at index $j$ . Since the high end of any subarray ending at index $j$ must be $j$, every iteration of the for \nloop\n automatically sets $ending\\text-here\\text-high = j$.\n\n\n$ending\\text-here\\text-sum$ gives the sum of the values in a maximum subarray ending at index $j$.\n\n\n\n\nThe first test within the for \nloop\n determines whether a maximum subarray ending at index $j$ contains just $A[j]$\u008d. As we enter an iteration of the loop, $ending\\text-here\\text-sum$ has the sum of the values in a maximum subarray ending at $j - 1$. If $ending\\text-here\\text-sum + A[j] > A[j]$\u008d, then we extend the maximum subarray ending at index $j - 1$ to include index $j$. (The test in the \nif\n statement just subtracts out $A[j]$\u008d from both sides.) Otherwise, we start a new subarray at index $j$, so both its low and high ends have the value $j$ and its sum is $A[j]$\u008d. Once we know the maximum subarray ending at index $j$, we test to see whether it has a greater sum than the maximum subarray found so far, ending at any position less than or equal to $j$. If it does, then we update $low$, $high$, and $max\\text-sum$ appropriately.\n\n\nSince each iteration of the for \nloop\n takes constant time, and the loop makes $n$ iterations, the running time of $\\text{MAX-SUBARRAY-LINEAR}$ is $O(n)$.",
            "title": "4.1 The maximum-subarray problem"
        },
        {
            "location": "/Chap04/4.1/#41-1",
            "text": "What does $\\text{FIND-MAXIMUM-SUBARRAY}$ return when all elements of $A$ are negative?   If the index of the greatest element of $A$ is  $i$, it returns $(i, i, A[i])$.",
            "title": "4.1-1"
        },
        {
            "location": "/Chap04/4.1/#41-2",
            "text": "Write pseudocode for the brute-force method of solving the maximum-subarray problem. Your procedure should run in $\\Theta(n^2)$ time.   MAX - SUBARRAY - BRUTE - FORCE ( A ) \n     n   =   A . length \n     max - so - far   =   - \u221e \n     for   l   =   1   to   n \n         sum   =   0 \n         for   h   =   1   to   n \n             sum   =   sum   +   A [ h ] \n             if   sum   >   max - so - far \n                 max - so - far   =   sum \n                 low   =   l \n                 high   =   h \n     return   ( low ,   high )",
            "title": "4.1-2"
        },
        {
            "location": "/Chap04/4.1/#41-3",
            "text": "Implement both the brute-force and recursive algorithms for the maximum-subarray problem on your own computer. What problem size $n_0$ gives the crossover point at which the recursive algorithm beats the brute-force algorithm? Then, change the base case of the recursive algorithm to use the brute-force algorithm whenever the problem size is less than $n_0$. Does that change the crossover point?   On my computer, $n_0$ is $37$.  If the algorithm is modified to used divide and conquer when $n \\ge 37$ and the brute-force approach when $n$ is less, the performance at the crossover point almost doubles. The performance at $n_0 - 1$ stays the same, though (or even gets worse, because of the added overhead).  What I find interesting is that if we set $n_0 = 20$ and used the mixed approach to sort $40$ elements, it is still faster than both.",
            "title": "4.1-3"
        },
        {
            "location": "/Chap04/4.1/#41-4",
            "text": "Suppose we change the definition of the maximum-subarray problem to allow the result to be an empty subarray, where the sum of the values of an empty subarray is $0$. How would you change any of the algorithms that do not allow empty subarrays to permit an empty subarray to be the result?   If the algorithm returns a negative sum, toss out the answer and use an empty subarray instead.",
            "title": "4.1-4"
        },
        {
            "location": "/Chap04/4.1/#41-5",
            "text": "Use the following ideas to develop a nonrecursive, linear-time algorithm for the maximum-subarray problem. Start at the left end of the array, and progress toward the right, keeping track of the maximum subarray seen so far. Knowing a maximum subarray $A[1..j]$, extend the answer to find a maximum subarray ending at index $j + 1$ by using the following observation: a maximum subarray $A[i..j + 1]$, for some $1 \\le i \\le j + 1$. Determine a maximum subarray of the form $A[i..j + 1]$ in constant time based on knowing a maximum subarray ending at index $j$.   MAX-SUBARRAY-LINEAR(A)\n    n = A.length\n    max-sum = -\u221e\n    ending-here-sum = -\u221e\n    for j = 1 to n\n        ending-here-high = j\n        if ending-here-sum > 0\n            ending-here-sum = ending-here-sum + A[j]\n        else ending-here-low = j\n            ending-here-sum = A[j]\n        if ending-here-sum > max-sum\n            max-sum = ending-here-sum\n            low = ending-here-low\n            high = ending-here-high\n    return (low, high, max-sum)  The variables are intended as follows:   $low$ and $high$ demarcate a maximum subarray found so far.  $max\\text-sum$ gives the sum of the values in a maximum subarray found so far.  $ending\\text-here\\text-low$ and $ending\\text-here\\text-high$ demarcate a maximum subarray ending at index $j$ . Since the high end of any subarray ending at index $j$ must be $j$, every iteration of the for  loop  automatically sets $ending\\text-here\\text-high = j$.  $ending\\text-here\\text-sum$ gives the sum of the values in a maximum subarray ending at index $j$.   The first test within the for  loop  determines whether a maximum subarray ending at index $j$ contains just $A[j]$\u008d. As we enter an iteration of the loop, $ending\\text-here\\text-sum$ has the sum of the values in a maximum subarray ending at $j - 1$. If $ending\\text-here\\text-sum + A[j] > A[j]$\u008d, then we extend the maximum subarray ending at index $j - 1$ to include index $j$. (The test in the  if  statement just subtracts out $A[j]$\u008d from both sides.) Otherwise, we start a new subarray at index $j$, so both its low and high ends have the value $j$ and its sum is $A[j]$\u008d. Once we know the maximum subarray ending at index $j$, we test to see whether it has a greater sum than the maximum subarray found so far, ending at any position less than or equal to $j$. If it does, then we update $low$, $high$, and $max\\text-sum$ appropriately.  Since each iteration of the for  loop  takes constant time, and the loop makes $n$ iterations, the running time of $\\text{MAX-SUBARRAY-LINEAR}$ is $O(n)$.",
            "title": "4.1-5"
        },
        {
            "location": "/Chap04/4.2/",
            "text": "4.2-1\n\n\n\n\nUse Strassen's algorithm to compute the matrix product\n\n\n\\begin{pmatrix}\n1 & 2 \\\\\n7 & 5\n\\end{pmatrix}\n\\begin{pmatrix}\n6 & 8 \\\\\n4 & 2\n\\end{pmatrix}\n\n\nShow your work.\n\n\n\n\nThe first matrices are\n\n\n\\begin{array}{ll}\nS_1 =  6 & S_6    =  8 \\\\\nS_2 =  4 & S_7    = -2 \\\\\nS_3 = 12 & S_8    =  6 \\\\\nS_4 = -2 & S_9    = -6 \\\\\nS_5 =  5 & S_{10} = 14.\n\\end{array}\n\n\nThe products are\n\n\n\\begin{align}\nP_1 & =  1 \\cdot 6  =   6 \\\\\nP_2 & =  4 \\cdot 2  =   8 \\\\\nP_3 & =  6 \\cdot 12 =  72 \\\\\nP_4 & = -2 \\cdot 5  = -10 \\\\\nP_5 & =  6 \\cdot 8  =  48 \\\\\nP_6 & = -2 \\cdot 6  = -12 \\\\\nP_7 & = -6 \\cdot 14 = -84.\n\\end{align}\n\n\nThe four matrices are\n\n\n\\begin{align}\nC_{11} & = 48 + (-10) - 8 + (-12) = 18 \\\\\nC_{12} & =  6 + 8 = 14 \\\\\nC_{21} & = 72 + (-10) = 62 \\\\\nC_{22} & = 48 + 6 - 72 - (-84) = 66.\n\\end{align}\n\n\nThe result is\n\n\n$$\n\\begin{pmatrix}\n18 & 14 \\\\\n62 & 66\n\\end{pmatrix}.\n$$\n\n\n4.2-2\n\n\n\n\nWrite pseudocode for Strassen's algorithm\n\n\n\n\nSTRASSEN\n(\nA\n,\n \nB\n)\n\n    \nn\n \n=\n \nA\n.\nrows\n\n    \nlet\n \n+\n \nbe\n \na\n \nnew\n \nn\n \n*\n \nn\n \nmatrix\n\n    \nif\n \nn\n \n==\n \n1\n\n        \nc11\n \n=\n \na11\n \n*\n \nb11\n\n    \nelse\n \npartition\n \nA\n \nand\n \nB\n \nin\n \nequations\n \n(\n4.9\n)\n\n        \nlet\n \nC11\n,\n \nC12\n,\n \nC21\n,\n \nand\n \nC22\n \nbe\n \nn\n \n/\n \n2\n \n*\n \nn\n \n/\n \n2\n \nmatrices\n\n        \ncreate\n \nn\n \n/\n \n2\n \n*\n \nn\n \n/\n \n2\n \nmatrices\n \nS1\n,\n \nS2\n,...,\nS10\n \nand\n \nP1\n,\n \nP2\n,...,\nP7\n\n        \nS1\n \n=\n \nB12\n \n-\n \nB22\n\n        \nS2\n \n=\n \nA11\n \n+\n \nA12\n\n        \nS3\n \n=\n \nA12\n \n+\n \nA22\n\n        \nS4\n \n=\n \nB21\n \n-\n \nB11\n\n        \nS5\n \n=\n \nA11\n \n+\n \nA22\n\n        \nS6\n \n=\n \nB11\n \n+\n \nB22\n\n        \nS7\n \n=\n \nA12\n \n-\n \nA22\n\n        \nS8\n \n=\n \nB21\n \n+\n \nB22\n\n        \nS9\n \n=\n \nA11\n \n-\n \nA21\n\n        \nS10\n \n=\n \nB11\n \n+\n \nB12\n\n        \nP1\n \n=\n \nSTRASSEN\n(\nA11\n,\n \nS1\n)\n\n        \nP2\n \n=\n \nSTRASSEN\n(\nS2\n,\n \nB22\n)\n\n        \nP3\n \n=\n \nSTRASSEN\n(\nS3\n,\n \nB11\n)\n\n        \nP4\n \n=\n \nSTRASSEN\n(\nA22\n,\n \nS4\n)\n\n        \nP5\n \n=\n \nSTRASSEN\n(\nS5\n,\n \nS6\n)\n\n        \nP6\n \n=\n \nSTRASSEN\n(\nS7\n,\n \nS8\n)\n\n        \nP7\n \n=\n \nSTRASSEN\n(\nS9\n,\n \nS10\n)\n\n        \nC11\n \n=\n \nP5\n \n+\n \nP4\n \n-\n \nP2\n \n+\n \nP6\n\n        \nC12\n \n=\n \nP1\n \n+\n \nP2\n\n        \nC21\n \n=\n \nP3\n \n+\n \nP4\n\n        \nC22\n \n=\n \nP5\n \n+\n \nP1\n \n-\n \nP3\n \n-\n \nP7\n\n        \ncombine\n \nC11\n,\n \nC12\n,\n \nC21\n,\n \nand\n \nC22\n \ninto\n \nC\n\n    \nreturn\n \nC\n\n\n\n\n\n4.2-3\n\n\n\n\nHow would you modify Strassen's algorithm to multiply $n \\times n$ matrices in which $n$ is not an exact power of $2$? Show that the resulting algorithm runs in time $\\Theta(n^{\\lg7})$.\n\n\n\n\nWe can just extend it to an $n \\times n$ matrix and pad it with zeroes. It's obviously $\\Theta(n^{\\lg7})$.\n\n\n4.2-4\n\n\n\n\nWhat is the largest $k$ such that if you can multiply $3 \\times 3$ matrices using $k$ multiplications (not assuming commutativity of multiplication), then you can multiply $n \\times n$ matrices is time $o(n^{\\lg 7})$? What would the running time of this algorithm be?\n\n\n\n\nIf you can multiply $3 \\times 3$ matrices using $k$ multiplications, then you can multiply $n \\times n$ matrices by recursively multiplying $n / 3 \\times n /3$ matrices, in time $T(n) = kT(n / 3) + \\Theta(n^2)$.\n\n\nUsing the master method to solve this recurrence, consider the ratio of $n^{\\log_3 k}$ and $n^2$:\n\n\n\n\nIf $\\log_3 k = 2$, case 2 applies and $T(n) = \\Theta(n^2\\lg n)$. In this case, $k = 9$ and $T(n) = o(n^{\\lg 7})$.\n\n\nIf $\\log_3 k < 2$, case 3 applies and $T(n) = \\Theta(n^2)$. In this case, $k < 9$ and $T(n) = o(n^{\\lg 7})$.\n\n\nIf $\\log_3 k > 2$, case 1 applies and $T(n) = \\Theta(n^{\\log_3 k})$. In this case, $k > 9$. $T(n) = o(n^{\\lg 7})$ when $\\log_3 k < \\lg 7$, i.e., when $k < 3^{\\lg 7} \\approx 21.85$. The largest such integer $k$ is $21$.\n\n\n\n\nThus, $k = 21$ and the running time is $\\Theta(n^{\\log_3 k}) = \\Theta(n^{\\log_3 21} = O(n^{2.80})$ (since $\\log_3 21 \\approx 2.77$).\n\n\n4.2-5\n\n\n\n\nV. Pan has discovered a way of multiplying $68 \\times 68$ matrices using $132464$ multiplications, a way of multiplying $70 \\times 70$ matrices using $143640$ multiplications, and a way of multiplying $72 \\times 72$ matrices using $155424$ multiplications. Which method yields the best asymptotic running time when used in a divide-and-conquer matrix-multiplication algorithm? How does it compare to Strassen's algorithm?\n\n\n\n\nUsing what we know from the last exercise, we need to pick the smallest of the following\n\n\n\\begin{align}\n\\log_{68} 132464 & \\approx 2.795128 \\\\\n\\log_{70} 143640 & \\approx 2.795122 \\\\\n\\log_{72} 155424 & \\approx 2.795147.\n\\end{align}\n\n\nThe fastest one asymptotically is $70 \\times 70$ using $143640$.\n\n\n4.2-6\n\n\n\n\nHow quickly can you multiply a $kn \\times n$ matrix by an $n \\times kn$ matrix, using Strassen's algorithm as a subroutine? Answer the same question with the order of the input matrices reversed.\n\n\n\n\n\n\n$(kn \\times n)(n \\times kn)$ produces a $kn \\times kn$ matrix. This produces $k^2$ multiplications of $n \\times n$ matrices.\n\n\n$(n \\times kn)(kn \\times n)$ produces an $n \\times n$ matrix. This produces $k$ multiplications and $k - 1$ additions.\n\n\n\n\n4.2-7\n\n\n\n\nShow how to multiply the complex numbers $a + bi$ and $c + di$ using only three multiplications of real numbers. The algorithm should take $a$, $b$, $c$ and $d$ as input and produce the real component $ac - bd$ and the imaginary component $ad + bc$ separately.\n\n\n\n\nThe three matrices are\n\n\n\\begin{align}\nA & = (a + b)(c + d) = ac + ad + bc + bd \\\\\nB & = ac \\\\\nC & = bd.\n\\end{align}\n\n\nThe result is\n\n\n(B - C) + (A - B - C)i.",
            "title": "4.2 Strassen's algorithm for matrix multiplication"
        },
        {
            "location": "/Chap04/4.2/#42-1",
            "text": "Use Strassen's algorithm to compute the matrix product  \\begin{pmatrix}\n1 & 2 \\\\\n7 & 5\n\\end{pmatrix}\n\\begin{pmatrix}\n6 & 8 \\\\\n4 & 2\n\\end{pmatrix}  Show your work.   The first matrices are  \\begin{array}{ll}\nS_1 =  6 & S_6    =  8 \\\\\nS_2 =  4 & S_7    = -2 \\\\\nS_3 = 12 & S_8    =  6 \\\\\nS_4 = -2 & S_9    = -6 \\\\\nS_5 =  5 & S_{10} = 14.\n\\end{array}  The products are  \\begin{align}\nP_1 & =  1 \\cdot 6  =   6 \\\\\nP_2 & =  4 \\cdot 2  =   8 \\\\\nP_3 & =  6 \\cdot 12 =  72 \\\\\nP_4 & = -2 \\cdot 5  = -10 \\\\\nP_5 & =  6 \\cdot 8  =  48 \\\\\nP_6 & = -2 \\cdot 6  = -12 \\\\\nP_7 & = -6 \\cdot 14 = -84.\n\\end{align}  The four matrices are  \\begin{align}\nC_{11} & = 48 + (-10) - 8 + (-12) = 18 \\\\\nC_{12} & =  6 + 8 = 14 \\\\\nC_{21} & = 72 + (-10) = 62 \\\\\nC_{22} & = 48 + 6 - 72 - (-84) = 66.\n\\end{align}  The result is  $$\n\\begin{pmatrix}\n18 & 14 \\\\\n62 & 66\n\\end{pmatrix}.\n$$",
            "title": "4.2-1"
        },
        {
            "location": "/Chap04/4.2/#42-2",
            "text": "Write pseudocode for Strassen's algorithm   STRASSEN ( A ,   B ) \n     n   =   A . rows \n     let   +   be   a   new   n   *   n   matrix \n     if   n   ==   1 \n         c11   =   a11   *   b11 \n     else   partition   A   and   B   in   equations   ( 4.9 ) \n         let   C11 ,   C12 ,   C21 ,   and   C22   be   n   /   2   *   n   /   2   matrices \n         create   n   /   2   *   n   /   2   matrices   S1 ,   S2 ,..., S10   and   P1 ,   P2 ,..., P7 \n         S1   =   B12   -   B22 \n         S2   =   A11   +   A12 \n         S3   =   A12   +   A22 \n         S4   =   B21   -   B11 \n         S5   =   A11   +   A22 \n         S6   =   B11   +   B22 \n         S7   =   A12   -   A22 \n         S8   =   B21   +   B22 \n         S9   =   A11   -   A21 \n         S10   =   B11   +   B12 \n         P1   =   STRASSEN ( A11 ,   S1 ) \n         P2   =   STRASSEN ( S2 ,   B22 ) \n         P3   =   STRASSEN ( S3 ,   B11 ) \n         P4   =   STRASSEN ( A22 ,   S4 ) \n         P5   =   STRASSEN ( S5 ,   S6 ) \n         P6   =   STRASSEN ( S7 ,   S8 ) \n         P7   =   STRASSEN ( S9 ,   S10 ) \n         C11   =   P5   +   P4   -   P2   +   P6 \n         C12   =   P1   +   P2 \n         C21   =   P3   +   P4 \n         C22   =   P5   +   P1   -   P3   -   P7 \n         combine   C11 ,   C12 ,   C21 ,   and   C22   into   C \n     return   C",
            "title": "4.2-2"
        },
        {
            "location": "/Chap04/4.2/#42-3",
            "text": "How would you modify Strassen's algorithm to multiply $n \\times n$ matrices in which $n$ is not an exact power of $2$? Show that the resulting algorithm runs in time $\\Theta(n^{\\lg7})$.   We can just extend it to an $n \\times n$ matrix and pad it with zeroes. It's obviously $\\Theta(n^{\\lg7})$.",
            "title": "4.2-3"
        },
        {
            "location": "/Chap04/4.2/#42-4",
            "text": "What is the largest $k$ such that if you can multiply $3 \\times 3$ matrices using $k$ multiplications (not assuming commutativity of multiplication), then you can multiply $n \\times n$ matrices is time $o(n^{\\lg 7})$? What would the running time of this algorithm be?   If you can multiply $3 \\times 3$ matrices using $k$ multiplications, then you can multiply $n \\times n$ matrices by recursively multiplying $n / 3 \\times n /3$ matrices, in time $T(n) = kT(n / 3) + \\Theta(n^2)$.  Using the master method to solve this recurrence, consider the ratio of $n^{\\log_3 k}$ and $n^2$:   If $\\log_3 k = 2$, case 2 applies and $T(n) = \\Theta(n^2\\lg n)$. In this case, $k = 9$ and $T(n) = o(n^{\\lg 7})$.  If $\\log_3 k < 2$, case 3 applies and $T(n) = \\Theta(n^2)$. In this case, $k < 9$ and $T(n) = o(n^{\\lg 7})$.  If $\\log_3 k > 2$, case 1 applies and $T(n) = \\Theta(n^{\\log_3 k})$. In this case, $k > 9$. $T(n) = o(n^{\\lg 7})$ when $\\log_3 k < \\lg 7$, i.e., when $k < 3^{\\lg 7} \\approx 21.85$. The largest such integer $k$ is $21$.   Thus, $k = 21$ and the running time is $\\Theta(n^{\\log_3 k}) = \\Theta(n^{\\log_3 21} = O(n^{2.80})$ (since $\\log_3 21 \\approx 2.77$).",
            "title": "4.2-4"
        },
        {
            "location": "/Chap04/4.2/#42-5",
            "text": "V. Pan has discovered a way of multiplying $68 \\times 68$ matrices using $132464$ multiplications, a way of multiplying $70 \\times 70$ matrices using $143640$ multiplications, and a way of multiplying $72 \\times 72$ matrices using $155424$ multiplications. Which method yields the best asymptotic running time when used in a divide-and-conquer matrix-multiplication algorithm? How does it compare to Strassen's algorithm?   Using what we know from the last exercise, we need to pick the smallest of the following  \\begin{align}\n\\log_{68} 132464 & \\approx 2.795128 \\\\\n\\log_{70} 143640 & \\approx 2.795122 \\\\\n\\log_{72} 155424 & \\approx 2.795147.\n\\end{align}  The fastest one asymptotically is $70 \\times 70$ using $143640$.",
            "title": "4.2-5"
        },
        {
            "location": "/Chap04/4.2/#42-6",
            "text": "How quickly can you multiply a $kn \\times n$ matrix by an $n \\times kn$ matrix, using Strassen's algorithm as a subroutine? Answer the same question with the order of the input matrices reversed.    $(kn \\times n)(n \\times kn)$ produces a $kn \\times kn$ matrix. This produces $k^2$ multiplications of $n \\times n$ matrices.  $(n \\times kn)(kn \\times n)$ produces an $n \\times n$ matrix. This produces $k$ multiplications and $k - 1$ additions.",
            "title": "4.2-6"
        },
        {
            "location": "/Chap04/4.2/#42-7",
            "text": "Show how to multiply the complex numbers $a + bi$ and $c + di$ using only three multiplications of real numbers. The algorithm should take $a$, $b$, $c$ and $d$ as input and produce the real component $ac - bd$ and the imaginary component $ad + bc$ separately.   The three matrices are  \\begin{align}\nA & = (a + b)(c + d) = ac + ad + bc + bd \\\\\nB & = ac \\\\\nC & = bd.\n\\end{align}  The result is  (B - C) + (A - B - C)i.",
            "title": "4.2-7"
        },
        {
            "location": "/Chap04/4.3/",
            "text": "4.3-1\n\n\n\n\nShow that the solution of $T(n) = T(n - 1) + n$ is $O(n^2)$.\n\n\n\n\nWe guess $T(n) \\le cn^2$ for some constant $c > 0$. We have\n\n\n\\begin{align}\nT(n) & =   T(n - 1) + n \\\\\n     & \\le c(n - 1)^2 + n \\\\\n     & =   cn^2 - 2cn + c + n \\\\\n     & =   cn^2 + c(1 - 2n) + n.\n\\end{align}\n\n\nThe last quantity is less than or equal to $cn^2$ if $c(1 - 2n) + n \\le 0$ or, equivalently, $c \\ge n / (2n - 1)$. This last condition holds for all $n \\ge 1$ and $c \\ge 1$.\n\n\nFor the boundary condition, we set $T(1) = 1$, and so $T(1) = 1 \\le c \\cdot 1^2$. Thus, we can choose $n_0 = 1$ and $c = 1$.\n\n\n4.3-2\n\n\n\n\nShow that the solution of $T(n) = T(\\lceil n / 2 \\rceil) + 1$ is $O(\\lg n)$.\n\n\n\n\nWe guess $T(n) \\le c\\lg(n - 2)$,\n\n\n\\begin{align}\nT(n) & \\le c\\lg(\\lceil n / 2 \\rceil - 2) + 1 \\\\\n     & \\le c\\lg(n / 2 + 1 - 2) + 1 \\\\\n     & =   c\\lg((n - 2) / 2) + 1 \\\\\n     & =   c\\lg(n - 2) - c\\lg2 + 1 \\\\\n     & \\le c\\lg(n - 2),\n\\end{align}\n\n\nwhere the last step holds for $c \\ge 1$.\n\n\n4.3-3\n\n\n\n\nWe saw that the solution of $T(n) = 2T(\\lfloor n / 2 \\rfloor) + n$ is $O(n\\lg n)$. Show that the solution of this recurrence is also $\\Omega(n\\lg n)$. Conclude that the solution is $\\Theta(n\\lg n)$.\n\n\n\n\nFirst we guess $T(n) \\le cn\\lg n$,\n\n\n\\begin{align}\nT(n) & \\le 2c\\lfloor n / 2 \\rfloor\\lg{\\lfloor n / 2 \\rfloor} + n \\\\\n     & \\le cn\\lg(n / 2) + n \\\\\n     & =   cn\\lg n - cn\\lg 2 + n \\\\\n     & =   cn\\lg n + (1 - c)n \\\\\n     & \\le cn\\lg n, \n\\end{align}\n\n\nwhere the last step holds for $c \\ge 1$.\n\n\nNext we guess $T(n) \\ge c(n + 2)\\lg(n + 2)$,\n\n\n\\begin{align}\nT(n) & \\ge 2c(\\lfloor n / 2 \\rfloor + 2)(\\lg(\\lfloor n / 2 \\rfloor + 2) + n \\\\\n     & \\ge 2c(n / 2 - 1 + 2)(\\lg(n / 2 - 1 + 2) + n \\\\\n     & =   2c\\frac{n + 2}{2}\\lg\\frac{n + 2}{2} + n \\\\\n     & =   c(n + 2)\\lg(n + 2) - c(n + 2)\\lg 2 + n \\\\\n     & =   c(n + 2)\\lg(n + 2) + (1 - c)n - 2c \\\\\n     & \\ge c(n + 2)\\lg(n + 2), \n\\end{align}\n\n\nwhere the last step holds for $n \\ge \\frac{2c}{1 - c}$, $0 \\le c < 1$.\n\n\n4.3-4\n\n\n\n\nShow that by making a different inductive hyptohesis, we can overcome the difficulty with the boundary condition $T(1) = 1$ for recurrence $\\text{(4.19)}$ without adjusting the boundary conditions for the inductive proof.\n\n\n\n\nWe guess $T(n) \\le n\\lg n + n$,\n\n\n\\begin{align}\nT(n) & \\le 2(c\\lfloor n / 2 \\rfloor\\lg{\\lfloor n / 2 \\rfloor} + \\lfloor n / 2 \\rfloor) + n \\\\\n     & \\le 2c(n / 2)\\lg(n / 2) + 2(n / 2) + n \\\\\n     & =   cn\\lg(n / 2) + 2n \\\\\n     & =   cn\\lg n - cn\\lg{2} + 2n \\\\\n     & =   cn\\lg n + (2 - c)n \\\\\n     & \\le cn\\lg n + n, \n\\end{align}\n\n\nwhere the last step holds for $c \\ge 1$.\n\n\nThis time, the boundary condition is\n\n\nT(1) = 1 \\le cn\\lg n + n = 0 + 1 = 1.\n\n\n4.3-5\n\n\n\n\nShow that $\\Theta(n\\lg n)$ is the solution to the \"exact\" recurrence $\\text{(4.3)}$ for merge sort.\n\n\n\n\nThe recurrence is\n\n\n\n\n$$T(n) = T(\\lceil n / 2 \\rceil) + T(\\lfloor n / 2 \\rfloor) + \\Theta(n) \\tag{4.3}$$\n\n\n\n\nTo show $\\Theta$ bound, separately show $O$ and $\\Omega$ bounds.\n\n\n\n\nFor $O(n\\lg n)$, we guess $T(n) \\le c(n - 2)\\lg(n - 2)$,\n\n\n\n\n\\begin{align}\nT(n) & \\le c(\\lceil n / 2 \\rceil -2 )\\lg(\\lceil n / 2 \\rceil - 2) + c(\\lfloor n / 2 \\rfloor - 2)\\lg(\\lfloor n / 2 \\rfloor - 2) + dn \\\\\n     & \\le c(n / 2 + 1 -2 )\\lg(n / 2 + 1 - 2) + c(n / 2 - 2)\\lg(n / 2 - 2) + dn \\\\\n     & \\le c(n / 2 - 1 )\\lg(n / 2 - 1) + c(n / 2 - 1)\\lg(n / 2 - 1) + dn \\\\\n     & =   c\\frac{n - 2}{2}\\lg\\frac{n - 2}{2} + c\\frac{n - 2}{2}\\lg\\frac{n - 2}{2} + dn \\\\\n     & =   c(n - 2)\\lg\\frac{n - 2}{2} + dn \\\\\n     & =   c(n - 2)\\lg(n - 2) - c(n - 2) + dn \\\\\n     & =   c(n - 2)\\lg(n - 2) + (d - c)n + 2c \\\\\n     & \\le c(n - 2)\\lg(n - 2),\n\\end{align}\n\n\nwhere the last step holds for $c > d$.\n\n\n\n\nFor $\\Omega(n\\lg n)$, we guess $T(n) \\ge c(n + 2)\\lg (n + 2)$,\n\n\n\n\n\\begin{align}\nT(n) & \\ge c(\\lceil n / 2 \\rceil +2 )\\lg(\\lceil n / 2 \\rceil + 2) + c(\\lfloor n / 2 \\rfloor + 2)\\lg(\\lfloor n / 2 \\rfloor + 2) + dn \\\\\n     & \\ge c(n / 2 + 2)\\lg(n / 2 + 2) + c(n / 2-1+2)\\lg(n / 2-1+2) + dn \\\\\n     & \\ge c(n / 2 + 1 )\\lg(n / 2 + 1) + c(n / 2 + 1)\\lg(n / 2 + 1) + dn \\\\\n     & \\ge c\\frac{n + 2}{2}\\lg\\frac{n + 2}{2} + c\\frac{n + 2}{2}\\lg\\frac{n + 2}{2} + dn \\\\\n     & =   c(n + 2)\\lg\\frac{n + 2}{2} + dn \\\\\n     & =   c(n + 2)\\lg(n + 2) - c(n + 2) + dn \\\\\n     & =   c(n + 2)\\lg(n + 2) + (d - c)n - 2c \\\\\n     & \\ge c(n + 2)\\lg(n + 2),\n\\end{align}\n\n\nwhere the last step holds for $d > c$.\n\n\n4.3-6\n\n\n\n\nShow that the solution to $T(n) = 2T(\\lfloor n / 2 \\rfloor + 17) + n$ is $O(n\\lg n)$.\n\n\n\n\nWe guess $T(n) \\le c(n - a)\\lg(n - a)$,\n\n\n\\begin{align}\nT(n) & \\le 2c(\\lfloor n / 2 \\rfloor + 17 - a)\\lg(\\lfloor n / 2 \\rfloor + 17 - a) + n \\\\\n     & \\le 2c(n / 2 + 1 + 17 - a)\\lg(n / 2 + 1 + 17 - a) + n \\\\\n     & =   c(n + 36 - 2a)\\lg\\frac{n + 36 - 2a}{2} + n \\\\\n     & =   c(n + 36 - 2a)\\lg(n + 36 - 2a) - c(n + 36 - 2a) + n & (c > 1, n > n_0 = f(a))\\\\\n     & \\le c(n + 36 - 2a)\\lg(n + 36 - 2a) & (a \\ge 36) \\\\\n     & \\le c(n - a)\\lg(n - a).\n\\end{align}\n\n\n4.3-7\n\n\n\n\nUsing the master method in Section 4.5, you can show that the solution to the recurrence $T(n) = 4T(n / 3) + n$ is $T(n) = \\Theta(n^{\\log_3 4})$. Show that a substitution proof with the assumption $T(n) \\le cn^{\\log_{3}4}$ fails. Then show how to subtract off a lower-order term to make the substitution proof work.\n\n\n\n\nIf we were to try a straight substitution proof, assuming that $T(n) \\le cn^{\\log_3 4}$, we would get stuck:\n\n\n\\begin{align}\nT(n) & \\le 4(c(n / 3)^{\\log_3 4}) + n \\\\\n     & =   4c \\Big(\\frac{n^{\\log_3 4}}{4}\\Big) + n \\\\\n     & =   cn^{\\log_3 4} + n,\n\\end{align}\n\n\nwhich is greater than $cn^{\\log_3 4}$. Instead, we subtract off a lower-order term and assume that $T(n) \\le cn^{\\log_3 4} - dn$. Now we have\n\n\n\\begin{align}\nT(n) & \\le 4(c(n / 3)^{\\log_3 4} - dn / 3) + n \\\\\n     & =   4c \\Big(\\frac{cn^{\\log_3 4}}{4} - \\frac{dn}{3}\\Big) + n \\\\\n     & =   cn^{\\log_3 4} - \\frac{4}{3}dn + n,\n\\end{align}\n\n\nwhich is less than or equal to $cn^{\\log_3 4} - dn$ if $d \\ge 3$.\n\n\n4.3-8\n\n\n\n\nUsing the master method in Section 4.5, you can show that the solution to the recurrence $T(n) = 4T(n / 2) + n^2$ is $T(n) = \\Theta(n^2)$. Show that a substitution proof with the assumption $T(n) \\le cn^2$ fails. Then show how to subtract off a lower-order term to make the substitution proof work.\n\n\n\n\nFirst we guess $T(n) \\le cn^2$,\n\n\n\\begin{align}\nT(n) & \\le 4c(n / 2)^2 + n^2 \\\\\n     & =   cn^2 + n^2 \\\\\n     & =   (c + 1)n^2.\n\\end{align}\n\n\nDead-end!\n\n\nLet's guess $T(n) \\le cn^2 - n$,\n\n\n\\begin{align}\nT(n) & \\le 4\\Big(c(n / 2)^2 - n / 2\\Big) + n \\\\\n     & =   cn^2 - 2n + n \\\\\n     & =   cn^2 - n.\n\\end{align}\n\n\nWe're done!\n\n\n4.3-9\n\n\n\n\nSolve the recurrence $T(n) = 3T(\\sqrt n) + \\log n$ by making a change of variables. Your solution should be asymptotically tight. Do not worry about whether values are integral.\n\n\n\n\nFirst,\n\n\n\\begin{align}\n  T(n) & = 3T(\\sqrt n) + \\lg n & \\text{ let } m = \\lg n \\\\\nT(2^m) & = 3T(2^{m / 2}) + m \\\\\n  S(m) & = 3S(m / 2) + m.\n\\end{align}\n\n\nNow we guess $S(m) \\le cm^{\\lg 3} + dm$,\n\n\n\\begin{align}\nS(m) & \\le 3\\Big(c(m / 2)^{\\lg 3} + d(m / 2)\\Big) + m \\\\\n     & \\le cm^{\\lg 3} + (\\frac{3}{2}d + 1)m & (d \\le -2) \\\\\n     & \\le cm^{\\lg 3} + dm.\n\\end{align}\n\n\nThen we guess $S(m) \\ge cm^{\\lg 3} + dm$,\n\n\n\\begin{align}\nS(m) & \\ge 3\\Big(c(m / 2)^{\\lg 3} + d(m / 2)\\Big) + m \\\\\n     & \\ge cm^{\\lg 3} + (\\frac{3}{2}d + 1)m & (d \\ge -2) \\\\\n     & \\ge cm^{\\lg 3} + dm.\n\\end{align}\n\n\nThus,\n\n\n\\begin{align}\nS(m) & = \\Theta(m^{\\lg 3}) \\\\\nT(n) & = \\Theta(\\lg^{\\lg 3}{n}).\n\\end{align}",
            "title": "4.3 The substitution method for solving recurrences"
        },
        {
            "location": "/Chap04/4.3/#43-1",
            "text": "Show that the solution of $T(n) = T(n - 1) + n$ is $O(n^2)$.   We guess $T(n) \\le cn^2$ for some constant $c > 0$. We have  \\begin{align}\nT(n) & =   T(n - 1) + n \\\\\n     & \\le c(n - 1)^2 + n \\\\\n     & =   cn^2 - 2cn + c + n \\\\\n     & =   cn^2 + c(1 - 2n) + n.\n\\end{align}  The last quantity is less than or equal to $cn^2$ if $c(1 - 2n) + n \\le 0$ or, equivalently, $c \\ge n / (2n - 1)$. This last condition holds for all $n \\ge 1$ and $c \\ge 1$.  For the boundary condition, we set $T(1) = 1$, and so $T(1) = 1 \\le c \\cdot 1^2$. Thus, we can choose $n_0 = 1$ and $c = 1$.",
            "title": "4.3-1"
        },
        {
            "location": "/Chap04/4.3/#43-2",
            "text": "Show that the solution of $T(n) = T(\\lceil n / 2 \\rceil) + 1$ is $O(\\lg n)$.   We guess $T(n) \\le c\\lg(n - 2)$,  \\begin{align}\nT(n) & \\le c\\lg(\\lceil n / 2 \\rceil - 2) + 1 \\\\\n     & \\le c\\lg(n / 2 + 1 - 2) + 1 \\\\\n     & =   c\\lg((n - 2) / 2) + 1 \\\\\n     & =   c\\lg(n - 2) - c\\lg2 + 1 \\\\\n     & \\le c\\lg(n - 2),\n\\end{align}  where the last step holds for $c \\ge 1$.",
            "title": "4.3-2"
        },
        {
            "location": "/Chap04/4.3/#43-3",
            "text": "We saw that the solution of $T(n) = 2T(\\lfloor n / 2 \\rfloor) + n$ is $O(n\\lg n)$. Show that the solution of this recurrence is also $\\Omega(n\\lg n)$. Conclude that the solution is $\\Theta(n\\lg n)$.   First we guess $T(n) \\le cn\\lg n$,  \\begin{align}\nT(n) & \\le 2c\\lfloor n / 2 \\rfloor\\lg{\\lfloor n / 2 \\rfloor} + n \\\\\n     & \\le cn\\lg(n / 2) + n \\\\\n     & =   cn\\lg n - cn\\lg 2 + n \\\\\n     & =   cn\\lg n + (1 - c)n \\\\\n     & \\le cn\\lg n, \n\\end{align}  where the last step holds for $c \\ge 1$.  Next we guess $T(n) \\ge c(n + 2)\\lg(n + 2)$,  \\begin{align}\nT(n) & \\ge 2c(\\lfloor n / 2 \\rfloor + 2)(\\lg(\\lfloor n / 2 \\rfloor + 2) + n \\\\\n     & \\ge 2c(n / 2 - 1 + 2)(\\lg(n / 2 - 1 + 2) + n \\\\\n     & =   2c\\frac{n + 2}{2}\\lg\\frac{n + 2}{2} + n \\\\\n     & =   c(n + 2)\\lg(n + 2) - c(n + 2)\\lg 2 + n \\\\\n     & =   c(n + 2)\\lg(n + 2) + (1 - c)n - 2c \\\\\n     & \\ge c(n + 2)\\lg(n + 2), \n\\end{align}  where the last step holds for $n \\ge \\frac{2c}{1 - c}$, $0 \\le c < 1$.",
            "title": "4.3-3"
        },
        {
            "location": "/Chap04/4.3/#43-4",
            "text": "Show that by making a different inductive hyptohesis, we can overcome the difficulty with the boundary condition $T(1) = 1$ for recurrence $\\text{(4.19)}$ without adjusting the boundary conditions for the inductive proof.   We guess $T(n) \\le n\\lg n + n$,  \\begin{align}\nT(n) & \\le 2(c\\lfloor n / 2 \\rfloor\\lg{\\lfloor n / 2 \\rfloor} + \\lfloor n / 2 \\rfloor) + n \\\\\n     & \\le 2c(n / 2)\\lg(n / 2) + 2(n / 2) + n \\\\\n     & =   cn\\lg(n / 2) + 2n \\\\\n     & =   cn\\lg n - cn\\lg{2} + 2n \\\\\n     & =   cn\\lg n + (2 - c)n \\\\\n     & \\le cn\\lg n + n, \n\\end{align}  where the last step holds for $c \\ge 1$.  This time, the boundary condition is  T(1) = 1 \\le cn\\lg n + n = 0 + 1 = 1.",
            "title": "4.3-4"
        },
        {
            "location": "/Chap04/4.3/#43-5",
            "text": "Show that $\\Theta(n\\lg n)$ is the solution to the \"exact\" recurrence $\\text{(4.3)}$ for merge sort.   The recurrence is   $$T(n) = T(\\lceil n / 2 \\rceil) + T(\\lfloor n / 2 \\rfloor) + \\Theta(n) \\tag{4.3}$$   To show $\\Theta$ bound, separately show $O$ and $\\Omega$ bounds.   For $O(n\\lg n)$, we guess $T(n) \\le c(n - 2)\\lg(n - 2)$,   \\begin{align}\nT(n) & \\le c(\\lceil n / 2 \\rceil -2 )\\lg(\\lceil n / 2 \\rceil - 2) + c(\\lfloor n / 2 \\rfloor - 2)\\lg(\\lfloor n / 2 \\rfloor - 2) + dn \\\\\n     & \\le c(n / 2 + 1 -2 )\\lg(n / 2 + 1 - 2) + c(n / 2 - 2)\\lg(n / 2 - 2) + dn \\\\\n     & \\le c(n / 2 - 1 )\\lg(n / 2 - 1) + c(n / 2 - 1)\\lg(n / 2 - 1) + dn \\\\\n     & =   c\\frac{n - 2}{2}\\lg\\frac{n - 2}{2} + c\\frac{n - 2}{2}\\lg\\frac{n - 2}{2} + dn \\\\\n     & =   c(n - 2)\\lg\\frac{n - 2}{2} + dn \\\\\n     & =   c(n - 2)\\lg(n - 2) - c(n - 2) + dn \\\\\n     & =   c(n - 2)\\lg(n - 2) + (d - c)n + 2c \\\\\n     & \\le c(n - 2)\\lg(n - 2),\n\\end{align}  where the last step holds for $c > d$.   For $\\Omega(n\\lg n)$, we guess $T(n) \\ge c(n + 2)\\lg (n + 2)$,   \\begin{align}\nT(n) & \\ge c(\\lceil n / 2 \\rceil +2 )\\lg(\\lceil n / 2 \\rceil + 2) + c(\\lfloor n / 2 \\rfloor + 2)\\lg(\\lfloor n / 2 \\rfloor + 2) + dn \\\\\n     & \\ge c(n / 2 + 2)\\lg(n / 2 + 2) + c(n / 2-1+2)\\lg(n / 2-1+2) + dn \\\\\n     & \\ge c(n / 2 + 1 )\\lg(n / 2 + 1) + c(n / 2 + 1)\\lg(n / 2 + 1) + dn \\\\\n     & \\ge c\\frac{n + 2}{2}\\lg\\frac{n + 2}{2} + c\\frac{n + 2}{2}\\lg\\frac{n + 2}{2} + dn \\\\\n     & =   c(n + 2)\\lg\\frac{n + 2}{2} + dn \\\\\n     & =   c(n + 2)\\lg(n + 2) - c(n + 2) + dn \\\\\n     & =   c(n + 2)\\lg(n + 2) + (d - c)n - 2c \\\\\n     & \\ge c(n + 2)\\lg(n + 2),\n\\end{align}  where the last step holds for $d > c$.",
            "title": "4.3-5"
        },
        {
            "location": "/Chap04/4.3/#43-6",
            "text": "Show that the solution to $T(n) = 2T(\\lfloor n / 2 \\rfloor + 17) + n$ is $O(n\\lg n)$.   We guess $T(n) \\le c(n - a)\\lg(n - a)$,  \\begin{align}\nT(n) & \\le 2c(\\lfloor n / 2 \\rfloor + 17 - a)\\lg(\\lfloor n / 2 \\rfloor + 17 - a) + n \\\\\n     & \\le 2c(n / 2 + 1 + 17 - a)\\lg(n / 2 + 1 + 17 - a) + n \\\\\n     & =   c(n + 36 - 2a)\\lg\\frac{n + 36 - 2a}{2} + n \\\\\n     & =   c(n + 36 - 2a)\\lg(n + 36 - 2a) - c(n + 36 - 2a) + n & (c > 1, n > n_0 = f(a))\\\\\n     & \\le c(n + 36 - 2a)\\lg(n + 36 - 2a) & (a \\ge 36) \\\\\n     & \\le c(n - a)\\lg(n - a).\n\\end{align}",
            "title": "4.3-6"
        },
        {
            "location": "/Chap04/4.3/#43-7",
            "text": "Using the master method in Section 4.5, you can show that the solution to the recurrence $T(n) = 4T(n / 3) + n$ is $T(n) = \\Theta(n^{\\log_3 4})$. Show that a substitution proof with the assumption $T(n) \\le cn^{\\log_{3}4}$ fails. Then show how to subtract off a lower-order term to make the substitution proof work.   If we were to try a straight substitution proof, assuming that $T(n) \\le cn^{\\log_3 4}$, we would get stuck:  \\begin{align}\nT(n) & \\le 4(c(n / 3)^{\\log_3 4}) + n \\\\\n     & =   4c \\Big(\\frac{n^{\\log_3 4}}{4}\\Big) + n \\\\\n     & =   cn^{\\log_3 4} + n,\n\\end{align}  which is greater than $cn^{\\log_3 4}$. Instead, we subtract off a lower-order term and assume that $T(n) \\le cn^{\\log_3 4} - dn$. Now we have  \\begin{align}\nT(n) & \\le 4(c(n / 3)^{\\log_3 4} - dn / 3) + n \\\\\n     & =   4c \\Big(\\frac{cn^{\\log_3 4}}{4} - \\frac{dn}{3}\\Big) + n \\\\\n     & =   cn^{\\log_3 4} - \\frac{4}{3}dn + n,\n\\end{align}  which is less than or equal to $cn^{\\log_3 4} - dn$ if $d \\ge 3$.",
            "title": "4.3-7"
        },
        {
            "location": "/Chap04/4.3/#43-8",
            "text": "Using the master method in Section 4.5, you can show that the solution to the recurrence $T(n) = 4T(n / 2) + n^2$ is $T(n) = \\Theta(n^2)$. Show that a substitution proof with the assumption $T(n) \\le cn^2$ fails. Then show how to subtract off a lower-order term to make the substitution proof work.   First we guess $T(n) \\le cn^2$,  \\begin{align}\nT(n) & \\le 4c(n / 2)^2 + n^2 \\\\\n     & =   cn^2 + n^2 \\\\\n     & =   (c + 1)n^2.\n\\end{align}  Dead-end!  Let's guess $T(n) \\le cn^2 - n$,  \\begin{align}\nT(n) & \\le 4\\Big(c(n / 2)^2 - n / 2\\Big) + n \\\\\n     & =   cn^2 - 2n + n \\\\\n     & =   cn^2 - n.\n\\end{align}  We're done!",
            "title": "4.3-8"
        },
        {
            "location": "/Chap04/4.3/#43-9",
            "text": "Solve the recurrence $T(n) = 3T(\\sqrt n) + \\log n$ by making a change of variables. Your solution should be asymptotically tight. Do not worry about whether values are integral.   First,  \\begin{align}\n  T(n) & = 3T(\\sqrt n) + \\lg n & \\text{ let } m = \\lg n \\\\\nT(2^m) & = 3T(2^{m / 2}) + m \\\\\n  S(m) & = 3S(m / 2) + m.\n\\end{align}  Now we guess $S(m) \\le cm^{\\lg 3} + dm$,  \\begin{align}\nS(m) & \\le 3\\Big(c(m / 2)^{\\lg 3} + d(m / 2)\\Big) + m \\\\\n     & \\le cm^{\\lg 3} + (\\frac{3}{2}d + 1)m & (d \\le -2) \\\\\n     & \\le cm^{\\lg 3} + dm.\n\\end{align}  Then we guess $S(m) \\ge cm^{\\lg 3} + dm$,  \\begin{align}\nS(m) & \\ge 3\\Big(c(m / 2)^{\\lg 3} + d(m / 2)\\Big) + m \\\\\n     & \\ge cm^{\\lg 3} + (\\frac{3}{2}d + 1)m & (d \\ge -2) \\\\\n     & \\ge cm^{\\lg 3} + dm.\n\\end{align}  Thus,  \\begin{align}\nS(m) & = \\Theta(m^{\\lg 3}) \\\\\nT(n) & = \\Theta(\\lg^{\\lg 3}{n}).\n\\end{align}",
            "title": "4.3-9"
        },
        {
            "location": "/Chap04/4.4/",
            "text": "4.4-1\n\n\n\n\nUse a recursion tree to determine a good asymptotic upper bound on the recurrence $T(n) = 3T(\\lfloor n / 2 \\rfloor) + n$. Use the substitution method to verify your answer.\n\n\n\n\n\n\nThe subproblem size for a node at depth $i$ is $n / 2^i$, thus the tree has $\\log_2 n + 1$ levels and $3^{\\log_2 n} = n^{\\log_2 3}$ leaves.\n\nThe total cost over all nodes at depth $i$, for $i = 0, 1, 2, \\ldots, \\log_2 n - 1$, is $3^i(n / 2^i) = (3 / 2)^i$.\n\n\n\n\n\\begin{align}\nT(n) & = n + \\frac{3}{2}n +(\\frac{3}{2})^2 + \\cdots + (\\frac{3}{2})^{\\log_2 n - 1} + \\Theta(n^{\\log_2 3}) \\\\\n     & = \\sum_{i = 0}^{\\log_2 n - 1}(\\frac{3}{2})^i n + \\Theta(n^{\\log_2 3}) \\\\\n     & = \\frac{(3 / 2)^{\\log_2 n} - 1}{(3 / 2)-1}n + \\Theta(n^{\\log_2 3}) \\\\\n     & = 2[(3 / 2)^{\\log_2 n} - 1]n + \\Theta(n^{\\log_2 3}) \\\\\n     & = 2[n^{\\log_2(3 / 2)} - 1]n + \\Theta(n^{\\log_2 3}) \\\\\n     & < 2(n^{\\log_2 2} - 1)n + \\Theta(n^{\\log_2 3}) \\\\\n     & = 2(n - 1)n + \\Theta(n^{\\log_2 3}) \\\\\n     & = 2n^2 - 2n + \\Theta(n^{\\log_2 3}) \\\\\n     & = O(n^2).\n\\end{align}\n\n\n\n\nWe guess $T(n) \\le cn^2 - dn$,\n\n\n\n\n\\begin{align}\nT(n) & \\le 3 T(n / 2) + n \\\\\n     & \\le 3 c(n / 2)^2 - d(n / 2) + n \\\\\n     & =   (3 / 4) cn^2 - (d / 2)n + n \\\\\n     & \\le cn^2 - dn,\n\\end{align}\n\n\nwhere the last step holds for $d > -2$.\n\n\n4.4-2\n\n\n\n\nUse a reccursion tree to determine a good asymptotic upper bound on the recurrence $T(n) = T(n / 2) + n^2$. Use the substitution method to verify your answer.\n\n\n\n\n\n\nThe subproblem size for a node at depth $i$ is $n / 2^i$, thus the tree has $\\log_2 n + 1$ levels and $1^{\\log_2 n} = 1$ leaf.\n\n\n\n\nThe total cost over all nodes at depth $i$, for $i = 0, 1, 2, \\ldots, \\log_2{n - 1}$, is $1^i (n / 2^i)^2 = (1 / 4)^i n^2$.\n\n\n\\begin{align}\nT(n) & = \\sum_{i = 0}^{\\log_2 n-1}(\\frac{1}{4})^i n^2 + 1 \\\\\n     & < \\sum_{i = 0}^{\\infty}(\\frac{1}{4})^i n^2 + 1 \\\\\n     & = \\frac{1}{1 - 1 / 4} n^2 + 1 \\\\\n     & = \\Theta(n^2).\n\\end{align}\n\n\n\n\nWe guess $T(n) \\le cn^2$,\n\n\n\n\n\\begin{align}\nT(n) & \\le c(n / 2)^2 + n^2 \\\\\n     & =   cn^2 / 4 + n^2 \\\\\n     & =   (c / 4 + 1)n^2 \\\\\n     & \\le cn^2, \n\\end{align}\n\n\nwhere the last step holds for $c \\ge 4 / 3$.\n\n\n4.4-3\n\n\n\n\nUse a reccursion tree to determine a good asymptotic upper bound on the recurrence $T(n) = 4T(n / 2 + 2) + n$. Use the substitution method to verify your answer.\n\n\n\n\n\n\nThe subproblem size for a node at depth $i$ is $n / 2^i$, thus the tree has $\\log_2 n + 1$ levels and $4^{\\log_2 n} = n^2$ leaves.\n\n\n\n\nThe total cost over all nodes at depth $i$, for $i = 0, 1, 2, \\ldots,\\log_2 n - 1$, is $4^i(n / 2^i) = 2^i n$. \n\n\n\n\nWe guess $T(n) \\le cn^2 - 6n$,\n\n\n\n\n\\begin{align}\nT(n) & =   4T(n / 2 + 2) + n \\\\\n     & \\le 4c(n^2 / 4 + 2n + 4 - 3n - 12) + n \\\\\n     & =   cn^2 - 4cn - 32c + n \\\\\n     & \\le cn^2 - 6,\n\\end{align}\n\n\nwhere the last step holds for $c \\ge 0$.\n\n\n4.4-4\n\n\n\n\nUse a reccursion tree to determine a good asymptotic upper bound on the recurrence $T(n) = 2T(n - 1) + 1$. Use the substitution method to verify your answer.\n\n\n\n\n\n\nThe subproblem size for a node at depth $i$ is $n - i$, thus the tree has $n + 1$ levels and $2^n$ leaves.\n\nThe total cost over all nodes at depth $i$, for $i = 0, 1, 2, \\ldots, n - 1$, is $2^i(n - i)$.\n\n\n\n\n\\begin{align}\nT(n) & = \\sum_{i = 0}^{n - 1}2^i + \\Theta(2^n) \\\\\n     & = \\frac{2^n - 1}{2 - 1} + \\Theta(2^n) \\\\\n     & = 2^n - 1 + \\Theta(2^n) \\\\\n     & = \\Theta(2^n).\n\\end{align}\n\n\n\n\nWe guess $T(n) \\le c2^n + n$,\n\n\n\n\n\\begin{align}\nT(n) & \\le 2\\cdot c2^{n - 1} + (n - 1) + 1 \\\\\n     & =   c2^n + n \\\\\n     & =   O(2^n).\n\\end{align}\n\n\n4.4-5\n\n\n\n\nUse a reccursion tree to determine a good asymptotic upper bound on the recurrence $T(n) = T(n - 1) + T(n / 2) + n$. Use the substitution method to verify your answer.\n\n\n\n\nThis is a curious one. The tree makes it look like it is exponential in the worst case. The tree is not full (not a complete binary tree of height $n$), but it is not polynomial either. It's easy to show $O(2^n)$ and $\\Omega(n^2)$.\n\n\n\n\nWe guess $T(n) \\le c2^n - 4n$,\n\n\n\n\n\\begin{align}\nT(n) & \\le c2^{n - 1} - 4(n - 1) + c2^{n / 2} - 4n / 2 + n \\\\\n     & =   c(2^{n - 1} + 2^{n / 2}) - 5n + 4 & (n \\ge 1 / 4) \\\\\n     & \\le c(2^{n - 1} + 2^{n / 2}) - 4n & (n \\ge 2)\\\\\n     & =   c(2^{n - 1} + 2^{n - 1}) - 4n \\\\\n     & \\le c2^n - 4n \\\\ & = O(2^n).\n\\end{align}\n\n\n\n\nWe guess $T(n) \\ge cn^2$,\n\n\n\n\n\\begin{align}\nT(n) & \\ge c(n - 1)^2 + c(n / 2)^2 + n \\\\\n     & =   cn^2 - 2cn + c + cn^2 / 4 + n \\\\\n     & =   (5 / 4)cn^2 + (1 - 2c)n + c \\\\\n     & \\ge cn^2 + (1 - 2c)n + c & (c \\le 1 / 2) \\\\\n     & \\ge cn^2 \\\\\n     & =   O(n^2).\n\\end{align}\n\n\n4.4-6\n\n\n\n\nArgue that the solution to the recurrence $T(n) = T(n / 3) + T(2n / 3) + cn$, where $c$ is a constant, is $\\Omega(n\\lg n)$ by appealing to the recurrsion tree.\n\n\n\n\nThe shortest path from the root to a leaf in the recursion tree is $n \\to (1 / 3)n \\to (1 / 3)^2 n \\to \\cdots \\to 1$. Since $(1 / 3)^k n = 1$ when $k = \\log_3 n$, the height of the part of the tree in which every node has two children is $log_3 n$. Since the values at each of these levels of the tree add up to $n$, the solution to the recurrence is at least $n \\log_3 n$ = $\\Omega(n\\lg n)$.\n\n\n4.4-7\n\n\n\n\nDraw the recursion tree for $T(n) = 4T(\\lfloor n / 2 \\rfloor) + cn$, where $c$ is a constant, and provide a tight asymptotic bound on its solution. Verify your answer with the substitution method.\n\n\n\n\n\n\nThe subproblem size for a node at depth $i$ is $n / 2^i$, thus the tree has $\\log_2 n + 1$ levels and $4^{\\log_2 n} = n^{\\log_2 4} = n^2$ leaves.\n\n\n\n\nThe total cost over all nodes at depth $i$, for $i = 0, 1, 2, \\ldots, \\log_2 n - 1$, is $4^i(cn / 2^i) = 2^icn$.\n\n\n\\begin{align}\nT(n) & = \\sum_{i = 0}^{\\log_2 n- 1}2^icn + \\Theta(n^2) \\\\\n     & = \\frac{2^{\\log_2 n} - 1}{2 - 1}cn + \\Theta(n^2) \\\\\n     & = \\Theta(n^2).\n\\end{align}\n\n\n\n\nFor $O(n^2)$, we guess $T(n) \\le cn^2 + 2cn$,\n\n\n\n\n\\begin{align}\nT(n) & \\le 4c(n / 2)^2 + 2c(n / 2) + cn \\\\\n     & =   cn^2 + 2cn.\n\\end{align}\n\n\n\n\nFor $\\Omega(n^2)$, we guess $T(n) \\ge cn^2 + 2cn$,\n\n\n\n\n\\begin{align}\nT(n) & \\ge 4c(n / 2)^2 + 2c(n / 2) + cn \\\\\n     & =   cn^2 + 2cn.\n\\end{align}\n\n\n4.4-8\n\n\n\n\nUse a recursion tree to give an asymptotically tight solution to the recurrence $T(n) = T(n - a) + T(a) + cn$, where $a \\ge 1$ and $c > 0$ are constants.\n\n\n\n\n\n\nThe tree has $n / a + 1$ levels.\n\n\n\n\nThe total cost over all nodes at depth $i$, for $i = 0, 1, 2, \\ldots, n / a - 1$, is $c(n - ia)$.\n\n\n\\begin{align}\nT(n) & = \\sum_{i = 0}^{n / a}c(n - ia) + (n / a)ca \\\\\n     & = \\sum_{i = 0}^{n / a}cn - \\sum_{i = 0}^{n / a}cia + (n / a)ca \\\\\n     & = cn^2/a - \\Theta(n) + \\Theta(n) \\\\\n     & = \\Theta(n^2).\n\\end{align}\n\n\n\n\nFor $O(n^2)$, we guess $T(n) \\le cn^2$,\n\n\n\n\n\\begin{align}\nT(n) & \\le c(n - a)^2 + ca + cn \\\\\n     & \\le cn^2 - 2can + ca + cn \\\\\n     & \\le cn^2 - c(2an - a - n) & (a > 1 / 2, n > 2a) \\\\\n     & \\le cn^2 - cn \\\\\n     & \\le cn^2 \\\\\n     & = \\Theta(n^2).\n\\end{align}\n\n\n\n\nFor $\\Omega(n^2)$, we guess $T(n) \\ge cn^2$,\n\n\n\n\n\\begin{align}\nT(n) & \\ge c(n - a)^2 + ca + cn \\\\\n     & \\ge cn^2 - 2acn + ca + cn \\\\\n     & \\ge cn^2 - c(2an - a - n) & (a < 1 / 2, n > 2a) \\\\\n     & \\ge cn^2 + cn \\\\\n     & \\ge cn^2 \\\\\n     & =   \\Theta(n^2).\n\\end{align}\n\n\n4.4-9\n\n\n\n\nUse a recursion tree to give an asymptotically tight solution to the recurrence $T(n) = T(\\alpha n) + T((1 - \\alpha)n) + cn$, where $\\alpha$ is a constant in the range $0 < \\alpha < 1$, and $c > 0$ is also a constant.\n\n\n\n\n$T(n) = T(\\alpha n) + T((1 - \\alpha)n) + cn$\n\n\nWe saw the solution to the recurrence $T(n) = T(n / 3) + T(2n / 3) + cn$ in the text. This recurrence can be similarly solved.\n\n\nWithout loss of generality, let $\\alpha \\ge 1 - \\alpha$, so that $0 < 1 - \\alpha \\le 1 / 2$ and $1 / 2 \\le \\alpha < 1$.\n\n\nThe recursion tree is full for $\\log_{1 / (1 - \\alpha)} n$ levels, each contributing $cn$, so we guess \n\n\n$$\\Omega(n\\log_{1 / (1 - \\alpha)} n) = \\Omega(n\\lg n).$$\n\n\nIt has $\\log_{1 / \\alpha} n$ levels, each contributing $\\le cn$, so we guess\n\n\n$$O(n\\log_{1 / \\alpha} n) = O(n\\lg n).$$\n\n\nNow we show that $T(n) = \\Theta(n\\lg n)$ by substitution. To prove the upper bound, we need to show that $T(n) \\le dn\\lg n$ for a suitable constant $d > 0$.\n\n\n\\begin{align}\nT(n) & =   T(\\alpha n) + T((1 - \\alpha)n) + cn \\\\\n     & \\le d\\alpha n\\lg(\\alpha n) + d(1 - \\alpha)n\\lg((1 - \\alpha)n) + cn \\\\\n     & =   d\\alpha n\\lg\\alpha + d\\alpha n\\lg n + d(1 - \\alpha)n\\lg(1 - \\alpha) + d(1 - \\alpha)n\\lg n + cn \\\\\n     & =   dn\\lg n + dn(\\alpha \\lg\\alpha + (1 - \\alpha) \\lg(1 - \\alpha)) + cn \\\\\n     & \\le dn\\lg n,\n\\end{align}\n\n\nif $dn(\\alpha \\lg\\alpha + (1 - \\alpha) \\lg(1 - \\alpha)) + cn \\le 0$. This condition is equivalent\n\n\n$$d(\\alpha \\lg\\alpha + (1 - \\alpha) \\lg(1 - \\alpha)) \\le -c.$$\n\n\nSince $1 / 2 \\le \\alpha < 1$ and $0 < 1 - \\alpha \\le 1 / 2$, we have that $\\lg\\alpha < 0$ and $\\lg(1 - \\alpha ) < 0$. Thus, $\\alpha \\lg\\alpha + (1 - \\alpha ) \\lg(1 - \\alpha ) < 0$, so that when we multiply both sides of the inequality by this factor, we need to reverse the inequality:\n\n\n$$d \\ge \\frac{-c}{\\alpha\\lg\\alpha + (1 - \\alpha)\\lg(1 - \\alpha)}$$\n\n\nor\n\n\n$$d \\ge \\frac{c}{-\\alpha\\lg\\alpha + -(1 - \\alpha)\\lg(1 - \\alpha)}.$$\n\n\nThe fraction on the right-hand side is a positive constant, and so it suffices to pick any value of $d$ that is greater than or equal to this fraction.\n\n\nTo prove the lower bound, we need to show that $T(n) \\ge dn\\lg n$ for a suitable constant $d > 0$. We can use the same proof as for the upper bound, substituting $\\ge$ for $\\le$, and we get the requirement that\n\n\n$$0 < d \\le \\frac{c}{-\\alpha \\lg\\alpha - (1 - \\alpha ) \\lg(1 - \\alpha )}.$$\n\n\nTherefore, $T(n) = \\Theta(n\\lg n)$.",
            "title": "4.4 The recursion-tree method for solving recurrences"
        },
        {
            "location": "/Chap04/4.4/#44-1",
            "text": "Use a recursion tree to determine a good asymptotic upper bound on the recurrence $T(n) = 3T(\\lfloor n / 2 \\rfloor) + n$. Use the substitution method to verify your answer.    The subproblem size for a node at depth $i$ is $n / 2^i$, thus the tree has $\\log_2 n + 1$ levels and $3^{\\log_2 n} = n^{\\log_2 3}$ leaves. \nThe total cost over all nodes at depth $i$, for $i = 0, 1, 2, \\ldots, \\log_2 n - 1$, is $3^i(n / 2^i) = (3 / 2)^i$.   \\begin{align}\nT(n) & = n + \\frac{3}{2}n +(\\frac{3}{2})^2 + \\cdots + (\\frac{3}{2})^{\\log_2 n - 1} + \\Theta(n^{\\log_2 3}) \\\\\n     & = \\sum_{i = 0}^{\\log_2 n - 1}(\\frac{3}{2})^i n + \\Theta(n^{\\log_2 3}) \\\\\n     & = \\frac{(3 / 2)^{\\log_2 n} - 1}{(3 / 2)-1}n + \\Theta(n^{\\log_2 3}) \\\\\n     & = 2[(3 / 2)^{\\log_2 n} - 1]n + \\Theta(n^{\\log_2 3}) \\\\\n     & = 2[n^{\\log_2(3 / 2)} - 1]n + \\Theta(n^{\\log_2 3}) \\\\\n     & < 2(n^{\\log_2 2} - 1)n + \\Theta(n^{\\log_2 3}) \\\\\n     & = 2(n - 1)n + \\Theta(n^{\\log_2 3}) \\\\\n     & = 2n^2 - 2n + \\Theta(n^{\\log_2 3}) \\\\\n     & = O(n^2).\n\\end{align}   We guess $T(n) \\le cn^2 - dn$,   \\begin{align}\nT(n) & \\le 3 T(n / 2) + n \\\\\n     & \\le 3 c(n / 2)^2 - d(n / 2) + n \\\\\n     & =   (3 / 4) cn^2 - (d / 2)n + n \\\\\n     & \\le cn^2 - dn,\n\\end{align}  where the last step holds for $d > -2$.",
            "title": "4.4-1"
        },
        {
            "location": "/Chap04/4.4/#44-2",
            "text": "Use a reccursion tree to determine a good asymptotic upper bound on the recurrence $T(n) = T(n / 2) + n^2$. Use the substitution method to verify your answer.    The subproblem size for a node at depth $i$ is $n / 2^i$, thus the tree has $\\log_2 n + 1$ levels and $1^{\\log_2 n} = 1$ leaf.   The total cost over all nodes at depth $i$, for $i = 0, 1, 2, \\ldots, \\log_2{n - 1}$, is $1^i (n / 2^i)^2 = (1 / 4)^i n^2$.  \\begin{align}\nT(n) & = \\sum_{i = 0}^{\\log_2 n-1}(\\frac{1}{4})^i n^2 + 1 \\\\\n     & < \\sum_{i = 0}^{\\infty}(\\frac{1}{4})^i n^2 + 1 \\\\\n     & = \\frac{1}{1 - 1 / 4} n^2 + 1 \\\\\n     & = \\Theta(n^2).\n\\end{align}   We guess $T(n) \\le cn^2$,   \\begin{align}\nT(n) & \\le c(n / 2)^2 + n^2 \\\\\n     & =   cn^2 / 4 + n^2 \\\\\n     & =   (c / 4 + 1)n^2 \\\\\n     & \\le cn^2, \n\\end{align}  where the last step holds for $c \\ge 4 / 3$.",
            "title": "4.4-2"
        },
        {
            "location": "/Chap04/4.4/#44-3",
            "text": "Use a reccursion tree to determine a good asymptotic upper bound on the recurrence $T(n) = 4T(n / 2 + 2) + n$. Use the substitution method to verify your answer.    The subproblem size for a node at depth $i$ is $n / 2^i$, thus the tree has $\\log_2 n + 1$ levels and $4^{\\log_2 n} = n^2$ leaves.   The total cost over all nodes at depth $i$, for $i = 0, 1, 2, \\ldots,\\log_2 n - 1$, is $4^i(n / 2^i) = 2^i n$.    We guess $T(n) \\le cn^2 - 6n$,   \\begin{align}\nT(n) & =   4T(n / 2 + 2) + n \\\\\n     & \\le 4c(n^2 / 4 + 2n + 4 - 3n - 12) + n \\\\\n     & =   cn^2 - 4cn - 32c + n \\\\\n     & \\le cn^2 - 6,\n\\end{align}  where the last step holds for $c \\ge 0$.",
            "title": "4.4-3"
        },
        {
            "location": "/Chap04/4.4/#44-4",
            "text": "Use a reccursion tree to determine a good asymptotic upper bound on the recurrence $T(n) = 2T(n - 1) + 1$. Use the substitution method to verify your answer.    The subproblem size for a node at depth $i$ is $n - i$, thus the tree has $n + 1$ levels and $2^n$ leaves. \nThe total cost over all nodes at depth $i$, for $i = 0, 1, 2, \\ldots, n - 1$, is $2^i(n - i)$.   \\begin{align}\nT(n) & = \\sum_{i = 0}^{n - 1}2^i + \\Theta(2^n) \\\\\n     & = \\frac{2^n - 1}{2 - 1} + \\Theta(2^n) \\\\\n     & = 2^n - 1 + \\Theta(2^n) \\\\\n     & = \\Theta(2^n).\n\\end{align}   We guess $T(n) \\le c2^n + n$,   \\begin{align}\nT(n) & \\le 2\\cdot c2^{n - 1} + (n - 1) + 1 \\\\\n     & =   c2^n + n \\\\\n     & =   O(2^n).\n\\end{align}",
            "title": "4.4-4"
        },
        {
            "location": "/Chap04/4.4/#44-5",
            "text": "Use a reccursion tree to determine a good asymptotic upper bound on the recurrence $T(n) = T(n - 1) + T(n / 2) + n$. Use the substitution method to verify your answer.   This is a curious one. The tree makes it look like it is exponential in the worst case. The tree is not full (not a complete binary tree of height $n$), but it is not polynomial either. It's easy to show $O(2^n)$ and $\\Omega(n^2)$.   We guess $T(n) \\le c2^n - 4n$,   \\begin{align}\nT(n) & \\le c2^{n - 1} - 4(n - 1) + c2^{n / 2} - 4n / 2 + n \\\\\n     & =   c(2^{n - 1} + 2^{n / 2}) - 5n + 4 & (n \\ge 1 / 4) \\\\\n     & \\le c(2^{n - 1} + 2^{n / 2}) - 4n & (n \\ge 2)\\\\\n     & =   c(2^{n - 1} + 2^{n - 1}) - 4n \\\\\n     & \\le c2^n - 4n \\\\ & = O(2^n).\n\\end{align}   We guess $T(n) \\ge cn^2$,   \\begin{align}\nT(n) & \\ge c(n - 1)^2 + c(n / 2)^2 + n \\\\\n     & =   cn^2 - 2cn + c + cn^2 / 4 + n \\\\\n     & =   (5 / 4)cn^2 + (1 - 2c)n + c \\\\\n     & \\ge cn^2 + (1 - 2c)n + c & (c \\le 1 / 2) \\\\\n     & \\ge cn^2 \\\\\n     & =   O(n^2).\n\\end{align}",
            "title": "4.4-5"
        },
        {
            "location": "/Chap04/4.4/#44-6",
            "text": "Argue that the solution to the recurrence $T(n) = T(n / 3) + T(2n / 3) + cn$, where $c$ is a constant, is $\\Omega(n\\lg n)$ by appealing to the recurrsion tree.   The shortest path from the root to a leaf in the recursion tree is $n \\to (1 / 3)n \\to (1 / 3)^2 n \\to \\cdots \\to 1$. Since $(1 / 3)^k n = 1$ when $k = \\log_3 n$, the height of the part of the tree in which every node has two children is $log_3 n$. Since the values at each of these levels of the tree add up to $n$, the solution to the recurrence is at least $n \\log_3 n$ = $\\Omega(n\\lg n)$.",
            "title": "4.4-6"
        },
        {
            "location": "/Chap04/4.4/#44-7",
            "text": "Draw the recursion tree for $T(n) = 4T(\\lfloor n / 2 \\rfloor) + cn$, where $c$ is a constant, and provide a tight asymptotic bound on its solution. Verify your answer with the substitution method.    The subproblem size for a node at depth $i$ is $n / 2^i$, thus the tree has $\\log_2 n + 1$ levels and $4^{\\log_2 n} = n^{\\log_2 4} = n^2$ leaves.   The total cost over all nodes at depth $i$, for $i = 0, 1, 2, \\ldots, \\log_2 n - 1$, is $4^i(cn / 2^i) = 2^icn$.  \\begin{align}\nT(n) & = \\sum_{i = 0}^{\\log_2 n- 1}2^icn + \\Theta(n^2) \\\\\n     & = \\frac{2^{\\log_2 n} - 1}{2 - 1}cn + \\Theta(n^2) \\\\\n     & = \\Theta(n^2).\n\\end{align}   For $O(n^2)$, we guess $T(n) \\le cn^2 + 2cn$,   \\begin{align}\nT(n) & \\le 4c(n / 2)^2 + 2c(n / 2) + cn \\\\\n     & =   cn^2 + 2cn.\n\\end{align}   For $\\Omega(n^2)$, we guess $T(n) \\ge cn^2 + 2cn$,   \\begin{align}\nT(n) & \\ge 4c(n / 2)^2 + 2c(n / 2) + cn \\\\\n     & =   cn^2 + 2cn.\n\\end{align}",
            "title": "4.4-7"
        },
        {
            "location": "/Chap04/4.4/#44-8",
            "text": "Use a recursion tree to give an asymptotically tight solution to the recurrence $T(n) = T(n - a) + T(a) + cn$, where $a \\ge 1$ and $c > 0$ are constants.    The tree has $n / a + 1$ levels.   The total cost over all nodes at depth $i$, for $i = 0, 1, 2, \\ldots, n / a - 1$, is $c(n - ia)$.  \\begin{align}\nT(n) & = \\sum_{i = 0}^{n / a}c(n - ia) + (n / a)ca \\\\\n     & = \\sum_{i = 0}^{n / a}cn - \\sum_{i = 0}^{n / a}cia + (n / a)ca \\\\\n     & = cn^2/a - \\Theta(n) + \\Theta(n) \\\\\n     & = \\Theta(n^2).\n\\end{align}   For $O(n^2)$, we guess $T(n) \\le cn^2$,   \\begin{align}\nT(n) & \\le c(n - a)^2 + ca + cn \\\\\n     & \\le cn^2 - 2can + ca + cn \\\\\n     & \\le cn^2 - c(2an - a - n) & (a > 1 / 2, n > 2a) \\\\\n     & \\le cn^2 - cn \\\\\n     & \\le cn^2 \\\\\n     & = \\Theta(n^2).\n\\end{align}   For $\\Omega(n^2)$, we guess $T(n) \\ge cn^2$,   \\begin{align}\nT(n) & \\ge c(n - a)^2 + ca + cn \\\\\n     & \\ge cn^2 - 2acn + ca + cn \\\\\n     & \\ge cn^2 - c(2an - a - n) & (a < 1 / 2, n > 2a) \\\\\n     & \\ge cn^2 + cn \\\\\n     & \\ge cn^2 \\\\\n     & =   \\Theta(n^2).\n\\end{align}",
            "title": "4.4-8"
        },
        {
            "location": "/Chap04/4.4/#44-9",
            "text": "Use a recursion tree to give an asymptotically tight solution to the recurrence $T(n) = T(\\alpha n) + T((1 - \\alpha)n) + cn$, where $\\alpha$ is a constant in the range $0 < \\alpha < 1$, and $c > 0$ is also a constant.   $T(n) = T(\\alpha n) + T((1 - \\alpha)n) + cn$  We saw the solution to the recurrence $T(n) = T(n / 3) + T(2n / 3) + cn$ in the text. This recurrence can be similarly solved.  Without loss of generality, let $\\alpha \\ge 1 - \\alpha$, so that $0 < 1 - \\alpha \\le 1 / 2$ and $1 / 2 \\le \\alpha < 1$.  The recursion tree is full for $\\log_{1 / (1 - \\alpha)} n$ levels, each contributing $cn$, so we guess   $$\\Omega(n\\log_{1 / (1 - \\alpha)} n) = \\Omega(n\\lg n).$$  It has $\\log_{1 / \\alpha} n$ levels, each contributing $\\le cn$, so we guess  $$O(n\\log_{1 / \\alpha} n) = O(n\\lg n).$$  Now we show that $T(n) = \\Theta(n\\lg n)$ by substitution. To prove the upper bound, we need to show that $T(n) \\le dn\\lg n$ for a suitable constant $d > 0$.  \\begin{align}\nT(n) & =   T(\\alpha n) + T((1 - \\alpha)n) + cn \\\\\n     & \\le d\\alpha n\\lg(\\alpha n) + d(1 - \\alpha)n\\lg((1 - \\alpha)n) + cn \\\\\n     & =   d\\alpha n\\lg\\alpha + d\\alpha n\\lg n + d(1 - \\alpha)n\\lg(1 - \\alpha) + d(1 - \\alpha)n\\lg n + cn \\\\\n     & =   dn\\lg n + dn(\\alpha \\lg\\alpha + (1 - \\alpha) \\lg(1 - \\alpha)) + cn \\\\\n     & \\le dn\\lg n,\n\\end{align}  if $dn(\\alpha \\lg\\alpha + (1 - \\alpha) \\lg(1 - \\alpha)) + cn \\le 0$. This condition is equivalent  $$d(\\alpha \\lg\\alpha + (1 - \\alpha) \\lg(1 - \\alpha)) \\le -c.$$  Since $1 / 2 \\le \\alpha < 1$ and $0 < 1 - \\alpha \\le 1 / 2$, we have that $\\lg\\alpha < 0$ and $\\lg(1 - \\alpha ) < 0$. Thus, $\\alpha \\lg\\alpha + (1 - \\alpha ) \\lg(1 - \\alpha ) < 0$, so that when we multiply both sides of the inequality by this factor, we need to reverse the inequality:  $$d \\ge \\frac{-c}{\\alpha\\lg\\alpha + (1 - \\alpha)\\lg(1 - \\alpha)}$$  or  $$d \\ge \\frac{c}{-\\alpha\\lg\\alpha + -(1 - \\alpha)\\lg(1 - \\alpha)}.$$  The fraction on the right-hand side is a positive constant, and so it suffices to pick any value of $d$ that is greater than or equal to this fraction.  To prove the lower bound, we need to show that $T(n) \\ge dn\\lg n$ for a suitable constant $d > 0$. We can use the same proof as for the upper bound, substituting $\\ge$ for $\\le$, and we get the requirement that  $$0 < d \\le \\frac{c}{-\\alpha \\lg\\alpha - (1 - \\alpha ) \\lg(1 - \\alpha )}.$$  Therefore, $T(n) = \\Theta(n\\lg n)$.",
            "title": "4.4-9"
        },
        {
            "location": "/Chap04/4.5/",
            "text": "4.5-1\n\n\n\n\nUse the master method to give tight asymptotic bounds for the following recurrences:\n\n\na.\n $T(n) = 2T(n / 4) + 1$.\n\n\nb.\n $T(n) = 2T(n / 4) + \\sqrt n$.\n\n\nc.\n $T(n) = 2T(n / 4) + n$.\n\n\nd.\n $T(n) = 2T(n / 4) + n^2$.\n\n\n\n\na.\n $\\Theta(n^{\\log_4 2}) = \\Theta(\\sqrt n)$.\n\n\nb.\n $\\Theta(n^{\\log_4 2}\\lg n) = \\Theta(\\sqrt n\\lg n)$.\n\n\nc.\n $\\Theta(n)$.\n\n\nd.\n $\\Theta(n^2)$.\n\n\n4.5-2\n\n\n\n\nProfessor Caesar wishes to develop a matrix-multiplication algorithm that is asymptotically faster than Strassen's algorithm. His algorithm will use the divide-and-conquer method, dividing each matrix into pieces of size $n / 4 \\times n / 4$, and the divide and combine steps together will take $\\Theta(n^2)$ time. He needs to determine how many subproblems his algorithm has to create in order to beat Strassen's algorithm. If his algorithm creates $a$ subproblems, then the recurrence for the running time $T(n)$ becomes $T(n) = aT(n / 4) + \\Theta(n^2)$. What is the largest integer value of $a$ for which Professor Caesar's algorithm would be asymptotically faster than Strassen's algorithm?\n\n\n\n\nWe need to find the largest integer $a$ such that $\\log_4 a < \\lg 7$. The answer is $a = 48$.\n\n\n4.5.3\n\n\n\n\nUse the master method to show that the solution to the binary-search recurrence $T(n) = T(n / 2) + \\Theta(1)$ is $T(n) = \\Theta(\\lg n)$. (See exercise 2.3-5 for a description of binary search.)\n\n\n\n\n\\begin{align}\n   a & = 1, b = 2, \\\\\nf(n) & = \\Theta(n^{\\log_2 1}) = \\Theta(1), \\\\\nT(n) & = \\Theta(\\lg n).\n\\end{align}\n\n\n4.5-4\n\n\n\n\nCan the master method be applied to the recurrence $T(n) = 4T(n / 2) + n^2\\lg n$? Why or why not? Give an asymptotic upper bound for this recurrence.\n\n\n\n\nWith $a = 4$, $b = 2$, we have $f(n) = n^2\\lg n \\ne O(n^{2 - \\epsilon}) \\ne \\Omega(n^{2 - \\epsilon})$, so we cannot apply the master method.\n\n\nWe guess $T(n) \\le cn^2\\lg^2 n$,\n\n\n\\begin{align}\nT(n) & \\le 4T(n / 2) + n^2\\lg n \\\\\n     & =   4c(n / 2)^2\\lg^2(n / 2) + n^2\\lg n \\\\\n     & =   cn^2\\lg(n / 2)\\lg n - cn^2\\lg(n / 2)\\lg 2 + n^2\\lg n \\\\\n     & =   cn^2\\lg^2 n - cn^2\\lg n\\lg 2 - cn^2\\lg(n / 2) + n^2\\lg n \\\\\n     & =   cn^2\\lg^2 n + (1 - c)n^2\\lg n - cn^2\\lg(n / 2) & (c > 1) \\\\\n     & \\le cn^2\\lg^2 n - cn^2\\lg(n / 2) \\\\\n     & \\le cn^2\\lg^2 n.\n\\end{align}\n\n\nExercise 4.6-2 is the general case for this.\n\n\n4.5-5 $\\star$\n\n\n\n\nConsider the regularity condition $af(n / b) \\ge cf(n)$ for some constant $c < 1$, which is part of case 3 of the master theorem. Give an example of constants $a \\ge 1$ and $b > 1$ and a function $f(n)$ that satisfies all the conditions in case 3 of the master theorem, except the regularity condition.\n\n\n\n\n$a = 1$, $b = 2$ and $f(n) = n(2 - \\cos n)$.\n\n\nIf we try to prove it,\n\n\n\\begin{align}\n\\frac{n}{2}(2 - \\cos\\frac{n}{2}) & <   cn \\\\\n        \\frac{1 - cos(n / 2)}{2} & <   c \\\\\n        1 - \\frac{cos(n / 2)}{2} & \\le c.\n\\end{align}\n\n\nSince $\\min\\cos(n / 2) = -1$, this implies that $c \\ge 3 / 2$. But $c < 1$.",
            "title": "4.5 The master method for solving recurrences"
        },
        {
            "location": "/Chap04/4.5/#45-1",
            "text": "Use the master method to give tight asymptotic bounds for the following recurrences:  a.  $T(n) = 2T(n / 4) + 1$.  b.  $T(n) = 2T(n / 4) + \\sqrt n$.  c.  $T(n) = 2T(n / 4) + n$.  d.  $T(n) = 2T(n / 4) + n^2$.   a.  $\\Theta(n^{\\log_4 2}) = \\Theta(\\sqrt n)$.  b.  $\\Theta(n^{\\log_4 2}\\lg n) = \\Theta(\\sqrt n\\lg n)$.  c.  $\\Theta(n)$.  d.  $\\Theta(n^2)$.",
            "title": "4.5-1"
        },
        {
            "location": "/Chap04/4.5/#45-2",
            "text": "Professor Caesar wishes to develop a matrix-multiplication algorithm that is asymptotically faster than Strassen's algorithm. His algorithm will use the divide-and-conquer method, dividing each matrix into pieces of size $n / 4 \\times n / 4$, and the divide and combine steps together will take $\\Theta(n^2)$ time. He needs to determine how many subproblems his algorithm has to create in order to beat Strassen's algorithm. If his algorithm creates $a$ subproblems, then the recurrence for the running time $T(n)$ becomes $T(n) = aT(n / 4) + \\Theta(n^2)$. What is the largest integer value of $a$ for which Professor Caesar's algorithm would be asymptotically faster than Strassen's algorithm?   We need to find the largest integer $a$ such that $\\log_4 a < \\lg 7$. The answer is $a = 48$.",
            "title": "4.5-2"
        },
        {
            "location": "/Chap04/4.5/#453",
            "text": "Use the master method to show that the solution to the binary-search recurrence $T(n) = T(n / 2) + \\Theta(1)$ is $T(n) = \\Theta(\\lg n)$. (See exercise 2.3-5 for a description of binary search.)   \\begin{align}\n   a & = 1, b = 2, \\\\\nf(n) & = \\Theta(n^{\\log_2 1}) = \\Theta(1), \\\\\nT(n) & = \\Theta(\\lg n).\n\\end{align}",
            "title": "4.5.3"
        },
        {
            "location": "/Chap04/4.5/#45-4",
            "text": "Can the master method be applied to the recurrence $T(n) = 4T(n / 2) + n^2\\lg n$? Why or why not? Give an asymptotic upper bound for this recurrence.   With $a = 4$, $b = 2$, we have $f(n) = n^2\\lg n \\ne O(n^{2 - \\epsilon}) \\ne \\Omega(n^{2 - \\epsilon})$, so we cannot apply the master method.  We guess $T(n) \\le cn^2\\lg^2 n$,  \\begin{align}\nT(n) & \\le 4T(n / 2) + n^2\\lg n \\\\\n     & =   4c(n / 2)^2\\lg^2(n / 2) + n^2\\lg n \\\\\n     & =   cn^2\\lg(n / 2)\\lg n - cn^2\\lg(n / 2)\\lg 2 + n^2\\lg n \\\\\n     & =   cn^2\\lg^2 n - cn^2\\lg n\\lg 2 - cn^2\\lg(n / 2) + n^2\\lg n \\\\\n     & =   cn^2\\lg^2 n + (1 - c)n^2\\lg n - cn^2\\lg(n / 2) & (c > 1) \\\\\n     & \\le cn^2\\lg^2 n - cn^2\\lg(n / 2) \\\\\n     & \\le cn^2\\lg^2 n.\n\\end{align}  Exercise 4.6-2 is the general case for this.",
            "title": "4.5-4"
        },
        {
            "location": "/Chap04/4.5/#45-5-star",
            "text": "Consider the regularity condition $af(n / b) \\ge cf(n)$ for some constant $c < 1$, which is part of case 3 of the master theorem. Give an example of constants $a \\ge 1$ and $b > 1$ and a function $f(n)$ that satisfies all the conditions in case 3 of the master theorem, except the regularity condition.   $a = 1$, $b = 2$ and $f(n) = n(2 - \\cos n)$.  If we try to prove it,  \\begin{align}\n\\frac{n}{2}(2 - \\cos\\frac{n}{2}) & <   cn \\\\\n        \\frac{1 - cos(n / 2)}{2} & <   c \\\\\n        1 - \\frac{cos(n / 2)}{2} & \\le c.\n\\end{align}  Since $\\min\\cos(n / 2) = -1$, this implies that $c \\ge 3 / 2$. But $c < 1$.",
            "title": "4.5-5 $\\star$"
        },
        {
            "location": "/Chap04/4.6/",
            "text": "4.6-1 $\\star$\n\n\n\n\nGive a simple and exact expression for $n_j$ in equation $\\text{(4.27)}$ for the case in which $b$ is a positive integer instead of an arbitrary real number.\n\n\n\n\n$n_j = \\lceil n / b^j \\rceil$.\n\n\n4.6.2 $\\star$\n\n\n\n\nShow that if $f(n) = \\Theta(n^{\\log_b a}\\lg^k{n})$, where $k \\ge 0$, then the master recurrence has solution $T(n) = \\Theta(n^{\\log_b a}\\lg^{k + 1}n)$. For simplicity, confine your analysis to exact powers of $b$.\n\n\n\n\n\\begin{align}\n            g(n) & = \\sum_{j = 0}^{\\log_b n - 1} a^j f(n / b^j) \\\\\n      f(n / b^j) & = \\Theta\\Big((n / b^j)^{\\log_b a} \\lg^k(n / b^j) \\Big) \\\\\n            g(n) & = \\Theta\\Big(\\sum_{j = 0}^{\\log_b n - 1}a^j\\big(\\frac{n}{b^j}\\big)^{\\log_b a}\\lg^k\\big(\\frac{n}{b^j}\\big)\\Big) \\\\\n                 & = \\Theta(A) \\\\\n               A & = \\sum_{j = 0}^{\\log_b n - 1} a^j \\big(\\frac{n}{b^j}\\big)^{\\log_b a}\\lg^k\\frac{n}{b^j} \\\\\n                 & = n^{\\log_b a} \\sum_{j = 0}^{\\log_b n - 1}\\Big(\\frac{a}{b^{\\log_b a}}\\Big)^j\\lg^k\\frac{n}{b^j} \\\\\n                 & = n^{\\log_b a}\\sum_{j = 0}^{\\log_b n - 1}\\lg^k\\frac{n}{b^j} \\\\\n                 & = n^{\\log_b a} B \\\\\n\\lg^k\\frac{n}{d} & = (\\lg n - \\lg d)^k = \\lg^k{n} + o(\\lg^k{n}) \\\\\n               B & = \\sum_{j = 0}^{\\log_b n - 1}\\lg^k\\frac{n}{b^j} \\\\\n                 & = \\sum_{j = 0}^{\\log_b n - 1}\\Big(\\lg^k{n} - o(\\lg^k{n})\\Big) \\\\\n                 & = \\log_b n\\lg^k{n} + \\log_b n \\cdot o(\\lg^k{n}) \\\\\n                 & = \\Theta(\\log_b n\\lg^k{n}) \\\\\n                 & = \\Theta(\\lg^{k + 1}{n}) \\\\\n            g(n) & = \\Theta(A) \\\\\n                 & = \\Theta(n^{\\log_b a}B) \\\\\n                 & = \\Theta(n^{\\log_b a}\\lg^{k + 1}{n}). \n\\end{align}\n\n\n4.6.3 $\\star$\n\n\n\n\nShow that case 3 of the master method is overstated, in the sense that the regularity condition $af(n / b) \\le cf(n)$ for some constant $c < 1$ implies that there exists a constant $\\epsilon > 0$ such that $f(n) = \\Omega(n^{\\log_b a + \\epsilon})$.\n\n\n\n\n\\begin{align}\n      af(n / b) & \\le cf(n) \\\\\n\\alpha f(n / b) & \\le f(n), \\alpha = a / c \\\\\n  \\alpha f(n)   & \\le f(nb) \\\\\n\\alpha^i f(1)   & \\le f(b^i) \\\\\n\\end{align}\n\\begin{align}\n   n = b^i & \\Rightarrow i = \\log_b n \\Rightarrow f(n) \\ge \\alpha^{\\log_b n}f(1) = n^{\\log_b \\alpha} \\\\\n\\alpha > a & \\Rightarrow \\alpha = a + d \\quad (c < 1, d > 0) \\\\\n           & \\Rightarrow f(n) = n^{\\log_b a + \\log_b d} = n^{\\log_b a+\\epsilon}. \\quad (\\epsilon = \\log_b d)\n\\end{align}",
            "title": "4.6 Proof of the master theorem"
        },
        {
            "location": "/Chap04/4.6/#46-1-star",
            "text": "Give a simple and exact expression for $n_j$ in equation $\\text{(4.27)}$ for the case in which $b$ is a positive integer instead of an arbitrary real number.   $n_j = \\lceil n / b^j \\rceil$.",
            "title": "4.6-1 $\\star$"
        },
        {
            "location": "/Chap04/4.6/#462-star",
            "text": "Show that if $f(n) = \\Theta(n^{\\log_b a}\\lg^k{n})$, where $k \\ge 0$, then the master recurrence has solution $T(n) = \\Theta(n^{\\log_b a}\\lg^{k + 1}n)$. For simplicity, confine your analysis to exact powers of $b$.   \\begin{align}\n            g(n) & = \\sum_{j = 0}^{\\log_b n - 1} a^j f(n / b^j) \\\\\n      f(n / b^j) & = \\Theta\\Big((n / b^j)^{\\log_b a} \\lg^k(n / b^j) \\Big) \\\\\n            g(n) & = \\Theta\\Big(\\sum_{j = 0}^{\\log_b n - 1}a^j\\big(\\frac{n}{b^j}\\big)^{\\log_b a}\\lg^k\\big(\\frac{n}{b^j}\\big)\\Big) \\\\\n                 & = \\Theta(A) \\\\\n               A & = \\sum_{j = 0}^{\\log_b n - 1} a^j \\big(\\frac{n}{b^j}\\big)^{\\log_b a}\\lg^k\\frac{n}{b^j} \\\\\n                 & = n^{\\log_b a} \\sum_{j = 0}^{\\log_b n - 1}\\Big(\\frac{a}{b^{\\log_b a}}\\Big)^j\\lg^k\\frac{n}{b^j} \\\\\n                 & = n^{\\log_b a}\\sum_{j = 0}^{\\log_b n - 1}\\lg^k\\frac{n}{b^j} \\\\\n                 & = n^{\\log_b a} B \\\\\n\\lg^k\\frac{n}{d} & = (\\lg n - \\lg d)^k = \\lg^k{n} + o(\\lg^k{n}) \\\\\n               B & = \\sum_{j = 0}^{\\log_b n - 1}\\lg^k\\frac{n}{b^j} \\\\\n                 & = \\sum_{j = 0}^{\\log_b n - 1}\\Big(\\lg^k{n} - o(\\lg^k{n})\\Big) \\\\\n                 & = \\log_b n\\lg^k{n} + \\log_b n \\cdot o(\\lg^k{n}) \\\\\n                 & = \\Theta(\\log_b n\\lg^k{n}) \\\\\n                 & = \\Theta(\\lg^{k + 1}{n}) \\\\\n            g(n) & = \\Theta(A) \\\\\n                 & = \\Theta(n^{\\log_b a}B) \\\\\n                 & = \\Theta(n^{\\log_b a}\\lg^{k + 1}{n}). \n\\end{align}",
            "title": "4.6.2 $\\star$"
        },
        {
            "location": "/Chap04/4.6/#463-star",
            "text": "Show that case 3 of the master method is overstated, in the sense that the regularity condition $af(n / b) \\le cf(n)$ for some constant $c < 1$ implies that there exists a constant $\\epsilon > 0$ such that $f(n) = \\Omega(n^{\\log_b a + \\epsilon})$.   \\begin{align}\n      af(n / b) & \\le cf(n) \\\\\n\\alpha f(n / b) & \\le f(n), \\alpha = a / c \\\\\n  \\alpha f(n)   & \\le f(nb) \\\\\n\\alpha^i f(1)   & \\le f(b^i) \\\\\n\\end{align}\n\\begin{align}\n   n = b^i & \\Rightarrow i = \\log_b n \\Rightarrow f(n) \\ge \\alpha^{\\log_b n}f(1) = n^{\\log_b \\alpha} \\\\\n\\alpha > a & \\Rightarrow \\alpha = a + d \\quad (c < 1, d > 0) \\\\\n           & \\Rightarrow f(n) = n^{\\log_b a + \\log_b d} = n^{\\log_b a+\\epsilon}. \\quad (\\epsilon = \\log_b d)\n\\end{align}",
            "title": "4.6.3 $\\star$"
        },
        {
            "location": "/Chap04/Problems/4-1/",
            "text": "Give asymptotic upper and lower bound for $T(n)$ in each of the following recurrences. Assume that $T(n)$ is constant for $n \\le 2$. Make your bounds as tight as possible, and justify your answers.\n\n\na.\n $T(n) = 2T(n / 2) + n^4$.\n\n\nb.\n $T(n) = T(7n / 10) + n$.\n\n\nc.\n $T(n) = 16T(n / 4) + n^2$.\n\n\nd.\n $T(n) = 7T(n / 3) + n^2$.\n\n\ne.\n $T(n) = 7T(n / 2) + n^2$.\n\n\nf.\n $T(n) = 2T(n / 4) + \\sqrt n$.\n\n\ng.\n $T(n) = T(n - 2) + n^2$.\n\n\n\n\nNote: In parts (a), (b), and (d) below, we are applying case 3 or the master theorem, which requires the regularity condition that $af(n / b) \\le cf(n)$ for some constant $c < 1$. In each of these parts, $f(n)$ has the form $n^k$. The regularity condition is satisfied because\n\n\n$$af(n / b) = an^k / b^k = (a / b^k) n^k = (a / b^k)f(n),$$\n\n\nand in each of the cases below, $a / b^k$ is a constant strctly less than $1$.\n\n\na.\n $T(n) = 2T(n / 2) + n^3 = \\Theta(n^3)$. This is a divide-and-conquer recurrence with $a = 2$, $b = 2$, $f(n) = n^3$, and $n^{\\log_b a} = n^{\\log_2 2} = n$. Since $n^3 = \\Omega(n^{\\log_2 2 + 2})$ and $a / b^k = 2 / 2^3 = 1 / 4 < 1$, case 3 of the master theorem applies, and $T(n) = \\Theta(n^3)$.\n\n\nb.\n $T(n) = T(9n / 10) + n = \\Theta(n)$. This is a divide-and-conquer recurrence with $a = 1$, $b = 10 / 9$, $f(n) = n$, and $n^{\\log_b a} = n^{\\log_{10 / 9} 1} = n^0 = 1$. Since $n = \\Omega(n^{\\log_{10 / 9} 1 + 1})$ and $a / b^k = 1 / (10 / 9)^1 = 9 / 10 < 1$, case 3 of the master theorem applies, and $T(n) = \\Theta(n)$.\n\n\nc.\n $T(n) = 16T(n / 4) + n^2 = \\Theta(n^2 \\lg n)$. This is another divide-and-conquer recurrence with $a = 16$, $b = 4$, $f(n) = n^2$, and $n^{\\log_b a} = n^{\\log_4 16} = n^2$. Since $n^2 = \\Theta(n^{\\log_4 16})$, case 2 of the master theorem applies, and $T(n) = \\Theta(n^2 \\lg n)$.\n\n\nd.\n $T(n) = 7T(n / 3) + n^2 = \\Theta(n^2)$. This is a divide-and-conquer recurrence with $a = 7$, $b = 3$, $f(n) = n^2$, and $n^{\\log_b a} = n^{\\log_3 7}$. Since $1 < \\log_3 7 < 2$, we have that $n^2 = \\Omega(n^{\\log_3 7 + \\epsilon})$ for some constant $\\epsilon > 0$. We also have $a / b^k = 7 / 3^2 = 7 / 9 < 1$, so that case 3 of the master theorem applies, and $T(n) = \\Theta(n^2)$.\n\n\ne.\n $T(n) = 7T(n / 2) + n^2 = O(n^{\\lg 7})$. This is a divide-and-conquer recurrence with $a = 7$, $b = 2$, $f(n) = n^2$, and $n^{\\log_b a} = n^{\\log_2 7}$. Since $2 < \\lg 7 < 3$, we have that $n^2 = O(n^{\\log_2 7 - \\epsilon})$ for some constant $\\epsilon > 0$. Thus case 1 of the master theorem applies, and $T(n) = \\Theta(n^{\\lg 7})$.\n\n\nf.\n $T(n) = 2T(n / 4) + \\sqrt n = \\Theta(\\sqrt n\\lg n)$. This is another divide-and-conquer recurrence with $a = 2$, $b = 4$, $f(n) = \\sqrt n$, and $n^{\\log_b a} = n^{\\log_4 2} = \\sqrt n$. Since $\\sqrt n = \\Theta(n^{\\log_4 2})$, case 2 of the master theorem applies, and $T(n) = \\Theta(\\sqrt n\\lg n)$.\n\n\ng.\n $T(n) = T(n - 1) + n$\n\nUsing the recursion tree shown below, we get a guess of $T(n) = \\Theta(n^2)$.\n\n\n\n\nFirst, we prove the $T(n) = \\Omega(n^2)$ part by induction. The inductive hypothesis is $T(n) \\ge cn^2$ for some constant $c > 0$.\n\n\n\\begin{align}\nT(n) & =   T(n - 1) + n \\\\\n     & \\ge c(n - 1)^2 + n \\\\\n     & =   cn^2 - 2cn + c + n \\\\\n     & \\ge cn^2,\n\\end{align}\n\n\nif $-2cn + n + c \\ge 0$ or, equivalently, $n(1 - 2c) + c \\ge 0$. This condition holds when $n \\ge 0$ and $0 < c \\le 1 / 2$.\n\n\nFor the upper bound, $T(n) = O(n^2)$, we use the inductive hypothesis that $T(n) \\le cn^2$ for some constant $c > 0$. By a similar derivation, we get that $T(n) \\le cn^2$ if $-2cn + n + c \\le 0$ or, equivalently, $n(1 - 2c) + c \\le 0$. This condition holds for $c = 1$ and $n \\ge 1$.\n\n\nThus, $T(n) = \\Omega(n^2)$ and $T(n) = O(n^2)$, so we conclude that $T(n) = \\Theta(n^2)$.\n\n\nh.\n $T(n) = T(\\sqrt n) + 1$\n\nThe easy way to do this is with a change of variables, as on page 86 of the text. Let $m = \\lg n$ and $S(m) = T(2^m)$. $T(2^m) = T(2^{m / 2}) + 1$, so $S(m) = S(m / 2) + 1$. Using the master theorem, $n^{\\log_b a} = n^{\\log_2 1} = n^0 = 1$ and $f(n) = 1$. Since $1 = \\Theta(1)$, case 2 applies and $S(m) = \\Theta(\\lg m)$. Therefore, $T(n) = \\Theta(\\lg\\lg n)$.",
            "title": "4-1 Recurrence examples"
        },
        {
            "location": "/Chap04/Problems/4-2/",
            "text": "Throughout this book, we assume that parameter passing during procedure calls takes constant time, even if an $N$-element array is being passed. This assumption is valid in most systems because a pointer to the array is passed, not the array itself. This problem examines the implications of three parameter-passing strategies:\n\n\n\n\nAn array is passed by pointer. Time $= \\Theta(1)$.\n\n\nAn array is passed by copying. Time $= \\Theta(N)$, where $N$ is the size of the array.\n\n\nAn array is passed by copying only the subrage that might be accessed by the called procedure. Time $= \\Theta(q - p + 1)$ if the subarray $A[p..q]$ is passed.\n\n\n\n\na.\n Consider the recursive binary search algorithm for finding a number in a sorted array (see Exercise 2.3-5). Give recurrences for the worst-case running times of binary search when arrays are passed using each of the three methods above, and give good upper bounds on the solutions of the recurrences. Let $N$ be the size of the original problems and $n$ be the size of a subproblem.\n\n\nb.\n Redo part (a) for the $\\text{MERGE-SORT}$ algorithm from Section 2.3.1.\n\n\n\n\na.\n\n\n\n\n$T(n) = T(n / 2) + c = \\Theta(\\lg n)$. (master method)\n\n\n$\\Theta(n\\lg n)$.\n\n\n\n\n\\begin{align}\nT(n) & = T(n / 2) + cN \\\\\n     & = 2cN + T(n / 4) \\\\\n     & = 3cN + T(n / 8) \\\\\n     & = \\sum_{i = 0}^{\\lg n - 1}(2^icN / 2^i) \\\\\n     & = cN\\lg n \\\\\n     & = \\Theta(n\\lg n).\n\\end{align}\n\n\n\n\n$T(n) = T(n / 2) + cn = \\Theta(n)$. (master method)\n\n\n\n\nb.\n\n\n\n\n$T(n) = 2T(n / 2) + cn = \\Theta(n\\lg n)$. (master method)\n\n\n$\\Theta(n^2)$.\n\n\n\n\n\\begin{align}\nT(n) & = 2T(n / 2) + cn + 2N = 4N + cn + 2c(n / 2) + 4T(n / 4) \\\\\n     & = 8N + 2cn + 4c(n / 4) + 8T(n / 8) \\\\\n     & = \\sum_{i = 0}^{\\lg n - 1}(cn + 2^iN) \\\\\n     & = \\sum_{i = 0}^{\\lg n - 1}cn + N\\sum_{i = 0}^{\\lg n - 1}2^i \\\\\n     & = cn\\lg n + N\\frac{2^{\\lg n} - 1}{2 - 1} \\\\\n     & = cn\\lg n + nN - N = \\Theta(nN) \\\\\n     & = \\Theta(n^2).\n\\end{align}\n\n\n\n\n$\\Theta(n\\lg n)$.\n\n\n\n\n\\begin{align}\nT(n) & = 2T(n / 2) + cn + 2n / 2 \\\\\n     & = 2T(n / 2) + (c + 1)n \\\\\n     & = \\Theta(n\\lg n).\n\\end{align}",
            "title": "4-2 Parameter-passing costs"
        },
        {
            "location": "/Chap04/Problems/4-3/",
            "text": "Give asymptotic upper and lower bounds for $T(n)$ in each of the following recurrences. Assume that $T(n)$ is constant for sufficiently small $n$. Make your bounds as tight as possible, and justify your answers.\n\n\na.\n $T(n) = 4T(n / 3) + n\\lg n$.\n\n\nb.\n $T(n) = 3T(n / 3) + n / \\lg n$.\n\n\nc.\n $T(n) = 4T(n / 2) + n^2\\sqrt n$.\n\n\nd.\n $T(n) = 3T(n / 3 - 2) + n / 2$.\n\n\ne.\n $T(n) = 2T(n / 2) + n / \\lg n$.\n\n\nf.\n $T(n) = T(n / 2) + T(n / 4) + T(n / 8) + n$.\n\n\ng.\n $T(n) = T(n - 1) + 1 / n$.\n\n\nh.\n $T(n) = T(n - 1) + \\lg n$.\n\n\ni.\n $T(n) = T(n - 2) + 1 / \\lg n$.\n\n\nj.\n $T(n) = \\sqrt nT(\\sqrt n) + n$\n\n\n\n\n[This problem is solved only for parts a, c, e, f, g, h, and i.]\n\n\na.\n $T(n) = 3T(n / 2) + n\\lg n$\n\nWe have $f(n) = n\\lg n$ and $n^{\\log_b a} = n^{\\lg 3} \\approx n^{1.585}$. Since $n\\lg n = O(n^{\\lg 3 - \\epsilon})$ for any $0 < \\epsilon \\le 0.58$, by case 1 of the master theorem, we have $T(n) = \\Theta(n^{\\lg 3})$.\n\n\nb.\n $\\Theta(n\\lg\\lg n)$. Check subtask 5 for the reasoning.\n\n\nc.\n $T(n) = 4T(n / 2) + n^2 \\sqrt n$\n\nWe have $f(n) = n^2 \\sqrt n = n^{5 / 2}$ and $n^{\\log_b a} = n^{\\log_2 4} = n^2$. Since $n^{5 / 2} = \\Omega(n^{2 + \\epsilon})$ for $\\epsilon = 1 / 2$, we look at the regularity condition in case 3 of the master theorem. We have\n\n\n$$af(n / b) = 4(n / 2)^2 \\sqrt{n / 2} = n^{5 / 2} / \\sqrt 2 \\le cn^{5 / 2}$$\n\n\nfor $1 / \\sqrt 2 \\le c < 1$. Case 3 applies, and we have $T(n) = \\Theta(n^2 \\sqrt n)$.\n\n\nd.\n $\\Theta(n\\lg n)$ by the master method.\n\n\ne.\n $T(n) = 2T(n / 2) + n / \\lg n$\n\nWe can get a guess by means of a recursion tree:\n\n\n\n\nWe get the sum on each level by observing that at depth $i$, we have $2^i$ nodes, each with a numerator of $n / 2^i$ and a denominator of $\\lg(n / 2^i) = \\lg n - i$, so that the cost at depth $i$ is\n\n\n$$2^i \\cdot \\frac{n / 2^i}{\\lg n - i} = \\frac{n}{\\lg n - i}.$$\n\n\nThe sum for all levels is\n\n\n\\begin{align}\n\\sum_{i = 0}^{\\lg n - 1} \\frac{n}{\\lg n - i}\n    & = n \\sum_{i = 1}^{\\lg n} \\frac{n}{i} \\\\\n    & = n \\sum_{i = 1}^{\\lg n} 1 / i \\\\\n    & = n \\cdot \\Theta(\\lg\\lg n) & \\text{(by equation (A.7), the harmonic series)} \\\\\n    & = \\Theta(n\\lg\\lg n).\n\\end{align}\n\n\nWe can use this analysis as a guess that $T(n) = \\Theta(n\\lg\\lg n)$. If we were to do a straight substitution proof, it would be rather involved. Instead, we will show by substitution that $T(n) \\le n(1 + H_{\\lfloor \\lg n \\rfloor})$ and $T(n) \\ge n \\cdot H_{\\lceil \\lg n \\rceil}$, where $H_k$ is the $k$th harmonic number: $H_k = 1 / 1 + 1 / 2 + 1 / 3 + \\cdots + 1 / k$. We also define $H_0 = 0$. Since $H_k = \\Theta(\\lg k)$, we have that $H_{\\lfloor \\lg n \\rfloor} = \\Theta(\\lg \\lfloor \\lg n \\rfloor) = \\Theta(\\lg\\lg n)$ and $H_{\\lceil \\lg n \\rceil} = \\Theta(\\lg \\lceil \\lg n \\rceil) = \\Theta(\\lg\\lg n)$. Thus, we will have that $T(n) = \\Theta(n\\lg\\lg n)$.\n\n\nThe base case for the proof is for $n = 1$, and we use $T(1) = 1$. Here, $\\lg n = 0$, so that $\\lg n = \\lfloor \\lg n \\rfloor = \\lceil \\lg n \\rceil$. Since $H_0 = 0$, we have $T(1) = 1 \\le 1(1 + H_0)$ and $T(1) = 1 \\ge 0 = 1 \\cdot H_0$.\n\n\nFor the upper bound of $T(n) \\le n(1 + H_{\\lfloor \\lg n \\rfloor})$, we have\n\n\n\\begin{align}\nT(n) & =   2T(n / 2) + n / \\lg n \\\\\n     & \\le 2((n / 2)(1 + H_{\\lfloor \\lg (n / 2) \\rfloor})) + n / \\lg n \\\\\n     & =   n(1 + H_{\\lfloor \\lg n - 1 \\rfloor}) + n / \\lg n \\\\\n     & =   n(1 + H_{\\lfloor \\lg n \\rfloor - 1} + 1 / \\lg n) \\\\\n     & \\le n(1 + H_{\\lfloor \\lg n \\rfloor - 1} + 1 / \\lfloor \\lg n \\rfloor) \\\\\n     & =   n(1 + H_{\\lfloor \\lg n \\rfloor}),\n\\end{align}\n\n\nwhere the last line follows from the identity $H_k = H_{k - 1} + 1 / k$.\n\n\nThe upper bound of $T(n) \\ge n \\cdot H_{\\lceil \\lg n \\rceil}$ is similar:\n\n\n\\begin{align}\nT(n) & =   2T(n / 2) + n / \\lg n \\\\\n     & \\ge 2((n / 2) \\cdot H_{\\lceil \\lg (n / 2) \\rceil}) + n / \\lg n \\\\\n     & =   n \\cdot (H_{\\lceil \\lg n - 1 \\rceil}) + n / \\lg n \\\\\n     & =   n \\cdot (H_{\\lceil \\lg n \\rceil - 1} + 1 / \\lg n) \\\\\n     & \\ge n \\cdot (H_{\\lceil \\lg n \\rceil - 1} + 1 / \\lceil \\lg n \\rceil) \\\\\n     & =   n \\cdot (H_{\\lceil \\lg n \\rceil}).\n\\end{align}\n\n\nThus, $T(n) = \\Theta(n\\lg\\lg n)$.\n\n\nf.\n $T(n) = T(n / 2) + T(n / 4) + T(n / 8) + n$\n\nUsing the recursion tree shown below, we get a guess of $T(n) = \\Theta(n)$.\n\n\n\n\nWe use the substitution method to prove that $T(n) = O(n)$. Our inductive hypothesis is that $T(n) \\le cn$ for some constant $c > 0$. We have\n\n\n\\begin{align}\nT(n) & =   T(n / 2) + T(n / 4) + T(n / 8) + n \\\\\n     & \\le cn / 2 + cn / 4 + cn / 8 + n \\\\\n     & =   7 cn / 8 + n \\\\\n     & =   (1 + 7c / 8) n \\\\\n     & \\le cn \\quad \\text{if $c \\ge 8$}.\n\\end{align}\n\n\nTherefore, $T(n) = O(n)$.\n\n\nShowing that $T(n) = \\Omega(n)$ is easy:\n\n\n$$T(n) = T(n / 2) + T(n / 4) + T(n / 8) + n \\ge n.$$\n\n\nSince $T(n) = O(n)$ and $T(n) = \\Omega(n)$, we have that $T(n) = \\Theta(n)$.\n\n\ng.\n $T(n) = T(n - 1) + 1 / n$\n\nThis recurrence corresponds to the harmonic series, so that $T(n) = H_n$, where $H_n = 1 / 1 + 1 / 2 + 1 / 3 + \\cdots + 1 / n$. For the base case, we have $T(1) = 1 = H_1$. For the inductive step, we assume that $T(n - 1) = H_{n - 1}$, and we have\n\n\n\\begin{align}\nT(n) & = T(n - 1) + 1 / n \\\\\n     & = H_{n - 1} + 1 / n \\\\\n     & = H_n.\n\\end{align}\n\n\nSince $H_n = \\Theta(\\lg n)$ by equation $\\text{(A.7)}$, we have that $T(n) = \\Theta(\\lg n)$.\n\n\nh.\n $T(n) = T(n - 1) + \\lg n$\n\nWe guess that $T(n) = \\Theta(n\\lg n)$. To prove the upper bound, we will show that $T(n) = O(n\\lg n)$. Our inductive hypothesis is that $T(n) \\le cn\\lg n$ for some constant $c$. We have\n\n\n\\begin{align}\nT(n) & =   T(n - 1) + \\lg n \\\\\n     & \\le c(n - 1) \\lg(n - 1) + \\lg n \\\\\n     & =   cn\\lg(n - 1) - c \\lg(n - 1) + \\lg n \\\\\n     & \\le cn\\lg(n - 1) - c \\lg(n / 2) + \\lg n & \\text{(since $\\lg(n - 1) \\ge \\lg(n / 2)$ for $n \\ge 2$)} \\\\\n     & =   cn\\lg(n - 1) - c \\lg n + c + \\lg n \\\\\n     & <   cn\\lg n - c \\lg n + c + \\lg n \\\\\n     & \\le cn\\lg n,\n\\end{align}\n\n\nif $-c \\lg n + c + \\lg n \\le 0$. Equivalently,\n\n\n\\begin{align}\n-c \\lg n + c + \\lg n & \\le 0 \\\\\n                   c & \\le (c - 1) \\lg n \\\\\n               \\lg n & \\ge c / (c - 1).\n\\end{align}\n\n\nThis works for $c = 2$ and all $n \\ge 4$.\n\n\nTo prove the lower bound, we will show that $T(n) = \\Omega(n\\lg n)$. Our inductive hypothesis is that $T(n) \\ge cn\\lg n + dn$ for constants $c$ and $d$. We have\n\n\n\\begin{align}\nT(n) & =   T(n - 1) + \\lg n \\\\\n     & \\ge c(n - 1) \\lg(n - 1) + d(n - 1) + \\lg n \\\\\n     & =   cn\\lg(n - 1) - c \\lg(n - 1) + dn - d + \\lg n \\\\\n     & \\ge cn\\lg(n / 2) - c \\lg(n - 1) + dn - d + \\lg n & \\text{(since $\\lg(n - 1) \\ge \\lg(n / 2)$ for $n \\ge 2$)} \\\\\n     & =   cn\\lg n - cn - c \\lg(n - 1) + dn - d + \\lg n \\\\\n     & \\ge cn\\lg n,\n\\end{align}\n\n\nif $-cn - c \\lg(n - 1) + dn - d + \\lg n \\ge 0$. Since\n\n\n$$-cn - c \\lg(n - 1) + dn - d + \\lg n > -cn - c\\lg(n - 1) + dn - d + \\lg(n - 1),$$\n\n\nit suffices to find conditions in which $-cn - c\\lg(n - 1) + dn - d + \\lg(n - 1) \\ge 0$. Equivalently,\n\n\n\\begin{align}\n-cn - c \\lg(n - 1) + dn - d + \\lg(n - 1) & \\ge 0 \\\\\n                                (d - c)n & \\ge (c - 1)\\lg(n - 1) + d.\n\\end{align}\n\n\nThis works for $c = 1$, $d = 2$, and all $n \\ge 2$.\n\n\nSince $T(n) = O(n\\lg n)$ and $T(n) = \\Omega(n\\lg n)$, we conclude that $T(n) = \\Theta(n\\lg n)$.\n\n\ni.\n $T(n) = T(n - 2) + 2\\lg n$\n\nWe guess that $T(n) = \\Theta(n\\lg n)$. We show the upper bound of $T(n) = O(n\\lg n)$ by means of the inductive hypothesis $T(n) \\le cn\\lg n$ for some constant $c > 0$. We have\n\n\n\\begin{align}\nT(n) & =   T(n - 2) + 2\\lg n \\\\\n     & \\le c(n - 2)\\lg(n - 2) + 2\\lg n \\\\\n     & \\le c(n - 2)\\lg n + 2\\lg n \\\\\n     & =   (cn - 2c + 2)\\lg n \\\\\n     & =   cn\\lg n + (2 - 2c)\\lg n \\\\\n     & \\le cn\\lg n & \\text{if $c > 1$}.\n\\end{align}\n\n\nTherefore, $T(n) = O(n\\lg n)$.\n\n\nFor the lower bound of $T(n) = \\Omega(n\\lg n)$, we'll show that $T(n) \\ge cn\\lg n + dn$, for constants $c, d > 0$ to be chosen. We assume that $n \\ge 4$, which implies that\n\n\n\n\n$\\lg(n - 2) \\ge \\lg(n / 2)$,\n\n\n$n / 2 \\ge \\lg n$, and\n\n\n$n / 2 \\ge 2$.\n\n\n\n\n(We'll use these inequalities as we go along.) We have\n\n\n\\begin{align}\nT(n) & \\ge c(n - 2)\\lg(n - 2) + d(n - 2) + 2\\lg n \\\\\n     & =   cn\\lg(n - 2) - 2c\\lg(n - 2) + dn - 2d + 2\\lg n \\\\\n     & >   cn\\lg(n - 2) - 2c\\lg n + dn - 2d + 2\\lg n & \\text{(since $-\\lg n < -\\lg(n - 2)$)} \\\\\n     & =   cn\\lg(n - 2) - 2(c - 1)\\lg n + dn - 2d & \\text{(by inequality (1) above)} \\\\\n     & =   cn\\lg n - cn - 2(c - 1)\\lg n + dn - 2d \\\\\n     & \\ge cn\\lg n,\n\\end{align}\n\n\nif $-cn - 2(c - 1)\\lg n + dn - 2d \\ge 0$ or, equivalently, $dn \\ge cn + 2(c - 1)\\lg n + 2d$. Pick any constant $c > 1 / 2$, and then pick any constant $d$ such that\n\n\n$$d \\ge 2(2c - 1).$$\n\n\n(The requirement that $c > 1 / 2$ means that $d$ is positive.) Then\n\n\n$$d / 2 \\ge 2c - 1 = c + (c - 1),$$\n\n\nand adding $d / 2$ to both sides, we have\n\n\n$$d \\ge c + (c - 1) + d / 2.$$\n\n\nMultiplying by $n$ yields\n\n\n$$dn \\ge cn + (c - 1)n + dn / 2,$$\n\n\nand then both multiplying and dividing the middle term by $2$ gives\n\n\n$$dn \\ge cn + 2(c - 1)n / 2 + dn / 2.$$\n\n\nUsing inequalities (2) and (3) above, we get\n\n\n$$dn \\ge cn + 2(c - 1)\\lg n + 2d,$$\n\n\nwhich is what we needed to show. Thus $T(n) = \\Omega(n\\lg n)$. Since $T(n) = O(n\\lg n)$ and $T(n) = \\Omega(n\\lg n)$, we conclude that $T(n) = \\Theta(n\\lg n)$.\n\n\nj.\n $T(n) = \\sqrt nT(\\sqrt n) + n$\n\nWe guess $T(n) \\le cn\\lg\\lg n$,\n\n\n\\begin{align}\nT(n) & \\le \\sqrt nc\\sqrt n\\lg\\lg\\sqrt n + n \\\\\n     & =   cn\\lg\\lg\\sqrt n + n \\\\\n     & =   cn\\lg\\frac{\\lg n}{2} + n \\\\\n     & =   cn\\lg\\lg n - cn\\lg 2 + n \\\\\n     & =   cn\\lg\\lg n + (1 - c)n & (c > 1) \\\\\n     & \\le cn\\lg\\lg n. & = \\Theta(n\\lg\\lg n)\n\\end{align}",
            "title": "4-3 More recurrence examples"
        },
        {
            "location": "/Chap04/Problems/4-4/",
            "text": "This problem develops properties of the Fibonacci numbers, which are defined by recurrence $\\text{(3.22)}$. We shall use the technique of generating functions to solve the Fibonacci recurrence. Define the \ngenerating function\n (or \nformal power series\n) $\\mathcal F$ as\n\n\n\\begin{align}\n\\mathcal F(z)\n    & = \\sum_{i = 0}^{\\infty} F_iz^i \\\\\n    & = 0 + z + z^2 + 2z^3 + 3z^4 + 5z^5 + 8z^6 + 13z^7 + 21z^8 + \\cdots,\n\\end{align}\n\n\nwhere $F_i$ is the $i$th Fibonacci number.\n\n\na.\n Show that $\\mathcal F(z) = z + z\\mathcal F(z) + z^2\\mathcal F$.\n\n\nb.\n Show that  \n\n\n\\begin{align}\n\\mathcal F(z)\n    & = \\frac{z}{1 - z - z^2} \\\\\n    & = \\frac{z}{(1 - \\phi z)(1 - \\hat\\phi z)} \\\\\n    & = \\frac{1}{\\sqrt 5}\\Big(\\frac{1}{1 - \\phi z} - \\frac{1}{1 - \\hat{\\phi} z}\\Big),\n\\end{align}\n\n\nwhere\n\n\n$\\phi = \\frac{1 + \\sqrt 5}{2} = 1.61803\\ldots$  \n\n\nand  \n\n\n$\\hat\\phi = \\frac{1 - \\sqrt 5}{2} = -0.61803\\ldots$\n\n\nc.\n Show that\n\n\n$$\\mathcal F(z) = \\sum_{i = 0}^{\\infty}\\frac{1}{\\sqrt 5}(\\phi^i - \\hat{\\phi}^i)z^i.$$\n\n\nd.\n Use part (c) to prove that $F_i = \\phi^i / \\sqrt 5$ for $i > 0$, rounded to the nearest integer. ($\\textit{Hint:}$ Observe that $|\\hat{\\phi}| < 1$.)\n\n\n\n\na.\n\n\n\\begin{align} z + z\\mathcal F(z) + z^2\\mathcal F(Z)\n   & = z + z\\sum_{i = 0}^{\\infty} F_iz^i + z^2\\sum_{i = 0}^{\\infty}F_i z^i \\\\\n   & = z + \\sum_{i = 1}^{\\infty} F_{i - 1}z^i + \\sum_{i = 2}^{\\infty}F_{i - 2} z^i \\\\\n   & = z + F_1z + \\sum_{i = 2}^{\\infty}(F_{i - 1} + F_{i - 2})z^i \\\\\n   & = z + F_1z + \\sum_{i = 2}^{\\infty}F_iz^i \\\\\n   & = \\mathcal F(z).\n\\end{align}\n\n\nb.\n Note that $\\phi - \\hat\\phi = \\sqrt 5$, $\\phi + \\hat\\phi = 1$ and $\\phi\\hat\\phi = - 1$.\n\n\n\\begin{align}\n\\mathcal F(z) & = \\frac{\\mathcal F(z)(1 - z - z^2)}{1 - z - z^2} \\\\\n              & = \\frac{\\mathcal F(z) - z\\mathcal F(z) - z^2\\mathcal F(z) - z + z}{1 - z - z^2} \\\\\n              & = \\frac{\\mathcal F(z) - \\mathcal F(z) + z}{1 - z - z^2} \\\\\n              & = \\frac{z}{1 - z - z^2} \\\\\n              & = \\frac{z}{1 - (\\phi + \\hat\\phi)z + \\phi\\hat\\phi z^2} \\\\\n              & = \\frac{z}{(1 - \\phi z)(1 - \\hat\\phi z)} \\\\\n              & = \\frac{\\sqrt 5 z}{\\sqrt 5 (1 - \\phi z)(1 - \\hat\\phi z)} \\\\\n              & = \\frac{(\\phi - \\hat\\phi)z + 1 - 1}{\\sqrt 5 (1 - \\phi z)(1 - \\hat\\phi z)} \\\\\n              & = \\frac{(1 - \\hat\\phi z) - (1 - \\phi z)}{\\sqrt 5 (1 - \\phi z)(1 - \\hat\\phi z)} \\\\\n              & = \\frac{1}{\\sqrt 5}\\Big(\\frac{1}{1 - \\phi z} - \\frac{1}{1 - \\hat\\phi z}\\Big).\n\\end{align}\n\n\nc.\n We have $\\frac{1}{1 - x} = \\sum_{k = 0}^{\\infty}x^k$, when $|x| < 1$, thus\n\n\n\\begin{align}\n\\mathcal F(n) & = \\frac{1}{\\sqrt 5}\\Big(\\frac{1}{1 - \\phi z} - \\frac{1}{1 - \\hat\\phi z}\\Big) \\\\\n              & = \\frac{1}{\\sqrt 5}\\Big(\\sum_{i = 0}^{\\infty}\\phi^i z^i - \\sum_{i = 0}^{\\infty}\\hat{\\phi}^i z^i\\Big) \\\\\n              & = \\sum_{i = 0}^{\\infty}\\frac{1}{\\sqrt 5}(\\phi^i - \\hat{\\phi}^i) z^i.\n\\end{align}\n\n\nd.\n $\\mathcal F(z) = \\sum_{i = 0}^{\\infty}\\alpha_i z^i$ where $\\alpha_i = \\frac{\\phi^i - \\hat{\\phi}^i}{\\sqrt 5}$. From this follows that $\\alpha_i = F_i$, that is\n\n\nF_i = \\frac{\\phi^i - \\hat{\\phi}^i}{\\sqrt 5} = \\frac{\\phi^i}{\\sqrt 5} - \\frac{\\hat{\\phi}^i}{\\sqrt 5},\n\n\nFor $i = 0$, $\\phi / \\sqrt 5 = (\\sqrt 5 + 5) / 10 > 0.5$. For $i > 2$, $|\\hat{\\phi}^i| < 0.5$.",
            "title": "4-4 Fibonacci numbers"
        },
        {
            "location": "/Chap04/Problems/4-5/",
            "text": "Professor Diogenes has $n$ supposedly identical integrated-circuit chips that in principle are capable of testing each other. The professor's test jig accomodates two chips at a time. When the jig is loaded, each chip tests the other and reports whether it is good or bad. A good chip always reports accurately whether the other chip is good or bad, but the professor cannot trust the answer of a bad chip. Thus, the four possible outcomes of a test are as follows:\n\n\n\\begin{array}{lll}\n\\text{Chip $A$ says} & \\text{Chip $B$ says} & \\text{Conclusion} \\\\\n\\text{$B$ is good} & \\text{$A$ is good} & \\text{both are good, or both are bad} \\\\\n\\text{$B$ is good} & \\text{$A$ is bad}  & \\text{at least one is bad} \\\\\n\\text{$B$ is bad}  & \\text{$A$ is good} & \\text{at least one is bad} \\\\\n\\text{$B$ is bad}  & \\text{$A$ is bad}  & \\text{at least one is bad}\n\\end{array}\n\n\na.\n Show that if more than $n / 2$ chips are bad, the professor cannot necessarily determine which chips are good using any strategy based on this kind of pairwise test. Assume that the bad chips can conspire to fool the professor.\n\n\nb.\n Consider the problem of finding a single good chip from among $n$ chips, assuming that more than $n / 2$ of the chips are good. Show that $\\lfloor n / 2 \\rfloor$ pairwise tests are sufficient to reduce the problem to one of nearly half the size.\n\n\nc.\n Show that the good chips can be identified with $\\Theta(n)$ pairwise tests, assuming that more than $n / 2$ chips are good. Give and solve the recurrence that describes the number of tests.\n\n\n\n\na.\n Lets say that there are $g < n / 2$ good chips. The same amount of the remaining bad chips can choose to act similar to good chips. That is, they can identify each other as good and all other as faulty. Since this is what the good chips would do, both groups are symmetric in regards to the operation of parwise comparison. No strategy can distinguish between the two groups.\n\n\nb.\n We split the chips in groups of two and compare them. We can take one of the chips if the outcome is the first one (both are good or both are bad) and but both away otherwise. When putting away, we're removing at least one bad chip for every good one we remove. Out of the pairs we've chosen a chip from, there would be more good chips than bad chips (there would be more good pairs, because the good chips are more than the half). Now we have at most $n / 2$ chips, where at least half of them are good.\n\n\nc.\n The recurrence for finding at least one good chip is\n\n\n$$T(n) = T(n / 2) + n / 2.$$\n\n\nBy the master method, this is $\\Theta(n)$. After we've found one, we can compare it will all others, which is a $\\Theta(n)$ operation.",
            "title": "4-5 Chip testing"
        },
        {
            "location": "/Chap04/Problems/4-6/",
            "text": "An $m \\times n$ array $A$ of real numbers is a \nMonge array\n if for all $i$, $j$, $k$, and $l$ such that $1 \\le i < k \\le m$ and $1 \\le j < l \\le n$, we have\n\n\n$$A[i, j] + A[k, l] \\le A[i, l] + A[k, j]$$\n\n\nIn other words, whenever we pick two rows and two columns of a Monge array and consider the four elements at the intersections of the rows and columns, the sum of the upper-left and lower-right elements is less than or equal to the sum of the lower-left and upper-right elements. For example, the following array is Monge:\n\n\n\\begin{matrix}\n10 & 17 & 13 & 28 & 23 \\\\\n17 & 22 & 16 & 29 & 23 \\\\\n24 & 28 & 22 & 34 & 24 \\\\\n11 & 13 &  6 & 17 &  7 \\\\\n45 & 44 & 32 & 37 & 23 \\\\\n36 & 33 & 19 & 21 &  6 \\\\\n75 & 66 & 51 & 53 & 34\n\\end{matrix}\n\n\na.\n Prove that an array is Monge if and only if for all $i = 1, 2, \\ldots, m - 1$, and $j = 1, 2, \\ldots, n - 1$ we have $A[i, j] + A[i + 1,j + 1] \\le A[i, j + 1] + A[i + 1, j]$. ($\\textit{Hint:}$ For the ''if'' part, use induction seperately on rows and columns.)\n\n\nb.\n The following array is not Monge. Change one element in order to make it Monge. ($\\textit{Hint:}$ Use part (a).)  \n\n\n\\begin{matrix}\n37 & 23 & 22 & 32 \\\\\n21 &  6 &  7 & 10 \\\\\n53 & 34 & 30 & 31 \\\\\n32 & 13 &  9 &  6 \\\\\n43 & 21 & 15 &  8\n\\end{matrix}\n\n\nc.\n Let $f(i)$ be the index of the column containing the leftmost minimum element of the row $i$. Prove that $f(1) \\le f(2) \\le \\cdots \\le f(m)$ for any $m \\times n$ Monge array.\n\n\nd.\n Here is a description of a divide-and-conquer algorithm that computes the leftmost minimum element in each row of an $m \\times n$ Monge array $A$:\n\n\nConstruct a submatrix $A'$ of $A$ consisting of the even-numbered rows of $A$. Recursively determine the leftmost minimum for each row in $A'$. Then compute the leftmost minimum in the odd-numbered rows of $A$.\n\n\nExplain how to compute the leftmost minimum in the odd-numbered rows of $A$ (given that the leftmost minimum of the even-numbered rows is known) in $O(m + n)$ time.\n\n\ne.\n Write the recurrence describing the running time of the algorithm described in part (1). Show that its solution is $O(m + n\\log m)$.\n\n\n\n\na.\n The ''only if'' part is trivial, it follows form the definition of Monge array.\n\n\nAs for the ''if'' part, let's first prove that\n\n\n\\begin{align}\n         A[i, j] + A[i + 1, j + 1] & \\le A[i, j + 1] + A[i + 1, j] \\\\\n\\Rightarrow  A[i, j] + A[k, j + 1] & \\le A[i, j + 1] + A[k, j],\n\\end{align}\n\n\nwhere $i < k$.\n\n\nLet's prove it by induction. The base case of $k = i + 1$ is given. As for the inductive step, we assume it holds for $k = i + n$ and we want to prove it for $k + 1 = i + n + 1$. If we add the given to the assumption, we get\n\n\n\\begin{align}\n                                        A[i, j] + A[k, j + 1] & \\le A[i, j + 1] + A[k, j]     & \\text{(assumption)} \\\\\n                                    A[k, j] + A[k + 1, j + 1] & \\le A[k, j + 1] + A[k + 1, j] & \\text{(given)} \\\\\n\\Rightarrow A[i, j] + A[k, j + 1] + A[k, j] + A[k + 1, j + 1] & \\le A[i, j + 1] + A[k, j] + A[k, j + 1] + A[k + 1, j] \\\\\n                        \\Rightarrow A[i, j] + A[k + 1, j + 1] & \\le A[i, j + 1] + A[k + 1, j]\n\\end{align}\n\n\nb.\n\n\n\\begin{matrix}\n37 & 23 & \\mathbf{24} & 32 \\\\\n21 &  6 &  7 & 10 \\\\\n53 & 34 & 30 & 31 \\\\\n32 & 13 &  9 & 6  \\\\\n43 & 21 & 15 & 8  \\\\\n\\end{matrix}\n\n\nc.\n Let $a_i$ and $b_j$ be the leftmost minimal elements on rows $a$ and $b$ and let's assume that $i > j$. Then we have\n\n\n$$A[j, a] + A[i, b] \\le A[i, a] + A[j, b].$$\n\n\nBut\n\n\n\\begin{align}\nA[j, a] \\ge A[i, a] & (a_i \\text{ is minimal}) \\\\\nA[i, b] \\ge A[j, b] & (b_j \\text{ is minimal}) \\\\\n\\end{align}\n\n\nWhich implies that\n\n\n\\begin{align}\nA[j, a] + A[i, b] & \\ge A[i, a] + A[j, b] \\\\\nA[j, a] + A[i, b] & =   A[i, a] + A[j, b]\n\\end{align}\n\n\nWhich in turn implies that either:\n\n\n\\begin{align}\nA[j, b] < A[i, b] & \\Rightarrow A[i, a] > A[j, a] \\Rightarrow a_i \\text{ is not minimal} \\\\\nA[j, b] = A[i, b] & \\Rightarrow b_j \\text{ is not the leftmost minimal}\n\\end{align}\n\n\nd.\n If $\\mu_i$ is the index of the $i$-th row's leftmost minimum, then we have\n\n\n$$\\mu_{i - 1} \\le \\mu_i \\le \\mu_{i + 1}.$$\n\n\nFor $i = 2k + 1$, $k \\ge 0$, finding $\\mu_i$ takes $\\mu_{i + 1} - \\mu_{i - 1} + 1$ steps at most, since we only need to compare with those numbers. Thus\n\n\n\\begin{align}\nT(m, n) & = \\sum_{i = 0}^{m / 2 - 1}\\Big(\\mu_{2i + 2} - \\mu_{2i} + 1\\Big) \\\\\n        & = \\sum_{i = 0}^{m / 2-1}\\mu_{2i + 2} - \\sum_{i = 0}^{m / 2-1}\\mu_{2i} + m / 2 \\\\\n        & = \\sum_{i = 1}^{m / 2}\\mu{2i} - \\sum_{i = 0}^{m / 2-1}\\mu{2i} + m / 2 \\\\ &= \\mu_m - \\mu_0 + m / 2 \\\\\n        & = n + m / 2 \\\\\n        & = O(m + n).        \n\n\\end{align}\n\n\ne.\n The divide time is $O(1)$, the conquer part is $T(m / 2)$ and the merge part is $O(m + n)$. Thus,\n\n\n\\begin{align}\nT(m) & = T(m / 2) + cn + dm \\\\\n     & = cn + dm + cn + dm / 2 + cn + dm / 4 + \\cdots \\\\\n     & = \\sum_{i = 0}^{\\lg m - 1}cn + \\sum_{i = 0}^{\\lg m - 1}\\frac{dm}{2^i} \\\\\n     & = cn\\lg m + dm\\sum_{i = 0}^{\\lg m - 1} \\\\\n     & < cn\\lg m + 2dm \\\\ \n     & = O(n\\lg m + m).\n\\end{align}",
            "title": "4-6 Monge arrays"
        },
        {
            "location": "/Chap05/5.1/",
            "text": "5.1-1\n\n\n\n\nShow that the assumption that we are always able to determine which candidate is best in line 4 of procedure $\\text{HIRE-ASSISTANT}$ implies that we know a total order on the ranks of the candidates.\n\n\n\n\nA total order is a partial order that is a total relation $(\\forall a, b \\in A:aRb \\text{ or } bRa)$. \nA relation is a partial order if it is reflexive, antisymmetric and transitive.\n\n\nAssume that the relation is good or better.\n\n\n\n\nReflexive:\n This is a bit trivial, but everybody is as good or better as themselves.\n\n\nTransitive:\n If $A$ is better than $B$ and $B$ is better than $C$, then $A$ is better than $C$.\n\n\nAntisymmetric:\n If $A$ is better than $B$, then $B$ is not better than $A$.\n\n\n\n\nSo far we have a partial order.\n\n\nSince we assume we can compare any two candidates, then comparison must be a total relation and thus we have a total order.\n\n\n5.1-2 $\\star$\n\n\n\n\nDescribe an implementation of the procedure $\\text{RANDOM}(a, b)$ that only makes calls to $\\text{RANDOM}(0, 1)$. What is the expected running time of your procedure, as a function of $a$ and $b$?\n\n\n\n\nRANDOM\n(\na\n,\n \nb\n)\n\n    \nif\n \na\n \n==\n \nb\n\n        \nreturn\n \na\n\n    \nmid\n \n=\n \n(\na\n \n+\n \nb\n)\n \n/\n \n2\n\n    \nr\n \n=\n \nRANDOM\n(\n0\n,\n \n1\n)\n\n    \nif\n \nr\n \n==\n \n0\n\n        \nreturn\n \nRANDOM\n(\na\n,\n \nfloor\n(\nmid\n))\n\n    \nelse\n \nreturn\n \nRANDOM\n(\nceil\n(\nmid\n),\n \nb\n)\n\n\n\n\n\nThe expected running time is $\\Theta(\\lg(b - a))$.\n\n\n5.1-3 $\\star$\n\n\n\n\nSuppose that you want to output $0$ with probability $1 / 2$ and $1$ with probability $1 / 2$. At your disposal is a procedure $\\text{BIASED-RANDOM}$, that outputs either $0$ or $1$. It outputs $1$ with some probability $p$ and $0$ with probability $1 - p$, where $0 < p < 1$, but you do not know what $p$ is. Give an algorithm that uses $\\text{BIASED-RANDOM}$ as a subroutine, and returns an unbiased answer, returning $0$ with probability $1 / 2$ and $1$ with probability $1 / 2$. What is the expected running time of your algorithm as a function of $p$?\n\n\n\n\nTo get an unbiased random bit, given only calls to $\\text{BIASED-RANDOM}$, call $\\text{BIASED-RANDOM}$ twice. Repeatedly do so until the two calls return different values, and when this occurs, return the first of the two bits:\n\n\nUNBIASED\n-\nANSWER\n()\n\n    \nwhile\n \nTRUE\n\n        \nx\n \n=\n \nBIASED\n-\nRANDOM\n()\n\n        \ny\n \n=\n \nBIASED\n-\nRANDOM\n()\n\n        \nif\n \nx\n \n!=\n \ny\n\n            \nreturn\n \nx\n \n\n\n\n\nTo see that $\\text{UNBIASED-RANDOM}$ returns $0$ and $1$ each with probability $1 / 2$, observe that the probability that a given iteration returns $0$ is\n\n\n$$\\Pr\\{x = 0 \\text{ and } y = 1\\} = (1 - p)p,$$\n\n\nand the probability that a given iteration returns $1$ is\n\n\n$$\\Pr\\{x = 1 \\text{ and } y = 0\\} = p(1 - p).$$\n\n\n(We rely on the bits returned by $\\text{BIASED-RANDOM}$ being independent.) Thus, the probability that a given iteration returns $0$ equals the probability that it returns $1$. Since there is no other way for $\\text{UNBIASED-RANDOM}$ to return a value, it returns $0$ and $1$ each with probability $1 / 2$.\n\n\nAssuming that each iteration takes $O(1)$ time, the expected running time of $\\text{UNBIASED-RANDOM}$ is linear in the expected number of iterations. We can view each iteration as a Bernoulli trial, where \"success\" means that the iteration returns a value. The probability of success equals the probability that $0$ is returned plus the probability that $1$ is returned, or $2p(1 - p)$. The number of trials until a success occurs is given by the geometric distribution, and by equation $\\text{(C.32)}$, the expected number of trials for this scenario is $1 / (2p(1 - p))$. Thus, the expected running time of $\\text{UNBIASED-RANDOM}$ is $\\Theta(1 / (2p(1 - p))$.",
            "title": "5.1 The hiring problem"
        },
        {
            "location": "/Chap05/5.1/#51-1",
            "text": "Show that the assumption that we are always able to determine which candidate is best in line 4 of procedure $\\text{HIRE-ASSISTANT}$ implies that we know a total order on the ranks of the candidates.   A total order is a partial order that is a total relation $(\\forall a, b \\in A:aRb \\text{ or } bRa)$. \nA relation is a partial order if it is reflexive, antisymmetric and transitive.  Assume that the relation is good or better.   Reflexive:  This is a bit trivial, but everybody is as good or better as themselves.  Transitive:  If $A$ is better than $B$ and $B$ is better than $C$, then $A$ is better than $C$.  Antisymmetric:  If $A$ is better than $B$, then $B$ is not better than $A$.   So far we have a partial order.  Since we assume we can compare any two candidates, then comparison must be a total relation and thus we have a total order.",
            "title": "5.1-1"
        },
        {
            "location": "/Chap05/5.1/#51-2-star",
            "text": "Describe an implementation of the procedure $\\text{RANDOM}(a, b)$ that only makes calls to $\\text{RANDOM}(0, 1)$. What is the expected running time of your procedure, as a function of $a$ and $b$?   RANDOM ( a ,   b ) \n     if   a   ==   b \n         return   a \n     mid   =   ( a   +   b )   /   2 \n     r   =   RANDOM ( 0 ,   1 ) \n     if   r   ==   0 \n         return   RANDOM ( a ,   floor ( mid )) \n     else   return   RANDOM ( ceil ( mid ),   b )   The expected running time is $\\Theta(\\lg(b - a))$.",
            "title": "5.1-2 $\\star$"
        },
        {
            "location": "/Chap05/5.1/#51-3-star",
            "text": "Suppose that you want to output $0$ with probability $1 / 2$ and $1$ with probability $1 / 2$. At your disposal is a procedure $\\text{BIASED-RANDOM}$, that outputs either $0$ or $1$. It outputs $1$ with some probability $p$ and $0$ with probability $1 - p$, where $0 < p < 1$, but you do not know what $p$ is. Give an algorithm that uses $\\text{BIASED-RANDOM}$ as a subroutine, and returns an unbiased answer, returning $0$ with probability $1 / 2$ and $1$ with probability $1 / 2$. What is the expected running time of your algorithm as a function of $p$?   To get an unbiased random bit, given only calls to $\\text{BIASED-RANDOM}$, call $\\text{BIASED-RANDOM}$ twice. Repeatedly do so until the two calls return different values, and when this occurs, return the first of the two bits:  UNBIASED - ANSWER () \n     while   TRUE \n         x   =   BIASED - RANDOM () \n         y   =   BIASED - RANDOM () \n         if   x   !=   y \n             return   x    To see that $\\text{UNBIASED-RANDOM}$ returns $0$ and $1$ each with probability $1 / 2$, observe that the probability that a given iteration returns $0$ is  $$\\Pr\\{x = 0 \\text{ and } y = 1\\} = (1 - p)p,$$  and the probability that a given iteration returns $1$ is  $$\\Pr\\{x = 1 \\text{ and } y = 0\\} = p(1 - p).$$  (We rely on the bits returned by $\\text{BIASED-RANDOM}$ being independent.) Thus, the probability that a given iteration returns $0$ equals the probability that it returns $1$. Since there is no other way for $\\text{UNBIASED-RANDOM}$ to return a value, it returns $0$ and $1$ each with probability $1 / 2$.  Assuming that each iteration takes $O(1)$ time, the expected running time of $\\text{UNBIASED-RANDOM}$ is linear in the expected number of iterations. We can view each iteration as a Bernoulli trial, where \"success\" means that the iteration returns a value. The probability of success equals the probability that $0$ is returned plus the probability that $1$ is returned, or $2p(1 - p)$. The number of trials until a success occurs is given by the geometric distribution, and by equation $\\text{(C.32)}$, the expected number of trials for this scenario is $1 / (2p(1 - p))$. Thus, the expected running time of $\\text{UNBIASED-RANDOM}$ is $\\Theta(1 / (2p(1 - p))$.",
            "title": "5.1-3 $\\star$"
        },
        {
            "location": "/Chap05/5.2/",
            "text": "5.2.1\n\n\n\n\nIn $\\text{HIRE-ASSISTANT}$, assuming that the candidates are presented in a random order, what is the probability that you hire exactly one time? What is the probability you hire exactly $n$ times?\n\n\n\n\nSince $\\text{HIRE-ASSISTANT}$ always hires candidate 1, it hires exactly once if and only if no candidates other than candidate 1 are hired. This event occurs when candidate 1 is the best candidate of the $n$, which occurs with probability $1 / n$.\n\n\n$\\text{HIRE-ASSISTANT}$ hires $n$ times if each candidate is better than all those who were interviewed (and hired) before. This event occurs precisely when the list of ranks given to the algorithm is $\\langle 1, 2, \\ldots, n \\rangle$, which occurs with probability $1 / n!$.\n\n\n5.2-2\n\n\n\n\nIn $\\text{HIRE-ASSISTANT}$, assuming that the candidates are presented in a random order, what is the probability that you hire exactly twice?\n\n\n\n\nWe make three obervations:\n\n\n\n\nCandidate 1 is always hired.\n\n\nThe best candidate, i.e., the one whose rank is $n$, is always hired.\n\n\nIf the best candidate is candidate 1, then that is the only candidate hired.\n\n\n\n\nTherefore, in order for $\\text{HIRE-ASSISTANT}$ to hire exactly twice, candidate 1 must have rank $i \\le n - 1$ and all candidates whose ranks are $i + 1, i + 2, \\ldots, n - 1$ must be interviewed after the candidate whose rank is $n$. (When $i = n - 1$, this second condition vacuously holds.)\n\n\nLet $E_i$ be the event in which candidate 1 has rank $i$; clearly, $\\Pr\\{E_i\\} = 1 / n$ for any given value of $i$.\n\n\nLetting $j$ denote the position in the interview order of the best candidate, let $F$ be the event in which candidates $2, 3, \\ldots, j - 1$ have ranks strictly less than the rank of candidate 1. Given that event $E_i$ has occurred, event $F$ occurs when the best candidate is the first one interviewed out of the $n - i$ candidates whose ranks are $i + 1, i + 2, \\ldots, n$. Thus, $\\Pr\\{F \\mid E_i\\} = 1 / (n - i)$.\n\n\nOur final event is $A$, which occurs when $\\text{HIRE-ASSISTANT}$ hires exactly twice. Noting that the events $E_1, E_2, \\ldots, E_n$ are disjoint, we have\n\n\n\\begin{align}\nA & = F \\cap (E_1 \\cup E_2 \\cup \\cdots \\cup E_{n - 1}) \\\\\n  & = (F \\cap E_1) \\cup (F \\cap E_2) \\cup \\cdots \\cup (F \\cap E_{n - 1}).\n\\end{align}\n\n\nand\n\n\n$$\\Pr\\{A\\} = \\sum_{i = 1}^{n - 1}\\Pr\\{F \\cap E_i\\}.\n\n\nBy equation $\\text{(C.14)}$,\n\n\n\\begin{align}\n\\Pr\\{F \\cap E_i\\} & = \\Pr\\{F | E_i\\}\\Pr\\{E_i\\} \\\\\n                  & = \\frac{1}{n - i} \\cdot \\frac{1}{n},\n\\end{align}\n\n\nand so\n\n\n\\begin{align}\n\\Pr\\{A\\} & = \\sum_{i = 1}^{n - 1} \\frac{1}{n - i} \\cdot \\frac{1}{n} \\\\\n         & = \\frac{1}{n} \\sum_{i = 1}^{n - 1} \\frac{1}{n - i} \\\\\n         & = \\frac{1}{n} \\Big(\\frac{1}{n - 1} + \\frac{1}{n - 2} + \\cdots + \\frac{1}{1}\\Big) \\\\\n         & = \\frac{1}{n} \\cdot H_{n - 1},\n\\end{align}\n\n\nwhere $H_{n - 1}$ is the $n$th harmonic number.\n\n\n5.2-3\n\n\n\n\nUse indicator random variables to compute the expected value of the sum of $n$ dice.\n\n\n\n\nExpectation of a single dice $X_i$ is\n\n\n\\begin{align}\n\\text E[X_k] & = \\sum_{i = 1}^6 i \\Pr\\{X_k = i\\} \\\\\n             & = \\frac{1 + 2 + 3 + 4 + 5 + 6}{6} \\\\\n             & = \\frac{21}{6} \\\\\n             & = 3.5.\n\\end{align}\n\n\nAs for multiple dices,\n\n\n\\begin{align}\n\\text E[X] & = \\text E\\Bigg[\\sum_{i = 1}^n X_i \\Bigg] \\\\\n           & = \\sum_{i = 1}^n \\text E[X_i] \\\\\n           & = \\sum_{i = 1}^n 3.5 \\\\\n           & = 3.5 \\cdot n.\n\\end{align}\n\n\n5.2-4\n\n\n\n\nUse indicator random variables to solve the following problem, which is known as the \nhat-check problem\n. Each of $n$ customer gives a hat to a hat-check person at a restaurant. The hat-check person gives the hats back to the customers in a random order. What is the expected number of customers who get back their hat?\n\n\n\n\nAnother way to think of the hat-check problem is that we want to determine the expected number of fixed points in a random permutation. (A \nfixed point\n of a permutation $\\pi$ is a value $i$ for which $\\pi(i) = i$.) We could enumerate all $n!$ permutations, count the total number of fixed points, and divide by $n!$ to determine the average number of fixed points per permutation. This would be a painstaking process, and the answer would turn out to be $1$. We can use indicator random variables, however, to arrive at the same answer much more easily.\n\n\nDefine a random variable $X$ that equals the number of customers that get back their own hat, so that we want to compute $\\text E[X]$\u008d.\n\n\nFor $i = 1, 2, \\ldots, n$, define the indicator random variable\n\n\n$X_i = I$ {customer $i$ gets back his own hat}.\n\n\nThen $X = X_1 + X_2 + \\cdots + X_n$.\n\n\nSince the ordering of hats is random, each customer has a probability of $1 / n$ of getting back his or her own hat. In other words, $\\Pr\\{X_i = 1\\} = 1 / n$, which, by Lemma 5.1, implies that $\\text E[X_i] = 1 / n$.\n\n\nThus,\n\n\n\\begin{align}\n\\text E[X] & = \\text E \\Bigg[ \\sum_{i = 1}^n X_i \\Bigg] \\\\\n           & = \\sum_{i = 1}^n \\text E[X_i] & \\text{(linearity of expectation)} \\\\\n           & = \\sum_{i = 1}^n 1 / n \\\\\n           & =  1,\n\\end{align}\n\n\nand so we expect that exactly 1 customer gets back his own hat.\n\n\nNote that this is a situation in which the indicator random variables are not independent. For example, if $n = 2$ and $X_1 = 1$, then $X_2$ must also equal $1$. Conversely, if $n = 2$ and $X_1 = 0$, then $X_2$ must also equal $0$. Despite the dependence, $\\Pr\\{X_i = 1\\} = 1 / n$ for all $i$, and linearity of expectation holds. Thus, we can use the technique of indicator random variables even in the presence of dependence.\n\n\n5.2-5\n\n\n\n\nLet $A[1..n]$ be an array of $n$ distinct numbers. If $i < j$ and $A[i] > A[j]$, then the pair $(i, j)$ is called an \ninversion\n of $A$. (See Problem 2-4 for more on inversions.) Suppose that the elements of $A$ form a uniform random permutation of $\\langle 1, 2, \\ldots, n \\rangle$. Use indicator random variables to compute the expected number of inversions.\n\n\n\n\nLet $X_{ij}$ be an indicator random variable for the event where the pair $A[i]$, $A[j]$ \u008dfor $i < j$ is inverted, i.e., $A[i] > A[j]$\u008d. More precisely, we define $X_{ij} = I\\{A[i] > A[j]\\}$ for $1 \\le i < j \\le n$. We have $\\Pr\\{X_{ij} = 1\\} = 1 / 2$, because given two distinct random numbers, the probability that the first is bigger than the second is $1 / 2$. By Lemma 5.1, $E[X_{ij}] = 1 / 2$.\n\n\nLet $X$ be the the random variable denoting the total number of inverted pairs in the array, so that\n\n\nX = \\sum_{i = 1}^{n - 1} \\sum_{j = i + 1}^n X_{ij}.\n\n\nWe want the expected number of inverted pairs, so we take the expectation of both sides of the above equation to obtain\n\\text E[X] = \\text E \\Bigg[\\sum_{i = 1}^{n - 1} \\sum_{j = i + 1}^n X_{ij} \\Bigg].\n\n\nWe use linearity of expectation to get\n\n\n\\begin{align}\n\\text E[X] & = \\text E \\Bigg[\\sum_{i = 1}^{n - 1}\\sum_{j = i + 1}^n X_{ij} \\Bigg] \\\\\n           & = \\sum_{i = 1}^{n - 1}\\sum_{j = i + 1}^n \\text E[X_{ij}] \\\\\n           & = \\sum_{i = 1}^{n - 1}\\sum_{j = i + 1}^n 1 / 2 \\\\\n           & = \\binom{n}{2}\\frac{1}{2} \\\\\n           & = \\frac{n(n - 1)}{2} \\cdot \\frac{1}{2} \\\\\n           & = \\frac{n(n - 1)}{4}.\n\\end{align}\n\n\nThus the expected number of inverted pairs is $n(n - 1) / 4$.",
            "title": "5.2 Indicator random variables"
        },
        {
            "location": "/Chap05/5.2/#521",
            "text": "In $\\text{HIRE-ASSISTANT}$, assuming that the candidates are presented in a random order, what is the probability that you hire exactly one time? What is the probability you hire exactly $n$ times?   Since $\\text{HIRE-ASSISTANT}$ always hires candidate 1, it hires exactly once if and only if no candidates other than candidate 1 are hired. This event occurs when candidate 1 is the best candidate of the $n$, which occurs with probability $1 / n$.  $\\text{HIRE-ASSISTANT}$ hires $n$ times if each candidate is better than all those who were interviewed (and hired) before. This event occurs precisely when the list of ranks given to the algorithm is $\\langle 1, 2, \\ldots, n \\rangle$, which occurs with probability $1 / n!$.",
            "title": "5.2.1"
        },
        {
            "location": "/Chap05/5.2/#52-2",
            "text": "In $\\text{HIRE-ASSISTANT}$, assuming that the candidates are presented in a random order, what is the probability that you hire exactly twice?   We make three obervations:   Candidate 1 is always hired.  The best candidate, i.e., the one whose rank is $n$, is always hired.  If the best candidate is candidate 1, then that is the only candidate hired.   Therefore, in order for $\\text{HIRE-ASSISTANT}$ to hire exactly twice, candidate 1 must have rank $i \\le n - 1$ and all candidates whose ranks are $i + 1, i + 2, \\ldots, n - 1$ must be interviewed after the candidate whose rank is $n$. (When $i = n - 1$, this second condition vacuously holds.)  Let $E_i$ be the event in which candidate 1 has rank $i$; clearly, $\\Pr\\{E_i\\} = 1 / n$ for any given value of $i$.  Letting $j$ denote the position in the interview order of the best candidate, let $F$ be the event in which candidates $2, 3, \\ldots, j - 1$ have ranks strictly less than the rank of candidate 1. Given that event $E_i$ has occurred, event $F$ occurs when the best candidate is the first one interviewed out of the $n - i$ candidates whose ranks are $i + 1, i + 2, \\ldots, n$. Thus, $\\Pr\\{F \\mid E_i\\} = 1 / (n - i)$.  Our final event is $A$, which occurs when $\\text{HIRE-ASSISTANT}$ hires exactly twice. Noting that the events $E_1, E_2, \\ldots, E_n$ are disjoint, we have  \\begin{align}\nA & = F \\cap (E_1 \\cup E_2 \\cup \\cdots \\cup E_{n - 1}) \\\\\n  & = (F \\cap E_1) \\cup (F \\cap E_2) \\cup \\cdots \\cup (F \\cap E_{n - 1}).\n\\end{align}  and  $$\\Pr\\{A\\} = \\sum_{i = 1}^{n - 1}\\Pr\\{F \\cap E_i\\}.  By equation $\\text{(C.14)}$,  \\begin{align}\n\\Pr\\{F \\cap E_i\\} & = \\Pr\\{F | E_i\\}\\Pr\\{E_i\\} \\\\\n                  & = \\frac{1}{n - i} \\cdot \\frac{1}{n},\n\\end{align}  and so  \\begin{align}\n\\Pr\\{A\\} & = \\sum_{i = 1}^{n - 1} \\frac{1}{n - i} \\cdot \\frac{1}{n} \\\\\n         & = \\frac{1}{n} \\sum_{i = 1}^{n - 1} \\frac{1}{n - i} \\\\\n         & = \\frac{1}{n} \\Big(\\frac{1}{n - 1} + \\frac{1}{n - 2} + \\cdots + \\frac{1}{1}\\Big) \\\\\n         & = \\frac{1}{n} \\cdot H_{n - 1},\n\\end{align}  where $H_{n - 1}$ is the $n$th harmonic number.",
            "title": "5.2-2"
        },
        {
            "location": "/Chap05/5.2/#52-3",
            "text": "Use indicator random variables to compute the expected value of the sum of $n$ dice.   Expectation of a single dice $X_i$ is  \\begin{align}\n\\text E[X_k] & = \\sum_{i = 1}^6 i \\Pr\\{X_k = i\\} \\\\\n             & = \\frac{1 + 2 + 3 + 4 + 5 + 6}{6} \\\\\n             & = \\frac{21}{6} \\\\\n             & = 3.5.\n\\end{align}  As for multiple dices,  \\begin{align}\n\\text E[X] & = \\text E\\Bigg[\\sum_{i = 1}^n X_i \\Bigg] \\\\\n           & = \\sum_{i = 1}^n \\text E[X_i] \\\\\n           & = \\sum_{i = 1}^n 3.5 \\\\\n           & = 3.5 \\cdot n.\n\\end{align}",
            "title": "5.2-3"
        },
        {
            "location": "/Chap05/5.2/#52-4",
            "text": "Use indicator random variables to solve the following problem, which is known as the  hat-check problem . Each of $n$ customer gives a hat to a hat-check person at a restaurant. The hat-check person gives the hats back to the customers in a random order. What is the expected number of customers who get back their hat?   Another way to think of the hat-check problem is that we want to determine the expected number of fixed points in a random permutation. (A  fixed point  of a permutation $\\pi$ is a value $i$ for which $\\pi(i) = i$.) We could enumerate all $n!$ permutations, count the total number of fixed points, and divide by $n!$ to determine the average number of fixed points per permutation. This would be a painstaking process, and the answer would turn out to be $1$. We can use indicator random variables, however, to arrive at the same answer much more easily.  Define a random variable $X$ that equals the number of customers that get back their own hat, so that we want to compute $\\text E[X]$\u008d.  For $i = 1, 2, \\ldots, n$, define the indicator random variable  $X_i = I$ {customer $i$ gets back his own hat}.  Then $X = X_1 + X_2 + \\cdots + X_n$.  Since the ordering of hats is random, each customer has a probability of $1 / n$ of getting back his or her own hat. In other words, $\\Pr\\{X_i = 1\\} = 1 / n$, which, by Lemma 5.1, implies that $\\text E[X_i] = 1 / n$.  Thus,  \\begin{align}\n\\text E[X] & = \\text E \\Bigg[ \\sum_{i = 1}^n X_i \\Bigg] \\\\\n           & = \\sum_{i = 1}^n \\text E[X_i] & \\text{(linearity of expectation)} \\\\\n           & = \\sum_{i = 1}^n 1 / n \\\\\n           & =  1,\n\\end{align}  and so we expect that exactly 1 customer gets back his own hat.  Note that this is a situation in which the indicator random variables are not independent. For example, if $n = 2$ and $X_1 = 1$, then $X_2$ must also equal $1$. Conversely, if $n = 2$ and $X_1 = 0$, then $X_2$ must also equal $0$. Despite the dependence, $\\Pr\\{X_i = 1\\} = 1 / n$ for all $i$, and linearity of expectation holds. Thus, we can use the technique of indicator random variables even in the presence of dependence.",
            "title": "5.2-4"
        },
        {
            "location": "/Chap05/5.2/#52-5",
            "text": "Let $A[1..n]$ be an array of $n$ distinct numbers. If $i < j$ and $A[i] > A[j]$, then the pair $(i, j)$ is called an  inversion  of $A$. (See Problem 2-4 for more on inversions.) Suppose that the elements of $A$ form a uniform random permutation of $\\langle 1, 2, \\ldots, n \\rangle$. Use indicator random variables to compute the expected number of inversions.   Let $X_{ij}$ be an indicator random variable for the event where the pair $A[i]$, $A[j]$ \u008dfor $i < j$ is inverted, i.e., $A[i] > A[j]$\u008d. More precisely, we define $X_{ij} = I\\{A[i] > A[j]\\}$ for $1 \\le i < j \\le n$. We have $\\Pr\\{X_{ij} = 1\\} = 1 / 2$, because given two distinct random numbers, the probability that the first is bigger than the second is $1 / 2$. By Lemma 5.1, $E[X_{ij}] = 1 / 2$.  Let $X$ be the the random variable denoting the total number of inverted pairs in the array, so that  X = \\sum_{i = 1}^{n - 1} \\sum_{j = i + 1}^n X_{ij}.  We want the expected number of inverted pairs, so we take the expectation of both sides of the above equation to obtain\n\\text E[X] = \\text E \\Bigg[\\sum_{i = 1}^{n - 1} \\sum_{j = i + 1}^n X_{ij} \\Bigg].  We use linearity of expectation to get  \\begin{align}\n\\text E[X] & = \\text E \\Bigg[\\sum_{i = 1}^{n - 1}\\sum_{j = i + 1}^n X_{ij} \\Bigg] \\\\\n           & = \\sum_{i = 1}^{n - 1}\\sum_{j = i + 1}^n \\text E[X_{ij}] \\\\\n           & = \\sum_{i = 1}^{n - 1}\\sum_{j = i + 1}^n 1 / 2 \\\\\n           & = \\binom{n}{2}\\frac{1}{2} \\\\\n           & = \\frac{n(n - 1)}{2} \\cdot \\frac{1}{2} \\\\\n           & = \\frac{n(n - 1)}{4}.\n\\end{align}  Thus the expected number of inverted pairs is $n(n - 1) / 4$.",
            "title": "5.2-5"
        },
        {
            "location": "/Chap05/5.3/",
            "text": "5.3.1\n\n\n\n\nProfessor Marceau objects to the loop invariant used in the proof of Lemma 5.5. He questions whether it is true prior to the first iteration. He reasons that we could just as easily declare that an empty subarray contains no $0$-permutations. Therefore, the probability that an empty subarray contains a $0$-permutation should be $0$, thus invalidating the loop invariant prior to the first iteration. Rewrite the procedure $\\text{RANDOMIZE-IN-PLACE}$ so that its associated loop invariant applies to a nonempty subarray prior to the first iteration, and modify the proof of Lemma 5.5 for your procedure.\n\n\n\n\nHere's the rewritten procedure:\n\n\nRANDOMIZE\n-\nIN\n-\nPLACE\n(\nA\n)\n\n    \nn\n \n=\n \nA\n.\nlength\n\n    \nswap\n \nA\n[\n1\n]\n \nwith\n \nA\n[\nRANDOM\n(\n1\n,\n \nn\n)]\n\n    \nfor\n \ni\n \n=\n \n2\n \nto\n \nn\n\n        \nswap\n \nA\n[\ni\n]\n \nwith\n \nA\n[\nRANDOM\n(\ni\n,\n \nn\n)]\n\n\n\n\n\nThe loop invariant becomes\n\n\nLoop invariant:\n Just prior to the iteration of the \nfor\n loop for each value of $i = 2, \\ldots, n$, for each possible $(i - 1)$-permutation, the subarray $A[1..i - 1]$ contains this $(i - 1)$-permutation with probability $(n - i + 1)! / n!$.\n\n\nThe maintenance and termination parts remain the same. The initialization part is for the subarray $A[1..1]$\u008d, which contains any $1$-permutation with probability $(n - 1)! / n \\ne 1 / n$.\n\n\n5.3-2\n\n\n\n\nProfessor Kelp decides to write a procedure that produces at random any permutation besides the identity permutation. He proposes the following procedure:\n\n\nPERMUTE\n-\nWITHOUT\n-\nIDENTITY\n(\nA\n)\n\n    \nn\n \n=\n \nA\n.\nlength\n\n    \nfor\n \ni\n \n=\n \n1\n \nto\n \nn\n \n-\n \n1\n\n        \nswap\n \nA\n[\ni\n]\n \nwith\n \nA\n[\nRANDOM\n(\ni\n \n+\n \n1\n,\n \nn\n)]\n\n\n\n\n\nDoes this code do what Professor Kelp intends?\n\n\n\n\nAlthough $\\text{PERMUTE-WITHOUT-IDENTITY}$ will not produce the identity permutation, there are other permutations that it fails to produce. For example, consider its operation when $n = 3$, when it should be able to produce the $n! - 1 = 5$ nonidentity permutations. The \nfor\n loop iterates for $i = 1$ and $i = 2$. When $i = 1$, the call to $\\text{RANDOM}$ returns one of two possible values (either $2$ or $3$), and when $i = 2$, the call to $\\text{RANDOM}$ returns just one value $(3)$. Thus, $\\text{PERMUTE-WITHOUT-IDENTITY}$ can produce only $2 \\cdot 1 = 2$ possible permutations, rather than the $5$ that are required.\n\n\n5.3-3\n\n\n\n\nSuppose that instead of swapping element $A[i]$ with a random element from the subarray $A[i..n]$, we swapped it with a random element from anywhere in the array:\n\n\nPERMUTE\n-\nWITH\n-\nALL\n(\nA\n)\n\n    \nn\n \n=\n \nA\n.\nlength\n\n    \nfor\n \ni\n \n=\n \n1\n \nto\n \nn\n\n        \nswap\n \nA\n[\ni\n]\n \nwith\n \nA\n[\nRANDOM\n(\n1\n,\n \nn\n)]\n\n\n\n\n\nDoes this code produce a uniform random permutation? Why or why not?\n\n\n\n\nThe $\\text{PERMUTE-WITH-ALL}$ procedure does not produce a uniform random permutation. Consider the permutations it produces when $n = 3$. The procedure makes 3 calls to $\\text{RANDOM}$, each of which returns one of 3 values, and so calling $\\text{PERMUTE-WITH-ALL}$ has 27 possible outcomes. Since there are $3! = 6$ permutations, if $\\text{PERMUTE-WITH-ALL}$ did produce a uniform random permutation, then each permutation would occur $1 / 6$ of the time. That would mean that each permutation would have to occur an integer number $m$ times, where $m / 27 = 1 / 6$. No integer $m$ satisfies this condition.\n\n\nIn fact, if we were to work out the possible permutations of $\\langle 1, 2, 3 \\rangle$ and how often they occur with $\\text{PERMUTE-WITH-ALL}$, we would get the following probabilities:\n\n\n\\begin{array}{cc}\n\\text{permutation} & \\text{probability} \\\\\n\\hline\n\\langle 1, 2, 3 \\rangle & 4 / 27 \\\\\n\\langle 1, 3, 2 \\rangle & 5 / 27 \\\\\n\\langle 2, 1, 3 \\rangle & 5 / 27 \\\\\n\\langle 2, 3, 1 \\rangle & 5 / 27 \\\\\n\\langle 3, 1, 2 \\rangle & 4 / 27 \\\\\n\\langle 3, 2, 1 \\rangle & 4 / 27 \n\\end{array}\n\n\nAlthough these probabilities sum to $1$, none are equal to $1 / 6$.\n\n\n5.3-4\n\n\n\n\nProfessor Armstrong suggests the following procedure for generating a uniform random permutation:\n\n\nPERMUTE\n-\nBY\n-\nCYCLE\n(\nA\n)\n\n    \nn\n \n=\n \nA\n.\nlength\n\n    \nlet\n \nB\n[\n1.\n.\nn\n]\n \nbe\n \na\n \nnew\n \narray\n\n    \noffset\n \n=\n \nRANDOM\n(\n1\n,\n \nn\n)\n\n    \nfor\n \ni\n \n=\n \n1\n \nto\n \nn\n\n        \ndest\n \n=\n \ni\n \n+\n \noffset\n\n        \nif\n \ndest\n \n>\n \nn\n\n            \ndest\n \n=\n \ndest\n \n-\n \nn\n\n        \nB\n[\ndest\n]\n \n=\n \nA\n[\ni\n]\n\n    \nreturn\n \nB\n\n\n\n\n\nShow that each element $A[i]$ has a $1 / n$ probability of winding up in any particular position in $B$. Then show that Professor Armstrong is mistaken by showing that the resulting permutation is not uniformly random.\n\n\n\n\n$\\text{PERMUTE-BY-CYCLE}$ chooses offset as a random integer in the range $1 \\le offset \\le n$, and then it performs a cyclic rotation of the array. That is, $B[((i + offset - 1)\\mod n) + 1] = A[i]$. (The subtraction and addition of $1$ in the index calculation is due to the $1$-origin indexing. If we had used $0$-origin indexing instead, the index calculation would have simplied to $B[(i + offset)\\mod n] = A[i]$ for $i = 0, 1, \\ldots, n - 1$.)\n\n\nThus, once offset is determined, so is the entire permutation. Since each value of offset occurs with probability $1 / n$, each element $A[i]$\u008d has a probability of ending up in position $B[j]$\u008d with probability $1 / n$.\n\n\nThis procedure does not produce a uniform random permutation, however, since it can produce only $n$ different permutations. Thus, $n$ permutations occur with probability $1 / n$, and the remaining $n! - n$ permutations occur with probability $0$.\n\n\n5.3-5 $\\star$\n\n\n\n\nProve that in the array $P$ in procedure $\\text{PERMUTE-BY-SORTING}$, the probability that all elements are unique is at least $1 - 1 / n$.\n\n\n\n\nLet $\\Pr\\{j\\}$ be the probability that the element with index $j$ is unique. If there are $n^3$ elements, then the $\\Pr\\{j\\} = 1 - \\frac{j - 1}{n^3}$.\n\n\n\\begin{align}\n\\Pr\\{1 \\cap 2 \\cap 3 \\cap \\ldots\\}\n    & =   \\Pr\\{1\\} \\cdot \\Pr\\{2 \\mid 1\\} \\cdot \\Pr\\{3 \\mid 1 \\cap 2\\} \\cdots \\\\\n    & =   1 (1 - \\frac{1}{n^3})(1 - \\frac{2}{n^3})(1 - \\frac{3}{n^3}) \\cdots \\\\\n    & \\ge 1 (1 - \\frac{n}{n^3}) (1 - \\frac{n}{n^3})(1 - \\frac{n}{n^3}) \\cdots \\\\\n    & \\ge (1 - \\frac{1}{n^2})^n \\\\\n    & \\ge 1 - \\frac{1}{n}, \\\\\n\\end{align}\n\n\nwhere the last step holds for $(1 - x)^n \\ge 1 - nx$.\n\n\n5.3-6\n\n\n\n\nExplain how to implement the algorithm $\\text{PERMUTE-BY-SORTING}$ to handle the case in which two or more priorities are identical. That is, your algorithm should produce a uniform random permutation, even if two or more priorities are identical.\n\n\n\n\nPERMUTE\n-\nBY\n-\nSORTING\n(\nA\n)\n\n    \ninitialize\n \nP\n \nwith\n \nP\n[\ni\n]\n \n=\n \ni\n \nfor\n \ni\n \n=\n \n1.\n.\nn\n\n    \nfor\n \ni\n \n=\n \n1\n \nto\n \nn\n\n        \nswap\n \nP\n[\ni\n]\n \nwith\n \nP\n[\nRANDOM\n(\ni\n,\n \nn\n)]\n\n\n\n\n\n5.3-7\n\n\n\n\nSuppose we want to create a \nrandom sample\n of the set $\\{1, 2, 3, \\ldots, n\\}$, that is, an $m$-element subset $S$, where $0 \\le m \\le n$, such that each $m$-subset is equally likely to be created. One way would be to set $A[i] = i$ for $i = 1, 2, 3, \\ldots, n$, call $\\text{RANDOMIZE-IN-PLACE}(A)$, and then take just the first $m$ array elements. This method would make $n$ calls to the $\\text{RANDOM}$ procedure. If $n$ is much larger than $m$, we can create a random sample with fewer calls to $\\text{RANDOM}$. Show that the following recursive procedure returns a random $m$-subset $S$ of $\\{1, 2, 3, \\ldots, n\\}$, in which each $m$-subset is equally likely, while making only $m$ calls to $\\text{RANDOM}$:\n\n\nRANDOM\n-\nSAMPLE\n(\nm\n,\n \nn\n)\n\n    \nif\n \nm\n \n==\n \n0\n\n        \nreturn\n \n\u2205\n\n    \nelse\n \nS\n \n=\n \nRANDOM\n-\nSAMPLE\n(\nm\n \n-\n \n1\n,\n \nn\n \n-\n \n1\n)\n\n        \ni\n \n=\n \nRANDOM\n(\n1\n,\n \nn\n)\n\n        \nif\n \ni\n \n\u2208\n \nS\n\n            \nS\n \n=\n \nS\n \n\u222a\n \n{\nn\n}\n\n        \nelse\n \nS\n \n=\n \nS\n \n\u222a\n \n{\ni\n}\n\n        \nreturn\n \nS\n\n\n\n\n\n\n\nSince each recursive call reduces $m$ by $1$ and makes only one call to $\\text{RANDOM}$, it's easy to see that there are a total of $m$ calls to $\\text{RANDOM}$. Moreover, since each recursive call adds exactly one element to the set, it's easy to see that the resulting set $S$ contains exactly $m$ elements.\n\n\nBecause the elements of set $S$ are chosen independently of each other, it suffices to show that each of the $n$ values appears in $S$ with probability $m / n$. We use an inductive proof. The inductive hypothesis is that a call to $\\text{RANDOM-SUBSET}(m, n)$ returns a set $S$ of $m$ elements, each appearing with probability $m / n$. The base cases are for $m = 0$ and $m = 1$. When $m = 0$, the returned set is empty, and so it contains each element with probability $0$. When $m = 1$, the returned set has one element, and it is equally likely to be any number in $\\{1, 2, 3, \\ldots, n\\}$\n\n\nFor the inductive step, we assume that the call $\\text{RANDOM-SUBSET}(m - 1, n - 1)$ returns a set $S'$ of $m - 1$ elements in which each value in ${1, 2, 3, \\ldots, n - 1}$ occurs with probability $(m - 1) / (n - 1)$. After the line $i = \\text{RANDOM}(1, n)$, $i$ is equally likely to be any value in ${1, 2, 3, \\ldots, n}$. We consider separately the probabilities that $S$ contains $j < n$ and that $S$ contains $n$. Let $R_j$ be the event that the call $\\text{RANDOM}(1, n)$ returns $j$ , so that $\\Pr\\{R_j\\} = 1 / n$.\n\n\nFor $j < n$, the event that $j \\in S$ is the union of two disjoint events:\n\n\n\n\n$j \\in S'$, and\n\n\n$j \\notin S'$ and $R_j$ (these events are independent),\n\n\n\n\nThus\n\n\n\\begin{align}\n\\Pr\\{j \\in S\\}\n    & = \\Pr\\{j \\in S'\\} + \\Pr\\{j \\notin S' \\text{ and } R_j\\} & \\text{ (the events are disjoint)} \\\\\n    & = \\frac{m - 1}{n - 1} + \\Big(1 - \\frac{m - 1}{n - 1}\\Big) \\cdot \\frac{1}{n} & \\text{ (by the inductive hypothesis)} \\\\\n    & = \\frac{m - 1}{n - 1} + \\Big(\\frac{n - 1}{n - 1} - \\frac{m - 1}{n - 1}\\Big) \\cdot \\frac{1}{n} \\\\\n    & = \\frac{m - 1}{n - 1} \\cdot \\frac{n}{n} + \\frac{n - m}{n - 1} \\cdot \\frac{1}{n} \\\\\n    & = \\frac{(m - 1)n + (n - m)}{(n - 1)n} \\\\\n    & = \\frac{mn - n + n - m}{(n - 1)n} \\\\\n    & = \\frac{m(n - 1)}{(n - 1)n} \\\\\n    & = \\frac{m}{n}.\n\\end{align}\n\n\nThe event that $n \\in S$ is also the union of two disjoint events:\n\n\n\n\n$R_n$, and\n\n\n$R_j$ and $j \\in S'$ for some $j < n$ (these events are independent).\n\n\n\n\n\\begin{align}\n\\Pr\\{n \\in S\\}\n    & = \\Pr\\{R_n\\} + \\Pr\\{R_j \\text{ and } j\\in S' \\text{ for some } j < n\\} & \\text{ (the events are disjoint)} \\\\\n    & = \\frac{1}{n} + \\frac{n - 1}{n} \\cdot \\frac{m - 1}{n - 1} & \\text{ (by the inductive hypothesis)} \\\\\n    & = \\frac{1}{n} \\cdot \\frac{n - 1}{n - 1} + \\frac{n - 1}{n} \\cdot \\frac{m - 1}{n - 1} \\\\\n    & = \\frac{n - 1+nm-n - m+1}{n(n - 1)} \\\\\n    & = \\frac{nm-m}{n(n - 1)} \\\\\n    & = \\frac{m(n - 1)}{n(n - 1)} \\\\\n    & = \\frac{m}{n}.\n\\end{align}",
            "title": "5.3 Randomized algorithms"
        },
        {
            "location": "/Chap05/5.3/#531",
            "text": "Professor Marceau objects to the loop invariant used in the proof of Lemma 5.5. He questions whether it is true prior to the first iteration. He reasons that we could just as easily declare that an empty subarray contains no $0$-permutations. Therefore, the probability that an empty subarray contains a $0$-permutation should be $0$, thus invalidating the loop invariant prior to the first iteration. Rewrite the procedure $\\text{RANDOMIZE-IN-PLACE}$ so that its associated loop invariant applies to a nonempty subarray prior to the first iteration, and modify the proof of Lemma 5.5 for your procedure.   Here's the rewritten procedure:  RANDOMIZE - IN - PLACE ( A ) \n     n   =   A . length \n     swap   A [ 1 ]   with   A [ RANDOM ( 1 ,   n )] \n     for   i   =   2   to   n \n         swap   A [ i ]   with   A [ RANDOM ( i ,   n )]   The loop invariant becomes  Loop invariant:  Just prior to the iteration of the  for  loop for each value of $i = 2, \\ldots, n$, for each possible $(i - 1)$-permutation, the subarray $A[1..i - 1]$ contains this $(i - 1)$-permutation with probability $(n - i + 1)! / n!$.  The maintenance and termination parts remain the same. The initialization part is for the subarray $A[1..1]$\u008d, which contains any $1$-permutation with probability $(n - 1)! / n \\ne 1 / n$.",
            "title": "5.3.1"
        },
        {
            "location": "/Chap05/5.3/#53-2",
            "text": "Professor Kelp decides to write a procedure that produces at random any permutation besides the identity permutation. He proposes the following procedure:  PERMUTE - WITHOUT - IDENTITY ( A ) \n     n   =   A . length \n     for   i   =   1   to   n   -   1 \n         swap   A [ i ]   with   A [ RANDOM ( i   +   1 ,   n )]   Does this code do what Professor Kelp intends?   Although $\\text{PERMUTE-WITHOUT-IDENTITY}$ will not produce the identity permutation, there are other permutations that it fails to produce. For example, consider its operation when $n = 3$, when it should be able to produce the $n! - 1 = 5$ nonidentity permutations. The  for  loop iterates for $i = 1$ and $i = 2$. When $i = 1$, the call to $\\text{RANDOM}$ returns one of two possible values (either $2$ or $3$), and when $i = 2$, the call to $\\text{RANDOM}$ returns just one value $(3)$. Thus, $\\text{PERMUTE-WITHOUT-IDENTITY}$ can produce only $2 \\cdot 1 = 2$ possible permutations, rather than the $5$ that are required.",
            "title": "5.3-2"
        },
        {
            "location": "/Chap05/5.3/#53-3",
            "text": "Suppose that instead of swapping element $A[i]$ with a random element from the subarray $A[i..n]$, we swapped it with a random element from anywhere in the array:  PERMUTE - WITH - ALL ( A ) \n     n   =   A . length \n     for   i   =   1   to   n \n         swap   A [ i ]   with   A [ RANDOM ( 1 ,   n )]   Does this code produce a uniform random permutation? Why or why not?   The $\\text{PERMUTE-WITH-ALL}$ procedure does not produce a uniform random permutation. Consider the permutations it produces when $n = 3$. The procedure makes 3 calls to $\\text{RANDOM}$, each of which returns one of 3 values, and so calling $\\text{PERMUTE-WITH-ALL}$ has 27 possible outcomes. Since there are $3! = 6$ permutations, if $\\text{PERMUTE-WITH-ALL}$ did produce a uniform random permutation, then each permutation would occur $1 / 6$ of the time. That would mean that each permutation would have to occur an integer number $m$ times, where $m / 27 = 1 / 6$. No integer $m$ satisfies this condition.  In fact, if we were to work out the possible permutations of $\\langle 1, 2, 3 \\rangle$ and how often they occur with $\\text{PERMUTE-WITH-ALL}$, we would get the following probabilities:  \\begin{array}{cc}\n\\text{permutation} & \\text{probability} \\\\\n\\hline\n\\langle 1, 2, 3 \\rangle & 4 / 27 \\\\\n\\langle 1, 3, 2 \\rangle & 5 / 27 \\\\\n\\langle 2, 1, 3 \\rangle & 5 / 27 \\\\\n\\langle 2, 3, 1 \\rangle & 5 / 27 \\\\\n\\langle 3, 1, 2 \\rangle & 4 / 27 \\\\\n\\langle 3, 2, 1 \\rangle & 4 / 27 \n\\end{array}  Although these probabilities sum to $1$, none are equal to $1 / 6$.",
            "title": "5.3-3"
        },
        {
            "location": "/Chap05/5.3/#53-4",
            "text": "Professor Armstrong suggests the following procedure for generating a uniform random permutation:  PERMUTE - BY - CYCLE ( A ) \n     n   =   A . length \n     let   B [ 1. . n ]   be   a   new   array \n     offset   =   RANDOM ( 1 ,   n ) \n     for   i   =   1   to   n \n         dest   =   i   +   offset \n         if   dest   >   n \n             dest   =   dest   -   n \n         B [ dest ]   =   A [ i ] \n     return   B   Show that each element $A[i]$ has a $1 / n$ probability of winding up in any particular position in $B$. Then show that Professor Armstrong is mistaken by showing that the resulting permutation is not uniformly random.   $\\text{PERMUTE-BY-CYCLE}$ chooses offset as a random integer in the range $1 \\le offset \\le n$, and then it performs a cyclic rotation of the array. That is, $B[((i + offset - 1)\\mod n) + 1] = A[i]$. (The subtraction and addition of $1$ in the index calculation is due to the $1$-origin indexing. If we had used $0$-origin indexing instead, the index calculation would have simplied to $B[(i + offset)\\mod n] = A[i]$ for $i = 0, 1, \\ldots, n - 1$.)  Thus, once offset is determined, so is the entire permutation. Since each value of offset occurs with probability $1 / n$, each element $A[i]$\u008d has a probability of ending up in position $B[j]$\u008d with probability $1 / n$.  This procedure does not produce a uniform random permutation, however, since it can produce only $n$ different permutations. Thus, $n$ permutations occur with probability $1 / n$, and the remaining $n! - n$ permutations occur with probability $0$.",
            "title": "5.3-4"
        },
        {
            "location": "/Chap05/5.3/#53-5-star",
            "text": "Prove that in the array $P$ in procedure $\\text{PERMUTE-BY-SORTING}$, the probability that all elements are unique is at least $1 - 1 / n$.   Let $\\Pr\\{j\\}$ be the probability that the element with index $j$ is unique. If there are $n^3$ elements, then the $\\Pr\\{j\\} = 1 - \\frac{j - 1}{n^3}$.  \\begin{align}\n\\Pr\\{1 \\cap 2 \\cap 3 \\cap \\ldots\\}\n    & =   \\Pr\\{1\\} \\cdot \\Pr\\{2 \\mid 1\\} \\cdot \\Pr\\{3 \\mid 1 \\cap 2\\} \\cdots \\\\\n    & =   1 (1 - \\frac{1}{n^3})(1 - \\frac{2}{n^3})(1 - \\frac{3}{n^3}) \\cdots \\\\\n    & \\ge 1 (1 - \\frac{n}{n^3}) (1 - \\frac{n}{n^3})(1 - \\frac{n}{n^3}) \\cdots \\\\\n    & \\ge (1 - \\frac{1}{n^2})^n \\\\\n    & \\ge 1 - \\frac{1}{n}, \\\\\n\\end{align}  where the last step holds for $(1 - x)^n \\ge 1 - nx$.",
            "title": "5.3-5 $\\star$"
        },
        {
            "location": "/Chap05/5.3/#53-6",
            "text": "Explain how to implement the algorithm $\\text{PERMUTE-BY-SORTING}$ to handle the case in which two or more priorities are identical. That is, your algorithm should produce a uniform random permutation, even if two or more priorities are identical.   PERMUTE - BY - SORTING ( A ) \n     initialize   P   with   P [ i ]   =   i   for   i   =   1. . n \n     for   i   =   1   to   n \n         swap   P [ i ]   with   P [ RANDOM ( i ,   n )]",
            "title": "5.3-6"
        },
        {
            "location": "/Chap05/5.3/#53-7",
            "text": "Suppose we want to create a  random sample  of the set $\\{1, 2, 3, \\ldots, n\\}$, that is, an $m$-element subset $S$, where $0 \\le m \\le n$, such that each $m$-subset is equally likely to be created. One way would be to set $A[i] = i$ for $i = 1, 2, 3, \\ldots, n$, call $\\text{RANDOMIZE-IN-PLACE}(A)$, and then take just the first $m$ array elements. This method would make $n$ calls to the $\\text{RANDOM}$ procedure. If $n$ is much larger than $m$, we can create a random sample with fewer calls to $\\text{RANDOM}$. Show that the following recursive procedure returns a random $m$-subset $S$ of $\\{1, 2, 3, \\ldots, n\\}$, in which each $m$-subset is equally likely, while making only $m$ calls to $\\text{RANDOM}$:  RANDOM - SAMPLE ( m ,   n ) \n     if   m   ==   0 \n         return   \u2205 \n     else   S   =   RANDOM - SAMPLE ( m   -   1 ,   n   -   1 ) \n         i   =   RANDOM ( 1 ,   n ) \n         if   i   \u2208   S \n             S   =   S   \u222a   { n } \n         else   S   =   S   \u222a   { i } \n         return   S    Since each recursive call reduces $m$ by $1$ and makes only one call to $\\text{RANDOM}$, it's easy to see that there are a total of $m$ calls to $\\text{RANDOM}$. Moreover, since each recursive call adds exactly one element to the set, it's easy to see that the resulting set $S$ contains exactly $m$ elements.  Because the elements of set $S$ are chosen independently of each other, it suffices to show that each of the $n$ values appears in $S$ with probability $m / n$. We use an inductive proof. The inductive hypothesis is that a call to $\\text{RANDOM-SUBSET}(m, n)$ returns a set $S$ of $m$ elements, each appearing with probability $m / n$. The base cases are for $m = 0$ and $m = 1$. When $m = 0$, the returned set is empty, and so it contains each element with probability $0$. When $m = 1$, the returned set has one element, and it is equally likely to be any number in $\\{1, 2, 3, \\ldots, n\\}$  For the inductive step, we assume that the call $\\text{RANDOM-SUBSET}(m - 1, n - 1)$ returns a set $S'$ of $m - 1$ elements in which each value in ${1, 2, 3, \\ldots, n - 1}$ occurs with probability $(m - 1) / (n - 1)$. After the line $i = \\text{RANDOM}(1, n)$, $i$ is equally likely to be any value in ${1, 2, 3, \\ldots, n}$. We consider separately the probabilities that $S$ contains $j < n$ and that $S$ contains $n$. Let $R_j$ be the event that the call $\\text{RANDOM}(1, n)$ returns $j$ , so that $\\Pr\\{R_j\\} = 1 / n$.  For $j < n$, the event that $j \\in S$ is the union of two disjoint events:   $j \\in S'$, and  $j \\notin S'$ and $R_j$ (these events are independent),   Thus  \\begin{align}\n\\Pr\\{j \\in S\\}\n    & = \\Pr\\{j \\in S'\\} + \\Pr\\{j \\notin S' \\text{ and } R_j\\} & \\text{ (the events are disjoint)} \\\\\n    & = \\frac{m - 1}{n - 1} + \\Big(1 - \\frac{m - 1}{n - 1}\\Big) \\cdot \\frac{1}{n} & \\text{ (by the inductive hypothesis)} \\\\\n    & = \\frac{m - 1}{n - 1} + \\Big(\\frac{n - 1}{n - 1} - \\frac{m - 1}{n - 1}\\Big) \\cdot \\frac{1}{n} \\\\\n    & = \\frac{m - 1}{n - 1} \\cdot \\frac{n}{n} + \\frac{n - m}{n - 1} \\cdot \\frac{1}{n} \\\\\n    & = \\frac{(m - 1)n + (n - m)}{(n - 1)n} \\\\\n    & = \\frac{mn - n + n - m}{(n - 1)n} \\\\\n    & = \\frac{m(n - 1)}{(n - 1)n} \\\\\n    & = \\frac{m}{n}.\n\\end{align}  The event that $n \\in S$ is also the union of two disjoint events:   $R_n$, and  $R_j$ and $j \\in S'$ for some $j < n$ (these events are independent).   \\begin{align}\n\\Pr\\{n \\in S\\}\n    & = \\Pr\\{R_n\\} + \\Pr\\{R_j \\text{ and } j\\in S' \\text{ for some } j < n\\} & \\text{ (the events are disjoint)} \\\\\n    & = \\frac{1}{n} + \\frac{n - 1}{n} \\cdot \\frac{m - 1}{n - 1} & \\text{ (by the inductive hypothesis)} \\\\\n    & = \\frac{1}{n} \\cdot \\frac{n - 1}{n - 1} + \\frac{n - 1}{n} \\cdot \\frac{m - 1}{n - 1} \\\\\n    & = \\frac{n - 1+nm-n - m+1}{n(n - 1)} \\\\\n    & = \\frac{nm-m}{n(n - 1)} \\\\\n    & = \\frac{m(n - 1)}{n(n - 1)} \\\\\n    & = \\frac{m}{n}.\n\\end{align}",
            "title": "5.3-7"
        },
        {
            "location": "/Chap05/5.4/",
            "text": "5.4-1\n\n\n\n\nHow many people must there be in a room before the probability that someone has the same birthday as you do is at least $1 / 2$? How many people must there be before the probability that at least two people have a birthday on July 4 is greater than $1 / 2$?\n\n\n\n\nThe probability of a person not having the same birthday as me is $(n - 1) / n$. The probability of $k$ people not having the same birthday as me is that, squared. We apply the same approach as the text - we take the complementary event and solve it for $k$,\n\n\n\\begin{align}\n        1 - \\big(\\frac{n - 1}{k}\\big)^k & \\ge \\frac{1}{2} \\\\\n            \\big(\\frac{n - 1}{k}\\big)^k & \\le \\frac{1}{2} \\\\\n          k\\lg\\big(\\frac{n - 1}{n}\\big) & \\ge \\lg\\frac{1}{2} \\\\\nk = \\frac{\\log(1 / 2)}{\\log(364 / 365)} & \\approx 263.\n\\end{align}\n\n\nAs for the other question,\n\n\n\\begin{align}\n\\Pr\\{\\text{2 born on Jul 4}\\}\n    & = 1 - \\Pr\\{\\text{1 born on Jul 4}\\} - \\Pr\\{\\text{0 born on Jul 4}\\} \\\\\n    & = 1 - \\frac{k}{n}\\big(\\frac{n - 1}{n}\\big)^{k - 1} - \\big(\\frac{n - 1}{n}\\big)^k \\\\\n    & = 1 - \\big(\\frac{n - 1}{n}\\big)^{k - 1}\\big(\\frac{n + k - 1}{n}\\big). \n\\end{align}\n\n\nWriting a Ruby programme to find the closest integer, we get $115$.\n\n\n5.4-2\n\n\n\n\nSuppose that we toss balls into $b$ bins until some bin contains two balls. Each toss is independent, and each ball is equally likely to end up in any bin. What is the expected number of ball tosses?\n\n\n\n\nThis is just a restatement of the birthday problem. I consider this all that needs to be said on this subject.\n\n\n5.4-3 $\\star$\n\n\n\n\nFor the analysis of the birthday paradox, is it important that the birthdays be mutually independent, or is pairwise independence sufficient? Justify your answer.\n\n\n\n\nPairwise independence is enough. It's sufficient for the derivation after $\\text{(5.6)}$.\n\n\n5.4-4 $\\star$\n\n\n\n\nHow many people should be invited to a party in order to make it likely that there are $three$ people with the same birthday?\n\n\n\n\nThe answer is $88$. I reached it by trial and error. But let's analyze it with indicator random variables.\n\n\nLet $X_{ijk}$ be the indicator random variable for the event of the people with indices $i$, $j$ and $k$ have the same birthday. The probability is $1 / n^2$. Then,\n\n\n\\begin{align}\n\\text E[X] \n    & = \\sum_{i = 1}^n\\sum_{j = i + 1}^n \\sum_{k = j + 1}^n X_{ijk} \\\\\n    & = \\sum_{i = 1}^n\\sum_{j = i + 1}^n \\sum_{k = j + 1}^n \\frac{1}{n^2} \\\\\n    & = \\binom{n}{3}\\frac{1}{n^2} \\\\\n    & = \\frac{k(k - 1)(k - 2)}{6n^2}. \n\\end{align}\n\n\nSolving this yields $94$. It's a bit more, but again, indicator random variables are approximate.\n\n\nFinding more commentary online is tricky.\n\n\n5.4-5 $\\star$\n\n\n\n\nWhat is the probability that a $k$-string over a set of size $n$ forms a $k$-permutation? How does this question relate to the birthday paradox?\n\n\n\n\n\\begin{align}\n\\Pr\\{k\\text{-perm in }n\\}\n    & = 1 \\cdot \\frac{n - 1}{n} \\cdot \\frac{n - 2}{n} \\cdots \\frac{n - k + 1}{n} \\\\\n    & = \\frac{(n - 1)!}{(n - k)!n^k}.\n\\end{align}\n\n\nThis is the complementary event to the birthday problem, that is, the chance of $k$ people have distinct birthdays.\n\n\n5.4-6 $\\star$\n\n\n\n\nSuppose that $n$ balls are tossed into $n$ bins, where each toss is independent and the ball is equally likely to end up in any bin. What is the expected number of empty bins? What is the expected number of bins with exactly one ball?\n\n\n\n\nFirst we determine the expected number of empty bins. We define a random variable $X$ to be the number of empty bins, so that we want to compute $\\text E[X]$\u008d. Next, for $i = 1, 2, \\ldots, n$, we define the indicator random variable $Y_i = I\\{\\text{bin } i \\text{ is empty}\\}$. Thus,\n\n\n$$X = \\sum_{i = 1}^n Y_i,$$\n\n\nand so\n\n\n\\begin{align}\n\\text E[X] & = \\text E \\Bigg[\\sum\\limits_{i = 1}^n Y_i\\Bigg] & \\\\\n           & = \\sum\\limits_{i = 1}^n\\text E[Y_i]                    & \\text{(by linearity of expectation)} \\\\\n           & = \\sum\\limits_{i = 1}^n\\Pr\\{\\text{bin $i$ is empty}\\}. & \\text{(by Lemma 5.1)}\n\\end{align}\n\n\nLet us focus on a specific bin, say bin $i$. We view a toss as a success if it misses bin $i$ and as a failure if it lands in bin $i$. We have $n$ independent Bernoulli trials, each with probability of success $1 - 1 / n$. In order for bin $i$ to be empty, we need $n$ successes in $n$ trials. Using a binomial distribution, therefore, we have that\n\n\n\\begin{align}\n\\Pr\\{\\text{bin $i$ is empty}\\} & = \\binom{n}{n}\\Big(1 - \\frac{1}{n}\\Big)^n\\Big(\\frac{1}{n}\\Big)^0 \\\\\n                               & = \\Big(1 - \\frac{1}{n}\\Big)^n.\n\\end{align}\n\n\nThus, \n\n\n\\begin{align}\n\\text E[X] & = \\sum_{i = 1}^n\\Big(1 - \\frac{1}{n})^n \\\\\n           & = n\\Big(1 - \\frac{1}{n}\\Big)^n.\n\\end{align}\n\n\nBy equation $\\text{(3.14)}$, as $n$ approaches $\\infty$, the quantity $(1 - 1 / n)^n$ approaches $1/e$, and so $\\text E[X]$\u008d approaches $n/e$.\n\n\nNow we determine the expected number of bins with exactly one ball. We redefine $X$ to be number of bins with exactly one ball, and we redefine $Y_i$ to be $I\\{\\text{bin $i$ gets exactly one ball}\\}$. As before, we find that\n\n\n$$\\text E[X] = \\sum_{i = 1}^n \\Pr\\{\\text{bin $i$ gets exactly one ball}\\}.$$\n\n\nAgain focusing on bin $i$, we need exactly $n - 1$ successes in $n$ independent Bernoulli trials, and so\n\n\n\\begin{align}\n\\Pr\\{\\text{bin $i$ gets exactly one ball}\\}\n    & = \\binom{n}{n - 1} \\Big(1 - \\frac{1}{n}\\Big)^{n - 1} \\Big(\\frac{1}{n}\\Big)^1 \\\\\n    & = n \\cdot \\Big(1 - \\frac{1}{n} \\Big)^{n - 1} \\frac{1}{n} \\\\\n    & = \\Big(1 - \\frac{1}{n})^{n - 1}, \n\\end{align}\n\n\nand so\n\n\n\\begin{align}\n\\text E[X] \n    & = \\sum_{i = 1}^n \\Big(1 - \\frac{1}{n}\\Big)^{n - 1} \\\\\n    & = n \\Big(1 - \\frac{1}{n})^{n - 1}.\n\\end{align}\n\n\nBecause\n\n\n$$n\\Big(1 - \\frac{1}{n}\\Big)^{n - 1} = \\frac{n(1 - \\frac{1}{n})^n}{1 - \\frac{1}{n}},$$\n\n\nas $n$ approaches $\\infty$, we find that $\\text E[X]$ approaches\n\n\n$$\\frac{n / e}{1 - 1 / n} = \\frac{n^2}{e(n - 1)}.$$\n\n\n5.4-7 $\\star$\n\n\n\n\nSharpen the lower bound on streak length by showing that in $n$ flips of a fair coin, the probability is less than $1 / n$ that no streak longer than $\\lg n - 2\\lg\\lg n$ consecutive heads occurs.\n\n\n\n\nWe split up the n flips into $n / s$ groups where we pick $s = \\lg(n) - 2 \\lg(\\lg(n))$. We will show that at least one of these groups comes up all heads with probability at least $\\frac{n - 1}{n}$. So, the probability the group starting in position $i$ comes up all heads is\n\n\n$$\\Pr(A_{i,\\lg n - 2\\lg(\\lg n)}) = \\frac{1}{2^{\\lg n - 2\\lg(\\lg n)}} = \\frac{\\lg n^2}{n}.$$\n\n\nSince the groups are based of of disjoint sets of IID coin flips, these probabilities\nare independent. so,\n\n\n\\begin{align}\n\\Pr(\\bigwedge\\neg A_{i,\\lg n - 2\\lg(\\lg n)})\n    & =   \\prod_i\\Pr(\\neg A_{i,\\lg n - 2\\lg(\\lg n)}) \\\\\n    & =   \\Big(1-\\frac{\\lg n^2}{n}\\Big)^{\\frac{n}{\\lg n - 2\\lg(\\lg n)}} \\\\\n    & \\le e^{-\\frac{\\lg n^2}{\\lg n - 2\\lg(\\lg n)}} \\\\ &= \\frac{1}{n} e^{\\frac{-2\\lg(\\lg n)\\lg n}{\\lg n - 2\\lg(\\lg n)}} \\\\\n    & =   n^{-1-\\frac{2\\lg(\\lg n)}{\\lg n - 2\\lg(\\lg n)}} \\\\\n& < n^{-1}.\n\\end{align}\n\n\nShowing that the probability that there is no run of length at least $\\lg n - 2\\lg(\\lg n)$ to be $< \\frac{1}{n}$.",
            "title": "5.4 Probabilistic analysis and further uses of indicator random variables"
        },
        {
            "location": "/Chap05/5.4/#54-1",
            "text": "How many people must there be in a room before the probability that someone has the same birthday as you do is at least $1 / 2$? How many people must there be before the probability that at least two people have a birthday on July 4 is greater than $1 / 2$?   The probability of a person not having the same birthday as me is $(n - 1) / n$. The probability of $k$ people not having the same birthday as me is that, squared. We apply the same approach as the text - we take the complementary event and solve it for $k$,  \\begin{align}\n        1 - \\big(\\frac{n - 1}{k}\\big)^k & \\ge \\frac{1}{2} \\\\\n            \\big(\\frac{n - 1}{k}\\big)^k & \\le \\frac{1}{2} \\\\\n          k\\lg\\big(\\frac{n - 1}{n}\\big) & \\ge \\lg\\frac{1}{2} \\\\\nk = \\frac{\\log(1 / 2)}{\\log(364 / 365)} & \\approx 263.\n\\end{align}  As for the other question,  \\begin{align}\n\\Pr\\{\\text{2 born on Jul 4}\\}\n    & = 1 - \\Pr\\{\\text{1 born on Jul 4}\\} - \\Pr\\{\\text{0 born on Jul 4}\\} \\\\\n    & = 1 - \\frac{k}{n}\\big(\\frac{n - 1}{n}\\big)^{k - 1} - \\big(\\frac{n - 1}{n}\\big)^k \\\\\n    & = 1 - \\big(\\frac{n - 1}{n}\\big)^{k - 1}\\big(\\frac{n + k - 1}{n}\\big). \n\\end{align}  Writing a Ruby programme to find the closest integer, we get $115$.",
            "title": "5.4-1"
        },
        {
            "location": "/Chap05/5.4/#54-2",
            "text": "Suppose that we toss balls into $b$ bins until some bin contains two balls. Each toss is independent, and each ball is equally likely to end up in any bin. What is the expected number of ball tosses?   This is just a restatement of the birthday problem. I consider this all that needs to be said on this subject.",
            "title": "5.4-2"
        },
        {
            "location": "/Chap05/5.4/#54-3-star",
            "text": "For the analysis of the birthday paradox, is it important that the birthdays be mutually independent, or is pairwise independence sufficient? Justify your answer.   Pairwise independence is enough. It's sufficient for the derivation after $\\text{(5.6)}$.",
            "title": "5.4-3 $\\star$"
        },
        {
            "location": "/Chap05/5.4/#54-4-star",
            "text": "How many people should be invited to a party in order to make it likely that there are $three$ people with the same birthday?   The answer is $88$. I reached it by trial and error. But let's analyze it with indicator random variables.  Let $X_{ijk}$ be the indicator random variable for the event of the people with indices $i$, $j$ and $k$ have the same birthday. The probability is $1 / n^2$. Then,  \\begin{align}\n\\text E[X] \n    & = \\sum_{i = 1}^n\\sum_{j = i + 1}^n \\sum_{k = j + 1}^n X_{ijk} \\\\\n    & = \\sum_{i = 1}^n\\sum_{j = i + 1}^n \\sum_{k = j + 1}^n \\frac{1}{n^2} \\\\\n    & = \\binom{n}{3}\\frac{1}{n^2} \\\\\n    & = \\frac{k(k - 1)(k - 2)}{6n^2}. \n\\end{align}  Solving this yields $94$. It's a bit more, but again, indicator random variables are approximate.  Finding more commentary online is tricky.",
            "title": "5.4-4 $\\star$"
        },
        {
            "location": "/Chap05/5.4/#54-5-star",
            "text": "What is the probability that a $k$-string over a set of size $n$ forms a $k$-permutation? How does this question relate to the birthday paradox?   \\begin{align}\n\\Pr\\{k\\text{-perm in }n\\}\n    & = 1 \\cdot \\frac{n - 1}{n} \\cdot \\frac{n - 2}{n} \\cdots \\frac{n - k + 1}{n} \\\\\n    & = \\frac{(n - 1)!}{(n - k)!n^k}.\n\\end{align}  This is the complementary event to the birthday problem, that is, the chance of $k$ people have distinct birthdays.",
            "title": "5.4-5 $\\star$"
        },
        {
            "location": "/Chap05/5.4/#54-6-star",
            "text": "Suppose that $n$ balls are tossed into $n$ bins, where each toss is independent and the ball is equally likely to end up in any bin. What is the expected number of empty bins? What is the expected number of bins with exactly one ball?   First we determine the expected number of empty bins. We define a random variable $X$ to be the number of empty bins, so that we want to compute $\\text E[X]$\u008d. Next, for $i = 1, 2, \\ldots, n$, we define the indicator random variable $Y_i = I\\{\\text{bin } i \\text{ is empty}\\}$. Thus,  $$X = \\sum_{i = 1}^n Y_i,$$  and so  \\begin{align}\n\\text E[X] & = \\text E \\Bigg[\\sum\\limits_{i = 1}^n Y_i\\Bigg] & \\\\\n           & = \\sum\\limits_{i = 1}^n\\text E[Y_i]                    & \\text{(by linearity of expectation)} \\\\\n           & = \\sum\\limits_{i = 1}^n\\Pr\\{\\text{bin $i$ is empty}\\}. & \\text{(by Lemma 5.1)}\n\\end{align}  Let us focus on a specific bin, say bin $i$. We view a toss as a success if it misses bin $i$ and as a failure if it lands in bin $i$. We have $n$ independent Bernoulli trials, each with probability of success $1 - 1 / n$. In order for bin $i$ to be empty, we need $n$ successes in $n$ trials. Using a binomial distribution, therefore, we have that  \\begin{align}\n\\Pr\\{\\text{bin $i$ is empty}\\} & = \\binom{n}{n}\\Big(1 - \\frac{1}{n}\\Big)^n\\Big(\\frac{1}{n}\\Big)^0 \\\\\n                               & = \\Big(1 - \\frac{1}{n}\\Big)^n.\n\\end{align}  Thus,   \\begin{align}\n\\text E[X] & = \\sum_{i = 1}^n\\Big(1 - \\frac{1}{n})^n \\\\\n           & = n\\Big(1 - \\frac{1}{n}\\Big)^n.\n\\end{align}  By equation $\\text{(3.14)}$, as $n$ approaches $\\infty$, the quantity $(1 - 1 / n)^n$ approaches $1/e$, and so $\\text E[X]$\u008d approaches $n/e$.  Now we determine the expected number of bins with exactly one ball. We redefine $X$ to be number of bins with exactly one ball, and we redefine $Y_i$ to be $I\\{\\text{bin $i$ gets exactly one ball}\\}$. As before, we find that  $$\\text E[X] = \\sum_{i = 1}^n \\Pr\\{\\text{bin $i$ gets exactly one ball}\\}.$$  Again focusing on bin $i$, we need exactly $n - 1$ successes in $n$ independent Bernoulli trials, and so  \\begin{align}\n\\Pr\\{\\text{bin $i$ gets exactly one ball}\\}\n    & = \\binom{n}{n - 1} \\Big(1 - \\frac{1}{n}\\Big)^{n - 1} \\Big(\\frac{1}{n}\\Big)^1 \\\\\n    & = n \\cdot \\Big(1 - \\frac{1}{n} \\Big)^{n - 1} \\frac{1}{n} \\\\\n    & = \\Big(1 - \\frac{1}{n})^{n - 1}, \n\\end{align}  and so  \\begin{align}\n\\text E[X] \n    & = \\sum_{i = 1}^n \\Big(1 - \\frac{1}{n}\\Big)^{n - 1} \\\\\n    & = n \\Big(1 - \\frac{1}{n})^{n - 1}.\n\\end{align}  Because  $$n\\Big(1 - \\frac{1}{n}\\Big)^{n - 1} = \\frac{n(1 - \\frac{1}{n})^n}{1 - \\frac{1}{n}},$$  as $n$ approaches $\\infty$, we find that $\\text E[X]$ approaches  $$\\frac{n / e}{1 - 1 / n} = \\frac{n^2}{e(n - 1)}.$$",
            "title": "5.4-6 $\\star$"
        },
        {
            "location": "/Chap05/5.4/#54-7-star",
            "text": "Sharpen the lower bound on streak length by showing that in $n$ flips of a fair coin, the probability is less than $1 / n$ that no streak longer than $\\lg n - 2\\lg\\lg n$ consecutive heads occurs.   We split up the n flips into $n / s$ groups where we pick $s = \\lg(n) - 2 \\lg(\\lg(n))$. We will show that at least one of these groups comes up all heads with probability at least $\\frac{n - 1}{n}$. So, the probability the group starting in position $i$ comes up all heads is  $$\\Pr(A_{i,\\lg n - 2\\lg(\\lg n)}) = \\frac{1}{2^{\\lg n - 2\\lg(\\lg n)}} = \\frac{\\lg n^2}{n}.$$  Since the groups are based of of disjoint sets of IID coin flips, these probabilities\nare independent. so,  \\begin{align}\n\\Pr(\\bigwedge\\neg A_{i,\\lg n - 2\\lg(\\lg n)})\n    & =   \\prod_i\\Pr(\\neg A_{i,\\lg n - 2\\lg(\\lg n)}) \\\\\n    & =   \\Big(1-\\frac{\\lg n^2}{n}\\Big)^{\\frac{n}{\\lg n - 2\\lg(\\lg n)}} \\\\\n    & \\le e^{-\\frac{\\lg n^2}{\\lg n - 2\\lg(\\lg n)}} \\\\ &= \\frac{1}{n} e^{\\frac{-2\\lg(\\lg n)\\lg n}{\\lg n - 2\\lg(\\lg n)}} \\\\\n    & =   n^{-1-\\frac{2\\lg(\\lg n)}{\\lg n - 2\\lg(\\lg n)}} \\\\\n& < n^{-1}.\n\\end{align}  Showing that the probability that there is no run of length at least $\\lg n - 2\\lg(\\lg n)$ to be $< \\frac{1}{n}$.",
            "title": "5.4-7 $\\star$"
        },
        {
            "location": "/Chap05/Problems/5-1/",
            "text": "With a $b$-bit counter, we can ordinarily only count up to $2^b - 1$. With R. Morris's \nprobabilistic counting\n, we can count up to a much larger value at the expense of some loss of precision.\n\n\nWe let a counter value of $i$ represent that a count of $n_i$ for $i = 0, 1, \\ldots, 2^b - 1$, where the $n_i$ form an increasing sequence of nonnegative values. We assume that the initial value of the counter is $0$, representing a count of $n_0 = 0$. The $\\text{INCREMENT}$ operation works on a counter containing the value $i$ in a probabilistic manner. If $i = 2^b - 1$, then the operation reports an overflow error. Otherwise, the $\\text{INCREMENT}$ operation increases the counter by $1$ with probability $1 / (n_{i + 1} - n_i)$, and it leaves the counter unchanged with probability $1 - 1 / (n_{i + 1} - n_i)$.\n\n\nIf we select $n_i = i$ for all $i \\ge 0$, then the counter is an ordinary one. More interesting situations arise if we select, say, $n_i = 2^{i - 1}$ for $i > 0$ or $n_i = F_i$ (the $i$th Fibonacci number - see Section 3.2).\n\n\nFor this problem, assume that $n_{2^b - 1}$ is large enough that the probability of an overflow error is negligible.\n\n\na.\n Show that the expected value represented by the counter after $n$ $\\text{INCREMENT}$ operations have been performed is exactly $n$.\n\n\nb.\n The analysis of the variance of the count represented by the counter depends on the sequence of the $n_i$. Let us consider a simple case: $n_i = 100i$ for all $i \\ge 0$. Estimate the variance in the value represented by the register after $n$ $\\text{INCREMENT}$ operations have been performed.\n\n\n\n\na.\n To determine the expected value represented by the counter after $n$ $\\text{INCREMENT}$ operations, we define some random variables:\n\n\n\n\nFor $j = 1, 2, \\ldots, n$, let $X_j$ denote the increase in the value represented by the counter due to the $j$th $\\text{INCREMENT}$ operation.\n\n\nLet $V_n$ be the value represented by the counter after $n$ $\\text{INCREMENT}$ operations.\n\n\n\n\nThen $V_n = X_1 + X_2 + \\cdots + X_n$. We want to compute $\\text E[V_n]$. By linearity of expection,\n\n\n\\begin{align}\n\\text E[V_n] & = \\text E[X_1 + X_2 + \\cdots + X_n] \\\\\n             & = \\text E[X_1] + \\text E[X_2] + \\cdots + \\text E[X_n].\n\\end{align}\n\n\nWe shall show that $\\text E[X_j] = 1$ for $j = 1, 2, \\ldots, n$, which will prove that $\\text E[V_n] = n$.\n\n\nWe actually show that $\\text E[X_j] = 1$ in two ways, the second more rigorous than the first:\n\n\n\n\n\n\nSuppose that at the start of the $j$th $\\text{INCREMENT}$ operation, the counter holds the value $i$, which represents $n_i$. If the counter increases due to this $\\text{INCREMENT}$ operation, then the value it represents increases by $n_{i + 1} - n_i$. The counter increases with probability $1 / (n_{i + 1} - n_i)$, and so\n\n\n\\begin{align}\n\\text E[X_j] & = (0 \\cdot \\Pr\\{\\text{counter does not increase}\\}) + ((n_{i + 1} - n_i) \\cdot \\Pr\\{\\text{counter increases}\\}) \\\\\n             & = \\Big(0 \\cdot\\Big(1 - \\frac{1}{n_{i + 1} - n_i}\\Big)\\Big) + \\Big((n_{i + 1} - n_i) \\cdot \\frac{1}{n_{i + 1} - n_i}\\Big) \\\\\n             & = 1,\n\\end{align}\n\n\nand so $\\text E[X_j] = 1$ regardless of the value held by the counter.\n\n\n\n\n\n\nLet $C_j$ be the random variable denoting the value held in the counter at the start of the $j$th $\\text{INCREMENT}$ operation. Since we can ignore values of $C_j$ greater than $2^b - 1$, we use a formula for conditional expectation:\n\n\n\\begin{align}\n\\text E[X_j] & = \\text E[\\text E[X_j\\mid C_j]] \\\\\n             & = \\sum_{i = 0}^{2^b - 1} \\text E[X_j \\mid C_j = i] \\cdot \\Pr\\{C_j = i\\}.\n\\end{align}\n\n\nTo compute $\\text E[X_j \\mid C_j = i]$, we note that\n\n\n\n\n$$\\Pr\\{X_j = 0 \\mid C_j = i\\} = 1 - 1 / (n_{i + 1} - n_i),$$\n\n\n$$\\Pr\\{X_j = n_{i + 1} - n_i \\mid C_j = i\\} = 1 / (n_{i + 1} - n_i),$$ and\n\n\n$$\\Pr\\{X_j = k \\mid C_j = i\\} = 0$$ for all other $k$.\n\n\n\n\nThus,\n\n\n\\begin{align}\n\\text E[X_j \\mid C_j = i] & = \\sum_k k \\cdot \\Pr\\{X_j = k \\mid C_j = i\\} \\\\\n                       & = \\Big(0 \\cdot \\Big(1 - \\frac{1}{n_{i + 1} - n_i}\\Big)\\Big) + \\Big((n_{i + 1} - n_i) \\cdot \\frac{1}{n_{i + 1} - n_i}\\Big) \\\\\n                       & = 1.\n\\end{align}\n\n\nTherefore, noting that\n\n\n$$\\sum_{i = 0}^{2^b - 1}\\Pr\\{C_j = i\\} = 1,$$\n\n\nwe have\n\n\n\\begin{align}\n\\text E[X_j] & = \\sum_{i = 0}^{2^b - 1}1 \\cdot \\Pr\\{C_j = i\\} \\\\\n             & = 1.\n\\end{align}\n\n\nWhy is the second way more rigorous than the first? Both ways condition on the value held in the counter, but only the second way incorporates the conditioning into the expression for $\\text E[X_j]$.\n\n\n\n\n\n\nb.\n Defining $V_n$ and $X_j$ as in part (a), we want to compute $\\text{Var}[V_n]$\u008d, where $n_i = 100i$. The $X_j$ are pairwise independent, and so by equation $\\text{(C.29)}$,\n\n\n$$\\text{Var[$V_1$]} + \\text{Var[$V_2$]} + \\cdots + \\text{Var[$V_n$]}.$$\n\n\nSince $n_i = 100i$, we see that $n_{i + 1} - n_i = 100(i + 1) - 100i = 100$. Therefore, with probability $99 / 100$, the increase in the value represented by the counter due to the $j$th $\\text{INCREMENT}$ operation is $0$, and with probability $1 / 100$, the value represented increases by $100$. Thus, by equation $\\text{(C.27)}$,\n\n\n\\begin{align}\n\\text{Var[$X_j$]} & = \\text E[X_j^2] - \\text E^2[X_j] \\\\\n                  & = \\Big(\\Big(0^2 \\cdot \\frac{99}{100}\\Big) + \\Big(100^2 \\cdot \\frac{1}{100}\\Big)\\Big) - 1^2 \\\\\n                  & = 100 - 1 \\\\\n                  & = 99.\n\\end{align}\n\n\nSumming up the variances of the $X_j$ gives $\\text{Var}[V_n] = 99n$.",
            "title": "5-1 Probabilstic counting"
        },
        {
            "location": "/Chap05/Problems/5-2/",
            "text": "The problem examines three algorithms for searching for a value $x$ in an unsorted array $A$ consisting for $n$ elements.\n\n\nConsider the following randomized strategy: pick a random index $i$ into $A$. If $A[i] = x$, then we terminate; otherwise, we continue the search by picking a new random index into $A$. We continue picking random indices into $A$ until we find an index $j$ such that $A[j] = x$ or until we have checked every element of $A$. Note that we pick from the whole set of indices each time, so that we may examine a given element more than once.\n\n\na.\n Write pseudocode for a procedure $\\text{RANDOM-SEARCH}$ to implement the strategy above. Be sure that your algorithm terminates when all indices into $A$ have been picked.\n\n\nb.\n Suppose that there is exactly one index $i$ such that $A[i] = x$. What is the expected number of indices into $A$ that we must pick before we find $x$ and $\\text{RANDOM-SEARCH}$ terminates?\n\n\nc.\n Generalizing your solution to part (b), suppose that there are $k \\ge 1$ indices $i$ such that $A[i] = x$. What is the expected number of indices into $A$ that we must pick before we find $x$ and $\\text{RANDOM-SEARCH}$ terminates? Your answer should be a function of $n$ and $k$.\n\n\nd.\n Suppose that there are no indices $i$ such that $A[i] = x$. What is the expected number of indices into $A$ that we must pick before we have checked all elements of $A$ and $\\text{RANDOM-SEARCH}$ terminates?\n\n\nNow consider a deterministic linear search algorithm, which we refer to as $\\text{DETERMINISTIC-SEARCH}$. Specifically, the algorithm searches $A$ for $x$ in order, considering $A[1], A[2], A[3], \\ldots, A[n]$ until either it finds $A[i] = x$ or it reaches the end of the array. Assume that possible permutations of the input array are equally likely.\n\n\ne.\n Suppose that there is exactly one index $i$ such that $A[i] = x$. What is the average-case running time of $\\text{DETERMINISTIC-SEARCH}$? What is the worst-case running time of $\\text{DETERMINISTIC-SEARCH}$?\n\n\nf.\n Generalizing your solution to part (e), suppose that there are $k \\ge 1$ indices $i$ such that $A[i] = x$. What is the average-case running time of $\\text{DETERMINISTIC-SEARCH}$? What is the worst-case running time of $\\text{DETERMINISTIC-SEARCH}$? Your answer should be a function of $n$ and $k$.\n\n\ng.\n Suppose that there are no indices $i$ such that $A[i] = x$. What is the average-case running time of $\\text{DETERMINISTIC-SEARCH}$? What is the worst-case running time of $\\text{DETERMINISTIC-SEARCH}$?\n\n\nFinally, consider a randomized algorithm $\\text{SCRAMBLE-SEARCH}$ that works by first randomly permuting the input array and then running the deterministic linear search given above on the resulting permuting array.\n\n\nh.\n Letting $k$ be the number of indices $i$ such that $A[i] = x$, give the worst-case and expected running time of $\\text{SCRAMBLE-SEARCH}$ for the cases in which $k = 0$ and $k = 1$. Generalizing your solution to handle the case in which $k \\ge 1$.\n\n\ni.\n Which of the three searching algorithms would you use? Explain your answer.\n\n\n\n\na.\n \n\n\nRANDOM\n-\nSEARCH\n(\nx\n,\n \nA\n,\n \nn\n)\n\n    \nv\n \n=\n \n\u2205\n\n    \nwhile\n \n|\n\u2205\n|\n \n!=\n \nn\n\n        \ni\n \n=\n \nRANDOM\n(\n1\n,\n \nn\n)\n\n        \nif\n \nA\n[\ni\n]\n \n=\n \nx\n\n            \nreturn\n \ni\n\n        \nelse\n\n            \nv\n \n=\n \nv\n \n\u2229\n \ni\n\n    \nreturn\n \nNIL\n\n\n\n\n\n$v$ can be implemented in multiple ways: a hash table, a tree or a bitmap. The last one would probabily perform best and consume the least space.\n\n\nb.\n $\\text{RANDOM-SEARCH}$ is well-modelled by Bernoulli trials. The expected number of picks is $n$.\n\n\nc.\n In similar fashion, the expected number of picks is $n / k$.\n\n\nd.\n This is modelled by the balls and bins problem, explored in section 5.4.2. The answer is $n(\\ln n + O(1))$.\n\n\ne.\n The worst-case running time is $n$. The average-case is $(n + 1) / 2$ (obviously).\n\n\nf.\n The worst-case running time is $n - k + 1$. The average-case running time is $(n + 1) / (k + 1)$. Let $X_i$ be an indicator random variable that the $i$th element is a match. $\\Pr\\{X_i\\} = 1 / (k + 1)$. Let $Y$ be an indicator random variable that we have found a match after the first $n - k + 1$ elements ($\\Pr\\{Y\\} = 1$). Thus,\n\n\n\\begin{align}\n\\text E[X]\n    & = \\text E[X_1 + X_2 + \\ldots + X_{n - k} + Y] \\\\\n    & = 1 + \\sum_{i = 1}^{n - k}\\text E[X_i] = 1 + \\frac{n - k}{k + 1} \\\\\n    & = \\frac{n + 1}{k + 1}.\n\\end{align}\n\n\ng.\n Both the worst-case and average case is $n$.\n\n\nh.\n It's the same as $\\text{DETERMINISTIC-SEARCH}$, only we replace ''average-case'' with ''expected''.\n\n\ni.\n Definitelly $\\text{DETERMINISTIC-SEARCH}$. $\\text{SCRAMBLE-SEARCH}$ gives better expected results, but for the cost of randomly permuting the array, which is a linear operation. In the same time we could have scanned the full array and reported a result.",
            "title": "5-2 Searching an unsorted array"
        },
        {
            "location": "/Chap06/6.1/",
            "text": "6.1-1\n\n\n\n\nWhat are the minimum and maximum numbers of elements in a heap of height $h$?\n\n\n\n\nSince a heap is an almost-complete binary tree (complete at all levels except possibly the lowest), it has at most $2^{h + 1} - 1$ elements (if it is complete) and at least $2^h - 1 + 1 = 2^h$ elements (if the lowest level has just $1$ element and the other levels are complete).\n\n\n6.1-2\n\n\n\n\nShow that an $n$-element heap has height $\\lfloor \\lg n \\rfloor$.\n\n\n\n\nGiven an $n$-element heap of height $h$, we know from Exercise 6.1-1 that\n\n\n$$2^h \\le n \\le 2^{h + 1} - 1 < 2^{h + 1}.$$\n\n\nThus, $h \\le \\lg n < h + 1$. Since $h$ is an integer, $h = \\lfloor \\lg n \\rfloor$ (by definition of $\\lfloor \\rfloor$).\n\n\n6.1-3\n\n\n\n\nShow that in any subtree of a max-heap, the root of the subtree contains the largest value occuring anywhere in the subtree.\n\n\n\n\nAssume the claim is false\u2014i.e., that there is a subtree whose root is not the largest element in the subtree. Then the maximum element is somewhere else in the subtree, possibly even at more than one location. Let $m$ be the index at which the maximum appears (the lowest such index if the maximum appears more than once). Since the maximum is not at the root of the subtree, node $m$ has a parent. Since the parent of a node has a lower index than the node, and $m$ was chosen to be the smallest index of the maximum value, $A[\\text{PARENT}(m)] < A[m]$\u008d. But by the maxheap property, we must have $A[\\text{PARENT}(m)] \\ge A[m]$\u008d. So our assumption is false, and the claim is true.\n\n\n6.1-4\n\n\n\n\nWhere in a max-heap might the smallest element reside, assuming that all elements are distinct?\n\n\n\n\nIn any of the leaves, that is, elements with index $\\lfloor n / 2 \\rfloor + 1$ (see exercise 6.1-7), that is, in the second half of the heap array.\n\n\n6.1-5\n\n\n\n\nIs an array that is in sorted order a min-heap?\n\n\n\n\nYes. For any index $i$, both $\\text{LEFT}(i)$ and $\\text{RIGHT}(i)$ are larger and thus the elements indexed by them are greater or equal to $A[i]$ (because the array is sorted.)\n\n\n6.1-6\n\n\n\n\nIs the array with values $\\langle 23, 17, 14, 6, 13, 10, 1, 5, 7, 12 \\rangle$ a max-heap?\n\n\n\n\nNo. The property is violated by the next-to-last leaf (illustrated below in red.)\n\n\n6.1-7\n\n\n\n\nShow that, with the array representation for sorting an $n$-element heap, the leaves are the nodes indexed by $\\lfloor n / 2 \\rfloor + 1, \\lfloor n / 2 \\rfloor + 2, \\ldots, n$.\n\n\n\n\nLet's take the left child of the node indexed by $\\lfloor n / 2 \\rfloor + 1$.\n\n\n\\begin{align}\n\\text{LEFT}(\\lfloor n / 2 \\rfloor + 1)\n    & = 2(\\lfloor n / 2 \\rfloor + 1) \\\\\n    & > 2(n / 2 - 1) + 2 \\\\\n    & = n - 2 + 2 \\\\\n    & = n.\n\\end{align}\n\n\nSince the index of the left child is larger than the number of elements in the heap, the node doesn't have childrens and thus is a leaf. Same goes for all nodes with larger indices.\n\n\nNote that if we take element indexed by $\\lfloor n / 2 \\rfloor$, it will not be a leaf. In case of even number of nodes, it will have a left child with index $n$ and in the case of odd number of nodes, it will have a left child with index $n - 1$ and a right child with index $n$.\n\n\nThis makes the number of leaves in a heap of size $n$ equal to $\\lceil n / 2 \\rceil$.",
            "title": "6.1 Heaps"
        },
        {
            "location": "/Chap06/6.1/#61-1",
            "text": "What are the minimum and maximum numbers of elements in a heap of height $h$?   Since a heap is an almost-complete binary tree (complete at all levels except possibly the lowest), it has at most $2^{h + 1} - 1$ elements (if it is complete) and at least $2^h - 1 + 1 = 2^h$ elements (if the lowest level has just $1$ element and the other levels are complete).",
            "title": "6.1-1"
        },
        {
            "location": "/Chap06/6.1/#61-2",
            "text": "Show that an $n$-element heap has height $\\lfloor \\lg n \\rfloor$.   Given an $n$-element heap of height $h$, we know from Exercise 6.1-1 that  $$2^h \\le n \\le 2^{h + 1} - 1 < 2^{h + 1}.$$  Thus, $h \\le \\lg n < h + 1$. Since $h$ is an integer, $h = \\lfloor \\lg n \\rfloor$ (by definition of $\\lfloor \\rfloor$).",
            "title": "6.1-2"
        },
        {
            "location": "/Chap06/6.1/#61-3",
            "text": "Show that in any subtree of a max-heap, the root of the subtree contains the largest value occuring anywhere in the subtree.   Assume the claim is false\u2014i.e., that there is a subtree whose root is not the largest element in the subtree. Then the maximum element is somewhere else in the subtree, possibly even at more than one location. Let $m$ be the index at which the maximum appears (the lowest such index if the maximum appears more than once). Since the maximum is not at the root of the subtree, node $m$ has a parent. Since the parent of a node has a lower index than the node, and $m$ was chosen to be the smallest index of the maximum value, $A[\\text{PARENT}(m)] < A[m]$\u008d. But by the maxheap property, we must have $A[\\text{PARENT}(m)] \\ge A[m]$\u008d. So our assumption is false, and the claim is true.",
            "title": "6.1-3"
        },
        {
            "location": "/Chap06/6.1/#61-4",
            "text": "Where in a max-heap might the smallest element reside, assuming that all elements are distinct?   In any of the leaves, that is, elements with index $\\lfloor n / 2 \\rfloor + 1$ (see exercise 6.1-7), that is, in the second half of the heap array.",
            "title": "6.1-4"
        },
        {
            "location": "/Chap06/6.1/#61-5",
            "text": "Is an array that is in sorted order a min-heap?   Yes. For any index $i$, both $\\text{LEFT}(i)$ and $\\text{RIGHT}(i)$ are larger and thus the elements indexed by them are greater or equal to $A[i]$ (because the array is sorted.)",
            "title": "6.1-5"
        },
        {
            "location": "/Chap06/6.1/#61-6",
            "text": "Is the array with values $\\langle 23, 17, 14, 6, 13, 10, 1, 5, 7, 12 \\rangle$ a max-heap?   No. The property is violated by the next-to-last leaf (illustrated below in red.)",
            "title": "6.1-6"
        },
        {
            "location": "/Chap06/6.1/#61-7",
            "text": "Show that, with the array representation for sorting an $n$-element heap, the leaves are the nodes indexed by $\\lfloor n / 2 \\rfloor + 1, \\lfloor n / 2 \\rfloor + 2, \\ldots, n$.   Let's take the left child of the node indexed by $\\lfloor n / 2 \\rfloor + 1$.  \\begin{align}\n\\text{LEFT}(\\lfloor n / 2 \\rfloor + 1)\n    & = 2(\\lfloor n / 2 \\rfloor + 1) \\\\\n    & > 2(n / 2 - 1) + 2 \\\\\n    & = n - 2 + 2 \\\\\n    & = n.\n\\end{align}  Since the index of the left child is larger than the number of elements in the heap, the node doesn't have childrens and thus is a leaf. Same goes for all nodes with larger indices.  Note that if we take element indexed by $\\lfloor n / 2 \\rfloor$, it will not be a leaf. In case of even number of nodes, it will have a left child with index $n$ and in the case of odd number of nodes, it will have a left child with index $n - 1$ and a right child with index $n$.  This makes the number of leaves in a heap of size $n$ equal to $\\lceil n / 2 \\rceil$.",
            "title": "6.1-7"
        },
        {
            "location": "/Chap06/6.2/",
            "text": "6.2-1\n\n\n\n\nUsing figure 6.2 as a model, illustrate the operation of $\\text{MAX-HEAPIFY}(A, 3)$ on the array $A = \\langle 27, 17, 3, 16, 13, 10, 1, 5, 7, 12, 4, 8, 9, 0 \\rangle$.\n\n\n\n\n\\begin{align}\n\\langle 27, 17, 3,  16, 13, 10,1, 5, 7, 12, 4, 8, 9, 0 \\rangle \\\\\n\\langle 27, 17, 10, 16, 13, 3, 1, 5, 7, 12, 4, 8, 9, 0 \\rangle \\\\\n\\langle 27, 17, 10, 16, 13, 9, 1, 5, 7, 12, 4, 8, 3, 0 \\rangle \\\\\n\\end{align}\n\n\n6.2-2\n\n\n\n\nStarting with the procedure $\\text{MAX-HEAPIFY}$, write pseudocode for the procedure $\\text{MIN-HEAPIFY}(A, i)$, which performs the corresponding manipulation on a min-heap. How does the running time of $\\text{MIN-HEAPIFY}$ compare to that of $\\text{MAX-HEAPIFY}$?\n\n\n\n\nMIN\n-\nHEAPIFY\n(\nA\n,\n \ni\n)\n\n    \nl\n \n=\n \nLEFT\n(\ni\n)\n\n    \nr\n \n=\n \nRIGHT\n(\ni\n)\n\n    \nif\n \nl\n \n\u2264\n \nA\n.\nheap\n-\nsize\n \nand\n \nA\n[\nl\n]\n \n<\n \nA\n[\ni\n]\n\n        \nsmallest\n \n=\n \nl\n\n    \nelse\n \nsmallest\n \n=\n \ni\n\n    \nif\n \nr\n \n\u2264\n \nA\n.\nheap\n-\nsize\n \nand\n \nA\n[\nr\n]\n \n<\n \nA\n[\nsmallest\n]\n\n        \nsmallest\n \n=\n \nr\n\n    \nif\n \nsmallest\n \n!=\n \ni\n\n        \nexchange\n \nA\n[\ni\n]\n \nwith\n \nA\n[\nsmallest\n]\n\n    \nMIN\n-\nHEAPIFY\n(\nA\n,\n \nsmallest\n)\n\n\n\n\n\nThe running time is the same. Actually, the algorithm is the same with the exceptions of two comparisons and some names.\n\n\n6.2-3\n\n\n\n\nWhat is the effect of calling $\\text{MAX-HEAPIFY}(A, i)$ when th element $A[i]$ is larger than its children?\n\n\n\n\nNo effect. The comparisons are carried out, $A[i]$ is found to be largest and the procedure just returns.\n\n\n6.2-4\n\n\n\n\nWhat is the effect of calling $\\text{MAX-HEAPIFY}(A, i)$ for $i > A.heap\\text-size / 2$?\n\n\n\n\nNo effect. In that case, it is a leaf. Both $\\text{LEFT}$ and $\\text{RIGHT}$ return values that fail the comparison with the heap size and i is stored in largest. Afterwards the procedure just returns\n\n\n6.2-5\n\n\n\n\nThe code for $\\text{MAX-HEAPIFY}$ is quite efficient in terms of constant factors, except possibly for the recursive call in line 10, which might cause some compilers to produce inefficient code. Write an efficient $\\text{MAX-HEAPIFY}$ that uses an iterative control construct (a loop) instead of recursion.\n\n\n\n\nMAX\n-\nHEAPIFY\n(\nA\n,\n \ni\n)\n\n    \nwhile\n \ntrue\n\n        \nleft\n \n=\n \nLEFT\n(\ni\n)\n\n        \nright\n \n=\n \nRIGHT\n(\ni\n)\n\n        \nif\n \nleft\n \n<\n \nA\n.\nheap\n-\nsize\n \nand\n \nA\n.\nnodes\n[\nleft\n]\n \n>\n \nA\n.\nnodes\n[\ni\n]\n \n            \nlargest\n \n=\n \nleft\n\n        \nelse\n \nlargest\n \n=\n \ni\n\n        \nif\n \nright\n \n<\n \nA\n.\nheap\n-\nsize\n \nand\n \nA\n.\nnodes\n[\nright\n]\n \n>\n \nA\n.\nnodes\n[\nlargest\n]\n\n            \nlargest\n \n=\n \nright\n\n        \nif\n \nlargest\n \n==\n \ni\n\n            \nreturn\n\n        \nexchange\n \nA\n.\nnodes\n[\ni\n]\n \nwith\n \nA\n.\nnodes\n[\nlargest\n]\n\n        \ni\n \n=\n \nlargest\n\n\n\n\n\n6.2-6\n\n\n\n\nShow that the worst-case running time of $\\text{MAX-HEAPIFY}$ on a heap of size $n$ is $\\Omega(\\lg n)$. ($\\textit{Hint:}$ For a heap with $n$ nodes, give node values that cause $\\text{MAX-HEAPIFY}$ to be called recursively at every node on a simple path from the root down to a leaf.)\n\n\n\n\nIf you put a value at the root that is less than every value in the left and right subtrees, then $\\text{MAX-HEAPIFY}$ will be called recursively until a leaf is reached. To make the recursive calls traverse the longest path to a leaf, choose values that make $\\text{MAX-HEAPIFY}$ always recurse on the left child. It follows the left branch when the left child is greater than or equal to the right child, so putting $0$ at the root and $1$ at all the other nodes, for example, will accomplish that. With such values, $\\text{MAX-HEAPIFY}$ will be called $h$ times (where $h$ is the heap height, which is the number of edges in the longest path from the root to a leaf), so its running time will be $\\Theta(h)$ (since each call does $\\Theta(1)$ work), which is $\\Theta(\\lg n)$. Since we have a case in which $\\text{MAX-HEAPIFY}$'s running time is $\\Theta(\\lg n)$, its worst-case running time is \u007f$\\Omega(\\lg n)$.",
            "title": "6.2 Maintaining the heap property"
        },
        {
            "location": "/Chap06/6.2/#62-1",
            "text": "Using figure 6.2 as a model, illustrate the operation of $\\text{MAX-HEAPIFY}(A, 3)$ on the array $A = \\langle 27, 17, 3, 16, 13, 10, 1, 5, 7, 12, 4, 8, 9, 0 \\rangle$.   \\begin{align}\n\\langle 27, 17, 3,  16, 13, 10,1, 5, 7, 12, 4, 8, 9, 0 \\rangle \\\\\n\\langle 27, 17, 10, 16, 13, 3, 1, 5, 7, 12, 4, 8, 9, 0 \\rangle \\\\\n\\langle 27, 17, 10, 16, 13, 9, 1, 5, 7, 12, 4, 8, 3, 0 \\rangle \\\\\n\\end{align}",
            "title": "6.2-1"
        },
        {
            "location": "/Chap06/6.2/#62-2",
            "text": "Starting with the procedure $\\text{MAX-HEAPIFY}$, write pseudocode for the procedure $\\text{MIN-HEAPIFY}(A, i)$, which performs the corresponding manipulation on a min-heap. How does the running time of $\\text{MIN-HEAPIFY}$ compare to that of $\\text{MAX-HEAPIFY}$?   MIN - HEAPIFY ( A ,   i ) \n     l   =   LEFT ( i ) \n     r   =   RIGHT ( i ) \n     if   l   \u2264   A . heap - size   and   A [ l ]   <   A [ i ] \n         smallest   =   l \n     else   smallest   =   i \n     if   r   \u2264   A . heap - size   and   A [ r ]   <   A [ smallest ] \n         smallest   =   r \n     if   smallest   !=   i \n         exchange   A [ i ]   with   A [ smallest ] \n     MIN - HEAPIFY ( A ,   smallest )   The running time is the same. Actually, the algorithm is the same with the exceptions of two comparisons and some names.",
            "title": "6.2-2"
        },
        {
            "location": "/Chap06/6.2/#62-3",
            "text": "What is the effect of calling $\\text{MAX-HEAPIFY}(A, i)$ when th element $A[i]$ is larger than its children?   No effect. The comparisons are carried out, $A[i]$ is found to be largest and the procedure just returns.",
            "title": "6.2-3"
        },
        {
            "location": "/Chap06/6.2/#62-4",
            "text": "What is the effect of calling $\\text{MAX-HEAPIFY}(A, i)$ for $i > A.heap\\text-size / 2$?   No effect. In that case, it is a leaf. Both $\\text{LEFT}$ and $\\text{RIGHT}$ return values that fail the comparison with the heap size and i is stored in largest. Afterwards the procedure just returns",
            "title": "6.2-4"
        },
        {
            "location": "/Chap06/6.2/#62-5",
            "text": "The code for $\\text{MAX-HEAPIFY}$ is quite efficient in terms of constant factors, except possibly for the recursive call in line 10, which might cause some compilers to produce inefficient code. Write an efficient $\\text{MAX-HEAPIFY}$ that uses an iterative control construct (a loop) instead of recursion.   MAX - HEAPIFY ( A ,   i ) \n     while   true \n         left   =   LEFT ( i ) \n         right   =   RIGHT ( i ) \n         if   left   <   A . heap - size   and   A . nodes [ left ]   >   A . nodes [ i ]  \n             largest   =   left \n         else   largest   =   i \n         if   right   <   A . heap - size   and   A . nodes [ right ]   >   A . nodes [ largest ] \n             largest   =   right \n         if   largest   ==   i \n             return \n         exchange   A . nodes [ i ]   with   A . nodes [ largest ] \n         i   =   largest",
            "title": "6.2-5"
        },
        {
            "location": "/Chap06/6.2/#62-6",
            "text": "Show that the worst-case running time of $\\text{MAX-HEAPIFY}$ on a heap of size $n$ is $\\Omega(\\lg n)$. ($\\textit{Hint:}$ For a heap with $n$ nodes, give node values that cause $\\text{MAX-HEAPIFY}$ to be called recursively at every node on a simple path from the root down to a leaf.)   If you put a value at the root that is less than every value in the left and right subtrees, then $\\text{MAX-HEAPIFY}$ will be called recursively until a leaf is reached. To make the recursive calls traverse the longest path to a leaf, choose values that make $\\text{MAX-HEAPIFY}$ always recurse on the left child. It follows the left branch when the left child is greater than or equal to the right child, so putting $0$ at the root and $1$ at all the other nodes, for example, will accomplish that. With such values, $\\text{MAX-HEAPIFY}$ will be called $h$ times (where $h$ is the heap height, which is the number of edges in the longest path from the root to a leaf), so its running time will be $\\Theta(h)$ (since each call does $\\Theta(1)$ work), which is $\\Theta(\\lg n)$. Since we have a case in which $\\text{MAX-HEAPIFY}$'s running time is $\\Theta(\\lg n)$, its worst-case running time is \u007f$\\Omega(\\lg n)$.",
            "title": "6.2-6"
        },
        {
            "location": "/Chap06/6.3/",
            "text": "6.3-1\n\n\n\n\nUsing figure 6.3 as a model, illustrate the operation of $\\text{BUILD-MAX-HEAP}$ on the array $A = \\langle 5, 3, 17, 10, 84, 19, 6, 22, 9 \\rangle$.\n\n\n\n\n\\begin{align}\n\\langle  5,  3, 17, 10, 84, 19, 6, 22, 9 \\rangle \\\\\n\\langle  5,  3, 17, 22, 84, 19, 6, 10, 9 \\rangle \\\\\n\\langle  5,  3, 19, 22, 84, 17, 6, 10, 9 \\rangle \\\\\n\\langle  5, 84, 19, 22,  3, 17, 6, 10, 9 \\rangle \\\\\n\\langle 84,  5, 19, 22,  3, 17, 6, 10, 9 \\rangle \\\\\n\\langle 84, 22, 19,  5,  3, 17, 6, 10, 9 \\rangle \\\\\n\\langle 84, 22, 19, 10,  3, 17, 6,  5, 9 \\rangle \\\\\n\\end{align}\n\n\n6.3-2\n\n\n\n\nWhy do we want the loop index $i$ in line 2 of $\\text{BUILD-MAX-HEAP}$ to decrease from $\\lfloor A.length / 2 \\rfloor$ to $1$ rather than increase from $1$ to $\\lfloor A.length/2 \\rfloor$?\n\n\n\n\nOtherwise we won't be allowed to call $\\text{MAX-HEAPIFY}$, since it will fail the condition of having the subtrees be max-heaps. That is, if we start with $1$, there is no guarantee that $A[2]$ and $A[3]$ are roots of max-heaps.\n\n\n6.3-3\n\n\n\n\nShow that there are at most $\\lceil n / 2^{h + 1} \\rceil$ nodes of height $h$ in any $n$-element heap.\n\n\n\n\nLet $H$ be the height of the heap.\n\n\nTwo subtleties to beware of:\n\n\n\n\nBe careful not to confuse the height of a node (longest distance from a leaf) with its depth (distance from the root).\n\n\nIf the heap is not a complete binary tree (bottom level is not full), then the nodes at a given level (depth) don't all have the same height. For example, although all nodes at depth $H$ have height $0$, nodes at depth $H - 1$ can have either height $0$ or height $1$.\n\n\n\n\nFor a complete binary tree, it's easy to show that there are $\\lceil n / 2^{h + 1}\\rceil$ nodes of height $h$. But the proof for an incomplete tree is tricky and is not derived from the proof for a complete tree.\n\n\nProof\n \n\n\nBy induction on $h$.\n\n\nBasis\uff1a\n Show that it's true for $h = 0$ (i.e., that # of leaves $\\le \\lceil n / 2^{h + 1} \\rceil = \\lceil n / 2 \\rceil$ In fact, we'll show that the # of leaves $= \\lceil n / 2 \\rceil$.\n\n\nThe tree leaves (nodes at height $0$) are at depths $H$ and $H - 1$. They consist of\n\n\n\n\nall nodes at depth $H$, and\n\n\nthe nodes at depth $H - 1$ that are not parents of depth-$H$ nodes.\n\n\n\n\nLet $x$ be the number of nodes at depth $H$\u2014that is, the number of nodes in the bottom (possibly incomplete) level.\n\n\nNote that $n - x$ is odd, because the $n - x$ nodes above the bottom level form a complete binary tree, and a complete binary tree has an odd number of nodes ($1$ less than a power of $2$). Thus if $n$ is odd, $x$ is even, and if $n$ is even, $x$ is odd.\n\n\nTo prove the base case, we must consider separately the case in which $n$ is even ($x$ is odd) and the case in which $n$ is odd ($x$ is even). Here are two ways to do this: The first requires more cleverness, and the second requires more algebraic manipulation.\n\n\n\n\n\n\nFirst method of proving the base case:  \n\n\n\n\nIf $n$ is odd, then $x$ is even, so all nodes have siblings\u2014i.e., all internal nodes have $2$ children. Thus (see Exercise B.5-3),# of internal nodes $=$ # of leaves $- 1$.\n\n    So, $n =$ # of nodes $=$ # of leaves $+$ # of internal nodes $ = 2 \\cdot$ # of leaves $- 1$. Thus, # of leaves $= (n + 1) / 2$. (The latter equality holds because $n$ is odd.)\n\n\nIf $n$ is even, then $x$ is odd, and some leaf doesn't have a sibling. If we gave it a sibling, we would have $n + 1$ nodes, where $n + 1$ is odd, so the case we analyzed above would apply. Observe that we would also increase the number of leaves by $1$, since we added a node to a parent that already had a child. By the odd-node case above, # of leaves $+ 1 = \\lceil (n + 1) / 2 \\rceil = \\lceil n / 2 \\rceil + 1$. (The latter equality holds because $n$ is even.)  \n\n\n\n\nIn either case, # of leaves = $\\lceil n / 2 \\rceil$.  \n\n\n\n\n\n\nSecond method of proving the base case:\n\n    Note that at any depth $d < H$ there are $2^d$ nodes, because all such tree levels are complete.  \n\n\n\n\n\n\nIf $x$ is even, there are $x / 2$ nodes at depth $H - 1$ that are parents of depth $H$ nodes, hence $2^{H - 1} - x / 2$ nodes at depth $H - 1$ that are not parents of depth-$H$ nodes. Thus,\n\n\n\\begin{align}\n    \\text{total # of height-$0$ nodes}\n    & = x + 2^{H - 1} - x / 2 \\\\\n    & = 2^{H - 1} + x / 2 \\\\\n    & = (2^H + x) / 2 \\\\\n    & = \\lceil (2^H + x - 1) / 2 \\rceil & \\text{(because $x$ is even)} \\\\\n    & = \\lceil n / 2 \\rceil\n\\end{align}\n\n\n($n = 2^H + x - 1$ because the complete tree down to depth $H - 1$ has $2^H - 1$ nodes and depth $H$ has $x$ nodes.)\n\n\n\n\n\n\nIf $x$ is odd, by an argument similar to the even case, we see that\n\n\n\\begin{align}\n    \\text{total # of height-$0$ nodes}\n    & = x + 2^{H - 1} - (x + 1) / 2 \\\\\n    & = 2^{H - 1} + (x - 1) / 2 \\\\\n    & = (2^H + x - 1) / 2 \\\\\n    & = n / 2 \\\\\n    & = \\lceil n / 2 \\rceil & \\text{(because $x$ is odd $\\Rightarrow n$ is even)}. \\\\\n\\end{align}\n\n\n\n\n\n\n\n\n\n\nInductive step:\n Show that if it's true for height $H - 1$, it's true for $h$.\n\n\nLet $n_h$ be the number of nodes at height $h$ in the $n$-node tree $T$.\n\n\nConsider the tree $T'$ formed by removing the leaves of $T$. It has $n' = n - n_0$ nodes. We know from the base case that $n' = \\lceil n / 2 \\rceil$, so $n' = n - n_0 = n - \\lceil n / 2 \\rceil$.\n\n\nNote that the nodes at height $h$ in $T$ would be at height $H - 1$ if the leaves of the tree were removed\u2014that is, they are at height $h - 1$ in $T'$. Letting $n'_{h - 1}$ denote the number of nodes at height $h - 1$ in $T'$, we have\n\n\n$$n_h = n'_{h - 1}.$$\n\n\nBy induction, we can bound $n'_{h - 1}$:\n\n\n$$n_h = n'_{h - 1} \\le \\lceil n' / 2^h \\rceil = \\big\\lceil\\lfloor n / 2 \\rfloor / 2^h \\big\\rceil \\le \\lceil (n / 2) / 2^h \\rceil = \\lceil n / 2^{h + 1} \\rceil.$$\n\n\nAlternative solution\n\n\nAn alternative solution relies on four facts:\n\n\n\n\nEvery node \nnot\n on the unique simple path from the last leaf to the root is the root of a complete binary subtree.\n\n\nA node that is the root of a complete binary subtree and has height $h$ is the ancestor of $2^h$ leaves.\n\n\nBy Exercise 6.1-7, an n-element heap has $\\lceil n / 2 \\rceil$ leaves.\n\n\nFor nonnegative reals $a$ and $b$, we have $\\lceil a \\rceil \\cdot b \\ge \\lceil ab \\rceil$.\n\n\n\n\nThe proof is by contradiction. Assume that an $n$-element heap contains at least $\\lceil n / 2^{h + 1} \\rceil + 1$ nodes of height $h$. Exactly one node of height $h$ is on the unique simple path from the last leaf to the root, and the subtree rooted at this node has at least one leaf (that being the last leaf). All other nodes of height $h$, of which the heap contains at least $\\lceil n / 2^{h + 1} \\rceil$, are the roots of complete binary subtrees, and each such node is the root of a subtree with $2^h$ leaves. Moreover, each subtree whose root is at height $h$ is disjoint. Therefore, the number of leaves in the entire heap is at least \n\n\n\\begin{align}\n\\Big\\lceil \\frac{n}{2^{h + 1}} \\Big\\rceil \\cdot 2^h + 1\n& \\ge \\Big\\lceil \\frac{n}{2^{h + 1}} \\cdot 2^h \\Big\\rceil + 1 \\\\\n& =   \\Big\\lceil \\frac{n}{2} \\Big\\rceil + 1,\n\\end{align}\n\n\nwhich contradicts the property that an $n$-element heap has $\\lceil n / 2 \\rceil$ leaves.",
            "title": "6.3 Building a heap"
        },
        {
            "location": "/Chap06/6.3/#63-1",
            "text": "Using figure 6.3 as a model, illustrate the operation of $\\text{BUILD-MAX-HEAP}$ on the array $A = \\langle 5, 3, 17, 10, 84, 19, 6, 22, 9 \\rangle$.   \\begin{align}\n\\langle  5,  3, 17, 10, 84, 19, 6, 22, 9 \\rangle \\\\\n\\langle  5,  3, 17, 22, 84, 19, 6, 10, 9 \\rangle \\\\\n\\langle  5,  3, 19, 22, 84, 17, 6, 10, 9 \\rangle \\\\\n\\langle  5, 84, 19, 22,  3, 17, 6, 10, 9 \\rangle \\\\\n\\langle 84,  5, 19, 22,  3, 17, 6, 10, 9 \\rangle \\\\\n\\langle 84, 22, 19,  5,  3, 17, 6, 10, 9 \\rangle \\\\\n\\langle 84, 22, 19, 10,  3, 17, 6,  5, 9 \\rangle \\\\\n\\end{align}",
            "title": "6.3-1"
        },
        {
            "location": "/Chap06/6.3/#63-2",
            "text": "Why do we want the loop index $i$ in line 2 of $\\text{BUILD-MAX-HEAP}$ to decrease from $\\lfloor A.length / 2 \\rfloor$ to $1$ rather than increase from $1$ to $\\lfloor A.length/2 \\rfloor$?   Otherwise we won't be allowed to call $\\text{MAX-HEAPIFY}$, since it will fail the condition of having the subtrees be max-heaps. That is, if we start with $1$, there is no guarantee that $A[2]$ and $A[3]$ are roots of max-heaps.",
            "title": "6.3-2"
        },
        {
            "location": "/Chap06/6.3/#63-3",
            "text": "Show that there are at most $\\lceil n / 2^{h + 1} \\rceil$ nodes of height $h$ in any $n$-element heap.   Let $H$ be the height of the heap.  Two subtleties to beware of:   Be careful not to confuse the height of a node (longest distance from a leaf) with its depth (distance from the root).  If the heap is not a complete binary tree (bottom level is not full), then the nodes at a given level (depth) don't all have the same height. For example, although all nodes at depth $H$ have height $0$, nodes at depth $H - 1$ can have either height $0$ or height $1$.   For a complete binary tree, it's easy to show that there are $\\lceil n / 2^{h + 1}\\rceil$ nodes of height $h$. But the proof for an incomplete tree is tricky and is not derived from the proof for a complete tree.  Proof    By induction on $h$.  Basis\uff1a  Show that it's true for $h = 0$ (i.e., that # of leaves $\\le \\lceil n / 2^{h + 1} \\rceil = \\lceil n / 2 \\rceil$ In fact, we'll show that the # of leaves $= \\lceil n / 2 \\rceil$.  The tree leaves (nodes at height $0$) are at depths $H$ and $H - 1$. They consist of   all nodes at depth $H$, and  the nodes at depth $H - 1$ that are not parents of depth-$H$ nodes.   Let $x$ be the number of nodes at depth $H$\u2014that is, the number of nodes in the bottom (possibly incomplete) level.  Note that $n - x$ is odd, because the $n - x$ nodes above the bottom level form a complete binary tree, and a complete binary tree has an odd number of nodes ($1$ less than a power of $2$). Thus if $n$ is odd, $x$ is even, and if $n$ is even, $x$ is odd.  To prove the base case, we must consider separately the case in which $n$ is even ($x$ is odd) and the case in which $n$ is odd ($x$ is even). Here are two ways to do this: The first requires more cleverness, and the second requires more algebraic manipulation.    First method of proving the base case:     If $n$ is odd, then $x$ is even, so all nodes have siblings\u2014i.e., all internal nodes have $2$ children. Thus (see Exercise B.5-3),# of internal nodes $=$ # of leaves $- 1$. \n    So, $n =$ # of nodes $=$ # of leaves $+$ # of internal nodes $ = 2 \\cdot$ # of leaves $- 1$. Thus, # of leaves $= (n + 1) / 2$. (The latter equality holds because $n$ is odd.)  If $n$ is even, then $x$ is odd, and some leaf doesn't have a sibling. If we gave it a sibling, we would have $n + 1$ nodes, where $n + 1$ is odd, so the case we analyzed above would apply. Observe that we would also increase the number of leaves by $1$, since we added a node to a parent that already had a child. By the odd-node case above, # of leaves $+ 1 = \\lceil (n + 1) / 2 \\rceil = \\lceil n / 2 \\rceil + 1$. (The latter equality holds because $n$ is even.)     In either case, # of leaves = $\\lceil n / 2 \\rceil$.      Second method of proving the base case: \n    Note that at any depth $d < H$ there are $2^d$ nodes, because all such tree levels are complete.      If $x$ is even, there are $x / 2$ nodes at depth $H - 1$ that are parents of depth $H$ nodes, hence $2^{H - 1} - x / 2$ nodes at depth $H - 1$ that are not parents of depth-$H$ nodes. Thus,  \\begin{align}\n    \\text{total # of height-$0$ nodes}\n    & = x + 2^{H - 1} - x / 2 \\\\\n    & = 2^{H - 1} + x / 2 \\\\\n    & = (2^H + x) / 2 \\\\\n    & = \\lceil (2^H + x - 1) / 2 \\rceil & \\text{(because $x$ is even)} \\\\\n    & = \\lceil n / 2 \\rceil\n\\end{align}  ($n = 2^H + x - 1$ because the complete tree down to depth $H - 1$ has $2^H - 1$ nodes and depth $H$ has $x$ nodes.)    If $x$ is odd, by an argument similar to the even case, we see that  \\begin{align}\n    \\text{total # of height-$0$ nodes}\n    & = x + 2^{H - 1} - (x + 1) / 2 \\\\\n    & = 2^{H - 1} + (x - 1) / 2 \\\\\n    & = (2^H + x - 1) / 2 \\\\\n    & = n / 2 \\\\\n    & = \\lceil n / 2 \\rceil & \\text{(because $x$ is odd $\\Rightarrow n$ is even)}. \\\\\n\\end{align}      Inductive step:  Show that if it's true for height $H - 1$, it's true for $h$.  Let $n_h$ be the number of nodes at height $h$ in the $n$-node tree $T$.  Consider the tree $T'$ formed by removing the leaves of $T$. It has $n' = n - n_0$ nodes. We know from the base case that $n' = \\lceil n / 2 \\rceil$, so $n' = n - n_0 = n - \\lceil n / 2 \\rceil$.  Note that the nodes at height $h$ in $T$ would be at height $H - 1$ if the leaves of the tree were removed\u2014that is, they are at height $h - 1$ in $T'$. Letting $n'_{h - 1}$ denote the number of nodes at height $h - 1$ in $T'$, we have  $$n_h = n'_{h - 1}.$$  By induction, we can bound $n'_{h - 1}$:  $$n_h = n'_{h - 1} \\le \\lceil n' / 2^h \\rceil = \\big\\lceil\\lfloor n / 2 \\rfloor / 2^h \\big\\rceil \\le \\lceil (n / 2) / 2^h \\rceil = \\lceil n / 2^{h + 1} \\rceil.$$  Alternative solution  An alternative solution relies on four facts:   Every node  not  on the unique simple path from the last leaf to the root is the root of a complete binary subtree.  A node that is the root of a complete binary subtree and has height $h$ is the ancestor of $2^h$ leaves.  By Exercise 6.1-7, an n-element heap has $\\lceil n / 2 \\rceil$ leaves.  For nonnegative reals $a$ and $b$, we have $\\lceil a \\rceil \\cdot b \\ge \\lceil ab \\rceil$.   The proof is by contradiction. Assume that an $n$-element heap contains at least $\\lceil n / 2^{h + 1} \\rceil + 1$ nodes of height $h$. Exactly one node of height $h$ is on the unique simple path from the last leaf to the root, and the subtree rooted at this node has at least one leaf (that being the last leaf). All other nodes of height $h$, of which the heap contains at least $\\lceil n / 2^{h + 1} \\rceil$, are the roots of complete binary subtrees, and each such node is the root of a subtree with $2^h$ leaves. Moreover, each subtree whose root is at height $h$ is disjoint. Therefore, the number of leaves in the entire heap is at least   \\begin{align}\n\\Big\\lceil \\frac{n}{2^{h + 1}} \\Big\\rceil \\cdot 2^h + 1\n& \\ge \\Big\\lceil \\frac{n}{2^{h + 1}} \\cdot 2^h \\Big\\rceil + 1 \\\\\n& =   \\Big\\lceil \\frac{n}{2} \\Big\\rceil + 1,\n\\end{align}  which contradicts the property that an $n$-element heap has $\\lceil n / 2 \\rceil$ leaves.",
            "title": "6.3-3"
        },
        {
            "location": "/Chap06/6.4/",
            "text": "6.4-1\n\n\n\n\nUsing figure 6.4 as a model, illustrate the operation of $\\text{HEAPSORT}$ on the array $A = \\langle 5, 13, 2, 25, 7, 17, 20, 8, 4 \\rangle$.\n\n\n\n\n\n\n6.4-2\n\n\n\n\nArgue the correctness of $\\text{HEAPSORT}$ using the following loop invariant:\n\n\nAt the start of each iteration of the \nfor\n loop of lines 2-5, the subarray $A[1..i]$ is a max-heap containing the $i$ smallest elements of $A[1..n]$, and the subarray $A[i + 1..n]$ contains the $n - i$ largest elements of $A[1..n]$, sorted.\n\n\n\n\nInitialization:\n The subarray $A[i + 1..n]$ is empty, thus the invariant holds.\n\n\nMaintenance:\n $A[1]$ is the largest element in $A[1..i]$ and it is smaller than the elements in $A[i + 1..n]$. When we put it in the $i$th position, then $A[i..n]$ contains the largest elements, sorted. Decreasing the heap size and calling $\\text{MAX-HEAPIFY}$ turns $A[1..i - 1]$ into a max-heap. Decrementing $i$ sets up the invariant for the next iteration.\n\n\nTermination:\n After the loop $i = 1$. This means that $A[2..n]$ is sorted and $A[1]$ is the smallest element in the array, which makes the array sorted.\n\n\n6.4-3\n\n\n\n\nWhat is the running time of $\\text{HEAPSORT}$ on an array $A$ of length $n$ that is already sorted in increasing order? What about decreasing order?\n\n\n\n\nBoth of them are $\\Theta(n\\lg n)$.\n\n\nIf the array is sorted in increasing order, the algorithm will need to convert it to a heep that will take $O(n)$. Afterwards, however, there are $n - 1$ calls to $\\text{MAX-HEAPIFY}$ and each one will perform the full $\\lg k$ operations. Since:\n\n\n$$\\sum_{i = 1}^{n - 1}\\lg k = \\lg\\Big((n - 1)!\\Big) = \\Theta(n\\lg n).$$\n\n\nSame goes for decreasing order. $\\text{BUILD-MAX-HEAP}$ will be faster (by a constant factor), but the computation time will be dominated by the loop in $\\text{HEAPSORT}$, which is $\\Theta(n\\lg n)$.\n\n\n6.4-4\n\n\n\n\nShow that the worst-case running time of $\\text{HEAPSORT}$ is $\\Omega(n\\lg n)$.\n\n\n\n\nThis is essentially the first part of exercise 6.4-3. Whenever we have an array that is already sorted, we take linear time to convert it to a max-heap and then $n\\lg n$ time to sort it.\n\n\n6.4-5 $\\star$\n\n\n\n\nShow that when all elements are distinct, the best-case running time of $\\text{HEAPSORT}$ is $\\Omega(n\\lg n)$.\n\n\n\n\nThis proved to be quite tricky. My initial solution was wrong. Also, heapsort appeared in 1964, but the lower bound was proved by Schaffer and Sedgewick in 1992. It's evil to put this an exercise.\n\n\nLet's assume that the heap is a full binary tree with $n = 2^k - 1$. There are $2^{k - 1}$ leaves and $2^{k - 1} - 1$ inner nodes.\n\n\nLet's look at sorting the first $2^{k - 1}$ elements of the heap. Let's consider their arrangement in the heap and color the leaves to be red and the inner nodes to be blue. The colored nodes are a subtree of the heap (otherwise there would be a contradiction). Since there are $2^{k - 1}$ colored nodes, at most $2^{k - 2}$ are red, which means that at least $2^{k - 2} - 1$ are blue.\n\n\nWhile the red nodes can jump directly to the root, the blue nodes need to travel up before they get removed. Let's count the number of swaps to move the blue nodes to the root. The minimal case of swaps is when (1) there are $2^{k - 2} - 1$ blue nodes and (2) they are arranged in a binary tree. If there are $d$ such blue nodes, then there would be $i = \\lg d$ levels, each containing $2^i$ nodes with length $i$. Thus the number of swaps is,\n\n\n$$\\sum_{i = 0}^{\\lg d}i2^i = 2 + (\\lg d - 2)2^{\\lg d} = \\Omega(d\\lg d).$$\n\n\nAnd now for a lazy (but cute) trick. We've figured out a tight bound on sorting half of the heap. We have the following recurrence:\n\n\n$$T(n) = T(n / 2) + \\Omega(n\\lg n).$$\n\n\nApplying the master method, we get that $T(n) = \\Omega(n\\lg n)$.",
            "title": "6.4 The heapsort algorithm"
        },
        {
            "location": "/Chap06/6.4/#64-1",
            "text": "Using figure 6.4 as a model, illustrate the operation of $\\text{HEAPSORT}$ on the array $A = \\langle 5, 13, 2, 25, 7, 17, 20, 8, 4 \\rangle$.",
            "title": "6.4-1"
        },
        {
            "location": "/Chap06/6.4/#64-2",
            "text": "Argue the correctness of $\\text{HEAPSORT}$ using the following loop invariant:  At the start of each iteration of the  for  loop of lines 2-5, the subarray $A[1..i]$ is a max-heap containing the $i$ smallest elements of $A[1..n]$, and the subarray $A[i + 1..n]$ contains the $n - i$ largest elements of $A[1..n]$, sorted.   Initialization:  The subarray $A[i + 1..n]$ is empty, thus the invariant holds.  Maintenance:  $A[1]$ is the largest element in $A[1..i]$ and it is smaller than the elements in $A[i + 1..n]$. When we put it in the $i$th position, then $A[i..n]$ contains the largest elements, sorted. Decreasing the heap size and calling $\\text{MAX-HEAPIFY}$ turns $A[1..i - 1]$ into a max-heap. Decrementing $i$ sets up the invariant for the next iteration.  Termination:  After the loop $i = 1$. This means that $A[2..n]$ is sorted and $A[1]$ is the smallest element in the array, which makes the array sorted.",
            "title": "6.4-2"
        },
        {
            "location": "/Chap06/6.4/#64-3",
            "text": "What is the running time of $\\text{HEAPSORT}$ on an array $A$ of length $n$ that is already sorted in increasing order? What about decreasing order?   Both of them are $\\Theta(n\\lg n)$.  If the array is sorted in increasing order, the algorithm will need to convert it to a heep that will take $O(n)$. Afterwards, however, there are $n - 1$ calls to $\\text{MAX-HEAPIFY}$ and each one will perform the full $\\lg k$ operations. Since:  $$\\sum_{i = 1}^{n - 1}\\lg k = \\lg\\Big((n - 1)!\\Big) = \\Theta(n\\lg n).$$  Same goes for decreasing order. $\\text{BUILD-MAX-HEAP}$ will be faster (by a constant factor), but the computation time will be dominated by the loop in $\\text{HEAPSORT}$, which is $\\Theta(n\\lg n)$.",
            "title": "6.4-3"
        },
        {
            "location": "/Chap06/6.4/#64-4",
            "text": "Show that the worst-case running time of $\\text{HEAPSORT}$ is $\\Omega(n\\lg n)$.   This is essentially the first part of exercise 6.4-3. Whenever we have an array that is already sorted, we take linear time to convert it to a max-heap and then $n\\lg n$ time to sort it.",
            "title": "6.4-4"
        },
        {
            "location": "/Chap06/6.4/#64-5-star",
            "text": "Show that when all elements are distinct, the best-case running time of $\\text{HEAPSORT}$ is $\\Omega(n\\lg n)$.   This proved to be quite tricky. My initial solution was wrong. Also, heapsort appeared in 1964, but the lower bound was proved by Schaffer and Sedgewick in 1992. It's evil to put this an exercise.  Let's assume that the heap is a full binary tree with $n = 2^k - 1$. There are $2^{k - 1}$ leaves and $2^{k - 1} - 1$ inner nodes.  Let's look at sorting the first $2^{k - 1}$ elements of the heap. Let's consider their arrangement in the heap and color the leaves to be red and the inner nodes to be blue. The colored nodes are a subtree of the heap (otherwise there would be a contradiction). Since there are $2^{k - 1}$ colored nodes, at most $2^{k - 2}$ are red, which means that at least $2^{k - 2} - 1$ are blue.  While the red nodes can jump directly to the root, the blue nodes need to travel up before they get removed. Let's count the number of swaps to move the blue nodes to the root. The minimal case of swaps is when (1) there are $2^{k - 2} - 1$ blue nodes and (2) they are arranged in a binary tree. If there are $d$ such blue nodes, then there would be $i = \\lg d$ levels, each containing $2^i$ nodes with length $i$. Thus the number of swaps is,  $$\\sum_{i = 0}^{\\lg d}i2^i = 2 + (\\lg d - 2)2^{\\lg d} = \\Omega(d\\lg d).$$  And now for a lazy (but cute) trick. We've figured out a tight bound on sorting half of the heap. We have the following recurrence:  $$T(n) = T(n / 2) + \\Omega(n\\lg n).$$  Applying the master method, we get that $T(n) = \\Omega(n\\lg n)$.",
            "title": "6.4-5 $\\star$"
        },
        {
            "location": "/Chap06/6.5/",
            "text": "6.5-1\n\n\n\n\nIllustrate the operation $\\text{HEAP-EXTRACT-MAX}$ on the heap $A = \\langle 15, 13, 9, 5, 12, 8, 7, 4, 0, 6, 2, 1 \\rangle$.\n\n\n\n\n\n\n\n\nOriginal heap.\n\n\n\n\n\n\n\n\nExtract the max node $15$, then move $1$ to the top of the heap.\n\n\n\n\n\n\n\n\nSince $13 > 9 > 1$, swap $1$ and $13$.\n\n\n\n\n\n\n\n\nSince $12 > 5 > 1$, swap $1$ and $12$.\n\n\n\n\n\n\n\n\nSince $6 > 2 > 1$, swap $1$ and $6$.\n\n\n\n\n\n\n\n\n6.5-2\n\n\n\n\nIllustrate the operation of $\\text{MAX-HEAP-INSERT}(A, 10)$ on the heap $A = \\langle 15, 13, 9, 5, 12, 8, 7, 4, 0, 6, 2, 1 \\rangle$.\n\n\n\n\n\n\n\n\nOriginal heap.\n\n\n\n\n\n\n\n\nSince $\\text{MAX-HEAP-INSERT}(A, 10)$ is called, we append a node assigned value $-\\infty$.\n\n\n\n\n\n\n\n\nUpdate the $key$ value of the new node.\n\n\n\n\n\n\n\n\nSince the parent $key$ is smaller than $10$, the nodes are swapped.\n\n\n\n\n\n\n\n\nSince the parent $key$ is smaller than $10$, the nodes are swapped.\n\n\n\n\n\n\n\n\n6.5-3\n\n\n\n\nWrite pseudocode for the procedures $\\text{HEAP-MINIMUM}$, $\\text{HEAP-EXTRACT-MIN}$, $\\text{HEAP-DECREASE-KEY}$, and $\\text{MIN-HEAP-INSERT}$ that implement a min-priority queue with a min-heap.\n\n\n\n\nHEAP\n-\nMINIMUM\n(\nA\n)\n\n    \nreturn\n \nA\n[\n1\n]\n\n\n\n\n\nHEAP\n-\nEXTRACT\n-\nMIN\n(\nA\n)\n\n    \nif\n \nA\n.\nheap\n-\nsize\n \n<\n \n1\n\n        \nerror\n \n\"heap underflow\"\n\n    \nmin\n \n=\n \nA\n[\n1\n]\n\n    \nA\n[\n1\n]\n \n=\n \nA\n[\nA\n.\nheap\n-\nsize\n]\n\n    \nA\n.\nheap\n-\nsize\n \n=\n \nA\n.\nheap\n-\nsize\n \n-\n \n1\n\n    \nMIN\n-\nHEAPIFY\n(\nA\n,\n \n1\n)\n\n    \nreturn\n \nmin\n\n\n\n\n\nHEAP\n-\nDECREASE\n-\nKEY\n(\nA\n,\n \ni\n,\n \nkey\n)\n\n    \nif\n \nkey\n \n>\n \nA\n[\ni\n]\n\n        \nerror\n \n\"new key is larger than current key\"\n\n    \nA\n[\ni\n]\n \n=\n \nkey\n\n    \nwhile\n \ni\n \n>\n \n1\n \nand\n \nA\n[\nPAREANT\n(\ni\n)]\n \n>\n \nA\n[\ni\n]\n\n        \nexchange\n \nA\n[\ni\n]\n \nwith\n \nA\n[\nPARENT\n(\ni\n)]\n\n        \ni\n \n=\n \nPAREANT\n(\ni\n)\n\n\n\n\n\nMIN\n-\nHEAP\n-\nINSERT\n(\nA\n,\n \nkey\n)\n\n    \nA\n.\nheap\n-\nsize\n \n=\n \nA\n.\nheap\n-\nsize\n \n+\n \n1\n\n    \nA\n[\nA\n.\nheap\n-\nsize\n]\n \n=\n \n\u221e\n\n    \nHEAP\n-\nDECREASE\n-\nKEY\n(\nA\n,\n \nA\n.\nheap\n-\nsize\n,\n \nkey\n)\n\n\n\n\n\n6.5-4\n\n\n\n\nWhy do we bother setting the key of the inserted node to $-\\infty$ in line 2 of $\\text{MAX-HEAP-INSERT}$ when the next thing we do is increase its key to the desired value?\n\n\n\n\nIn order to pass the guard clause. Otherwise we have to drop the check if $key < A[i]$.\n\n\n6.5-5\n\n\n\n\nArgue the correctness of $\\text{HEAP-INCREASE-KEY}$ using the following loop invariant:\n\n\nAt the start of each iteration of the \nwhile\n loop of lines 4-6, the subarray $A[1 ..A.heap\\text-size]$ satisfies the max-heap property, except that there may be one violation: $A[i]$ may be larger than $A[\\text{PARENT}(i)]$.\n\n\nYou may assume that the subarray $A[1..A.heap\\text-size]$ satisfies the max-heap property at the time $\\text{HEAP-INCREASE-KEY}$ is called.\n\n\n\n\nInitialization:\n $A$ is a heap except that $A[i]$ might be larger that it's parent, because it has been modified. $A[i]$ is larger than its children, because otherwise the guard clause would fail and the loop will not be entered (the new value is larger than the old value and the old value is larger than the children).\n\n\nMaintenance:\n When we exchange $A[i]$ with its parent, the max-heap property is satisfied except that now $A[\\text{PARENT}(i)]$ might be larger than its parent. Changing $i$ to its parent maintains the invariant.\n\n\nTermination:\n The loop terminates whenever the heap is exhausted or the max-heap property for $A[i]$ and its parent is preserved. At the loop termination, $A$ is a max-heap.\n\n\n6.5-6\n\n\n\n\nEach exchange operation on line 5 of $\\text{HEAP-INCREASE-KEY}$ typically requires three assignments. Show how to use the idea of the inner loop of $\\text{INSERTION-SORT}$ to reduce the three assignments down to just one assignment.\n\n\n\n\nChange the procedure to the following:\n\n\nHEAP\n-\nINCREASE\n-\nKEY\n(\nA\n,\n \ni\n,\n \nkey\n)\n\n    \nif\n \nkey\n \n<\n \nA\n[\ni\n]\n\n        \nerror\n \n\"new key is smaller than current key\"\n\n    \nA\n[\ni\n]\n \n=\n \nkey\n\n    \nwhile\n \ni\n \n>\n \nl\n \nand\n \nA\n[\nPARENT\n(\ni\n)]\n \n<\n \nA\n[\ni\n]\n\n        \nA\n[\ni\n]\n \n=\n \nA\n[\nPARENT\n(\ni\n)]\n\n        \ni\n \n=\n \nPARENT\n(\ni\n)\n\n    \nA\n[\ni\n]\n \n=\n \nkey\n\n\n\n\n\n6.5-7\n\n\n\n\nShow how to implement a first-in, first-out queue with a priority queue. Show how to implement a stack with a priority queue. (Queues and stacks are defined in section 10.1).\n\n\n\n\nBoth are simple. For a stack we keep adding elements in increasing priority, while in a queue we add them in decreasing priority. For the stack we can set the new priority to $\\text{HEAP-MAXIMUM}(A) + 1$. For the queue we need to keep track of it and decrease it on every insertion.\n\n\nBoth are not very efficient. Furthermore, if the priority can overflow or underflow, so will eventually need to reassign priorities.\n\n\n6.5-8\n\n\n\n\nThe operation $\\text{HEAP-DELETE}(A, i)$ deletes the item in node $i$ from heap $A$. Give an implementation of $\\text{HEAP-DELETE}$ that runs in $O(\\lg n)$ time for an $n$-element max-heap.\n\n\n\n\nHEAP\n-\nDELETE\n(\nA\n,\n \ni\n)\n\n    \nA\n[\ni\n]\n \n=\n \nA\n[\nA\n.\nheap\n-\nsize\n]\n\n    \nA\n.\nheap\n-\nsize\n \n=\n \nA\n.\nheap\n-\nsize\n \n-\n \n1\n\n    \nMAX\n-\nHEAPIFY\n(\nA\n,\n \ni\n)\n\n\n\n\n\nWe just move the last element of the heap to the deleated position and then call $\\text{MAX-HEAPIFY}$ on it. This works, because the element is already smaller than its parent (because it was already under it on the heap), but might be larger than its children. $\\text{MAX-HEAPIFY}$ restored the heap property.\n\n\n6.5-9\n\n\n\n\nGive an $O(n\\lg k)$-time algorithm to merge $k$ sorted lists into one sorted list, where $n$ is the total number of elements in all the input lists. ($\\textit{Hint:}$ Use a min-heap for $k$-way merging.)\n\n\n\n\nWe take one element of each list and put it in a min-heap. Along with each element we have to track which list we took it from. When merging, we take the minimum element from the heap and insert another element off the list it came from (unless the list is empty). We continue until we empty the heap.\n\n\nWe have $n$ steps and at each step we're doing an insertion into the heap, which is $\\lg k$.",
            "title": "6.5 Priority queues"
        },
        {
            "location": "/Chap06/6.5/#65-1",
            "text": "Illustrate the operation $\\text{HEAP-EXTRACT-MAX}$ on the heap $A = \\langle 15, 13, 9, 5, 12, 8, 7, 4, 0, 6, 2, 1 \\rangle$.     Original heap.     Extract the max node $15$, then move $1$ to the top of the heap.     Since $13 > 9 > 1$, swap $1$ and $13$.     Since $12 > 5 > 1$, swap $1$ and $12$.     Since $6 > 2 > 1$, swap $1$ and $6$.",
            "title": "6.5-1"
        },
        {
            "location": "/Chap06/6.5/#65-2",
            "text": "Illustrate the operation of $\\text{MAX-HEAP-INSERT}(A, 10)$ on the heap $A = \\langle 15, 13, 9, 5, 12, 8, 7, 4, 0, 6, 2, 1 \\rangle$.     Original heap.     Since $\\text{MAX-HEAP-INSERT}(A, 10)$ is called, we append a node assigned value $-\\infty$.     Update the $key$ value of the new node.     Since the parent $key$ is smaller than $10$, the nodes are swapped.     Since the parent $key$ is smaller than $10$, the nodes are swapped.",
            "title": "6.5-2"
        },
        {
            "location": "/Chap06/6.5/#65-3",
            "text": "Write pseudocode for the procedures $\\text{HEAP-MINIMUM}$, $\\text{HEAP-EXTRACT-MIN}$, $\\text{HEAP-DECREASE-KEY}$, and $\\text{MIN-HEAP-INSERT}$ that implement a min-priority queue with a min-heap.   HEAP - MINIMUM ( A ) \n     return   A [ 1 ]   HEAP - EXTRACT - MIN ( A ) \n     if   A . heap - size   <   1 \n         error   \"heap underflow\" \n     min   =   A [ 1 ] \n     A [ 1 ]   =   A [ A . heap - size ] \n     A . heap - size   =   A . heap - size   -   1 \n     MIN - HEAPIFY ( A ,   1 ) \n     return   min   HEAP - DECREASE - KEY ( A ,   i ,   key ) \n     if   key   >   A [ i ] \n         error   \"new key is larger than current key\" \n     A [ i ]   =   key \n     while   i   >   1   and   A [ PAREANT ( i )]   >   A [ i ] \n         exchange   A [ i ]   with   A [ PARENT ( i )] \n         i   =   PAREANT ( i )   MIN - HEAP - INSERT ( A ,   key ) \n     A . heap - size   =   A . heap - size   +   1 \n     A [ A . heap - size ]   =   \u221e \n     HEAP - DECREASE - KEY ( A ,   A . heap - size ,   key )",
            "title": "6.5-3"
        },
        {
            "location": "/Chap06/6.5/#65-4",
            "text": "Why do we bother setting the key of the inserted node to $-\\infty$ in line 2 of $\\text{MAX-HEAP-INSERT}$ when the next thing we do is increase its key to the desired value?   In order to pass the guard clause. Otherwise we have to drop the check if $key < A[i]$.",
            "title": "6.5-4"
        },
        {
            "location": "/Chap06/6.5/#65-5",
            "text": "Argue the correctness of $\\text{HEAP-INCREASE-KEY}$ using the following loop invariant:  At the start of each iteration of the  while  loop of lines 4-6, the subarray $A[1 ..A.heap\\text-size]$ satisfies the max-heap property, except that there may be one violation: $A[i]$ may be larger than $A[\\text{PARENT}(i)]$.  You may assume that the subarray $A[1..A.heap\\text-size]$ satisfies the max-heap property at the time $\\text{HEAP-INCREASE-KEY}$ is called.   Initialization:  $A$ is a heap except that $A[i]$ might be larger that it's parent, because it has been modified. $A[i]$ is larger than its children, because otherwise the guard clause would fail and the loop will not be entered (the new value is larger than the old value and the old value is larger than the children).  Maintenance:  When we exchange $A[i]$ with its parent, the max-heap property is satisfied except that now $A[\\text{PARENT}(i)]$ might be larger than its parent. Changing $i$ to its parent maintains the invariant.  Termination:  The loop terminates whenever the heap is exhausted or the max-heap property for $A[i]$ and its parent is preserved. At the loop termination, $A$ is a max-heap.",
            "title": "6.5-5"
        },
        {
            "location": "/Chap06/6.5/#65-6",
            "text": "Each exchange operation on line 5 of $\\text{HEAP-INCREASE-KEY}$ typically requires three assignments. Show how to use the idea of the inner loop of $\\text{INSERTION-SORT}$ to reduce the three assignments down to just one assignment.   Change the procedure to the following:  HEAP - INCREASE - KEY ( A ,   i ,   key ) \n     if   key   <   A [ i ] \n         error   \"new key is smaller than current key\" \n     A [ i ]   =   key \n     while   i   >   l   and   A [ PARENT ( i )]   <   A [ i ] \n         A [ i ]   =   A [ PARENT ( i )] \n         i   =   PARENT ( i ) \n     A [ i ]   =   key",
            "title": "6.5-6"
        },
        {
            "location": "/Chap06/6.5/#65-7",
            "text": "Show how to implement a first-in, first-out queue with a priority queue. Show how to implement a stack with a priority queue. (Queues and stacks are defined in section 10.1).   Both are simple. For a stack we keep adding elements in increasing priority, while in a queue we add them in decreasing priority. For the stack we can set the new priority to $\\text{HEAP-MAXIMUM}(A) + 1$. For the queue we need to keep track of it and decrease it on every insertion.  Both are not very efficient. Furthermore, if the priority can overflow or underflow, so will eventually need to reassign priorities.",
            "title": "6.5-7"
        },
        {
            "location": "/Chap06/6.5/#65-8",
            "text": "The operation $\\text{HEAP-DELETE}(A, i)$ deletes the item in node $i$ from heap $A$. Give an implementation of $\\text{HEAP-DELETE}$ that runs in $O(\\lg n)$ time for an $n$-element max-heap.   HEAP - DELETE ( A ,   i ) \n     A [ i ]   =   A [ A . heap - size ] \n     A . heap - size   =   A . heap - size   -   1 \n     MAX - HEAPIFY ( A ,   i )   We just move the last element of the heap to the deleated position and then call $\\text{MAX-HEAPIFY}$ on it. This works, because the element is already smaller than its parent (because it was already under it on the heap), but might be larger than its children. $\\text{MAX-HEAPIFY}$ restored the heap property.",
            "title": "6.5-8"
        },
        {
            "location": "/Chap06/6.5/#65-9",
            "text": "Give an $O(n\\lg k)$-time algorithm to merge $k$ sorted lists into one sorted list, where $n$ is the total number of elements in all the input lists. ($\\textit{Hint:}$ Use a min-heap for $k$-way merging.)   We take one element of each list and put it in a min-heap. Along with each element we have to track which list we took it from. When merging, we take the minimum element from the heap and insert another element off the list it came from (unless the list is empty). We continue until we empty the heap.  We have $n$ steps and at each step we're doing an insertion into the heap, which is $\\lg k$.",
            "title": "6.5-9"
        },
        {
            "location": "/Chap06/Problems/6-1/",
            "text": "We can build a heap by repeatedly calling $\\text{MAX-HEAP-INSERT}$ to insert the elements into the heap. Consider the following variation of the $\\text{BUILD-MAX-HEAP}$ procedure:\n\n\nBUILD\n-\nMAX\n-\nHEAP\n'\n(\nA\n)\n\n    \nA\n.\nheap\n-\nsize\n \n=\n \n1\n\n    \nfor\n \ni\n \n=\n \n2\n \nto\n \nA\n.\nlength\n\n        \nMAX\n-\nHEAP\n-\nINSERT\n(\nA\n,\n \nA\n[\ni\n])\n\n\n\n\n\na.\n Do the procedures $\\text{BUILD-MAX-HEAP}$ and $\\text{BUILD-MAX-HEAP}'$ always create the same heap when run on the same input array? Prove that they do, or provide a counterexample.\n\n\nb.\n Show that in the worst case, $\\text{BUILD-MAX-HEAP}'$ requires $\\Theta(n\\lg n)$ time to build a $n$-element heap.\n\n\n\n\na.\n The procedures $\\text{BUILD-MAX-HEAP}$ and $\\text{BUILD-MAX-HEAP}'$ do not always\n\n\ncreate the same heap when run on the same input array. Consider the following counterexample.\n\n\nInput array $A = \\langle 1, 2, 3 \\rangle$:\n\n$\\text{BUILD-MAX-HEAP}(A)$: $A = \\langle 3, 2, 1 \\rangle$.\n\n$\\text{BUILD-MAX-HEAP}'(A)$: $A = \\langle 3, 1, 2 \\rangle$.\n\n\nb.\n An upper bound of $O(n\\lg n)$ time follows immediately from there being $n - 1$ calls to $\\text{MAX-HEAP-INSERT}$, each taking $O(\\lg n)$ time. For a lower bound of \u007f$\\Omega(n\\lg n)$, consider the case in which the input array is given in strictly increasing order. Each call to $\\text{MAX-HEAP-INSERT}$ causes $\\text{HEAP-INCREASE-KEY}$ to go all the way up to the root. Since the depth of node $i$ is $\\lfloor \\lg i \\rfloor$, the total time is\n\n\n\\begin{align}\n\\sum_{i = 1}^n \\Theta(\\lfloor \\lg i \\rfloor) \n    & \\ge \\sum_{i = \\lceil n / 2 \\rceil}^n \\Theta(\\lfloor \\lg \\lceil n / 2 \\rceil\\rfloor) \\\\\n    & \\ge \\sum_{i = \\lceil n / 2 \\rceil}^n \\Theta(\\lfloor \\lg (n / 2) \\rfloor) \\\\\n    & =   \\sum_{i = \\lceil n / 2 \\rceil}^n \\Theta(\\lfloor \\lg n - 1 \\rfloor) \\\\\n    & \\ge n / 2 \\cdot \\Theta(\\lg n) \\\\\n    & =   \\Omega(n\\lg n).\n\\end{align}\n\n\nIn the worst case, therefore, $\\text{BUILD-MAX-HEAP}'$ requires $\\Theta(n\\lg n)$ time to build an $n$-element heap.",
            "title": "6-1 Building a heap using insertion"
        },
        {
            "location": "/Chap06/Problems/6-2/",
            "text": "A \n$d$-ary heap\n is like a binary heap, but (with one possible exception) non-leaf nodes have $d$ children instead of $2$ children.\n\n\na.\n How would you represent a $d$-ary heap in an array?\n\n\nb.\n What is the height of a $d$-ary heap of $n$ elements in terms of $n$ and $d$?\n\n\nc.\n Give an efficient implementation of $\\text{EXTRACT-MAX}$ in a $d$-ary max-heap. Analyze its running time in terms of $d$ and $n$.\n\n\nd.\n Give an efficient implementation of $\\text{INSERT}$ in a $d$-ary max-heap. Analyze its running time in terms of $d$ and $n$.\n\n\ne.\n Give an efficient implementation of $\\text{INCREASE-KEY}(A, i, k)$, which flags an error if $k < A[i]$, but otherwise sets $A[i] = k$ and then updates the $d$-ary max-heap structure appropriately. Analyze its running time in terms of $d$ and $n$.\n\n\n\n\na.\n We can represent a $d$-ary heap in a $1$-dimensional array as follows. The root resides in $A[1\u008d]$, its $d$ children reside in order in $A[2]$\u008d through $A[d + 1]$\u008d, their children reside in order in $A[d + 2]$\u008d through $A[d^2 + d + 1]$\u008d, and so on. The following two procedures map a node with index $i$ to its parent and to its $j$ th child (for $1 \\le j \\le d$), respectively.\n\n\nd\n-\nARY\n-\nPARENT\n(\ni\n)\n\n    \nreturn\n \nfloor\n((\ni\n \n-\n \n2\n)\n \n/\n \nd\n \n+\n \n1\n)\n\n\n\n\n\nd\n-\nARY\n-\nCHILD\n(\ni\n,\n \nj\n)\n\n    \nreturn\n \nd\n(\ni\n \n-\n \n1\n)\n \n+\n \nj\n \n+\n \n1\n\n\n\n\n\nTo convince yourself that these procedures really work, verify that\n\n\n$$\\text{$d$-ARY-PARENT($d$-ARY-CHILD($i, j$)) = $i$},$$\n\n\nfor any $1 \\le j \\le d$. Notice that the binary heap procedures are a special case of the above procedures when $d = 2$.\n\n\nb.\n Since each node has $d$ children, the height of a $d$-ary heap with $n$ nodes is $\\Theta(\\log_d n) = \\Theta(\\lg n / \\lg d)$.\n\n\nc.\n The procedure $\\text{HEAP-EXTRACT-MAX}$ given in the text for binary heaps works fine for $d$-ary heaps too. The change needed to support $d$-ary heaps is in $\\text{MAX-HEAPIFY}$, which must compare the argument node to all d children instead of just $2$ children. The running time of $\\text{HEAP-EXTRACT-MAX}$ is still the running time for $\\text{MAX-HEAPIFY}$, but that now takes worst-case time proportional to the product of the height of the heap by the number of children examined at each node (at most $d$), namely $\\Theta(d \\log_d n) = \\Theta(d\\lg n / \\lg d)$.\n\n\nd.\n The procedure $\\text{MAX-HEAP-INSERT}$ given in the text for binary heaps works fine for $d$-ary heaps too, assuming that $\\text{HEAP-INCREASE-KEY}$ works for $d$-ary heaps. The worst-case running time is still $\\Theta(h)$, where $h$ is the height of the heap. (Since only parent pointers are followed, the number of children a node has is irrelevant.) For a $d$-ary heap, this is $\\Theta(\\log_d n) = \\Theta(\\lg n / \\lg d)$.\n\n\ne.\n The $\\text{HEAP-INCREASE-KEY}$ procedure with two small changes works for $d$-ary heaps. First, because the problem specifies that the new key is given by the parameter $k$, change instances of the variable $key$ to $k$. Second, change calls of $\\text{PARENT}$ to calls of $d\\text{-ARY-PARENT}$ from part (a).\n\n\nIn the worst case, the entire height of the tree must be traversed, so the worst-case running time is $\\Theta(h) = \\Theta(\\log_d n) = \\Theta(\\lg n / \\lg d)$.",
            "title": "6-2 Analysis of dd-ary heaps"
        },
        {
            "location": "/Chap06/Problems/6-3/",
            "text": "An $m \\times n$ Young tableau is an $m \\times n$ matrix such that the entries of each row are in sorted order from left to right and the entries of each column are in sorted order from top to bottom. Some of the entries of a Young tableau may be $\\infty$, which we treat as nonexistent elements. Thus, a Young tableau can be used to hold $r \\le mn$ finite numbers.\n\n\na.\n Draw $4 \\times 4$ tableau containing the elements ${9, 16, 3, 2, 4, 8, 5, 14, 12}$.\n\n\nb.\n Argue that an $m \\times n$ Young tableau $Y$ is empty if $Y[1, 1] = \\infty$. Argue that $Y$ is full (contains $mn$ elements) if $Y[m, n] < \\infty$.\n\n\nc.\n Give an algorithm to implement $\\text{EXTRACT-MIN}$ on a nonempty $m \\times n$ Young tableau that runs in $O(m + n)$ time. Your algorithm should use a recursive subroutine that solves an $m \\times n$ problem by recursively solving either an $(m - 1) \\times n$ or an $m \\times (n - 1)$ subproblem. ($\\textit{Hint:}$ Think about $\\text{MAX-HEAPIFY}$.) Define $T(p)$ where $p = m + n$, to be the maximum running time of $\\text{EXTRACT-MIN}$ on any $m \\times n$ Young tableau. Give and solve a recurrence relation for $T(p)$ that yields the $O(m + n)$ time bound.\n\n\nd.\n Show how to insert a new element into a nonfull $m \\times n$ Young tableau in $O(m + n)$ time.\n\n\ne.\n Using no other sorting method as a subroutine, show how to use an $n \\times n$ Young tableau to sort $n^2$ numbers in $O(n^3)$ time.\n\n\nf.\n Give an $O(m + n)$-time algorithm to determine whether a given number is stored in a given $m \\times n$ Young tableau.\n\n\n\n\na.\n \n\n\n\\begin{matrix}\n     2 &      3 &     12 & 14 \\\\\n     4 &      8 &     16 & \\infty \\\\\n     5 &      9 & \\infty & \\infty \\\\\n\\infty & \\infty & \\infty & \\infty\n\\end{matrix}\n\n\nb.\n If the top left element is $\\infty$, then all the elements on the first row need to be $\\infty$. But if this is the case, all other elements need to be $\\infty$ because they are larger than the first element on their column.\n\n\nIf the bottom right element is smaller than $\\infty$, all the elements on the bottom row need to be smaller than $\\infty$. But so are the other elements in the tableau, because each is smaller than the bottom element of its column.\n\n\nc.\n The $A[1, 1]$ is the smallest elemnt. We store it, so we can return it later and then replace is with $\\infty$. This breaks the Young tableau property and we need to perform a procedure, similar to $\\text{MAX-HEAPIFY}$ to restore it.\n\n\nWe compare $A[i, j]$ with each of its neighbours and exchange it with the smallest. This restores the property for $A[i, j]$ but reduces the problem to either $A[i, j + 1]$ or $A[i + 1, j]$. We terminate when $A[i, j]$ is smaller than its neighbours.\n\n\nThe relation in question is\n\n\n$$T(p) = T(p - 1) + O(1) = T(p - 2) + O(1) + O(1) = \\cdots = O(p).$$\n\n\nd.\n The algorithm is very similar to the previous, except that we start with the bottom right element of the tableau and move it upwards and leftwards to the correct position. The asymptotic analysis is the same.\n\n\ne.\n We can sort by starting with an empty tableau and inserting all the $n^2$ elements in it. Each insertion is $O(n + n) = O(n)$. The complexity is $n^2O(n) = O(n^3)$. Afterwards we can take them one by one and put them back in the original array which has the same complexity. In total, its $O(n^3)$.\n\n\nWe can also do it in place if we allow for \"partial\" tableaus where only a portion of the top rows (and a portion of the last of them) is in the tableau. Then we can build the tableau in place and then start putting each minimal element to the end. This would be asymptotically equal, but use constant memory. It would also sort the array in reverse.\n\n\nf.\n We from the lower-left corner. We check the current element $current$ with the one we're looking for $key$ and move up if $current > key$ and right if $current < key$. We declare success if $current = key$ and otherwise terminate if we walk off the tableau.",
            "title": "6-3 Young tableaus"
        },
        {
            "location": "/Chap07/7.1/",
            "text": "7.1-1\n\n\n\n\nUsing figure 7.1 as a model, illustrate the operation of $\\text{PARTITION}$ on the array $A = \\langle 13, 19, 9, 5, 12, 8, 7, 4, 21, 2, 6, 11 \\rangle$.\n\n\n\n\n\\begin{align}\n\\langle 13, 19, 9, 5, 12, 8, 7, 4, 21, 2, 6, 11 \\rangle \\\\\n\\langle 13, 19, 9, 5, 12, 8, 7, 4, 21, 2, 6, 11 \\rangle \\\\\n\\langle 13, 19, 9, 5, 12, 8, 7, 4, 21, 2, 6, 11 \\rangle \\\\\n\\langle 9, 19, 13, 5, 12, 8, 7, 4, 21, 2, 6, 11 \\rangle \\\\\n\\langle 9, 5, 13, 19, 12, 8, 7, 4, 21, 2, 6, 11 \\rangle \\\\\n\\langle 9, 5, 13, 19, 12, 8, 7, 4, 21, 2, 6, 11 \\rangle \\\\\n\\langle 9, 5, 8, 19, 12, 13, 7, 4, 21, 2, 6, 11 \\rangle \\\\\n\\langle 9, 5, 8, 7, 12, 13, 19, 4, 21, 2, 6, 11 \\rangle \\\\\n\\langle 9, 5, 8, 7, 4, 13, 19, 12, 21, 2, 6, 11 \\rangle \\\\\n\\langle 9, 5, 8, 7, 4, 13, 19, 12, 21, 2, 6, 11 \\rangle \\\\\n\\langle 9, 5, 8, 7, 4, 2, 19, 12, 21, 13, 6, 11 \\rangle \\\\\n\\langle 9, 5, 8, 7, 4, 2, 6, 12, 21, 13, 19, 11 \\rangle \\\\\n\\langle 9, 5, 8, 7, 4, 2, 6, 11, 21, 13, 19, 12 \\rangle\n\\end{align}\n\n\n7.1-2\n\n\n\n\nWhat value of $q$ does $\\text{PARTITION}$ return when all elements in the array $A[p..r]$ have the same value? Modify $\\text{PARTITION}$ so that $q = \\lfloor (p + r) / 2 \\rfloor$ when all elements in the array $A[p..r]$ have the same value.\n\n\n\n\nIt returns $r$.\n\n\nWe can modify $\\text{PARTITION}$ by counting the number of comparisons in which $A[j] = A[r]$ and then subtracting half that number from the pivot index.\n\n\n7.1-3\n\n\n\n\nGive a brief argument that the running time of $\\text{PARTITION}$ on a subarray of size $n$ is $\\Theta(n)$.\n\n\n\n\nThere is a for statement whose body executes $r - 1 - p = \\Theta(n)$ times. In the worst case every time the body of the if is executed, but it takes constant time and so does the code outside of the loop. Thus the running time is $\\Theta(n)$.\n\n\n7.1-4\n\n\n\n\nHow would you modify $\\text{QUICKSORT}$ to sort into nonincreasing order?\n\n\n\n\nWe only need to flip the condition on line 4.",
            "title": "7.1 Description of quicksort"
        },
        {
            "location": "/Chap07/7.1/#71-1",
            "text": "Using figure 7.1 as a model, illustrate the operation of $\\text{PARTITION}$ on the array $A = \\langle 13, 19, 9, 5, 12, 8, 7, 4, 21, 2, 6, 11 \\rangle$.   \\begin{align}\n\\langle 13, 19, 9, 5, 12, 8, 7, 4, 21, 2, 6, 11 \\rangle \\\\\n\\langle 13, 19, 9, 5, 12, 8, 7, 4, 21, 2, 6, 11 \\rangle \\\\\n\\langle 13, 19, 9, 5, 12, 8, 7, 4, 21, 2, 6, 11 \\rangle \\\\\n\\langle 9, 19, 13, 5, 12, 8, 7, 4, 21, 2, 6, 11 \\rangle \\\\\n\\langle 9, 5, 13, 19, 12, 8, 7, 4, 21, 2, 6, 11 \\rangle \\\\\n\\langle 9, 5, 13, 19, 12, 8, 7, 4, 21, 2, 6, 11 \\rangle \\\\\n\\langle 9, 5, 8, 19, 12, 13, 7, 4, 21, 2, 6, 11 \\rangle \\\\\n\\langle 9, 5, 8, 7, 12, 13, 19, 4, 21, 2, 6, 11 \\rangle \\\\\n\\langle 9, 5, 8, 7, 4, 13, 19, 12, 21, 2, 6, 11 \\rangle \\\\\n\\langle 9, 5, 8, 7, 4, 13, 19, 12, 21, 2, 6, 11 \\rangle \\\\\n\\langle 9, 5, 8, 7, 4, 2, 19, 12, 21, 13, 6, 11 \\rangle \\\\\n\\langle 9, 5, 8, 7, 4, 2, 6, 12, 21, 13, 19, 11 \\rangle \\\\\n\\langle 9, 5, 8, 7, 4, 2, 6, 11, 21, 13, 19, 12 \\rangle\n\\end{align}",
            "title": "7.1-1"
        },
        {
            "location": "/Chap07/7.1/#71-2",
            "text": "What value of $q$ does $\\text{PARTITION}$ return when all elements in the array $A[p..r]$ have the same value? Modify $\\text{PARTITION}$ so that $q = \\lfloor (p + r) / 2 \\rfloor$ when all elements in the array $A[p..r]$ have the same value.   It returns $r$.  We can modify $\\text{PARTITION}$ by counting the number of comparisons in which $A[j] = A[r]$ and then subtracting half that number from the pivot index.",
            "title": "7.1-2"
        },
        {
            "location": "/Chap07/7.1/#71-3",
            "text": "Give a brief argument that the running time of $\\text{PARTITION}$ on a subarray of size $n$ is $\\Theta(n)$.   There is a for statement whose body executes $r - 1 - p = \\Theta(n)$ times. In the worst case every time the body of the if is executed, but it takes constant time and so does the code outside of the loop. Thus the running time is $\\Theta(n)$.",
            "title": "7.1-3"
        },
        {
            "location": "/Chap07/7.1/#71-4",
            "text": "How would you modify $\\text{QUICKSORT}$ to sort into nonincreasing order?   We only need to flip the condition on line 4.",
            "title": "7.1-4"
        },
        {
            "location": "/Chap07/7.2/",
            "text": "7.2-1\n\n\n\n\nUse the substitution method to prove that the recurrence $T(n) = T(n - 1) + \\Theta(n)$ has the solution $T(n) = \\Theta(n^2)$, as claimed at the beginning of section 7.2.\n\n\n\n\nWe represent $\\Theta(n)$ as $c_2n$ and we guess that $T(n) \\le c_1n^2$,\n\n\n\\begin{align}\nT(n) & =   T(n - 1) + c_2n \\\\\n     & \\le c_1(n - 1)^2 + c_2n \\\\\n     & =   c_1n^2 - 2c_1n + c_1 + c_2n & (2c_1 > c_2, n \\ge c_1 / (2c_1 - c_2)) \\\\\n     & \\le c_1n^2. \n\\end{align}\n\n\n7.2-2\n\n\n\n\nWhat is the running time of $\\text{QUICKSORT}$ when all elements of the array $A$ have the same value?\n\n\n\n\nIt is $\\Theta(n^2)$, since one of the partitions is always empty (see exercise 7.1-2.)\n\n\n7.2-3\n\n\n\n\nShow that the running time of $\\text{QUICKSORT}$ is $\\Theta(n^2)$ when the array $A$ contains distict elements and is sorted in decreasing order.\n\n\n\n\n$\\text{PARTITION}$ does a \"worst-case partitioning\" when the elements are in decreasing order. It reduces the size of the subarray under consideration by only $1$ at each step, which we've seen has running time $\\Theta(n^2)$.\n\n\nIn particular, $\\text{PARTITION}$, given a subarray $A[p..r]$\u008d of distinct elements in decreasing order, produces an empty partition in $A[p..q - 1]$\u008d, puts the pivot (originally in $A[r]$\u008d) into $A[p]$\u008d, and produces a partition $A[p + 1..r]$\u008d with only one fewer element than $A[p..r]$\u008d. The recurrence for $\\text{QUICKSORT}$ becomes $T(n) = T(n - 1) + \\Theta(n)$, which has the solution $T(n) = \\Theta(n^2)$.\n\n\n7.2-4\n\n\n\n\nBanks often record transactions on an account in order of the times of the transactions, but many people like to receive their bank statements with checks listed in order by check numbers. People usually write checks in order by check number, and merchants usually cash the with reasonable dispatch. The problem of converting time-of-transaction ordering to check-number ordering is therefore the problem of sorting almost-sorted input. Argue that the procedure $\\text{INSERTION-SORT}$ would tend to beat the procedure $\\text{QUICKSORT}$ on this problem.\n\n\n\n\nThe more sorted the array is, the less work insertion sort will do. Namely, $\\text{INSERTION-SORT}$ is $\\Theta(n + d)$, where $d$ is the number of inversions in the array. In the example above the number of inversions tends to be small so insertion sort will be close to linear.\n\n\nOn the other hand, if $\\text{PARTITION}$ does picks a pivot that does not participate in an inversion, it will produce and empty partition. Since there is a small number of inversions, $\\text{QUICKSORT}$ is very likely to produce empty partitions.\n\n\n7.2-5\n\n\n\n\nSuppose that the splits at every level of quicksort are in proportion $1 - \\alpha$ to $\\alpha$, where $0 < \\alpha \\le 1 / 2$ is a constant. Show that the minumum depth of a leaf in the recursion tree is approximately $-\\lg n / \\lg\\alpha$ and the maximum depth is approximately $-\\lg n / \\lg(1 - \\alpha)$. (Don't worry about integer round-off.)\n\n\n\n\nThe minimum depth follows a path that always takes the smaller part of the partition\u2014i.e., that multiplies the number of elements by $\\alpha$. One iteration reduces the number of elements from $n$ to $\\alpha n$, and $i$ iterations reduces the number of elements to $\\alpha^i n$. At a leaf, there is just one remaining element, and so at a minimum-depth leaf of depth $m$, we have $\\alpha^m n = 1$. Thus, $\\alpha^m = 1 / n$. Taking logs, we get $m\\lg\\alpha = -\\lg n$, or $m = -\\lg n / \\lg\\alpha$.\n\n\nSimilarly, maximum depth corresponds to always taking the larger part of the partition, i.e., keeping a fraction $1 - \\alpha$ of the elements each time. The maximum depth $M$ is reached when there is one element left, that is, when $(1 - \\alpha)^M n = 1$. Thus, $M = -\\lg n / \\lg (1 - \\alpha)$.\n\n\nAll these equations are approximate because we are ignoring floors and ceilings.\n\n\n7.2-6 $\\star$\n\n\n\n\nArgue that for any constant $0 < \\alpha \\le 1 / 2$, the probability is approximately $1 - 2\\alpha$ that on a random input array, $\\text{PARTITION}$ produces a split more balanced than $1 - \\alpha$ to $\\alpha$.\n\n\n\n\nIn order to produce a worse split than $\\alpha$ to $1 - \\alpha$, $\\text{PARTITION}$ must pick a pivot that will be either within the smallest $\\alpha n$ elements or the largest $\\alpha n$ elements. The probability of either is (approximately) $\\alpha n / n = \\alpha$ and the probability of both is $2\\alpha$. Thus, the probability of having a better partition is the complement, $1 - 2\\alpha$.",
            "title": "7.2 Performance of quicksort"
        },
        {
            "location": "/Chap07/7.2/#72-1",
            "text": "Use the substitution method to prove that the recurrence $T(n) = T(n - 1) + \\Theta(n)$ has the solution $T(n) = \\Theta(n^2)$, as claimed at the beginning of section 7.2.   We represent $\\Theta(n)$ as $c_2n$ and we guess that $T(n) \\le c_1n^2$,  \\begin{align}\nT(n) & =   T(n - 1) + c_2n \\\\\n     & \\le c_1(n - 1)^2 + c_2n \\\\\n     & =   c_1n^2 - 2c_1n + c_1 + c_2n & (2c_1 > c_2, n \\ge c_1 / (2c_1 - c_2)) \\\\\n     & \\le c_1n^2. \n\\end{align}",
            "title": "7.2-1"
        },
        {
            "location": "/Chap07/7.2/#72-2",
            "text": "What is the running time of $\\text{QUICKSORT}$ when all elements of the array $A$ have the same value?   It is $\\Theta(n^2)$, since one of the partitions is always empty (see exercise 7.1-2.)",
            "title": "7.2-2"
        },
        {
            "location": "/Chap07/7.2/#72-3",
            "text": "Show that the running time of $\\text{QUICKSORT}$ is $\\Theta(n^2)$ when the array $A$ contains distict elements and is sorted in decreasing order.   $\\text{PARTITION}$ does a \"worst-case partitioning\" when the elements are in decreasing order. It reduces the size of the subarray under consideration by only $1$ at each step, which we've seen has running time $\\Theta(n^2)$.  In particular, $\\text{PARTITION}$, given a subarray $A[p..r]$\u008d of distinct elements in decreasing order, produces an empty partition in $A[p..q - 1]$\u008d, puts the pivot (originally in $A[r]$\u008d) into $A[p]$\u008d, and produces a partition $A[p + 1..r]$\u008d with only one fewer element than $A[p..r]$\u008d. The recurrence for $\\text{QUICKSORT}$ becomes $T(n) = T(n - 1) + \\Theta(n)$, which has the solution $T(n) = \\Theta(n^2)$.",
            "title": "7.2-3"
        },
        {
            "location": "/Chap07/7.2/#72-4",
            "text": "Banks often record transactions on an account in order of the times of the transactions, but many people like to receive their bank statements with checks listed in order by check numbers. People usually write checks in order by check number, and merchants usually cash the with reasonable dispatch. The problem of converting time-of-transaction ordering to check-number ordering is therefore the problem of sorting almost-sorted input. Argue that the procedure $\\text{INSERTION-SORT}$ would tend to beat the procedure $\\text{QUICKSORT}$ on this problem.   The more sorted the array is, the less work insertion sort will do. Namely, $\\text{INSERTION-SORT}$ is $\\Theta(n + d)$, where $d$ is the number of inversions in the array. In the example above the number of inversions tends to be small so insertion sort will be close to linear.  On the other hand, if $\\text{PARTITION}$ does picks a pivot that does not participate in an inversion, it will produce and empty partition. Since there is a small number of inversions, $\\text{QUICKSORT}$ is very likely to produce empty partitions.",
            "title": "7.2-4"
        },
        {
            "location": "/Chap07/7.2/#72-5",
            "text": "Suppose that the splits at every level of quicksort are in proportion $1 - \\alpha$ to $\\alpha$, where $0 < \\alpha \\le 1 / 2$ is a constant. Show that the minumum depth of a leaf in the recursion tree is approximately $-\\lg n / \\lg\\alpha$ and the maximum depth is approximately $-\\lg n / \\lg(1 - \\alpha)$. (Don't worry about integer round-off.)   The minimum depth follows a path that always takes the smaller part of the partition\u2014i.e., that multiplies the number of elements by $\\alpha$. One iteration reduces the number of elements from $n$ to $\\alpha n$, and $i$ iterations reduces the number of elements to $\\alpha^i n$. At a leaf, there is just one remaining element, and so at a minimum-depth leaf of depth $m$, we have $\\alpha^m n = 1$. Thus, $\\alpha^m = 1 / n$. Taking logs, we get $m\\lg\\alpha = -\\lg n$, or $m = -\\lg n / \\lg\\alpha$.  Similarly, maximum depth corresponds to always taking the larger part of the partition, i.e., keeping a fraction $1 - \\alpha$ of the elements each time. The maximum depth $M$ is reached when there is one element left, that is, when $(1 - \\alpha)^M n = 1$. Thus, $M = -\\lg n / \\lg (1 - \\alpha)$.  All these equations are approximate because we are ignoring floors and ceilings.",
            "title": "7.2-5"
        },
        {
            "location": "/Chap07/7.2/#72-6-star",
            "text": "Argue that for any constant $0 < \\alpha \\le 1 / 2$, the probability is approximately $1 - 2\\alpha$ that on a random input array, $\\text{PARTITION}$ produces a split more balanced than $1 - \\alpha$ to $\\alpha$.   In order to produce a worse split than $\\alpha$ to $1 - \\alpha$, $\\text{PARTITION}$ must pick a pivot that will be either within the smallest $\\alpha n$ elements or the largest $\\alpha n$ elements. The probability of either is (approximately) $\\alpha n / n = \\alpha$ and the probability of both is $2\\alpha$. Thus, the probability of having a better partition is the complement, $1 - 2\\alpha$.",
            "title": "7.2-6 $\\star$"
        },
        {
            "location": "/Chap07/7.3/",
            "text": "7.3-1\n\n\n\n\nWhy do we analyze the expected running time of a randomized algorithm and not its worst-case running time?\n\n\n\n\nWe may be interested in the worst-case performance, but in that case, the randomization is irrelevant: it won't improve the worst case. What randomization can do is make the chance of encountering a worst-case scenario small.\n\n\n7.3-2\n\n\n\n\nWhen $\\text{RANDOMIZED-QUICKSORT}$ runs, how many calls are made to the random number generator $\\text{RANDOM}$ in the worst case? How about in the best case? Give your answer in terms of $\\Theta$-notation.\n\n\n\n\nIn the worst case, the number of calls to $\\text{RANDOM}$ is\n\n\n$$T(n) = T(n - 1) + 1 = n = \\Theta(n).$$\n\n\nAs for the best case,\n\n\n$$T(n) = 2T(n / 2) + 1 = \\Theta(n).$$\n\n\nThis is not too surprising, because each third element (at least) gets picked as pivot.",
            "title": "7.3 A randomized version of quicksort"
        },
        {
            "location": "/Chap07/7.3/#73-1",
            "text": "Why do we analyze the expected running time of a randomized algorithm and not its worst-case running time?   We may be interested in the worst-case performance, but in that case, the randomization is irrelevant: it won't improve the worst case. What randomization can do is make the chance of encountering a worst-case scenario small.",
            "title": "7.3-1"
        },
        {
            "location": "/Chap07/7.3/#73-2",
            "text": "When $\\text{RANDOMIZED-QUICKSORT}$ runs, how many calls are made to the random number generator $\\text{RANDOM}$ in the worst case? How about in the best case? Give your answer in terms of $\\Theta$-notation.   In the worst case, the number of calls to $\\text{RANDOM}$ is  $$T(n) = T(n - 1) + 1 = n = \\Theta(n).$$  As for the best case,  $$T(n) = 2T(n / 2) + 1 = \\Theta(n).$$  This is not too surprising, because each third element (at least) gets picked as pivot.",
            "title": "7.3-2"
        },
        {
            "location": "/Chap07/7.4/",
            "text": "7.4-1\n\n\n\n\nShow that in the recurrence\n\n\n$$T(n) = \\max\\limits_{0 \\le q \\le n - 1} (T(q) + T(n - q - 1)) + \\Theta(n), T(n) = \\Omega(n^2).$$\n\n\n\n\nWe guess $T(n) \\ge cn^2 - 2n$,\n\n\n\\begin{align}\nT(n) & =   \\max_{0 \\le q \\le n - 1} (T(q) + T(n - q - 1)) + \\Theta(n) \\\\\n     & \\ge \\max_{0 \\le q \\le n - 1} (cq^2 - 2q + c(n - q - 1)^2 - 2n - 2q -1) + \\Theta(n) \\\\\n     & \\ge c\\max_{0 \\le q \\le n - 1} (q^2 + (n - q - 1)^2 - (2n + 4q + 1) / c) + \\Theta(n) \\\\\n     & \\ge cn^2 - c(2n - 1) + \\Theta(n) \\\\\n     & \\ge cn^2 - 2cn + 2c & (c \\le 1) \\\\\n     & \\ge cn^2 - 2n.\n\\end{align}\n\n\n7.4-2\n\n\n\n\nShow that quicksort's best-case running time is $\\Omega(n\\lg n)$.\n\n\n\n\nTo show that quicksort's best-case running time is \u007f$\\Omega(n\\lg n)$, we use a technique similar to the one used in Section 7.4.1 to show that its worst-case running time is $O(n^2)$.\n\n\nLet $T(n)$ be the best-case time for the procedure $\\text{QUICKSORT}$ on an input of size $n$. We have the recurrence\n\n\n$$T(n) = \\min\\limits_{1 \\le q \\le n - 1} (T(q) + T(n - q - 1)) + \\Theta(n).$$\n\n\nWe guess that $T(n) \\ge cn\\lg n$ for some constant $c$. Substituting this guess into the recurrence, we obtain\n\n\n\\begin{align}\nT(n) & \\ge \\min_{1 \\le q \\le n - 1} (cq\\lg q + c(n - q - 1)\\lg(n - q - 1)) + \\Theta(n) \\\\\n     & =   c \\cdot \\min_{1 \\le q \\le n - 1} (q\\lg q + (n - q - 1)\\lg(n - q - 1)) + \\Theta(n).\n\\end{align}\n\n\nAs we'll show below, the expression $q\\lg q + (n - q - 1)\\lg(n - q - 1)$ achieves a minimum over the range $1 \\le q \\le n - 1$ when $q = n - q - 1$, or $q = (n - 1) / 2$, since the first derivative of the expression with respect to $q$ is $0$ when $q = (n - 1) / 2$ and the second derivative of the expression is positive. (It doesn't matter that $q$ is not an integer when $n$ is even, since we're just trying to determine the minimum value of a function, knowing that when we constrain $q$ to integer values, the function's value will be no lower.)\n\n\nChoosing $q = (n - 1) / 2$ gives us the bound\n\n\n\\begin{align}\n\\min_{1 \\le q \\le n - 1} (q\\lg q + (n - q - 1)\\lg(n - q - 1)) \n    & \\ge \\frac{n - 1}{2}\\lg\\frac{n - 1}{2} + \\Big(n - \\frac{n - 1}{2} - 1\\Big)\\lg\\Big(n - \\frac{n - 1}{2} - 1\\Big) \\\\\n    & =   (n - 1)\\lg\\frac{n - 1}{2}.\n\\end{align}\n\n\nContinuing with our bounding of $T(n)$, we obtain, for $n \\ge 2$,\n\n\n\\begin{align}\nT(n) & =   c(n - 1)\\lg\\frac{n - 1}{2} + \\Theta(n) \\\\\n     & =   c(n - 1)\\lg(n - 1) - c(n - 1) + \\Theta(n) \\\\\n     & =   cn\\lg(n - 1) - c\\lg(n - 1) - c(n - 1) + \\Theta(n) \\\\\n     & \\ge cn\\lg(n / 2) - c\\lg(n - 1) - c(n - 1) + \\Theta(n) & \\text{(since $n \\ge 2$)} \\\\\n     & =   cn\\lg n - cn - c\\lg(n - 1) - cn + c + \\Theta(n) \\\\\n     & =   cn\\lg n - (2cn + c\\lg(n - 1) - c) + \\Theta(n) \\\\\n     & \\ge cn\\lg n,\n\\end{align}\n\n\nsince we can pick the constant $c$ small enough so that the $\\Theta(n)$ term dominates the quantity $2cn + c\\lg(n - 1) - c$. Thus, the best-case running time of quicksort is $\\Omega(n\\lg n)$.\n\n\nLetting $f(q) = q\\lg q + (n - q - 1)\\lg(n - q - 1)$, we now show how to find the minimum value of this function in the range $1 \\le q \\le n - 1$. We need to find the value of $q$ for which the derivative of $f$ with respect to $q$ is $0$. We rewrite this function as\n\n\n$$f(q) = \\frac{q\\ln q + (n - q - 1)\\ln(n - q - 1)}{\\ln 2},$$\n\n\nand so\n\n\n\\begin{align}\nf'(q) & = \\frac{d}{dq}\\Big(\\frac{q\\ln q + (n - q - 1)\\ln(n - q - 1)}{\\ln 2}\\Big) \\\\\n      & = \\frac{\\ln q + 1 - \\ln(n - q - 1) - 1}{\\ln 2} \\\\\n      & = \\frac{\\ln q - \\ln(n - q - 1)}{\\ln 2}.\n\\end{align}\n\n\nThe derivative $f'(q)$ is $0$ when $q = n - q - 1$, or when $q = (n - 1) / 2$. To verify that $q = (n - 1) / 2$ is indeed a minimum (not a maximum or an in\ufb02ection point), we need to check that the second derivative of $f$ is positive at $q = (n - 1) / 2$:\n\n\n\\begin{align}\n                      f''(q) & = \\frac{d}{dq}\\Big(\\frac{\\ln q - \\ln(n - q - 1)}{\\ln 2}\\Big) \\\\\n                             & = \\frac{1}{\\ln 2}\\Big(\\frac{1}{q} + \\frac{1}{n - q - 1}\\Big) \\\\\nf''\\Big(\\frac{n - 1}{2}\\Big) & = \\frac{1}{\\ln 2}\\Big(\\frac{2}{n - 1} + \\frac{2}{n - 1}\\Big) \\\\\n                             & = \\frac{1}{\\ln 2} \\cdot \\frac{4}{n - 1} \\\\\n                             & > 0. & \\text{(since $n \\ge 2$)}\n\\end{align}\n\n\n7.4-3\n\n\n\n\nShow that the expression $q^2 + (n - q - 1)^2$ achieves a maximum over $q = 0, 1, \\ldots, n - 1$ when $q = 0$ and $q = n - 1$.\n\n\n\n\n\\begin{align}\n  f(q) & = q^2 + (n - q - 1)^2 \\\\\n f'(q) & = 2q - 2(n - q - 1) = 4q - 2n + 2 \\\\\nf''(q) & = 4. \\\\\n\\end{align}\n\n\n$f'(q) = 0$ when $q = \\frac{1}{2}n - \\frac{1}{4}$. $f'(q)$ is also continious. $\\forall q: f''(q) > 0$, which means that $f'(q)$ is negative left of $f'(q) = 0$ and positive right of it, which means that this is a local minima. In this case, $f(q)$ is decreasing in the beginning of the interval and increasing in the end, which means that those two points are the only candidates for a maximum in the interval.\n\n\n\\begin{align}\n    f(0) & = (n - 1)^2 \\\\\nf(n - 1) & = (n - 1)^2 + 0^2.\n\\end{align}\n\n\n7.4-4\n\n\n\n\nShow that $\\text{RANDOMIZED-QUICKSORT}$'s expected running time is $\\Omega(n\\lg n)$.\n\n\n\n\nWe use the same reasoning for the expected number of comparisons, we just take in in a different direction.\n\n\n\\begin{align}\n\\text E[X]\n    & =   \\sum_{i = 1}^{n - 1} \\sum_{j = i + 1}^n \\frac{2}{j - i + 1} \\\\\n    & =   \\sum_{i = 1}^{n - 1} \\sum_{k = 1}^{n - i} \\frac{2}{k + 1} & (k \\ge 1) \\\\\n    & \\ge \\sum_{i = 1}^{n - 1} \\sum_{k = 1}^{n - i} \\frac{2}{2k} \\\\\n    & \\ge \\sum_{i = 1}^{n - 1} \\Omega(\\lg n) \\\\\n    & =   \\Omega(n\\lg n).\n\\end{align}\n\n\nUsing the master method, we get the solution $\\Theta(n\\lg n)$.\n\n\n7.4-5\n\n\n\n\nWe can improve the running time of quicksort in practice by taking advantage of the fast running time of insertion sort when its input is \"nearly\" sorted. Upon calling quicksort on a subarray with fewer than $k$ elements, let it simply return without sorting the subarray. After the top-level call to quicksort returns, run insertion sort on the entire array to finish the sorting process. Argue that this sorting algorithm runs in $O(nk + n\\lg(n / k))$ expected time. How should we pick $k$, both in theory and practice?\n\n\n\n\nIn the quicksort part of the proposed algorithm, the recursion stops at level $\\lg(n / k)$, which makes the expected running time $O(n\\lg(n / k))$. However, this leaves $n / k$ non-sorted, non - intersecting subarrays of (maximum) length $k$.\n\n\nBecause of the nature of the insertion sort algorithm, it will first sort fully one such subarray before consider the next one. Thus, it has the same complexity as sorting each of those arrays, that is $\\frac{n}{k}O(k^2) = O(nk)$.\nIn theory, if we ignore the constant factors, we need to solve\n\n\n\\begin{align}\n            & n\\lg n \\ge nk + n\\lg{n / k} \\\\\n\\Rightarrow & \\lg n \\ge k + \\lg n - \\lg k \\\\\n\\Rightarrow & \\lg k \\ge k.\n\\end{align}\n\n\nWhich is not possible.\n\n\nIf we add the constant factors, we get\n\n\n\\begin{align}\n            & c_qn\\lg n \\ge c_ink + c_qn\\lg(n / k) \\\\\n\\Rightarrow & c_q\\lg n \\ge c_ik + c_q\\lg n - c_q\\lg k \\\\\n\\Rightarrow & \\lg k \\ge \\frac{c_i}{c_q}k.\n\\end{align}\n\n\nWhich indicates that there might be a good candidate. Furthermore, the lower-order terms should be taken into consideration too.\n\n\nIn practice, $k$ should be chosed by experiment.\n\n\n7.4-6 $\\star$\n\n\n\n\nConsider modifying the $\\text{PARTITION}$ procedure by randomly picking three elements from array $A$ and partitioning about their median (the middle value of the three elements). Approximate the probability of getting at worst an $\\alpha$-to-$(1 - \\alpha)$ split, as a function of $\\alpha$ in the range $0 < \\alpha < 1$.\n\n\n\n\nFirst, for simplicity's sake, let's assume that we can pick the same element twice. Let's also assume that $0 < \\alpha \\le 1 / 2$.\n\n\nIn order to get such a split, two out of three elements need need to be in the smallest $\\alpha n$ elements. The probability of having one is $\\alpha n / n = \\alpha$. The probability of having exactly two is $\\alpha^2 - \\alpha^3$. There are three ways in which two elements can be in the smallest $\\alpha n$ and one way in which all three can be in the smallest $\\alpha n$ so the probability of getting such a median is $3\\alpha^2 - 2\\alpha^3$. We will get the same split if the median is in the largest $\\alpha n$. Since the two events are mutually exclusive, the probability is\n\n\n$$\\Pr\\{\\text{OK split}\\} = 6\\alpha^2 - 4\\alpha^3 = 2\\alpha^2(3 - 2\\alpha).$$",
            "title": "7.4 Analysis of quicksort"
        },
        {
            "location": "/Chap07/7.4/#74-1",
            "text": "Show that in the recurrence  $$T(n) = \\max\\limits_{0 \\le q \\le n - 1} (T(q) + T(n - q - 1)) + \\Theta(n), T(n) = \\Omega(n^2).$$   We guess $T(n) \\ge cn^2 - 2n$,  \\begin{align}\nT(n) & =   \\max_{0 \\le q \\le n - 1} (T(q) + T(n - q - 1)) + \\Theta(n) \\\\\n     & \\ge \\max_{0 \\le q \\le n - 1} (cq^2 - 2q + c(n - q - 1)^2 - 2n - 2q -1) + \\Theta(n) \\\\\n     & \\ge c\\max_{0 \\le q \\le n - 1} (q^2 + (n - q - 1)^2 - (2n + 4q + 1) / c) + \\Theta(n) \\\\\n     & \\ge cn^2 - c(2n - 1) + \\Theta(n) \\\\\n     & \\ge cn^2 - 2cn + 2c & (c \\le 1) \\\\\n     & \\ge cn^2 - 2n.\n\\end{align}",
            "title": "7.4-1"
        },
        {
            "location": "/Chap07/7.4/#74-2",
            "text": "Show that quicksort's best-case running time is $\\Omega(n\\lg n)$.   To show that quicksort's best-case running time is \u007f$\\Omega(n\\lg n)$, we use a technique similar to the one used in Section 7.4.1 to show that its worst-case running time is $O(n^2)$.  Let $T(n)$ be the best-case time for the procedure $\\text{QUICKSORT}$ on an input of size $n$. We have the recurrence  $$T(n) = \\min\\limits_{1 \\le q \\le n - 1} (T(q) + T(n - q - 1)) + \\Theta(n).$$  We guess that $T(n) \\ge cn\\lg n$ for some constant $c$. Substituting this guess into the recurrence, we obtain  \\begin{align}\nT(n) & \\ge \\min_{1 \\le q \\le n - 1} (cq\\lg q + c(n - q - 1)\\lg(n - q - 1)) + \\Theta(n) \\\\\n     & =   c \\cdot \\min_{1 \\le q \\le n - 1} (q\\lg q + (n - q - 1)\\lg(n - q - 1)) + \\Theta(n).\n\\end{align}  As we'll show below, the expression $q\\lg q + (n - q - 1)\\lg(n - q - 1)$ achieves a minimum over the range $1 \\le q \\le n - 1$ when $q = n - q - 1$, or $q = (n - 1) / 2$, since the first derivative of the expression with respect to $q$ is $0$ when $q = (n - 1) / 2$ and the second derivative of the expression is positive. (It doesn't matter that $q$ is not an integer when $n$ is even, since we're just trying to determine the minimum value of a function, knowing that when we constrain $q$ to integer values, the function's value will be no lower.)  Choosing $q = (n - 1) / 2$ gives us the bound  \\begin{align}\n\\min_{1 \\le q \\le n - 1} (q\\lg q + (n - q - 1)\\lg(n - q - 1)) \n    & \\ge \\frac{n - 1}{2}\\lg\\frac{n - 1}{2} + \\Big(n - \\frac{n - 1}{2} - 1\\Big)\\lg\\Big(n - \\frac{n - 1}{2} - 1\\Big) \\\\\n    & =   (n - 1)\\lg\\frac{n - 1}{2}.\n\\end{align}  Continuing with our bounding of $T(n)$, we obtain, for $n \\ge 2$,  \\begin{align}\nT(n) & =   c(n - 1)\\lg\\frac{n - 1}{2} + \\Theta(n) \\\\\n     & =   c(n - 1)\\lg(n - 1) - c(n - 1) + \\Theta(n) \\\\\n     & =   cn\\lg(n - 1) - c\\lg(n - 1) - c(n - 1) + \\Theta(n) \\\\\n     & \\ge cn\\lg(n / 2) - c\\lg(n - 1) - c(n - 1) + \\Theta(n) & \\text{(since $n \\ge 2$)} \\\\\n     & =   cn\\lg n - cn - c\\lg(n - 1) - cn + c + \\Theta(n) \\\\\n     & =   cn\\lg n - (2cn + c\\lg(n - 1) - c) + \\Theta(n) \\\\\n     & \\ge cn\\lg n,\n\\end{align}  since we can pick the constant $c$ small enough so that the $\\Theta(n)$ term dominates the quantity $2cn + c\\lg(n - 1) - c$. Thus, the best-case running time of quicksort is $\\Omega(n\\lg n)$.  Letting $f(q) = q\\lg q + (n - q - 1)\\lg(n - q - 1)$, we now show how to find the minimum value of this function in the range $1 \\le q \\le n - 1$. We need to find the value of $q$ for which the derivative of $f$ with respect to $q$ is $0$. We rewrite this function as  $$f(q) = \\frac{q\\ln q + (n - q - 1)\\ln(n - q - 1)}{\\ln 2},$$  and so  \\begin{align}\nf'(q) & = \\frac{d}{dq}\\Big(\\frac{q\\ln q + (n - q - 1)\\ln(n - q - 1)}{\\ln 2}\\Big) \\\\\n      & = \\frac{\\ln q + 1 - \\ln(n - q - 1) - 1}{\\ln 2} \\\\\n      & = \\frac{\\ln q - \\ln(n - q - 1)}{\\ln 2}.\n\\end{align}  The derivative $f'(q)$ is $0$ when $q = n - q - 1$, or when $q = (n - 1) / 2$. To verify that $q = (n - 1) / 2$ is indeed a minimum (not a maximum or an in\ufb02ection point), we need to check that the second derivative of $f$ is positive at $q = (n - 1) / 2$:  \\begin{align}\n                      f''(q) & = \\frac{d}{dq}\\Big(\\frac{\\ln q - \\ln(n - q - 1)}{\\ln 2}\\Big) \\\\\n                             & = \\frac{1}{\\ln 2}\\Big(\\frac{1}{q} + \\frac{1}{n - q - 1}\\Big) \\\\\nf''\\Big(\\frac{n - 1}{2}\\Big) & = \\frac{1}{\\ln 2}\\Big(\\frac{2}{n - 1} + \\frac{2}{n - 1}\\Big) \\\\\n                             & = \\frac{1}{\\ln 2} \\cdot \\frac{4}{n - 1} \\\\\n                             & > 0. & \\text{(since $n \\ge 2$)}\n\\end{align}",
            "title": "7.4-2"
        },
        {
            "location": "/Chap07/7.4/#74-3",
            "text": "Show that the expression $q^2 + (n - q - 1)^2$ achieves a maximum over $q = 0, 1, \\ldots, n - 1$ when $q = 0$ and $q = n - 1$.   \\begin{align}\n  f(q) & = q^2 + (n - q - 1)^2 \\\\\n f'(q) & = 2q - 2(n - q - 1) = 4q - 2n + 2 \\\\\nf''(q) & = 4. \\\\\n\\end{align}  $f'(q) = 0$ when $q = \\frac{1}{2}n - \\frac{1}{4}$. $f'(q)$ is also continious. $\\forall q: f''(q) > 0$, which means that $f'(q)$ is negative left of $f'(q) = 0$ and positive right of it, which means that this is a local minima. In this case, $f(q)$ is decreasing in the beginning of the interval and increasing in the end, which means that those two points are the only candidates for a maximum in the interval.  \\begin{align}\n    f(0) & = (n - 1)^2 \\\\\nf(n - 1) & = (n - 1)^2 + 0^2.\n\\end{align}",
            "title": "7.4-3"
        },
        {
            "location": "/Chap07/7.4/#74-4",
            "text": "Show that $\\text{RANDOMIZED-QUICKSORT}$'s expected running time is $\\Omega(n\\lg n)$.   We use the same reasoning for the expected number of comparisons, we just take in in a different direction.  \\begin{align}\n\\text E[X]\n    & =   \\sum_{i = 1}^{n - 1} \\sum_{j = i + 1}^n \\frac{2}{j - i + 1} \\\\\n    & =   \\sum_{i = 1}^{n - 1} \\sum_{k = 1}^{n - i} \\frac{2}{k + 1} & (k \\ge 1) \\\\\n    & \\ge \\sum_{i = 1}^{n - 1} \\sum_{k = 1}^{n - i} \\frac{2}{2k} \\\\\n    & \\ge \\sum_{i = 1}^{n - 1} \\Omega(\\lg n) \\\\\n    & =   \\Omega(n\\lg n).\n\\end{align}  Using the master method, we get the solution $\\Theta(n\\lg n)$.",
            "title": "7.4-4"
        },
        {
            "location": "/Chap07/7.4/#74-5",
            "text": "We can improve the running time of quicksort in practice by taking advantage of the fast running time of insertion sort when its input is \"nearly\" sorted. Upon calling quicksort on a subarray with fewer than $k$ elements, let it simply return without sorting the subarray. After the top-level call to quicksort returns, run insertion sort on the entire array to finish the sorting process. Argue that this sorting algorithm runs in $O(nk + n\\lg(n / k))$ expected time. How should we pick $k$, both in theory and practice?   In the quicksort part of the proposed algorithm, the recursion stops at level $\\lg(n / k)$, which makes the expected running time $O(n\\lg(n / k))$. However, this leaves $n / k$ non-sorted, non - intersecting subarrays of (maximum) length $k$.  Because of the nature of the insertion sort algorithm, it will first sort fully one such subarray before consider the next one. Thus, it has the same complexity as sorting each of those arrays, that is $\\frac{n}{k}O(k^2) = O(nk)$.\nIn theory, if we ignore the constant factors, we need to solve  \\begin{align}\n            & n\\lg n \\ge nk + n\\lg{n / k} \\\\\n\\Rightarrow & \\lg n \\ge k + \\lg n - \\lg k \\\\\n\\Rightarrow & \\lg k \\ge k.\n\\end{align}  Which is not possible.  If we add the constant factors, we get  \\begin{align}\n            & c_qn\\lg n \\ge c_ink + c_qn\\lg(n / k) \\\\\n\\Rightarrow & c_q\\lg n \\ge c_ik + c_q\\lg n - c_q\\lg k \\\\\n\\Rightarrow & \\lg k \\ge \\frac{c_i}{c_q}k.\n\\end{align}  Which indicates that there might be a good candidate. Furthermore, the lower-order terms should be taken into consideration too.  In practice, $k$ should be chosed by experiment.",
            "title": "7.4-5"
        },
        {
            "location": "/Chap07/7.4/#74-6-star",
            "text": "Consider modifying the $\\text{PARTITION}$ procedure by randomly picking three elements from array $A$ and partitioning about their median (the middle value of the three elements). Approximate the probability of getting at worst an $\\alpha$-to-$(1 - \\alpha)$ split, as a function of $\\alpha$ in the range $0 < \\alpha < 1$.   First, for simplicity's sake, let's assume that we can pick the same element twice. Let's also assume that $0 < \\alpha \\le 1 / 2$.  In order to get such a split, two out of three elements need need to be in the smallest $\\alpha n$ elements. The probability of having one is $\\alpha n / n = \\alpha$. The probability of having exactly two is $\\alpha^2 - \\alpha^3$. There are three ways in which two elements can be in the smallest $\\alpha n$ and one way in which all three can be in the smallest $\\alpha n$ so the probability of getting such a median is $3\\alpha^2 - 2\\alpha^3$. We will get the same split if the median is in the largest $\\alpha n$. Since the two events are mutually exclusive, the probability is  $$\\Pr\\{\\text{OK split}\\} = 6\\alpha^2 - 4\\alpha^3 = 2\\alpha^2(3 - 2\\alpha).$$",
            "title": "7.4-6 $\\star$"
        },
        {
            "location": "/Chap07/Problems/7-1/",
            "text": "The version of $\\text{PARTITION}$ given in this chapter is not the original partitioning algorithm. Here is the original partition algorithm, which is due to C.A.R. Hoare:\n\n\nHOARE\n-\nPARTITION\n(\nA\n,\n \np\n,\n \nr\n)\n\n    \nx\n \n=\n \nA\n[\np\n]\n\n    \ni\n \n=\n \np\n \n-\n \n1\n\n    \nj\n \n=\n \nr\n \n+\n \n1\n\n    \nwhile\n \nTRUE\n\n        \nrepeat\n\n            \nj\n \n=\n \nj\n \n-\n \n1\n\n        \nuntil\n \nA\n[\nj\n]\n \n\u2264\n \nx\n\n        \nrepeat\n\n            \ni\n \n=\n \ni\n \n+\n \n1\n\n        \nuntil\n \nA\n[\ni\n]\n \n\u2265\n \nx\n\n        \nif\n \ni\n \n<\n \nj\n\n            \nexchange\n \nA\n[\ni\n]\n \nwith\n \nA\n[\nj\n]\n\n        \nelse\n \nreturn\n \nj\n\n\n\n\n\na.\n Demonstrate the operation of $\\text{HOARE-PARTITION}$ on the array $A = \\langle 13, 19, 9, 5, 12, 8, 7, 4, 11, 2, 6, 21 \\rangle$, showing the values of the array and auxiliary values after each iteration of the \nwhile\n loop in lines 4-13.\n\n\nThe next three questions ask you to give a careful argument that the procedure $\\text{HOARE-PARTITION}$ is correct. Assuming that the subarray $A[p..r]$ contains at least two elements, prove the following:\n\n\nb.\n The indices $i$ and $j$ are such that we never access an element of $A$ outside the subarray $A[p..r]$.\n\n\nc.\n When $\\text{HOARE-PARTITION}$ terminates, it returns a value $j$ such that $p \\le j < r$.\n\n\nd.\n Every element of $A[p..j]$ is less than or equal to every element of $A[j + 1..r]$ when $\\text{HOARE-PARTITION}$ terminates.\n\n\nThe $\\text{PARTITION}$ procedure in section 7.1 separates the pivot value (originally in $A[r]$) from the two partitions it forms. The $\\text{HOARE-PARTITION}$ procedure, on the other hand, always places the pivot value (originally in $A[p]$) into one of the two parititions $A[p..j]$ and $A[j + 1..r]$. Since $p \\le j < r$, this split is always nontrivial.\n\n\ne.\n Rewrite the $\\text{QUICKSORT}$ procedure to use $\\text{HOARE-PARTITION}$.\n\n\n\n\na.\n SKIP\n\n\nb.\n Because when $\\text{HOARE-PARTITION}$ is running, $p \\le i < j \\le r$ will always hold, $i$, $j$ won't access any element of $A$ outside the subarray $A[p..r]$.\n\n\nc.\n When $i \\ge j$, $\\text{HOARE-PARTITION}$ terminates, so $p \\le j < r$.\n\n\nd.\n When $\\text{HOARE-PARTITION}$ terminates, $A[p..j] \\le x \\le A[j + 1..r]$.\n\n\ne.\n\n\nQUICKSORT\n(\nA\n,\n \np\n,\n \nr\n)\n\n    \nif\n \np\n \n<\n \nr\n\n        \nq\n \n=\n \nHOARE\n-\nPARTITION\n(\nA\n,\n \np\n,\n \nr\n)\n\n        \nQUICKSORT\n(\nA\n,\n \np\n,\n \nq\n)\n\n        \nQUICKSORT\n(\nA\n,\n \nq\n \n+\n \n1\n,\n \nr\n)",
            "title": "7-1 Hoare partition correctness"
        },
        {
            "location": "/Chap07/Problems/7-2/",
            "text": "The analysis of the expected running time of randomized quicksort in section 7.4.2 assumes that all element values are distinct. In this problem. we examine what happens when they are not.\n\n\na.\n Suppose that all element values are equal. What would be randomized quick-sort's running time in this case?\n\n\nb.\n The $\\text{PARTITION}$ procedure returns an index $q$ such that each element of $A[p..q - 1]$ is less than or equal to $A[q]$ and each element of $A[q + 1..r]$ is greater than $A[q]$. Modify the $\\text{PARTITION}$ procedure to produce a procedure $\\text{PARTITION}'(A, p, r)$ which permutes the elements of $A[p..r]$ and returns two indices $q$ and $t$ where $p \\le q \\le t \\le r$, such that\n\n\n\n\nall elements of $A[q..t]$ are equal,\n\n\neach element of $A[p..q - 1]$ is less than $A[q]$, and\n\n\neach element of $A[t + 1..r]$ is greater than $A[q]$.\n\n\n\n\nLike $\\text{PARTITION}$, your $\\text{PARTITION}'$ procedure should take $\\Theta(r - p)$ time.\n\n\nc.\n Modify the $\\text{RANDOMIZED-QUICKSORT}$ procedure to call $\\text{PARTITION}'$, and name the new procedure $\\text{RANDOMIZED-QUICKSORT}'$. Then modify the $\\text{QUICKSORT}$ procedure to produce a procedure $\\text{QUICKSORT}'(p, r)$ that calls $\\text{RANDOMIZED-PARTITION}'$ and recurses only on partitions of elements not know to be equal to each other.\n\n\nd.\n Using $\\text{QUICKSORT}'$, how would you adjust the analysis of section 7.4.2 to avoid the assumption that all elements are distinct?\n\n\n\n\na.\n If all elements are equal, then when $\\text{PARTITION}$ returns, $q = r$ and all elements in $A[p..q - 1]$\u008d are equal. We get the recurrence $T(n) = T(n - 1) + T(0) + \\Theta(n)$ for the running time, and so $T(n) = \\Theta(n^2)$.\n\n\nb.\n The $\\text{PARTITION}'$ procedure:\n\n\nPARTITION\n'\n(\nA\n,\n \np\n,\n \nr\n)\n\n    \nx\n \n=\n \nA\n[\np\n]\n\n    \ni\n \n=\n \nh\n \n=\n \np\n\n    \nfor\n \nj\n \n=\n \np\n \n+\n \n1\n \nto\n \nr\n\n        \n// Invariant: A[p..i - 1] < x, A[i..h] = x, A[h + 1..j - 1] > x, A[j..r] unknown.\n\n        \nif\n \nA\n[\nj\n]\n \n<\n \nx\n\n            \ny\n \n=\n \nA\n[\nj\n]\n\n            \nA\n[\nj\n]\n \n=\n \nA\n[\nh\n \n+\n \n1\n]\n\n            \nA\n[\nh\n \n+\n \n1\n]\n \n=\n \nA\n[\ni\n]\n\n            \nA\n[\ni\n]\n \n=\n \ny\n\n            \ni\n \n=\n \ni\n \n+\n \n1\n\n            \nh\n \n=\n \nh\n \n+\n \n1\n\n        \nelse\n \nif\n \nA\n[\nj\n]\n \n==\n \nx\n\n            \nexchange\n \nA\n[\nh\n \n+\n \n1\n]\n \nwith\n \nA\n[\nj\n]\n\n            \nh\n \n=\n \nh\n \n+\n \n1\n\n    \nreturn\n \n(\ni\n,\n \nh\n)\n\n\n\n\n\nc.\n $\\text{RANDOMIZED-PARTITION}'$ is the same as $\\text{RANDOMIZED-PARTITION}$, but with the call to $\\text{PARTITION}$ replaced by a call to $\\text{PARTITION}'$.\n\n\nQUICKSORT\n'\n(\nA\n,\n \np\n,\n \nr\n)\n\n    \nif\n \nq\n \n<\n \nr\n\n        \n(\nq\n,\n \nt\n)\n \n=\n \nRANDOMIZED\n-\nPARTITION\n'\n(\nA\n,\n \nq\n,\n \nr\n)\n\n        \nQUICKSORT\n'\n(\nA\n,\n \np\n,\n \nq\n \n-\n \n1\n)\n\n        \nQUICKSORT\n'\n(\nA\n,\n \nt\n \n+\n \n1\n,\n \nr\n)\n\n\n\n\n\nd.\n Putting elements equal to the pivot in the same partition as the pivot can only help us, because we do not recurse on elements equal to the pivot. Thus, the subproblem sizes with $\\text{QUICKSORT}'$, even with equal elements, are no larger than the subproblem sizes with $\\text{QUICKSORT}$ when all elements are distinct.",
            "title": "7-2 Quicksort with equal element values"
        },
        {
            "location": "/Chap07/Problems/7-3/",
            "text": "An alternative analysis of the running time of randomized quicksort focuses on the expected running time of each individual recursive call to $\\text{RANDOMIZED-QUICKSORT}$, rather than on the number of comparisons performed.\n\n\na.\n Argue that, given an array of size $n$, the probability that any particular element is chosen as the pivot is $1 / n$. Use this to define indicator random variables\n\n\n$$X_i = I\\{i\\text{th smallest element is chosen as the pivot}\\}.$$\n\n\nWhat is $\\text E[X_i]$?\n\n\nb.\n Let $T(n)$ be a random variable denoting the running time of quicksort on an array of size $n$. Argue that\n\n\n$$\\text E[T(n)] = \\text E\\bigg[\\sum_{q = 1}^n X_q(T(q - 1) + T(n - q) + \\Theta(n))\\bigg]. \\tag{7.5}$$\n\n\nc.\n Show that we can rewrite equation $\\text{(7.5)}$ as\n\n\n$$\\text E[T(n)] = \\frac{2}{n}\\sum_{q = 2}^{n - 1}\\text E[T(q)] + \\Theta(n). \\tag{7.6}$$\n\n\nd.\n Show that\n\n\n$$\\sum_{k = 2}^{n - 1}k\\lg k \\le \\frac{1}{2}n^2\\lg n - \\frac{1}{8}n^2. \\tag{7.7}$$\n\n\n($\\textit{Hint:}$ Split the summation into two parts, one for $k = 2, 3, \\ldots, \\lceil n / 2 \\rceil - 1$ and one for $k = \\lceil n / 2 \\rceil, \\ldots, n - 1$.)\n\n\ne.\n Using the bound from equation $\\text{(7.7)}$, show that the recurrence in equation $\\text{(7.6)}$ has the solution $\\text E[T(n)] = \\Theta(n\\lg n)$. ($\\textit{Hint:}$ Show, by substitution, that $\\text E[T(n)] \\le an\\lg n$ for sufficiently large $n$ and for some positive constant $a$.)\n\n\n\n\na.\n Since the pivot is selected as a random element in the array, which has size $n$, the probabilities of any particular element being selected are all equal, and add to one, so, are all $\\frac{1}{n}$. As such, $\\text E[X_i] = \\Pr\\{i \\text{ smallest is picked}\\} = \\frac{1}{n}$.\n\n\nb.\n We can apply linearity of expectation over all of the events $X_i$. Suppose we have a particular $X_i$ be true, then, we will have one of the sub arrays be length $i - 1$, and the other be $n - i$, and will of course still need linear time to run the partition procedure. This corresponds exactly to the summand in equation $\\text{(7.5)}$.\n\n\nc.\n\n\n\\begin{align}\n& \\text E\\Bigg[\\sum_{q = 1}^n X_q(T(q - 1) + T(n - q) + \\Theta(n)) \\Bigg] \\\\\n& = \\sum_{q = 1}^n \\text E[X_q(T(q - 1) + T(n - q) + \\Theta(n))] \\\\\n& = \\sum_{q = 1}^n(T(q - 1) + T(n - q) + \\Theta(n))/n \\\\\n& = \\Theta(n) + \\frac{1}{n} \\sum_{q = 1}^n(T(q - 1)+T(n - 1)) \\\\\n& = \\Theta(n) + \\frac{1}{n} \\Big(\\sum_{q = 1}^n T(q - 1) + \\sum_{q = 1}^n T  (n - q) \\Big) \\\\\n& = \\Theta(n) + \\frac{1}{n} \\Big(\\sum_{q = 1}^n T(q - 1) + \\sum_{q = 1}^n T  (q - 1) \\Big) \\\\\n& = \\Theta(n) + \\frac{2}{n} \\sum_{q = 1}^n T(q - 1) \\\\\n& = \\Theta(n) + \\frac{2}{n} \\sum_{q = 0}^{n - 1} T(q) \\\\\n& = \\Theta(n) + \\frac{2}{n} \\sum_{q = 2}^{n - 1} T(q).\n\\end{align}\n\n\nd.\n We will prove this inequality in a different way than suggested by the hint. If\nwe let $f(k) = k\\lg k$ treated as a continuous function, then $f'(k) = \\lg k + 1$. Note now that the summation written out is the left hand approximation of the integral of $f(k)$ from $2$ to $n$ with step size $1$. By integration by parts, the anti-derivative of $k\\lg k$ is\n\n\n\\frac{1}{\\lg 2}(\\frac{k^2}{2}\\ln k-\\frac{k^2}{4}).\n\n\nSo, plugging in the bounds and subtracting, we get $\\frac{n^2\\lg n}{2} - \\frac{n^2}{4\\ln 2} - 1$. Since $f$ has a positive derivative over the entire interval that the integral is being evaluated over, the left hand rule provides a underapproximation of the integral, so, we have that\n\n\n\\begin{align}\n\\sum_{k = 2}^{n - 1} k\\lg k\n    & \\le \\frac{n^2\\lg n}{2} - \\frac{n^2}{4\\ln 2} - 1 \\\\\n    & \\le \\frac{n^2\\lg n}{2} - \\frac{n^2}{8},\n\\end{align}\n\n\nwhere the last inequality uses the fact that $\\ln 2 > 1 / 2$.\n\n\ne.\n Assume by induction that $T(q) \\le q \\lg(q) + \\Theta(n)$. Combining $\\text{(7.6)}$ and $\\text{(7.7)}$, we have\n\n\n\\begin{align}\n\\text E[T(n)]\n    & =   \\frac{2}{n} \\sum_{q = 2}^{n - 1} \\text E[T(q)] + \\Theta(n) \\\\\n    & \\le \\frac{2}{n} \\sum_{q = 2}^{n - 1}(q\\lg q + \\Theta(n)) + \\Theta(n) \\\\\n    & \\le \\frac{2}{n} \\sum_{q = 2}^{n - 1}q\\lg q + \\frac{2}{n}\\Theta(n) + \\Theta(n) \\\\\n    & \\le \\frac{2}{n}(\\frac{1}{2}n^2\\lg n - \\frac{1}{8}n^2) + \\Theta(n) \\\\\n    & =   n\\lg n -\\frac{1}{4}n + \\Theta(n) \\\\\n    & =   n\\lg n+\\Theta(n).\n\\end{align}",
            "title": "7-3 Alternative quicksort analysis"
        },
        {
            "location": "/Chap07/Problems/7-4/",
            "text": "The $\\text{QUICKSORT}$ algorithm of Section 7.1 contains two recursive calls to itself. After $\\text{QUICKSORT}$ calls $\\text{PARTITION}$, it recursively sorts the left subarray and then it recursively sorts the right subarray. The second recursive call in $\\text{QUICKSORT}$ is not really necessary; we can avoid it by using an iterative control structure. This technique, called tail recursion, is provided automatically by good compilers. Consider the following version of quicksort, which simulates tail recursion:\n\n\nTAIL\n-\nRECURSIVE\n-\nQUICKSORT\n(\nA\n,\n \np\n,\n \nr\n)\n\n    \nwhile\n \np\n \n<\n \nr\n\n        \n// Partition and sort left subarray.\n\n        \nq\n \n=\n \nPARTITION\n(\nA\n,\n \np\n,\n \nr\n)\n\n        \nTAIL\n-\nRECURSIVE\n-\nQUICKSORT\n(\nA\n,\n \np\n,\n \nq\n \n-\n \n1\n)\n\n        \np\n \n=\n \nq\n \n+\n \n1\n\n\n\n\n\na.\n Argue that $\\text{TAIL-RECURSIVE-QUICKSORT}(A, 1, A.length)$ correctly sorts the array $A$.\nCompilers usually execute recursive procedures by using a \nstack\n that contains pertinent information, including the parameter values, for each recursive call. The information for the most recent call is at the top of the stack, and the information for the initial call is at the bottom. Upon calling a procedure, its information is \npushed\n onto the stack; when it terminates, its information is \npopped\n. Since we assume that array parameters are represented by pointers, the information for each procedure call on the stack requires $O(1)$ stack space. The \nstack depth\n is the maximum amount of stack space used at any time during a computation.\n\n\nb.\n Describe a scenario in which $\\text{TAIL-RECURSIVE-QUICKSORT}$'s stack depth is $\\Theta(n)$ on an $n$-element input array.\n\n\nc.\n Modify the code for $\\text{TAIL-RECURSIVE-QUICKSORT}$ so that the worst-case stack depth is $\\Theta(\\lg n)$. Maintain the $O(n\\lg n)$ expected running time of the algorithm.\n\n\n\n\na.\n $\\text{QUICKSORT}'$ does exactly what $\\text{QUICKSORT}$ does; hence it sorts correctly.\n\n\n$\\text{QUICKSORT}$ and $\\text{QUICKSORT}'$ do the same partitioning, and then each calls itself with arguments $A$, $p$, $q - 1$. $\\text{QUICKSORT}$ then calls itself again, with arguments $A$, $q + 1$, $r$. $\\text{QUICKSORT}'$ instead sets $p = q + 1$ and performs another iteration of its while loop. This executes the same operations as calling itself with $A$, $q + 1$, $r$, because in both cases, the first and third arguments ($A$ and $r$) have the same values as before, and $p$ has the old value of $q + 1$.\n\n\nb.\n The stack depth of $\\text{QUICKSORT}'$ will be $\\Theta(n)$ on an $n$-element input array if there are $\\Theta(n)$ recursive calls to $\\text{QUICKSORT}'$. This happens if every call to $\\text{PARTITION}(A, p, r)$ returns $q = r$. The sequence of recursive calls in this scenario is\n\n\n\\begin{align}\n    & \\text{QUICKSORT$'(A, 1, n)$}, \\\\\n    & \\text{QUICKSORT$'(A, 1, n - 1)$}, \\\\\n    & \\text{QUICKSORT$'(A, 1, n - 2)$}, \\\\\n    & \\quad\\quad\\vdots \\\\\n    & \\text{QUICKSORT$'(A, 1, 1)$}.\n\\end{align}\n\n\nAny array that is already sorted in increasing order will cause $\\text{QUICKSORT}'$ to behave this way.\n\n\nc.\n The problem demonstrated by the scenario in part (b) is that each invocation of $\\text{QUICKSORT}'$ calls $\\text{QUICKSORT}'$ again with almost the same range. To avoid such behavior, we must change $\\text{QUICKSORT}'$ so that the recursive call is on a smaller interval of the array. The following variation of $\\text{QUICKSORT}'$ checks which of the two subarrays returned from $\\text{PARTITION}$ is smaller and recurses on the smaller subarray, which is at most half the size of the current array. Since the array size is reduced by at least half on each recursive call, the number of recursive calls, and hence the stack depth, is $\\Theta(\\lg n)$ in the worst case. Note that this method works no matter how partitioning is performed (as long as the $\\text{PARTITION}$ procedure has the same functionality as the procedure given in Section 7.1).\n\n\nQUICKSORT\n''\n(\nA\n,\n \np\n,\n \nr\n)\n\n    \nwhile\n \np\n \n<\n \nr\n\n        \n// Partition and sort the small subarray first.\n\n        \nq\n \n=\n \nPARTITION\n(\nA\n,\n \np\n,\n \nr\n)\n\n        \nif\n \nq\n \n-\n \np\n \n<\n \nr\n \n-\n \nq\n\n            \nQUICKSORT\n''\n(\nA\n,\n \np\n,\n \nq\n \n-\n \n1\n)\n\n            \np\n \n=\n \nq\n \n+\n \n1\n\n        \nelse\n \nQUICKSORT\n''\n(\nA\n,\n \nq\n \n+\n \n1\n,\n \nr\n)\n\n            \nr\n \n=\n \nq\n \n-\n \n1\n\n\n\n\n\nThe expected running time is not affected, because exactly the same work is done as before: the same partitions are produced, and the same subarrays are sorted.",
            "title": "7-4 Stack depth for quicksort"
        },
        {
            "location": "/Chap07/Problems/7-5/",
            "text": "One way to improve the $\\text{RANDOMIZED-QUICKSORT}$ procedure is to partition around a pivot that is chosen more carefully than by picking a random element from the subarray. One common approach is the \nmedian-of-3\n method: choose the pivot as the median (middle element) of a set of 3 elements randomly selected from the subarray. (See exercise 7.4-6.) For this problem, let us assume that the elements of the input array $A[1..n]$ are distinct and that $n \\ge 3$. We denote the sorted output array by $A'[1..n]$. Using the median-of-3 method to choose the pivot element $x$, define $p_i = \\Pr\\{x = A'[i]\\}$.\n\n\na.\n Give an exact formula for $p_i$ as a function of $n$ and $i$ for $i = 2, 3, \\ldots, n - 1$. (Note that $p_1 = p_n = 0$.)\n\n\nb.\n By what amount have we increased the likelihood of choosing the pivot as $x = A'[\\lfloor (n + 1) / 2 \\rfloor]$, the median of $A[1..n]$, compared with the ordinary implementation? Assume that $n \\to \\infty$, and give the limiting ratio of these probabilities.\n\n\nc.\n If we define a ''good'' split to mean choosing the pivot as $x = A'[i]$, where $n / 3 \\le i \\le 2n / 3$, by what amount have we increased the likelihood of getting a good split compared with the ordinary implementation? ($\\textit{Hint:}$ Approximate the sum by an integral.)\n\n\nd.\n Argue that in the $\\Omega(n\\lg n)$ running time of quicksort, the median-of-3 method affects only the constant factor.\n\n\n\n\na.\n $p_i$ is the probability that a randomly selected subset of size three has the $A'[i]$ as it's middle element. There are 6 possible orderings of the three elements selected. So, suppose that $S'$ is the set of three elements selected. \n\n\nWe will compute the probability that the second element of $S'$ is $A'[i]$ among all possible $3$-sets we can pick, since there are exactly six ordered $3$-sets corresponding to each $3$-set, these probabilities will be equal. We will compute\nthe probability that $S'[2] = A[i]$. For any such $S'$, we would need to select\nthe first element from $[i - 1]$ and the third from ${i + 1, \\ldots , n}$. So, there are $(i - 1)(n - i)$ such $3$-sets. The total number of $3$-sets is $\\binom{n}{3} = \\frac{n(n - 1)(n - 2)}{6}$.\nSo,\n\n\n$$p_i = \\frac{6(n - i)(i - 1)}{n(n - 1)(n - 2)}.$$\n\n\nb.\n If we let $i = \\lfloor \\frac{n + 1}{2} \\rfloor$, the previous result gets us an increase of\n\n\n$$\\frac{6(\\lfloor\\frac{n - 1}{2}\\rfloor)(n - \\lfloor\\frac{n + 1}{2}\\rfloor)}{n(n - 1)(n - 2)} - \\frac{1}{n}$$\n\n\nin the limit $n$ going to infinity, we get\n\n\n$$\\lim_{n \\to \\infty} \\frac{\\frac{6(\\lfloor \\frac{n - 1}{2} \\rfloor)(n - \\lfloor \\frac{n + 1}{2} \\rfloor)}{n(n - 1)(n - 2)}}{\\frac{1}{n}} = \\frac{3}{2}.$$\n\n\nc.\n To save the messiness, suppose $n$ is a multiple of $3$. We will approximate the sum as an integral, so,\n\n\n\\begin{align}\n\\sum_{i = n / 3}^{2n / 3} \n    & \\approx \\int_{n / 3}^{2n / 3} \\frac{6(-x^2 + nx + x - n)}{n(n - 1)(n - 2)}dx \\\\\n    & = \\frac{6(-7n^3 / 81 + 3n^3 / 18 + 3n^2 / 18 - n^2 / 3)}{n(n - 1)(n - 2)},\n\\end{align}\n\n\nwhich, in the limit $n$ goes to infinity, is $\\frac{13}{27}$ which is a constant that $>\\frac{1}{3}$ as it was in the original randomized quicksort implementation.\n\n\nd.\n Since the new algorithm always has a ''bad'' choice that is within a constant factor of the original quicksort, it will still have a reasonable probability that the randomness leads us into a bad situation, so, it will still be $n\\lg n$.",
            "title": "7-5 Median-of-3 partition"
        },
        {
            "location": "/Chap07/Problems/7-6/",
            "text": "Consider the problem in which we do not know the numbers exactly. Instead, for each number, we know an interval on the real line to which it belongs. That is, we are given $n$ closed intervals of the form $[a_i, b_i]$, where $a_i \\le b_i$. We wish to \nfuzzy-sort\n these intervals, i.e., to produce a permutation $\\langle i_1, i_2, \\ldots, i_n \\rangle$ of the intervals such that for $j = 1, 2, \\ldots, n$, there exists $c_j \\in [a_{i_j}, b_{i_j}]$ satisfying $c_1 \\le c_2 \\le \\cdots \\le c_n$.\n\n\na.\n Design a randomized algorithm for fuzzy-sorting $n$ intervals. Your algorithm should have the general structure of an algorithm that quicksorts the left endpoints (the $a_i$ values), but it should take advantage of overlapping intervals to improve the running time. (As the intervals overlap more and more, the problem of fuzzy-sorting the intervals becoes progressively easier. Your algorithm should take advantage of such overlapping, to the extend that it exists.)\n\n\nb.\n Argue that your algorithm runs in expected time $\\Theta(n\\lg n)$ in general, but runs in expected time $\\Theta(n)$ when all of the intervals overlap (i.e., when there exists a value $x$ such that $x \\in [a_i, b_i]$ for all $i$). Your algorithm should not be checking for this case explicitly; rather, its performance should naturally improve as the amount of overlap increases.\n\n\n\n\na.\n\n\nFUZZY\n-\nPARTITION\n(\nA\n,\n \np\n,\n \nr\n)\n\n    \nx\n \n=\n \nA\n[\nr\n]\n\n    \nexchange\n \nA\n[\nr\n]\n \nwith\n \nA\n[\np\n]\n\n    \ni\n \n=\n \np\n \n-\n \n1\n\n    \nk\n \n=\n \np\n\n    \nfor\n \nj\n \n=\n \np\n \n+\n \n1\n \nto\n \nr\n \n-\n \n1\n\n        \nif\n \nb\n[\nj\n]\n \n<\n \nx\n.\na\n\n            \ni\n \n=\n \ni\n \n+\n \n1\n\n            \nk\n \n=\n \ni\n \n+\n \n2\n\n            \nexchange\n \nA\n[\ni\n]\n \nwith\n \nA\n[\nj\n]\n\n            \nexchange\n \nA\n[\nk\n]\n \nwith\n \nA\n[\nj\n]\n\n        \nif\n \nb\n[\nj\n]\n \n\u2265\n \nx\n.\na\n \nor\n \na\n[\nj\n]\n \n\u2264\n \nx\n.\nb\n\n            \nx\n.\na\n \n=\n \nmax\n(\na\n[\nj\n],\n \nx\n.\na\n)\n \nand\n \nx\n.\nb\n \n=\n \nmin\n(\nb\n[\nj\n],\n \nx\n.\nb\n)\n\n            \nk\n \n=\n \nk\n \n+\n \n1\n\n            \nexchange\n \nA\n[\nk\n]\n \nwith\n \nA\n[\nj\n]\n\n    \nexchange\n \nA\n[\ni\n \n+\n \n1\n]\n \nwith\n \nA\n[\nr\n]\n\n    \nreturn\n \ni\n \n+\n \n1\n \nand\n \nk\n \n+\n \n1\n\n\n\n\n\nWhen intervals overlap we treat them as equal elements, thus cutting down on the time required to sort.\n\n\nb.\n For distinct intervals the algorithm runs exactly as regular quicksort does, so its expected runtime will be $\\Theta(n\\lg n)$ in general. If all of the intervals overlap\nthen the condition on line 12 will be satisfied for every iteration of the \nfor\n loop. Thus the algorithm returns $p$ and $r$, so only empty arrays remain to be sorted. $\\text{FUZZY-PARTITION}$ will only be called a single time, and since its runtime remains $\\Theta(n)$, the total expected runtime is $\\Theta(n)$.",
            "title": "7-6 Fuzzy sorting of intervals"
        },
        {
            "location": "/Chap08/8.1/",
            "text": "8.1-1\n\n\n\n\nWhat is the smallest possible depth of a leaf in a decision tree for a comparison sort?\n\n\n\n\nFor a permutation $a_1 \\le a_2 \\le \\ldots \\le a_n$, there are $n - 1$ pairs of relative ordering, thus the smallest possible depth is $n - 1$.\n\n\n8.1-2\n\n\n\n\nObtain asymptotically tight bounds on $\\lg(n!)$ without using Stirling's approximation. Instead, evaluate the summation $\\sum_{k = 1}^n \\lg k$ using techniques from Section A.2.\n\n\n\n\n\\begin{align}\n\\sum_{k = 1}^n \\lg k \n    & \\le \\sum_{k = 1}^n \\lg n \\\\\n    & =   n\\lg n.\n\\end{align}\n\\begin{align}\n\\sum_{k = 1}^n \\lg k \n    & = \\sum_{k = 2}^{n / 2} \\lg k + \\sum_{k = n / 2}^n \\lg k \\\\\n    & \\ge \\sum_{k = 1}^{n / 2} 1 + \\sum_{k = n / 2}^n \\lg n / 2 \\\\\n    & = \\frac{n}{2} + \\frac{n}{2}(\\lg n - 1) \\\\\n    & = \\frac{n}{2}\\lg n.\n\\end{align}\n\n\n8.1-3\n\n\n\n\nShow that there is no comparison sort whose running time is linear for at least half of the $n!$ inputs of length $n$. What about a fraction of $1 / n$ of the inputs of length $n$? What about a fraction $1 / 2^n$?\n\n\n\n\nIf the sort runs in linear time for $m$ input permutations, then the height $h$ of the portion of the decision tree consisting of the $m$ corresponding leaves and their ancestors is linear.\n\n\nUse the same argument as in the proof of Theorem 8.1 to show that this is impossible for $m = n! / 2$, $n! / n$, or $n! / 2^n$.\n\n\nWe have $2^h \\ge m$, which gives us $h \\ge \\lg m$. For all the possible m's given here, $\\lg m = \\Omega(n\\lg n)$, hence $h = \\Omega(n\\lg n)$.\n\n\nIn particular,\n\n\n\\begin{align}\n    \\lg \\frac{n!}{2}   & = \\lg n! - 1 \\ge n\\lg n - n\\lg e - 1, \\\\\n    \\lg \\frac{n!}{n}   & = \\lg n! - \\lg n \\ge n\\lg n - n\\lg e - \\lg n, \\\\\n    \\lg \\frac{n!}{2^n} & = \\lg n! - n \\ge n\\lg n - n\\lg e - n. \\\\\n\\end{align}\n\n\n8.1-4\n\n\n\n\nSuppose that you are given a sequence of $n$ elements to sort. The input sequence consists of $n / k$ subsequences, each containing $k$ elements. The elements in a given subsequence are all smaller than the elements in the succeeding subsequence and larger than the elements in the preceding subsequence. Thus, all that is needed to sort the whole sequence of length $n$ is to sort the $k$ elements in each of the $n / k$ subsequences. Show an $\\Omega(n\\lg k)$ lower bound on the number of comparisons needed to solve this variant of the sorting problem. ($\\textit{Hint:}$ It is not rigorous to simply combine the lower bounds for the individual subsequences.)\n\n\n\n\nLet $S$ be a sequence of $n$ elements divided into $n / k$ subsequences each of length $k$ where all of the elements in any subsequence are larger than all of the elements of a preceding subsequence and smaller than all of the elements of a succeeding subsequence.\n\n\nClaim\n \n\n\nAny comparison-based sorting algorithm to sort $s$ must take $\\Omega(n\\lg k)$ time in the worst case.\n\n\nProof\n \n\n\nFirst notice that, as pointed out in the hint, we cannot prove the lower bound by multiplying together the lower bounds for sorting each subsequence. That would only prove that there is no faster algorithm \nthat sorts the subsequences independently\n. This was not what we are asked to prove; we cannot introduce \nany\n extra assumptions.\n\n\nNow, consider the decision tree of height $h$ for any comparison sort for $S$. Since the elements of each subsequence can be in any order, any of the $k!$ permutations correspond to the final sorted order of a subsequence. And, since there are $n / k$ such subsequences, each of which can be in any order, there are $(k!)^{n / k}$ permutations of $S$ that could correspond to the sorting of some input order. Thus, any decision tree for sorting $S$ must have at least $(k!)^{n / k}$ leaves. Since a binary tree of height $h$ has no more than $2^h$ leaves, we must have $2^h \\ge (k!)^{n / k}$ or $h \\ge \\lg((k!)^{n / k})$. We therefore obtain\n\n\n\\begin{align}\nh & =   \\lg((k!)^{n / k}) \\\\\n  & =   (n / k)\\lg(k!) \\\\\n  & \\ge (n / k)\\lg((k/k)^{k / 2}) \\\\\n  & =   (n / 2)\\lg(k / 2).\n\\end{align}\n\n\nThe third line comes from $k!$ having its $k / 2$ largest terms being at least $k / 2$ each. (We implicitly assume here that $k$ is even. We could adjust with \ufb02oors and ceilings if $k$ were odd.)\n\n\nSince there exists at least one path in any decision tree for sorting $S$ that has length at least $(n / 2)\\lg(k / 2)$, the worst-case running time of any comparison-based sorting algorithm for $S$ is $\\Omega(n\\lg k)$.",
            "title": "8.1 Lower bounds for sorting"
        },
        {
            "location": "/Chap08/8.1/#81-1",
            "text": "What is the smallest possible depth of a leaf in a decision tree for a comparison sort?   For a permutation $a_1 \\le a_2 \\le \\ldots \\le a_n$, there are $n - 1$ pairs of relative ordering, thus the smallest possible depth is $n - 1$.",
            "title": "8.1-1"
        },
        {
            "location": "/Chap08/8.1/#81-2",
            "text": "Obtain asymptotically tight bounds on $\\lg(n!)$ without using Stirling's approximation. Instead, evaluate the summation $\\sum_{k = 1}^n \\lg k$ using techniques from Section A.2.   \\begin{align}\n\\sum_{k = 1}^n \\lg k \n    & \\le \\sum_{k = 1}^n \\lg n \\\\\n    & =   n\\lg n.\n\\end{align}\n\\begin{align}\n\\sum_{k = 1}^n \\lg k \n    & = \\sum_{k = 2}^{n / 2} \\lg k + \\sum_{k = n / 2}^n \\lg k \\\\\n    & \\ge \\sum_{k = 1}^{n / 2} 1 + \\sum_{k = n / 2}^n \\lg n / 2 \\\\\n    & = \\frac{n}{2} + \\frac{n}{2}(\\lg n - 1) \\\\\n    & = \\frac{n}{2}\\lg n.\n\\end{align}",
            "title": "8.1-2"
        },
        {
            "location": "/Chap08/8.1/#81-3",
            "text": "Show that there is no comparison sort whose running time is linear for at least half of the $n!$ inputs of length $n$. What about a fraction of $1 / n$ of the inputs of length $n$? What about a fraction $1 / 2^n$?   If the sort runs in linear time for $m$ input permutations, then the height $h$ of the portion of the decision tree consisting of the $m$ corresponding leaves and their ancestors is linear.  Use the same argument as in the proof of Theorem 8.1 to show that this is impossible for $m = n! / 2$, $n! / n$, or $n! / 2^n$.  We have $2^h \\ge m$, which gives us $h \\ge \\lg m$. For all the possible m's given here, $\\lg m = \\Omega(n\\lg n)$, hence $h = \\Omega(n\\lg n)$.  In particular,  \\begin{align}\n    \\lg \\frac{n!}{2}   & = \\lg n! - 1 \\ge n\\lg n - n\\lg e - 1, \\\\\n    \\lg \\frac{n!}{n}   & = \\lg n! - \\lg n \\ge n\\lg n - n\\lg e - \\lg n, \\\\\n    \\lg \\frac{n!}{2^n} & = \\lg n! - n \\ge n\\lg n - n\\lg e - n. \\\\\n\\end{align}",
            "title": "8.1-3"
        },
        {
            "location": "/Chap08/8.1/#81-4",
            "text": "Suppose that you are given a sequence of $n$ elements to sort. The input sequence consists of $n / k$ subsequences, each containing $k$ elements. The elements in a given subsequence are all smaller than the elements in the succeeding subsequence and larger than the elements in the preceding subsequence. Thus, all that is needed to sort the whole sequence of length $n$ is to sort the $k$ elements in each of the $n / k$ subsequences. Show an $\\Omega(n\\lg k)$ lower bound on the number of comparisons needed to solve this variant of the sorting problem. ($\\textit{Hint:}$ It is not rigorous to simply combine the lower bounds for the individual subsequences.)   Let $S$ be a sequence of $n$ elements divided into $n / k$ subsequences each of length $k$ where all of the elements in any subsequence are larger than all of the elements of a preceding subsequence and smaller than all of the elements of a succeeding subsequence.  Claim    Any comparison-based sorting algorithm to sort $s$ must take $\\Omega(n\\lg k)$ time in the worst case.  Proof    First notice that, as pointed out in the hint, we cannot prove the lower bound by multiplying together the lower bounds for sorting each subsequence. That would only prove that there is no faster algorithm  that sorts the subsequences independently . This was not what we are asked to prove; we cannot introduce  any  extra assumptions.  Now, consider the decision tree of height $h$ for any comparison sort for $S$. Since the elements of each subsequence can be in any order, any of the $k!$ permutations correspond to the final sorted order of a subsequence. And, since there are $n / k$ such subsequences, each of which can be in any order, there are $(k!)^{n / k}$ permutations of $S$ that could correspond to the sorting of some input order. Thus, any decision tree for sorting $S$ must have at least $(k!)^{n / k}$ leaves. Since a binary tree of height $h$ has no more than $2^h$ leaves, we must have $2^h \\ge (k!)^{n / k}$ or $h \\ge \\lg((k!)^{n / k})$. We therefore obtain  \\begin{align}\nh & =   \\lg((k!)^{n / k}) \\\\\n  & =   (n / k)\\lg(k!) \\\\\n  & \\ge (n / k)\\lg((k/k)^{k / 2}) \\\\\n  & =   (n / 2)\\lg(k / 2).\n\\end{align}  The third line comes from $k!$ having its $k / 2$ largest terms being at least $k / 2$ each. (We implicitly assume here that $k$ is even. We could adjust with \ufb02oors and ceilings if $k$ were odd.)  Since there exists at least one path in any decision tree for sorting $S$ that has length at least $(n / 2)\\lg(k / 2)$, the worst-case running time of any comparison-based sorting algorithm for $S$ is $\\Omega(n\\lg k)$.",
            "title": "8.1-4"
        },
        {
            "location": "/Chap08/8.2/",
            "text": "8.2-1\n\n\n\n\nUsing Figure 8.2 as a model, illustrate the operation of $\\text{COUNTING-SORT}$ on the array $A = \\langle 6, 0, 2, 0, 1, 3, 4, 6, 1, 3, 2 \\rangle$.\n\n\n\n\nWe have that $C = \\langle 2, 4, 6, 8, 9, 9, 11 \\rangle$. Then, after successive iterations of the loop on lines 10-12, we have\n\n\n\\begin{align}\nB & = \\langle, , , , , 2, , , , , \\rangle, \\\\\nB & = \\langle, , , , , 2, , 3, , , \\rangle, \\\\\nB & = \\langle, , , 1, , 2, , 3, , , \\rangle\n\\end{align}\n\n\nand at the end,\n\n\nB = \\langle 0, 0, 1, 1, 2, 2, 3, 3, 4, 6, 6 \\rangle.\n\n\n8.2-2\n\n\n\n\nProve that $\\text{COUNTING-SORT}$ is stable.\n\n\n\n\n8.2-3\n\n\n\n\nSuppose that we were to rewrite the \nfor\n loop header in line 10 of the $\\text{COUNTING-SORT}$ as\n\n\n10\n  \nfor\n \nj\n \n=\n \n1\n \nto\n \nA\n.\nlength\n\n\n\n\n\nShow that the algorithm still works properly. Is the modified algorithm stable?\n\n\n\n\n[The following solution also answers Exercise 8.2-2.]\n\n\nNotice that the correctness argument in the text does not depend on the order in which $A$ is processed. The algorithm is correct no matter what order is used!\n\n\nBut the modified algorithm is not stable. As before, in the final \nfor\n loop an element equal to one taken from $A$ earlier is placed before the earlier one (i.e., at a lower index position) in the output array $B$. The original algorithm was stable because an element taken from $A$ later started out with a lower index than one taken earlier. But in the modified algorithm, an element taken from $A$ later started out with a higher index than one taken earlier.\n\n\nIn particular, the algorithm still places the elements with value $k$ in positions $C[k - 1] + 1$ through $C[k]$\u008d, but in the reverse order of their appearance in $A$.\n\n\n8.2-4\n\n\n\n\nDescribe an algorithm that, given n integers in the range $0$ to $k$, preprocesses its input and then answers any query about how many of the $n$ integers fall into a range $[a..b]$ in $O(1)$ time. Your algorithm should use $\\Theta(n + k)$ preprocessing time.\n\n\n\n\nCompute the $C$ array as is done in counting sort. The number of integers in the range $[a..b]$ is $C[b] - C[a - 1]$\u008d, where we interpret $C[-1]$\u008d as $0$.",
            "title": "8.2 Counting sort"
        },
        {
            "location": "/Chap08/8.2/#82-1",
            "text": "Using Figure 8.2 as a model, illustrate the operation of $\\text{COUNTING-SORT}$ on the array $A = \\langle 6, 0, 2, 0, 1, 3, 4, 6, 1, 3, 2 \\rangle$.   We have that $C = \\langle 2, 4, 6, 8, 9, 9, 11 \\rangle$. Then, after successive iterations of the loop on lines 10-12, we have  \\begin{align}\nB & = \\langle, , , , , 2, , , , , \\rangle, \\\\\nB & = \\langle, , , , , 2, , 3, , , \\rangle, \\\\\nB & = \\langle, , , 1, , 2, , 3, , , \\rangle\n\\end{align}  and at the end,  B = \\langle 0, 0, 1, 1, 2, 2, 3, 3, 4, 6, 6 \\rangle.",
            "title": "8.2-1"
        },
        {
            "location": "/Chap08/8.2/#82-2",
            "text": "Prove that $\\text{COUNTING-SORT}$ is stable.",
            "title": "8.2-2"
        },
        {
            "location": "/Chap08/8.2/#82-3",
            "text": "Suppose that we were to rewrite the  for  loop header in line 10 of the $\\text{COUNTING-SORT}$ as  10    for   j   =   1   to   A . length   Show that the algorithm still works properly. Is the modified algorithm stable?   [The following solution also answers Exercise 8.2-2.]  Notice that the correctness argument in the text does not depend on the order in which $A$ is processed. The algorithm is correct no matter what order is used!  But the modified algorithm is not stable. As before, in the final  for  loop an element equal to one taken from $A$ earlier is placed before the earlier one (i.e., at a lower index position) in the output array $B$. The original algorithm was stable because an element taken from $A$ later started out with a lower index than one taken earlier. But in the modified algorithm, an element taken from $A$ later started out with a higher index than one taken earlier.  In particular, the algorithm still places the elements with value $k$ in positions $C[k - 1] + 1$ through $C[k]$\u008d, but in the reverse order of their appearance in $A$.",
            "title": "8.2-3"
        },
        {
            "location": "/Chap08/8.2/#82-4",
            "text": "Describe an algorithm that, given n integers in the range $0$ to $k$, preprocesses its input and then answers any query about how many of the $n$ integers fall into a range $[a..b]$ in $O(1)$ time. Your algorithm should use $\\Theta(n + k)$ preprocessing time.   Compute the $C$ array as is done in counting sort. The number of integers in the range $[a..b]$ is $C[b] - C[a - 1]$\u008d, where we interpret $C[-1]$\u008d as $0$.",
            "title": "8.2-4"
        },
        {
            "location": "/Chap08/8.3/",
            "text": "8.3-1\n\n\n\n\nUsing Figure 8.3 as a model, illustrate the operation of $\\text{RADIX-SORT}$ on the following list of English words: COW, DOG, SEA, RUG, ROW, MOB, BOX, TAB, BAR, EAR, TAR, DIG, BIG, TEA, NOW, FOX.\n\n\n\n\n\\begin{array}{cccc}\n 0         &           1           &           2           &            3          \\\\\n\\hline\n\\text{COW} & \\text{SE$\\textbf{A}$} & \\text{T$\\textbf{A}$B} & \\text{$\\textbf{B}$AR} \\\\\n\\text{DOG} & \\text{TE$\\textbf{A}$} & \\text{B$\\textbf{A}$R} & \\text{$\\textbf{B}$IG} \\\\\n\\text{SEA} & \\text{MO$\\textbf{B}$} & \\text{E$\\textbf{A}$R} & \\text{$\\textbf{B}$OX} \\\\\n\\text{RUG} & \\text{TA$\\textbf{B}$} & \\text{T$\\textbf{A}$R} & \\text{$\\textbf{C}$OW} \\\\\n\\text{ROW} & \\text{DO$\\textbf{G}$} & \\text{S$\\textbf{E}$A} & \\text{$\\textbf{D}$IG} \\\\\n\\text{MOB} & \\text{RU$\\textbf{G}$} & \\text{T$\\textbf{E}$A} & \\text{$\\textbf{D}$OG} \\\\\n\\text{BOX} & \\text{DI$\\textbf{G}$} & \\text{D$\\textbf{I}$G} & \\text{$\\textbf{E}$AR} \\\\\n\\text{TAB} & \\text{BI$\\textbf{G}$} & \\text{B$\\textbf{I}$G} & \\text{$\\textbf{F}$OX} \\\\\n\\text{BAR} & \\text{BA$\\textbf{R}$} & \\text{M$\\textbf{O}$B} & \\text{$\\textbf{M}$OB} \\\\\n\\text{EAR} & \\text{EA$\\textbf{R}$} & \\text{D$\\textbf{O}$G} & \\text{$\\textbf{N}$OW} \\\\\n\\text{TAR} & \\text{TA$\\textbf{R}$} & \\text{C$\\textbf{O}$W} & \\text{$\\textbf{R}$OW} \\\\\n\\text{DIG} & \\text{CO$\\textbf{W}$} & \\text{R$\\textbf{O}$W} & \\text{$\\textbf{R}$UG} \\\\\n\\text{BIG} & \\text{RO$\\textbf{W}$} & \\text{N$\\textbf{O}$W} & \\text{$\\textbf{S}$EA} \\\\\n\\text{TEA} & \\text{NO$\\textbf{W}$} & \\text{B$\\textbf{O}$X} & \\text{$\\textbf{T}$AB} \\\\\n\\text{NOW} & \\text{BO$\\textbf{X}$} & \\text{F$\\textbf{O}$X} & \\text{$\\textbf{T}$AR} \\\\\n\\text{FOX} & \\text{FO$\\textbf{X}$} & \\text{R$\\textbf{U}$G} & \\text{$\\textbf{T}$EA} \\\\\n\\end{array}\n\n\n8.3-2\n\n\n\n\nWhich of the following sorting algorithms are stable: insertion sort, merge sort, heapsort, and quicksort? Give a simple scheme that makes any sorting algorithm stable. How much additional time and space does your scheme entail?\n\n\n\n\nInsertion sort is stable. When inserting $A[j]$\u008d into the sorted sequence $A[1..j - 1]$, we do it the following way: compare $A[j]$\u008d to $A[i]$\u008d, starting with $i = j - 1$ and going down to $i = 1$. Continue at long as $A[j] < A[i]$\u008d.\n\n\nMerge sort as defined is stable, because when two elements compared are equal, the tie is broken by taking the element from array $L$ which keeps them in the original order.\n\n\nHeapsort and quicksort are not stable.\n\n\nOne scheme that makes a sorting algorithm stable is to store the index of each element (the element's place in the original ordering) with the element. When comparing two elements, compare them by their values and break ties by their indices.\n\n\nAdditional space requirements: For $n$ elements, their indices are $1 \\ldots n$. Each can be written in $\\lg n$ bits, so together they take $O(n\\lg n)$ additional space.\n\n\nAdditional time requirements: The worst case is when all elements are equal. The asymptotic time does not change because we add a constant amount of work to each comparison.\n\n\n8.3-3\n\n\n\n\nUse induction to prove that radix sort works. Where does your proof need the assumption that the intermediate sort is stable?\n\n\n\n\nBasis:\n If $d = 1$, there's only one digit, so sorting on that digit sorts the array. \n\n\nInductive step:\n Assuming that radix sort works for $d - 1$ digits, we'll show that it works for $d$ digits.\n\n\nRadix sort sorts separately on each digit, starting from digit $1$. Thus, radix sort of $d$ digits, which sorts on digits $1, \\ldots, d$ is equivalent to radix sort of the low-order $d - 1$ digits followed by a sort on digit $d$. By our induction hypothesis, the sort of the low-order $d - 1$ digits works, so just before the sort on digit $d$, the elements are in order according to their low-order $d - 1$ digits.\n\n\nThe sort on digit $d$ will order the elements by their $d$th digit. Consider two elements, $a$ and $b$, with dth digits $a_d$ and $b_d$ respectively.\n\n\n\n\nIf $a_d < b_d$, the sort will put $a$ before $b$, which is correct, since $a < b$ regardless of the low-order digits.\n\n\nIf $a_d > b_d$, the sort will put $a$ after $b$, which is correct, since $a > b$ regardless of the low-order digits.\n\n\nIf $a_d = b_d$, the sort will leave $a$ and $b$ in the same order they were in, because it is stable. But that order is already correct, since the correct order of $a$ and $b$ is determined by the low-order $d - 1$ digits when their dth digits are equal, and the elements are already sorted by their low-order $d - 1$ digits.\n\n\n\n\nIf the intermediate sort were not stable, it might rearrange elements whose $d$th digits were equal\u2014elements that \nwere\n in the right order after the sort on their lower-order digits.\n\n\n8.3-4\n\n\n\n\nShow how to sort $n$ integers in the range $0$ to $n^3 - 1$ in $O(n)$ time.\n\n\n\n\nTreat the numbers as $3$-digit numbers in radix $n$. Each digit ranges from $0$ to $n - 1$. Sort these $3$-digit numbers with radix sort.\n\n\nThere are 3 calls to counting sort, each taking $\\Theta(n + n) = \\Theta(n)$ time, so that the total time is $\\Theta(n)$.\n\n\n8.3-5 $\\star$\n\n\n\n\nIn the first card-sorting algorithm in this section, exactly how many sorting passes are needed to sort $d$-digit decimal numbers in the worst case? How many piles of cards would an operator need to keep track of in the worst case?\n\n\n\n\n\n\nSince a pass consists of one iteration of the loop on line 1\u20132, only $d$ passes are needed. \n\n\nSince each of the digits can be one of ten decimal numbers, the most number of piles that would be needed to be kept track of is $10$.",
            "title": "8.3 Radix sort"
        },
        {
            "location": "/Chap08/8.3/#83-1",
            "text": "Using Figure 8.3 as a model, illustrate the operation of $\\text{RADIX-SORT}$ on the following list of English words: COW, DOG, SEA, RUG, ROW, MOB, BOX, TAB, BAR, EAR, TAR, DIG, BIG, TEA, NOW, FOX.   \\begin{array}{cccc}\n 0         &           1           &           2           &            3          \\\\\n\\hline\n\\text{COW} & \\text{SE$\\textbf{A}$} & \\text{T$\\textbf{A}$B} & \\text{$\\textbf{B}$AR} \\\\\n\\text{DOG} & \\text{TE$\\textbf{A}$} & \\text{B$\\textbf{A}$R} & \\text{$\\textbf{B}$IG} \\\\\n\\text{SEA} & \\text{MO$\\textbf{B}$} & \\text{E$\\textbf{A}$R} & \\text{$\\textbf{B}$OX} \\\\\n\\text{RUG} & \\text{TA$\\textbf{B}$} & \\text{T$\\textbf{A}$R} & \\text{$\\textbf{C}$OW} \\\\\n\\text{ROW} & \\text{DO$\\textbf{G}$} & \\text{S$\\textbf{E}$A} & \\text{$\\textbf{D}$IG} \\\\\n\\text{MOB} & \\text{RU$\\textbf{G}$} & \\text{T$\\textbf{E}$A} & \\text{$\\textbf{D}$OG} \\\\\n\\text{BOX} & \\text{DI$\\textbf{G}$} & \\text{D$\\textbf{I}$G} & \\text{$\\textbf{E}$AR} \\\\\n\\text{TAB} & \\text{BI$\\textbf{G}$} & \\text{B$\\textbf{I}$G} & \\text{$\\textbf{F}$OX} \\\\\n\\text{BAR} & \\text{BA$\\textbf{R}$} & \\text{M$\\textbf{O}$B} & \\text{$\\textbf{M}$OB} \\\\\n\\text{EAR} & \\text{EA$\\textbf{R}$} & \\text{D$\\textbf{O}$G} & \\text{$\\textbf{N}$OW} \\\\\n\\text{TAR} & \\text{TA$\\textbf{R}$} & \\text{C$\\textbf{O}$W} & \\text{$\\textbf{R}$OW} \\\\\n\\text{DIG} & \\text{CO$\\textbf{W}$} & \\text{R$\\textbf{O}$W} & \\text{$\\textbf{R}$UG} \\\\\n\\text{BIG} & \\text{RO$\\textbf{W}$} & \\text{N$\\textbf{O}$W} & \\text{$\\textbf{S}$EA} \\\\\n\\text{TEA} & \\text{NO$\\textbf{W}$} & \\text{B$\\textbf{O}$X} & \\text{$\\textbf{T}$AB} \\\\\n\\text{NOW} & \\text{BO$\\textbf{X}$} & \\text{F$\\textbf{O}$X} & \\text{$\\textbf{T}$AR} \\\\\n\\text{FOX} & \\text{FO$\\textbf{X}$} & \\text{R$\\textbf{U}$G} & \\text{$\\textbf{T}$EA} \\\\\n\\end{array}",
            "title": "8.3-1"
        },
        {
            "location": "/Chap08/8.3/#83-2",
            "text": "Which of the following sorting algorithms are stable: insertion sort, merge sort, heapsort, and quicksort? Give a simple scheme that makes any sorting algorithm stable. How much additional time and space does your scheme entail?   Insertion sort is stable. When inserting $A[j]$\u008d into the sorted sequence $A[1..j - 1]$, we do it the following way: compare $A[j]$\u008d to $A[i]$\u008d, starting with $i = j - 1$ and going down to $i = 1$. Continue at long as $A[j] < A[i]$\u008d.  Merge sort as defined is stable, because when two elements compared are equal, the tie is broken by taking the element from array $L$ which keeps them in the original order.  Heapsort and quicksort are not stable.  One scheme that makes a sorting algorithm stable is to store the index of each element (the element's place in the original ordering) with the element. When comparing two elements, compare them by their values and break ties by their indices.  Additional space requirements: For $n$ elements, their indices are $1 \\ldots n$. Each can be written in $\\lg n$ bits, so together they take $O(n\\lg n)$ additional space.  Additional time requirements: The worst case is when all elements are equal. The asymptotic time does not change because we add a constant amount of work to each comparison.",
            "title": "8.3-2"
        },
        {
            "location": "/Chap08/8.3/#83-3",
            "text": "Use induction to prove that radix sort works. Where does your proof need the assumption that the intermediate sort is stable?   Basis:  If $d = 1$, there's only one digit, so sorting on that digit sorts the array.   Inductive step:  Assuming that radix sort works for $d - 1$ digits, we'll show that it works for $d$ digits.  Radix sort sorts separately on each digit, starting from digit $1$. Thus, radix sort of $d$ digits, which sorts on digits $1, \\ldots, d$ is equivalent to radix sort of the low-order $d - 1$ digits followed by a sort on digit $d$. By our induction hypothesis, the sort of the low-order $d - 1$ digits works, so just before the sort on digit $d$, the elements are in order according to their low-order $d - 1$ digits.  The sort on digit $d$ will order the elements by their $d$th digit. Consider two elements, $a$ and $b$, with dth digits $a_d$ and $b_d$ respectively.   If $a_d < b_d$, the sort will put $a$ before $b$, which is correct, since $a < b$ regardless of the low-order digits.  If $a_d > b_d$, the sort will put $a$ after $b$, which is correct, since $a > b$ regardless of the low-order digits.  If $a_d = b_d$, the sort will leave $a$ and $b$ in the same order they were in, because it is stable. But that order is already correct, since the correct order of $a$ and $b$ is determined by the low-order $d - 1$ digits when their dth digits are equal, and the elements are already sorted by their low-order $d - 1$ digits.   If the intermediate sort were not stable, it might rearrange elements whose $d$th digits were equal\u2014elements that  were  in the right order after the sort on their lower-order digits.",
            "title": "8.3-3"
        },
        {
            "location": "/Chap08/8.3/#83-4",
            "text": "Show how to sort $n$ integers in the range $0$ to $n^3 - 1$ in $O(n)$ time.   Treat the numbers as $3$-digit numbers in radix $n$. Each digit ranges from $0$ to $n - 1$. Sort these $3$-digit numbers with radix sort.  There are 3 calls to counting sort, each taking $\\Theta(n + n) = \\Theta(n)$ time, so that the total time is $\\Theta(n)$.",
            "title": "8.3-4"
        },
        {
            "location": "/Chap08/8.3/#83-5-star",
            "text": "In the first card-sorting algorithm in this section, exactly how many sorting passes are needed to sort $d$-digit decimal numbers in the worst case? How many piles of cards would an operator need to keep track of in the worst case?    Since a pass consists of one iteration of the loop on line 1\u20132, only $d$ passes are needed.   Since each of the digits can be one of ten decimal numbers, the most number of piles that would be needed to be kept track of is $10$.",
            "title": "8.3-5 $\\star$"
        },
        {
            "location": "/Chap08/8.4/",
            "text": "8.4-1\n\n\n\n\nUsing Figure 8.4 as a model, illustrate the operation of $\\text{BUCKET-SORT}$ on the array $A = \\langle .79, .13, .16, .64, .39, .20, .89, .53, .71, .42 \\rangle$.\n\n\n\n\n\\begin{array}{cl}\nR &         \\\\\n\\hline\n0 &         \\\\\n1 & .13 .16 \\\\\n2 & .20     \\\\\n3 & .39     \\\\\n4 & .42     \\\\\n5 & .53     \\\\\n6 & .64     \\\\\n7 &         \\\\\n8 & .79 .71 \\\\\n9 & .89     \\\\\n\\end{array}\n\n\n$$A = \\langle.13, .16, .20, .39, .42, .53, .64, .71, .79, .89 \\rangle.$$\n\n\n8.4-2\n\n\n\n\nExplain why the worst-case running time for bucket sort is $\\Theta(n^2)$. What simple change to the algorithm preserves its linear average-case running time and makes its worst-case running time $O(n\\lg n)$?\n\n\n\n\nThe worst-case running time for the bucket-sort algorithm occurs when the assumption of uniformly distributed input does not hold. If, for example, all the input ends up in the first bucket, then in the insertion sort phase it needs to sort all the input, which takes $O(n^2)$.\n\n\nA simple change that will preserve the linear expected running time and make the worst-case running time $O(n\\lg n)$ is to use a worst-case $O(n\\lg n)$-time algorithm, such as merge sort, instead of insertion sort when sorting the buckets.\n\n\n8.4-3\n\n\n\n\nLet $X$ be a random variable that is equal to the number of heads in two flips of a fair coin. What is $\\text E[X^2]$? What is $\\text E^2[X]$?\n\n\n\n\n\\begin{align}\n  \\text E[X] & = 2 \\cdot \\frac{1}{4} + 1 \\cdot \\frac{1}{2} + 0 \\cdot \\frac{1}{4} = 1 \\\\\n\\text E[X^2] & = 4 \\cdot \\frac{1}{4} + 1 \\cdot \\frac{1}{2} + 0 \\cdot \\frac{1}{4} = 1.5 \\\\\n\\text E^2[X] & = \\text E[X] \\cdot \\text E[X] = 1 \\cdot 1 = 1.\n\\end{align}\n\n\n8.4-4 $\\star$\n\n\n\n\nWe are given $n$ points in the unit circle, $p_i = (x_i, y_i)$, such that $0 < x_i^2 + y_i^2 \\le 1$ for $i = 1, 2, \\ldots, n$. Suppose that the points are uniformly distributed; that is, the probability of finding a point in any region of the circle is proportional to the area of that region. Design an algorithm with an average-case running time of $\\Theta(n)$ to sort the $n$ points by their distances $d_i = \\sqrt{x_i^2 + y_i^2}$ from the origin. ($\\textit{Hint:}$ Design the bucket sizes in $\\text{BUCKET-SORT}$ to re\ufb02ect the uniform distribution of the points in the unit circle.)\n\n\n\n\nBucket sort by radius,\n\n\n\\begin{align}\n\\pi r_i^2 & = \\frac{i}{10} \\cdot \\pi 1^2 \\\\\nr_i & = \\sqrt{\\frac{i}{10}}.\n\\end{align}\n\n\n8.4-5 $\\star$\n\n\n\n\nA \nprobability distribution function\n $P(x)$ for a random variable $X$ is defined by $P(x) = \\Pr\\{X \\le x\\}$. Suppose that we draw a list of $n$ random variables $X_1, X_2, \\ldots, X_n$ from a continuous probability distribution function $P$ that is computable in $O(1)$ time. Give an algorithm that sorts these numbers in linear average-case time.\n\n\n\n\nBucket sort by $p_i$,\n\n\n$$P(p_i) = \\frac{i}{10}.$$",
            "title": "8.4 Bucket sort"
        },
        {
            "location": "/Chap08/8.4/#84-1",
            "text": "Using Figure 8.4 as a model, illustrate the operation of $\\text{BUCKET-SORT}$ on the array $A = \\langle .79, .13, .16, .64, .39, .20, .89, .53, .71, .42 \\rangle$.   \\begin{array}{cl}\nR &         \\\\\n\\hline\n0 &         \\\\\n1 & .13 .16 \\\\\n2 & .20     \\\\\n3 & .39     \\\\\n4 & .42     \\\\\n5 & .53     \\\\\n6 & .64     \\\\\n7 &         \\\\\n8 & .79 .71 \\\\\n9 & .89     \\\\\n\\end{array}  $$A = \\langle.13, .16, .20, .39, .42, .53, .64, .71, .79, .89 \\rangle.$$",
            "title": "8.4-1"
        },
        {
            "location": "/Chap08/8.4/#84-2",
            "text": "Explain why the worst-case running time for bucket sort is $\\Theta(n^2)$. What simple change to the algorithm preserves its linear average-case running time and makes its worst-case running time $O(n\\lg n)$?   The worst-case running time for the bucket-sort algorithm occurs when the assumption of uniformly distributed input does not hold. If, for example, all the input ends up in the first bucket, then in the insertion sort phase it needs to sort all the input, which takes $O(n^2)$.  A simple change that will preserve the linear expected running time and make the worst-case running time $O(n\\lg n)$ is to use a worst-case $O(n\\lg n)$-time algorithm, such as merge sort, instead of insertion sort when sorting the buckets.",
            "title": "8.4-2"
        },
        {
            "location": "/Chap08/8.4/#84-3",
            "text": "Let $X$ be a random variable that is equal to the number of heads in two flips of a fair coin. What is $\\text E[X^2]$? What is $\\text E^2[X]$?   \\begin{align}\n  \\text E[X] & = 2 \\cdot \\frac{1}{4} + 1 \\cdot \\frac{1}{2} + 0 \\cdot \\frac{1}{4} = 1 \\\\\n\\text E[X^2] & = 4 \\cdot \\frac{1}{4} + 1 \\cdot \\frac{1}{2} + 0 \\cdot \\frac{1}{4} = 1.5 \\\\\n\\text E^2[X] & = \\text E[X] \\cdot \\text E[X] = 1 \\cdot 1 = 1.\n\\end{align}",
            "title": "8.4-3"
        },
        {
            "location": "/Chap08/8.4/#84-4-star",
            "text": "We are given $n$ points in the unit circle, $p_i = (x_i, y_i)$, such that $0 < x_i^2 + y_i^2 \\le 1$ for $i = 1, 2, \\ldots, n$. Suppose that the points are uniformly distributed; that is, the probability of finding a point in any region of the circle is proportional to the area of that region. Design an algorithm with an average-case running time of $\\Theta(n)$ to sort the $n$ points by their distances $d_i = \\sqrt{x_i^2 + y_i^2}$ from the origin. ($\\textit{Hint:}$ Design the bucket sizes in $\\text{BUCKET-SORT}$ to re\ufb02ect the uniform distribution of the points in the unit circle.)   Bucket sort by radius,  \\begin{align}\n\\pi r_i^2 & = \\frac{i}{10} \\cdot \\pi 1^2 \\\\\nr_i & = \\sqrt{\\frac{i}{10}}.\n\\end{align}",
            "title": "8.4-4 $\\star$"
        },
        {
            "location": "/Chap08/8.4/#84-5-star",
            "text": "A  probability distribution function  $P(x)$ for a random variable $X$ is defined by $P(x) = \\Pr\\{X \\le x\\}$. Suppose that we draw a list of $n$ random variables $X_1, X_2, \\ldots, X_n$ from a continuous probability distribution function $P$ that is computable in $O(1)$ time. Give an algorithm that sorts these numbers in linear average-case time.   Bucket sort by $p_i$,  $$P(p_i) = \\frac{i}{10}.$$",
            "title": "8.4-5 $\\star$"
        },
        {
            "location": "/Chap08/Problems/8-1/",
            "text": "In this problem, we prove a probabilistic $\\Omega(n\\lg n)$ lower bound on the running time of any deterministic or randomized comparison sort on $n$ distinct input elements. We begin by examining a deterministic comparison sort $A$ with decision tree $T_A$. We assume that every permutation of $A$'s inputs is equally likely.\n\n\na.\n Suppose that each leaf of $T_A$ is labeled with the probability that it is reached given a random input. Prove that exactly $n!$ leaves are labeled $1 / n!$ and that the rest are labeled $0$.\n\n\nb.\n Let $D(T)$ denote the external path length of a decision tree $T$; that is, $D(T)$ is the sum of the depths of all the leaves of $T$. Let $T$ be a decision tree with $k > 1$ leaves, and let $LT$ and $RT$ be the left and right subtrees of $T$. Show that $D(T) = D(LT) + D(RT)+k$.\n\n\nc.\n Let $d(k)$ be the minimum value of $D(T)$ over all decision trees $T$ with $k > 1$ leaves. Show that $d(k) = \\min _{1 \\le i \\le k - 1}{d(i) + d(k - i) + k}$. ($\\textit{Hint:}$ Consider a decision tree $T$ with $k$ leaves that achieves the minimum. Let $i_0$ be the number of leaves in $LT$ and $k - i_0$ the number of leaves in $RT$.)\n\n\nd.\n Prove that for a given value of $k > 1$ and $i$ in the range $1 \\le i \\le k - 1$, the function $i\\lg i + (k - i) \\lg(k - i)$ is minimized at $i = k / 2$. Conclude that $d(k) = \\Omega(k\\lg k)$.\n\n\ne.\n Prove that $D(T_A) = \\Omega(n!\\lg(n!))$, and conclude that the average-case time to sort $n$ elements is $\\Omega(n\\lg n)$.\n\n\nNow, consider a \nrandomized\n comparison sort $B$. We can extend the decision-tree model to handle randomization by incorporating two kinds of nodes: ordinary comparison nodes and ''randomization'' nodes. A randomization node models a random choice of the form $\\text{RANDOM}(1, r)$ made by algorithm $B$; the node has $r$ children, each of which is equally likely to be chosen during an execution of the algorithm.\n\n\nf.\n Show that for any randomized comparison sort $B$, there exists a deterministic comparison sort $A$ whose expected number of comparisons is no more than those made by $B$.\n\n\n\n\na.\n For a comparison algorithm $A$ to sort, no two input permutations can reach the same leaf of the decision tree, so there must be at least $n!$ leaves reached in $T_A$, one for each possible input permutation. Since $A$ is a deterministic algorithm, it must always reach the same leaf when given a particular permutation as input, so at most $n!$ leaves are reached (one for each permutation). Therefore exactly $n!$ leaves are reached, one for each input permutation.\n\n\nThese $n!$ leaves will each have probability $1 / n!$, since each of the $n!$ possible permutations is the input with the probability $1 / n!$. Any remaining leaves will have probability $0$, since they are not reached for any input.\n\n\nWithout loss of generality, we can assume for the rest of this problem that paths leading only to $0$-probability leaves aren't in the tree, since they cannot affect the running time of the sort. That is, we can assume that $T_A$ consists of only the $n!$ leaves labeled $1 / n!$ and their ancestors.\n\n\nb.\n If $k > 1$, then the root of $T$ is not a leaf. This implies that all of $T$'s leaves are leaves in $LT$ and $RT$. Since every leaf at depth $h$ in $LT$ or $RT$ has depth $h + 1$ in $T$, $D(T)$ must be the sum of $D(LT)$, $D(RT)$, and $k$, the total number of leaves. To prove this last assertion, let $d_T(x) =$ depth of node $x$ in tree $T$. Then,\n\n\n\\begin{align}\nD(T) & = \\sum_{x \\in T} d_T(x) \\\\\n     & = \\sum_{x \\in LT} d_T(x) + \\sum_{x \\in RT} d_T(x) \\\\\n     & = \\sum_{x \\in LT} (d_{LT}(x) + 1) + \\sum_{x \\in RT} (d_{RT}(x) + 1) \\\\\n     & = \\sum_{x \\in LT} d_{LT}(x) + \\sum_{x \\in RT} d_{RT}(x) + \\sum_{x \\in T} 1 \\\\\n     & = D(LT) + D(RT) + k. \\\\\n\\end{align}\n\n\nc.\n To show that $d(k) = \\min_{1\\le i\\le k - 1}{d(i) + d(k - i) + k}$ we will show separately that\n\n\n\\begin{align}\n            & d(k) \\le \\min_{1\\le i\\le k - 1}{d(i) + d(k - i) + k} \\\\\n\\text{and } & d(k) \\ge \\min_{1\\le i\\le k - 1}{d(i) + d(k - i) + k}.\n\\end{align}\n\n\n\n\nTo show that $d(k) \\le \\min_{1\\le i\\le k - 1}{d(i) + d(k - i) + k}$, we need only show that $d(k) \\le d(i) + d(k - i) + k$, for $i = 1, 2, \\ldots, k - 1$. For any $i$ from $1$ to $k - 1$ we can find trees $RT$ with $i$ leaves and $LT$ with $k - i$ leaves such that $D(RT) = d(i)$ and $D(LT) = d(k - i)$. Construct $T$ such that $RT$ and $LT$ are the right and left subtrees of $T$'s root respectively. Then\n\n\n\n\n\\begin{align}\nd(k) & \\le D(T)                 & \\text{(by definition of $d$ as min $D(T)$ value)} \\\\\n     & =   D(RT) + D(LT) + k    & \\text{(by part (b))} \\\\\n     & =   d(i) + d(k - i) + k. & \\text{(by choice of $RT$ and $LT$)}\n\\end{align}\n\n\n\n\nTo show that $d(k) \\ge \\min_{1\\le i\\le k - 1}{d(i) + d(k - i) + d}$, we need only show that $d(k) \\ge d(i) + d(k - i) + k$, for some $i$ in ${1, 2, \\ldots, k - 1}$. Take the tree $T$ with $k$ leaves such that $D(T) = d(k)$, let $RT$ and $LT$ be $T$'s right and left subtree, respectively, and let $i$ be the number of leaves in $RT$. Then $k - i$ is the number of leaves in $LT$ and\n\n\n\n\n\\begin{align}\nd(k) & =   D(T)                 & \\text{(by choice of $T$)} \\\\\n     & =   D(RT) + D(LT) + k    & \\text{(by part (b))} \\\\\n     & \\ge d(i) + d(k - i) + k. & \\text{(by definition of $d$ as min $D(T)$ value)}\n\\end{align}\n\n\nNeither $i$ nor $k - i$ can be $0$ (and hence $1 \\le i \\le k - 1$), since if one of these were $0$, either $RT$ or $LT$ would contain all $k$ leaves of $T$, and that $k$-leaf subtree would have a $D$ equal to $D(T) - k$ (by part (b)), contradicting the choice of $T$ as the $k$-leaf tree with the minimum $D$.\n\n\nd.\n Let $f_k(i) = i\\lg i + (k - i)\\lg(k - i)$. To find the value of $i$ that minimizes $f_k$, find the $i$ for which the derivative of $f_k$ with respect to $i$ is $0$:\n\n\n\\begin{align}\nf_k'(i) & = \\frac{d}{di} \\Big(\\frac{i\\ln i + (k - i)\\ln(k - i)}{\\ln 2}\\Big) \\\\\n        & = \\frac{\\ln i + 1 - \\ln(k - i) - 1}{\\ln 2} \\\\\n        & = \\frac{\\ln i - \\ln(k - i)}{\\ln 2}\n\\end{align}\n\n\nis $0$ at $i = k / 2$. To verify this is indeed a minimum (not a maximum), check that the second derivative of $f_k$ is positive at $i = k / 2$:\n\n\n\\begin{align}\nf_k''(i) & = \\frac{d}{di}\\Big(\\frac{\\ln i - \\ln(k - i)}{\\ln 2}\\Big) \\\\\n         & = \\frac{1}{\\ln 2}\\Big(\\frac{1}{i} + \\frac{1}{k - i}\\Big).\n\\end{align}\n\\begin{align}\nf_k''(k / 2) & = \\frac{1}{\\ln 2}\\Big(\\frac{2}{k} + \\frac{2}{k}\\Big) \\\\\n           & = \\frac{1}{\\ln 2} \\cdot \\frac{4}{k} \\\\\n           & > 0 & \\text{since $k > 1$}.\n\\end{align}\n\n\nNow we use substitution to prove $d(k) = \\Omega(k\\lg k)$. The base case of the induction is satisfied because $d(1) \\ge 0 = c \\cdot 1 \\cdot \\lg 1$ for any constant $c$. For the inductive step we assume that $d(i) \\ge ci\\lg i$ for $1 \\le i \\le k - 1$, where $c$ is some constant to be determined.\n\n\n\\begin{align}\nd(k) & =   \\min_{1\\le i\\le k - 1} {d(i) + d(k - i) + k} \\\\\n     & \\ge \\min_{1\\le i\\le k - 1} {c(i\\lg i + (k - i)\\lg(k - i)) + k} \\\\\n     & =   \\min_{1\\le i\\le k - 1} {cf_k(i) + k} \\\\\n     & =   c\\Big(\\frac{k}{2}\\lg\\frac{k}{2}\\Big(k - \\frac{k}{2}\\Big)\\lg\\Big(k - \\frac{k}{2}\\Big)\\Big) + k \\\\\n     & =   ck\\lg\\Big(\\frac{k}{2}\\Big) + k \\\\\n     & =   c(k\\lg k - k) + k \\\\\n     & =   ck\\lg k + (k - ck) \\\\\n     & \\ge ck\\lg k & \\text{if $c \\le 1$},\n\\end{align}\n\n\nand so $d(k) = \\Omega(k\\lg k)$.\n\n\ne.\n Using the result of part (d) and the fact that $T_A$ (as modified in our solution to part (a)) has $n!$ leaves, we can conclude that\n\n\n$$D(T_A) \\ge d(n!) = \\Omega(n!\\lg(n!)).$$\n\n\n$D(T_A)$ is the sum of the decision-tree path lengths for sorting all input permutations, and the path lengths are proportional to the run time. Since the $n!$ permutations have equal probability $1 / n!$, the expected time to sort $n$ random elements (1 input permutation) is the total time for all permutations divided by $n!$:\n\n\n$$\\frac{\\Omega(n!\\lg(n!))}{n!} = \\Omega(\\lg(n!)) = \\Omega(n\\lg n).$$\n\n\nf.\n We will show how to modify a randomized decision tree (algorithm) to define a deterministic decision tree (algorithm) that is at least as good as the randomized one in terms of the average number of comparisons.\n\n\nAt each randomized node, pick the child with the smallest subtree (the subtree with the smallest average number of comparisons on a path to a leaf). Delete all the other children of the randomized node and splice out the randomized node itself.\n\n\nThe deterministic algorithm corresponding to this modified tree still works, because the randomized algorithm worked no matter which path was taken from each randomized node.\n\n\nThe average number of comparisons for the modified algorithm is no larger than the average number for the original randomized tree, since we discarded the higher-average subtrees in each case. In particular, each time we splice out a randomized node, we leave the overall average less than or equal to what it was, because\n\n\n\n\nthe same set of input permutations reaches the modified subtree as before, but those inputs are handled in less than or equal to average time than before, and \n\n\nthe rest of the tree is unmodified.\n\n\n\n\nThe randomized algorithm thus takes at least as much time on average as the corresponding deterministic one. (We've shown that the expected running time for a deterministic comparison sort is \u007f$\\Omega(n\\lg n)$, hence the expected time for a randomized comparison sort is also $\\Omega(n\\lg n)$).",
            "title": "8-1 Probabilistic lower bounds on comparison sorting"
        },
        {
            "location": "/Chap08/Problems/8-2/",
            "text": "Suppose that we have an array of $n$ data records to sort and that the key of each record has the value $0$ or $1$. An algorithm for sorting such a set of records might possess some subset of the following three desirable characteristics:\n\n\n\n\nThe algorithm runs in $O(n)$ time.\n\n\nThe algorithm is stable.\n\n\nThe algorithm sorts in place, using no more than a constant amount of storage space in addition to the original array.\n\n\n\n\na.\n Give an algorithm that satisfies criteria 1 and 2 above.\n\n\nb.\n Give an algorithm that satisfies criteria 1 and 3 above.\n\n\nc.\n Give an algorithm that satisfies criteria 2 and 3 above.\n\n\nd.\n Can you use any of your sorting algorithms from parts (a)\u2013(c) as the sorting method used in line 2 of $\\text{RADIX-SORT}$, so that $\\text{RADIX-SORT}$ sorts $n$ records with $b$-bit keys in $O(bn)$ time? Explain how or why not.\n\n\ne.\n Suppose that the $n$ records have keys in the range from $1$ to $k$. Show how to modify counting sort so that it sorts the records in place in $O(n + k)$ time. You may use $O(k)$ storage outside the input array. Is your algorithm stable? ($\\textit{Hint:}$ How would you do it for $k = 3$?)\n\n\n\n\na.\n Counting-Sort.\n\n\nb.\n Quicksort-Partition.\n\n\nc.\n Insertion-Sort.\n\n\nd.\n (a) Yes. (b) No. (c) No.\n\n\ne.\n Using $O(k)$ outside the input-arr.\n\n\nCOUNTING\n-\nSORT\n(\nA\n,\n \nk\n)\n\n    \nlet\n \nC\n[\n0.\n.\nk\n]\n \nbe\n \na\n \nnew\n \narray\n\n    \nfor\n \ni\n \n=\n \n0\n \nto\n \nk\n\n        \nC\n[\ni\n]\n \n=\n \n0\n\n    \nfor\n \ni\n \n=\n \n1\n \nto\n \nA\n.\nlength\n\n        \nC\n[\nA\n[\ni\n]]\n \n=\n \nC\n[\nA\n[\ni\n]]\n \n+\n \n1\n    \n// C[i] now contains the number of elements equal to i\n\n    \np\n \n=\n \n0\n\n    \nfor\n \ni\n \n=\n \n0\n \nto\n \nk\n\n        \nfor\n \nj\n \n=\n \n1\n \nto\n \nC\n[\ni\n]\n\n            \np\n \n=\n \np\n \n+\n \n1\n\n            \nA\n[\np\n]\n \n=\n \ni\n\n\n\n\n\nNot stable, in place, in $O(n + k)$.",
            "title": "8-2 Sorting in place in linear time"
        },
        {
            "location": "/Chap08/Problems/8-3/",
            "text": "a.\n You are given an array of integers, where different integers may have different numbers of digits, but the total number of digits over \nall\n the integers in the array is $n$. Show how to sort the array in $O(n)$ time.\n\n\nb.\n You are given an array of strings, where different strings may have different numbers of characters, but the total number of characters over all the strings is $n$. Show how to sort the strings in $O(n)$ time.\n(Note that the desired order here is the standard alphabetical order; for example, $a < ab < b$.)\n\n\n\n\na.\n The usual, unadorned radix sort algorithm will not solve this problem in the required time bound. The number of passes, $d$, would have to be the number of digits in the largest integer. Suppose that there are $m$ integers; we always have $m \\le n$. In the worst case, we would have one integer with $n / 2$ digits and $n / 2$ integers with one digit each. We assume that the range of a single digit is constant. Therefore, we would have $d = n / 2$ and $m = n / 2 + 1$, and so the running time would be $\\Theta(dm) = \\Theta(n^2)$.\n\n\nLet us assume without loss of generality that all the integers are positive and have no leading zeros. (If there are negative integers or $0$, deal with the positive numbers, negative numbers, and $0$ separately.) Under this assumption, we can observe that integers with more digits are always greater than integers with fewer digits. Thus, we can first sort the integers by number of digits (using counting sort), and then use radix sort to sort each group of integers with the same length. Noting that each integer has between $1$ and $n$ digits, let $m_i$ be the number of integers with $i$ digits, for $i = 1, 2, \\ldots, n$. Since there are $n$ digits altogether, we have $\\sum_{i = 1}^n i \\cdot m_i = n$.\n\n\nIt takes $O(n)$ time to compute how many digits all the integers have and, once the numbers of digits have been computed, it takes $O(m + n) = O(n)$ time to group the integers by number of digits. To sort the group with $m_i$ digits by radix sort takes $\\Theta(i \\cdot m_i)$ time. The time to sort all groups, therefore, is\n\n\n\\begin{align}\n\\sum_{i = 1}^n \\Theta(i\\cdot m_i)\n    & = \\Theta\\Bigg(\\sum_{i = 1}^n i \\cdot m_i\\Bigg) \\\\\n    & = \\Theta(n).\n\\end{align}\n\n\nb.\n One way to solve this problem is by a radix sort from right to left. Since the strings have varying lengths, however, we have to pad out all strings that are shorter than the longest string. The padding is on the right end of the string, and it's with a special character that is lexicographically less than any other character (e.g., in C, the character '\\0' with ASCII value $0$). Of course, we don't have to actually change any string; if we want to know the $j$th character of a string whose length is $k$, then if $j > k$, the $j$th character is the pad character.\n\n\nUnfortunately, this scheme does not always run in the required time bound. Suppose that there are $m$ strings and that the longest string has $d$ characters. In the worst case, one string has $n / 2$ characters and, before padding, $n / 2$ strings have one character each. As in part (a), we would have $d = n / 2$ and $m = n / 2 + 1$. We still have to examine the pad characters in each pass of radix sort, even if we don't actually create them in the strings. Assuming that the range of a single character is constant, the running time of radix sort would be $\\Theta(dm) = \\Theta(n^2)$.\n\n\nTo solve the problem in $O(n)$ time, we use the property that, if the first letter of string $x$ is lexicographically less that the first letter of string $y$, then $x$ is lexicographically less than $y$, regardless of the lengths of the two strings. We take advantage of this property by sorting the strings on the first letter, using counting sort. We take an empty string as a special case and put it first. We gather together all strings with the same first letter as a group. Then we recurse, within each group, based on each string with the first letter removed.\n\n\nThe correctness of this algorithm is straightforward. Analyzing the running time is a bit trickier. Let us count the number of times that each string is sorted by a call of counting sort. Suppose that the ith string, $s_i$, has length $l_i$. Then $s_i$ is sorted by at most $l_i + 1$ counting sorts. (The ''+1'' is because it may have to be sorted as an empty string at some point; for example, ab and a end up in the same group in the first pass and are then ordered based on b and the empty string in the second pass. The string a is sorted its length, $1$, time plus one more time.) A call of counting sort on t strings takes $\\Theta(t)$ time (remembering that the number of different characters on which we are sorting is a constant.) Thus, the total time for all calls of counting sort is\n\n\n\\begin{align}\nO\\Bigg(\\sum_{i = 1}^m (l_i + 1)\\Bigg)\n    & = O\\Bigg(\\sum_{i = 1}^m (l_i + m)\\Bigg) \\\\\n    & = O(n + m) \\\\\n    & = O(n),\n\\end{align}\n\n\nwhere the second line follows from $\\sum_{i = 1}^m l_i = n$, and the last line is because $m \\le n$.",
            "title": "8-3 Sorting variable-length items"
        },
        {
            "location": "/Chap08/Problems/8-4/",
            "text": "Suppose that you are given $n$ red and $n$ blue water jugs, all of different shapes and sizes. All red jugs hold different amounts of water, as do the blue ones. Moreover, for every red jug, there is a blue jug that holds the same amount of water, and vice versa.\n\n\nYour task is to find a grouping of the jugs into pairs of red and blue jugs that hold the same amount of water. To do so, you may perform the following operation: pick a pair of jugs in which one is red and one is blue, fill the red jug with water, and then pour the water into the blue jug. This operation will tell you whether the red or the blue jug can hold more water, or that they have the same volume. Assume that such a comparison takes one time unit. Your goal is to find an algorithm that makes a minimum number of comparisons to determine the grouping. Remember that you may not directly compare two red jugs or two blue jugs.\n\n\na.\n Describe a deterministic algorithm that uses $\\Theta(n^2)$ comparisons to group the jugs into pairs.\n\n\nb.\n Prove a lower bound of $\\Omega(n\\lg n)$ for the number of comparisons that an algorithm solving this problem must make.\n\n\nc.\n Give a randomized algorithm whose expected number of comparisons is $O(n\\lg n)$, and prove that this bound is correct. What is the worst-case number of comparisons for your algorithm?\n\n\n\n\na.\n Compare each red jug with each blue jug. Since there are $n$ red jugs and $n$ blue jugs, that will take $\\Theta(n^2)$ comparisons in the worst case.\n\n\nb.\n To solve the problem, an algorithm has to perform a series of comparisons until it has enough information to determine the matching. We can view the computation of the algorithm in terms of a decision tree. Every internal node is labeled with two jugs (one red, one blue) which we compare, and has three outgoing edges (red jug smaller, same size, or larger than the blue jug). The leaves are labeled with a unique matching of jugs.\n\n\nThe height of the decision tree is equal to the worst-case number of comparisons the algorithm has to make to determine the matching. To bound that size, let us first compute the number of possible matchings for n red and n blue jugs.\n\n\nIf we label the red jugs from $1$ to $n$ and we also label the blue jugs from $1$ to $n$ before starting the comparisons, every outcome of the algorithm can be represented as a set\n\n\n$$\\text{{$i, \\pi(i): 1 \\le i \\le n$ and $\\pi$ is a permutation on {$1, \\ldots, n$}}},$$\n\n\nwhich contains the pairs of red jugs (first component) and blue jugs (second component) that are matched up. Since every permutation $\\pi$ corresponds to a different outcome, there must be exactly $n!$ different results.\n\n\nNow we can bound the height $h$ of our decision tree. Every tree with a branching factor of $3$ (every inner node has at most three children) has at most $3^h$ leaves. Since the decison tree must have at least $n!$ children, it follows that\n\n\n$$3^h \\ge n! \\ge (n / e)^n \\Rightarrow h \\ge n\\log_3 n - n\\log_3 e = \\Omega(n\\lg n).$$\n\n\nSo any algorithm solving the problem must use $\\Omega(n\\lg n)$ comparisons.\n\n\nc.\n Assume that the red jugs are labeled with numbers $1, 2, \\ldots, n$ and so are the blue jugs. The numbers are arbitrary and do not correspond to the volumes of jugs, but are just used to refer to the jugs in the algorithm description. Moreover, the output of the algorithm will consist of $n$ distinct pairs $(i, j)$, where the red jug $i$ and the blue jug $j$ have the same volume.\n\n\nThe procedure $\\text{MATCH-JUGS}$ takes as input two sets representing jugs to be matched: $R \\subseteq \\{1, \\ldots, n\\}$, representing red jugs, and $B \\subseteq \\{1, \\ldots, n\\}$, representing blue jugs. We will call the procedure only with inputs that can be matched; one necessary condition is that $|R| = |B|$.\n\n\nMATCH\n-\nJUGS\n(\nR\n,\n \nB\n)\n\n    \nif\n \n|\nR\n|\n \n==\n \n0\n         \n// sets are empty\n\n        \nreturn\n\n    \nif\n \n|\nR\n|\n \n==\n \n1\n         \n// sets contain just one jug each\n\n        \nlet\n \nR\n \n=\n \n{\nr\n}\n \nand\n \nB\n \n=\n \n{\nb\n}\n\n        \noutput\n \n\"(r, b)\"\n\n        \nreturn\n\n    \nelse\n \nr\n \n=\n \na\n \nrandomly\n \nchosen\n \njug\n \nin\n \nR\n\n        \ncompare\n \nr\n \nto\n \nevery\n \njug\n \nof\n \nB\n\n        \nB\n<\n \n=\n \nthe\n \nset\n \nof\n \njugs\n \nin\n \nB\n \nthat\n \nare\n \nsmaller\n \nthan\n \nr\n \n        \nB\n>\n \n=\n \nthe\n \nset\n \nof\n \njugs\n \nin\n \nB\n \nthat\n \nare\n \nlarger\n \nthan\n \nr\n \n        \nb\n \n=\n \nthe\n \none\n \njug\n \nin\n \nB\n \nwith\n \nthe\n \nsame\n \nsize\n \nas\n \nr\n \n        \ncompare\n \nb\n \nto\n \nevery\n \njug\n \nof\n \nR\n \n-\n \n{\nr\n}\n\n        \nR\n<\n \n=\n \nthe\n \nset\n \nof\n \njugs\n \nin\n \nR\n \nthat\n \nare\n \nsmaller\n \nthan\n \nb\n\n        \nR\n>\n \n=\n \nthe\n \nset\n \nof\n \njugs\n \nin\n \nR\n \nthat\n \nare\n \nlarger\n \nthan\n \nb\n \n        \noutput\n \n\"(r, b)\"\n\n        \nMATCH\n-\nJUGS\n(\nR\n,\n \nB\n>\n)\n\n\n\n\n\nCorrectness can be seen as follows (remember that $|R| = |B|$ in each call). Once we pick $r$ randomly from $R$, there will be a matching among the jugs in volume smaller than $r$ (which are in the sets $R_<$ and $B_<$), and likewise between the jugs larger than $r$ (which are in $R_>$ and $B_>$). Termination is also easy to see: since $|R_<| + |R_>| < |R|$ in every recursive step, the size of the first parameter reduces with every recursive call. It eventually must reach $0$ or $1$, in which case the recursion terminates.\n\n\nWhat about the running time? The analysis of the expected number of comparisons is similar to that of the quicksort algorithm in Section 7.4.2. Let us order the jugs as $r_1, \\ldots, r_n$ and $b_1, \\ldots,b_n$ where $r_i < r_{i + 1}$ and $b_i < b_{i + 1}$ for $i = 1, \\ldots, n$, and $r_i = b_i$. Our analysis uses indicator random variables\n\n\n$$X_{ij} = \\text I\\{\\text{red jug $r_i$ is compared to blue jug $b_j$}\\}.$$\n\n\nAs in quicksort, a given pair $r_i$ and $b_j$ is compared at most once. When we compare $r_i$ to every jug in $B$, jug $r_i$ will not be put in either $R_<$ or $R_>$. When we compare $b_i$ to every jug in $R - \\{r_i\\}$, jug $b_i$ is not put into either $B_<$ or $B_>$. The total number of comparisons is\n\n\n$$X = \\sum_{i = 1}^{n - 1}\\sum_{j = i + 1}^n X_{ij}.$$\n\n\nTo calculate the expected value of $X$, we follow the quicksort analysis to arrive at\n\n\n$$\\text E[X] = \\sum_{i = 1}^{n - 1}\\sum_{j = i + 1}^n \\Pr\\{r_i \\text{ is compared to } b_j\\}.$$\n\n\nAs in the quicksort analysis, once we choose a jug $r_k$ such that $r_i < r_k < b_j$, we will put $r_i$ in $R_<$ and $b_j$ in $R_>$, and so $r_i$ and $b_j$ will never be compared again. Let us denote $R_{ij} = \\{r_i, \\ldots, r_j\\}$. Then jugs $r_i$ and $b_j$ will be compared if and only if the first jug in $R_{ij}$ to be chosen is either $r_i$ or $r_j$.\n\n\nStill following the quicksort analysis, until a jug from $R_{ij}$ is chosen, the entire set $R_{ij}$ is together. Any jug in $R_{ij}$ is equally likely to be first one chosen. Since $|R_{ij}| = j - i + 1$, the probability of any given jug being the first one chosen in $R_{ij}$ is $1 / (j - i + 1)$. The remainder of the analysis is the same as the quicksort analysis, and we arrive at the solution of $O(n\\lg n)$ comparisons.\n\n\nJust like in quicksort, in the worst case we always choose the largest (or smallest) jug to partition the sets, which reduces the set sizes by only $1$. The running time then obeys the recurrence $T(n) = T(n - 1) + \\Theta(n)$, and the number of comparisons we make in the worst case is $T(n) = \\Theta(n^2)$.",
            "title": "8-4 Water jugs"
        },
        {
            "location": "/Chap08/Problems/8-5/",
            "text": "Suppose that, instead of sorting an array, we just require that the elements increase on average. More precisely, we call an $n$-element array $A$ \nk-sorted\n if, for all $i = 1, 2, \\ldots, n - k$, the following holds:\n\n\n$$\\frac{\\sum_{j = i}^{i + k - 1} A[j]}{k} \\le \\frac{\\sum_{j = i + 1}^{i + k} A[j]}{k}.$$\n\n\na.\n What does it mean for an array to be $1$-sorted?\n\n\nb.\n Give a permutation of the numbers $1, 2, \\ldots, 10$ that is $2$-sorted, but not sorted.\n\n\nc.\n Prove that an $n$-element array is $k$-sorted if and only if $A[i] \\le A[i + k]$ for all $i = 1, 2, \\ldots, n - k$.\n\n\nd.\n Give an algorithm that $k$-sorts an $n$-element array in $O(n\\lg (n / k))$ time.\n\n\nWe can also show a lower bound on the time to produce a $k$-sorted array, when $k$ is a constant.\n\n\ne.\n Show that we can sort a $k$-sorted array of length $n$ in $O(n\\lg k)$ time. ($\\textit{Hint:}$ Use the solution to Exercise 6.5-9.)\n\n\nf.\n Show that when $k$ is a constant, $k$-sorting an $n$-element array requires $\\Omega(n\\lg n)$ time. ($\\textit{Hint:}$ Use the solution to the previous part along with the lower bound on comparison sorts.)\n\n\n\n\na.\n Ordinary sorting\n\n\nb.\n $2, 1, 4, 3, 6, 5, 8, 7, 10, 9$.\n\n\nc.\n \n\n\n\\begin{align}\n\\frac{\\sum_{j = i}^{i + k - 1} A[j]}{k} & \\le \\frac{\\sum_{j = i + 1}^{i + k}A[j]}{k} \\\\\n          \\sum_{j = i}^{i + k- 1 } A[j] & \\le \\sum_{j = i + 1}^{i + k} A[j] \\\\\n                                   A[i] & \\le A[i + k].\n\\end{align}\n\n\nd.\n Shell-Sort, i.e., We split the $n$-element array into $k$ part. For each part, we use Insertion-Sort (or Quicksort) to sort in $O(n / k \\lg(n / k))$ time. Therefore, the total running time is $k \\cdot O(n / k \\lg(n / k)) = O(n\\lg(n / k))$.\n\n\ne.\n Using a heap, we can sort a $k$-sorted array of length $n$ in $O(n\\lg k)$ time. (The height of the heap is $\\lg k$, the solution to Exercise 6.5-9.)\n\n\nf.\n The lower bound of sorting each part is $\\Omega(n / k\\lg(n / k))$, so the total lower bound is $\\Theta(n\\lg n(/k))$. Since $k$ is a constant, therefore $\\Theta(n\\lg(n / k)) = \\Omega(n\\lg n)$.",
            "title": "8-5 Average sorting"
        },
        {
            "location": "/Chap08/Problems/8-6/",
            "text": "The problem of merging two sorted lists arises frequently. We have seen a procedure for it as the subroutine $\\text{MERGE}$ in Section 2.3.1. In this problem, we will prove a lower bound of $2n - 1$ on the worst-case number of comparisons required to merge two sorted lists, each containing $n$ items.\n\n\nFirst we will show a lower bound of $2n - o(n)$ comparisons by using a decision tree.\n\n\na.\n Given $2n$ numbers, compute the number of possible ways to divide them into two sorted lists, each with $n$ numbers.\n\n\nb.\n Using a decision tree and your answer to part (a), show that any algorithm that correctly merges two sorted lists must perform at least $2n - o(n)$ comparisons.\n\n\nNow we will show a slightly tighter $2n - 1$ bound.\n\n\nc.\n Show that if two elements are consecutive in the sorted order and from different lists, then they must be compared.\n\n\nd.\n Use your answer to the previous part to show a lower bound of $2n - 1$ comparisons for merging two sorted lists.\n\n\n\n\na.\n There are $\\binom{2n}{n}$ ways to divide $2n$ numbers into two sorted lists, each with $n$ numbers.\n\n\nb.\n Based on Exercise C.1.13, \n\n\n\\begin{align}\n\\binom{2n}{n} & \\le 2^h \\\\\n            h & \\ge \\lg\\frac{(2n)!}{(n!)^2} \\\\\n              & =   \\lg (2n!) - 2\\lg (n!) \\\\\n              & =   \\Theta(2n\\lg 2n) - 2\\Theta(n\\lg n) \\\\\n              & =   \\Theta(2n).\n\\end{align}\n\n\nc.\n We have to know the order of the two consecutive elements.\n\n\nd.\n Let list $A = 1, 3, 5, \\ldots, 2n - 1$ and $B = 2, 4, 6, \\ldots, 2n$. By part (c), we must compare $1$ with $2$, $2$ with $3$, $3$ with $4$, and so on up until we compare $2n - 1$ with $2n$. This amounts to a total of $2n - 1$ comparisons.",
            "title": "8-6 Lower bound on merging sorted lists"
        },
        {
            "location": "/Chap08/Problems/8-7/",
            "text": "A \ncompare-exchange\n operation on two array elements $A[i]$ and $A[j]$, where $i < j$, has the form\n\n\nCOMPARE\n-\nEXCHANGE\n(\nA\n,\n \ni\n,\n \nj\n)\n\n    \nif\n \nA\n[\ni\n]\n \n>\n \nA\n[\nj\n]\n\n        \nexchange\n \nA\n[\ni\n]\n \nwith\n \nA\n[\nj\n]\n\n\n\n\n\nAfter the compare-exchange operation, we know that $A[i] \\le A[j]$.\n\n\nAn \noblivious compare-exchange algorithm\n operates solely by a sequence of prespecified compare-exchange operations. The indices of the positions compared in the sequence must be determined in advance, and although they can depend on the number of elements being sorted, they cannot depend on the values being sorted, nor can they depend on the result of any prior compare-exchange operation. For example, here is insertion sort expressed as an oblivious compare-exchange algorithm:\n\n\nINSERTION\n-\nSORT\n(\nA\n)\n\n    \nfor\n \nj\n \n=\n \n2\n \nto\n \nA\n.\nlength\n\n        \nfor\n \ni\n \n=\n \nj\n \n-\n \n1\n \ndownto\n \n1\n\n            \nCOMPARE\n-\nEXCHANGE\n(\nA\n,\n \ni\n,\n \ni\n \n+\n \n1\n)\n\n\n\n\n\nThe \n$0$-$1$ sorting lemma\n provides a powerful way to prove that an oblivious compare-exchange algorithm produces a sorted result. It states that if an oblivious compare-exchange algorithm correctly sorts all input sequences consisting of only $0$s and $1$s, then it correctly sorts all inputs containing arbitrary values.\n\n\nYou will prove the $0$-$1$ sorting lemma by proving its contrapositive: if an oblivious compare-exchange algorithm fails to sort an input containing arbitrary values, then it fails to sort some $0$-$1$ input. Assume that an oblivious compare-exchange algorithm $\\text X$ fails to correctly sort the array $A[1..n]$. Let $A[p]$ be the smallest value in $A$ that algorithm $\\text X$ puts into the wrong location, and let $A[q]$ be the value that algorithm $\\text X$ moves to the location into which $A[p]$ should have gone. Define an array $B[1..n]$ of $0$s and $1$s as follows:\n\n\n$$\nB[i] =\n\\begin{cases}\n    0 & \\text{if $A[i] \\le A[p]$}, \\\\\n    1 & \\text{if $A[i] >   A[p]$}.\n\\end{cases}\n$$\n\n\na.\n Argue that $A[q] > A[p]$\u008d, so that $B[p] = 0$ and $B[q] = 1$.\n\n\nb.\n To complete the proof of the $0$-$1$ sorting lemma, prove that algorithm $\\text X$ fails to sort array $B$ correctly.\n\n\nNow you will use the $0$-$1$ sorting lemma to prove that a particular sorting algorithm works correctly. The algorithm, \ncolumnsort\n, works on a rectangular array of $n$ elements. The array has $r$ rows and $s$ columns (so that $n = rs$), subject to three restrictions:\n\n\n\n\n$r$ must be even,\n\n\n$s$ must be a divisor of $r$, and\n\n\n$r \\ge 2 s^2$.\n\n\n\n\nWhen columnsort completes, the array is sorted in \ncolumn-major order\n: reading down the columns, from left to right, the elements monotonically increase.\n\n\nColumnsort operates in eight steps, regardless of the value of $n$. The odd steps are all the same: sort each column individually. Each even step is a fixed permutation. Here are the steps:\n\n\n\n\nSort each column.\n\n\nTranspose the array, but reshape it back to r rows and s columns. In other words, turn the leftmost column into the top $r / s$ rows, in order; turn the next column into the next $r / s$ rows, in order; and so on.\n\n\nSort each column.\n\n\nPerform the inverse of the permutation performed in step 2.\n\n\nSort each column.\n\n\nShift the top half of each column into the bottom half of the same column, and shift the bottom half of each column into the top half of the next column to the right. Leave the top half of the leftmost column empty. Shift the bottom half of the last column into the top half of a new rightmost column, and leave the bottom half of this new column empty.\n\n\nSort each column.\n\n\nPerform the inverse of the permutation performed in step 6.\n\n\n\n\nFigure 8.5 shows an example of the steps of columnsort with $r = 6$ and $s = 3$. (Even though this example violates the requirement that $r \\ge 2s^2$, it happens to work.)\n\n\nc.\n Argue that we can treat columnsort as an oblivious compare-exchange algorithm, even if we do not know what sorting method the odd steps use.\n\n\nAlthough it might seem hard to believe that columnsort actually sorts, you will use the $0$-$1$ sorting lemma to prove that it does. The $0$-$1$ sorting lemma applies because we can treat columnsort as an oblivious compare-exchange algorithm. A couple of definitions will help you apply the $0$-$1$ sorting lemma. We say that an area of an array is clean if we know that it contains either all $0$s or all $1$s. Otherwise, the area might contain mixed $0$s and $1$s, and it is dirty. From here on, assume that the input array contains only $0$s and $1$s, and that we can treat it as an array with $r$ rows and $s$ columns.\n\n\nd.\n Prove that after steps 1\u20133, the array consists of some clean rows of $0$s at the top, some clean rows of $1$s at the bottom, and at most $s$ dirty rows between them.\n\n\ne.\n Prove that after step 4, the array, read in column - major order, starts with a clean area of $0$s, ends with a clean area of $1$s, and has a dirty area of at most $s^2$ elements in the middle.\n\n\nf.\n Prove that steps 5\u20138 produce a fully sorted $0$-$1$ output. Conclude that columnsort correctly sorts all inputs containing arbitrary values.\n\n\ng.\n Now suppose that s does not divide r. Prove that after steps 1\u20133, the array consists of some clean rows of $0$s at the top, some clean rows of $1$s at the bottom, and at most $2s - 1$ dirty rows between them. How large must $r$ be, compared with $s$, for columnsort to correctly sort when $s$ does not divide $r$?\n\n\nh.\n Suggest a simple change to step 1 that allows us to maintain the requirement that $r \\ge 2s^2$ even when $s$ does not divide $r$, and prove that with your change, columnsort correctly sorts.\n\n\n\n\na.\n $A[q]$\u008d must go the wrong place, because it goes where $A[p]$\u008d should go. Since $A[p]$\u008d is the smallest value in array $A$ that goes to the wrong array location, $A[p]$\u008d must be smaller than $A[q]$\u008d.\n\n\nb.\n From how we have defined the array $B$, we have that if $A[i] \\le A[j]$ then $B[i] \\le B[j]$\u008d. Therefore, algorithm $\\text X$ performs the same sequence of exchanges on array $B$ as it does on array $A$. The output produced on array $A$ is of the form $\\ldots A[q] \\ldots A[p] \\ldots$, and so the output produced on array $B$ is of the form $\\ldots B[q] \\ldots B[p] \\ldots$, or $\\ldots 1 \\ldots 0 \\ldots$. Hence algorithm $\\text X$ fails to sort array $B$ correctly.\n\n\nc.\n The even steps perform fixed permutations. The odd steps sort each column by some sorting algorithm, which might not be an oblivious compare-exchange algorithm. But the result of sorting each column would be the same as if we did use an oblivious compare-exchange algorithm.\n\n\nd.\n After step 1, each column has $0$s on top and $1$s on the bottom, with at most one transition between $0$s and $1$s, and it is a $0 \\to 1$ transition. (As we read the array in column - major order, all $1 \\to 0$ transitions occur between adjacent columns.) After step 2, therefore, each consecutive group of $r / s$ rows, read in row-major order, has at most one transition, and again it is a $0 \\to 1$ transition. All $1 \\to 0$ transitions occur at the end of a group of $r / s$ rows. Since there are s groups of $r / s$ rows, there are at most $s$ dirty rows, and the rest of the rows are clean. Step 3 moves the $0$s to the top rows and the $1$s to the bottom rows. The $s$ dirty rows are somewhere in the middle.\n\n\ne.\n The dirty area after step 3 is at most $s$ rows high and $s$ columns wide, and so its area is at most $s^2$. Step 4 turns the clean $0$s in the top rows into a clean area on the left, the clean $1$s in the bottom rows into a clean area on the right, and the dirty area of size $s^2$ is between the two clean areas.\n\n\nf.\n First, we argue that if the dirty area after step 4 has size at most $r / 2$, then steps 5\u20138 complete the sorting. If the dirty area has size at most $r / 2$ (half a column), then it either resides entirely in one column or it resides in the bottom half of one column and the top half of the next column. In the former case, step 5 sorts the column containing the dirty area, and steps 6\u20138 maintain that the array is sorted. In the latter case, step 5 cannot increase the size of the dirty area, step 6 moves the entire dirty area into the same column, step 7 sorts it, and step 8 moves it back.\n\n\nSecond, we argue that the dirty area after step 4 has size at most $r / 2$. But that follows immediately from the requirement that $r \\ge 2s^2$ and the property that after step 4, the dirty area has size at most $s^2$.\n\n\ng.\n If $s$ does not divide $r$, then after step 2, we can see up to $s$ $0 \\to 1$ transitions and $s - 1$ $1 \\to 0$ transitions in the rows. After step 3, we would have up to $2s - 1$ dirty rows, for a dirty area size of at most $2s^2 - s$. To push the correctness proof through, we need $2s^2 - s \\le r / 2$, or $r \\ge 4s^2 - 2s$.\n\n\nh.\n We can reduce the number of transitions in the rows after step 2 back down to at most $s$ by sorting every other column in reverse order in step 1. Now if we have a transition (either $1 \\to 0$ or $0 \\to 1$) between columns after step 1, then either one of the columns had all $1$s or the other had all $0$s, in which case we would not have a transition within one of the columns.",
            "title": "8-7 The $0$-$1$ sorting lemma and columnsort"
        },
        {
            "location": "/Chap09/9.1/",
            "text": "9.1-1\n\n\n\n\nShow that the second smallest of $n$ elements can be found with $n + \\lceil \\lg n \\rceil - 2$ comparisons in the worst case. ($\\textit{Hint:}$ Also find the smallest element.)\n\n\n\n\nThe smallest of $n$ numbers can be found with $n - 1$ comparisons by conducting a tournament as follows: Compare all the numbers in pairs. Only the smaller of each pair could possibly be the smallest of all $n$, so the problem has been reduced to that of finding the smallest of $\\lceil n / 2 \\rceil$ numbers. Compare those numbers in pairs, and so on, until there's just one number left, which is the answer.\n\n\nTo see that this algorithm does exactly $n - 1$ comparisons, notice that each number except the smallest loses exactly once. To show this more formally, draw a binary tree of the comparisons the algorithm does. The $n$ numbers are the leaves, and each number that came out smaller in a comparison is the parent of the two numbers that were compared. Each non-leaf node of the tree represents a comparison, and there are $n - 1$ internal nodes in an $n$-leaf full binary tree (see Exercise (B.5-3)), so exactly $n - 1$ comparisons are made.\n\n\nIn the search for the smallest number, the second smallest number must have come out smallest in every comparison made with it until it was eventually compared with the smallest. So the second smallest is among the elements that were compared with the smallest during the tournament. To find it, conduct another tournament (as above) to find the smallest of these numbers. At most $\\lceil \\lg n \\rceil$ (the height of the tree of comparisons) elements were compared with the smallest, so finding the smallest of these takes $\\lceil \\lg n \\rceil - 1$ comparisons in the worst case.\n\n\nThe total number of comparisons made in the two tournaments was\n\n\n$$n - 1 + \\lceil \\lg n \\rceil - 1 = n + \\lceil \\lg n \\rceil - 2$$\n\n\nin the worst case.\n\n\n9.1-2 $\\star$\n\n\n\n\nProve the lower bound of $\\lceil 3n / 2 \\rceil - 2$ comparisons in the worst case to find both the maximum and minimum of $n$ numbers. ($\\textit{Hint:}$ Consider how many numbers are potentially either the maximum or minimum, and investigate how a comparison affects these counts.)\n\n\n\n\nIf $n$ is odd, there are\n\n\n\\begin{align}\n1 + \\frac{3(n-3)}{2} + 2\n    & = \\frac{3n}{2} - \\frac{3}{2} \\\\\n    & = (\\lceil \\frac{3n}{2} \\rceil - \\frac{1}{2}) - \\frac{3}{2} \\\\\n    & = \\lceil \\frac{3n}{2} \\rceil - 2\n\\end{align}\n\n\ncomparisons.\n\n\nIf $n$ is even, there are\n\n\n\\begin{align}\n1 + \\frac{3(n - 2)}{2}\n    & = \\frac{3n}{2} - 2 \\\\\n    & = \\lceil \\frac{3n}{2} \\rceil - 2\n\\end{align}\n\n\ncomparisons.",
            "title": "9.1 Minimum and maximum"
        },
        {
            "location": "/Chap09/9.1/#91-1",
            "text": "Show that the second smallest of $n$ elements can be found with $n + \\lceil \\lg n \\rceil - 2$ comparisons in the worst case. ($\\textit{Hint:}$ Also find the smallest element.)   The smallest of $n$ numbers can be found with $n - 1$ comparisons by conducting a tournament as follows: Compare all the numbers in pairs. Only the smaller of each pair could possibly be the smallest of all $n$, so the problem has been reduced to that of finding the smallest of $\\lceil n / 2 \\rceil$ numbers. Compare those numbers in pairs, and so on, until there's just one number left, which is the answer.  To see that this algorithm does exactly $n - 1$ comparisons, notice that each number except the smallest loses exactly once. To show this more formally, draw a binary tree of the comparisons the algorithm does. The $n$ numbers are the leaves, and each number that came out smaller in a comparison is the parent of the two numbers that were compared. Each non-leaf node of the tree represents a comparison, and there are $n - 1$ internal nodes in an $n$-leaf full binary tree (see Exercise (B.5-3)), so exactly $n - 1$ comparisons are made.  In the search for the smallest number, the second smallest number must have come out smallest in every comparison made with it until it was eventually compared with the smallest. So the second smallest is among the elements that were compared with the smallest during the tournament. To find it, conduct another tournament (as above) to find the smallest of these numbers. At most $\\lceil \\lg n \\rceil$ (the height of the tree of comparisons) elements were compared with the smallest, so finding the smallest of these takes $\\lceil \\lg n \\rceil - 1$ comparisons in the worst case.  The total number of comparisons made in the two tournaments was  $$n - 1 + \\lceil \\lg n \\rceil - 1 = n + \\lceil \\lg n \\rceil - 2$$  in the worst case.",
            "title": "9.1-1"
        },
        {
            "location": "/Chap09/9.1/#91-2-star",
            "text": "Prove the lower bound of $\\lceil 3n / 2 \\rceil - 2$ comparisons in the worst case to find both the maximum and minimum of $n$ numbers. ($\\textit{Hint:}$ Consider how many numbers are potentially either the maximum or minimum, and investigate how a comparison affects these counts.)   If $n$ is odd, there are  \\begin{align}\n1 + \\frac{3(n-3)}{2} + 2\n    & = \\frac{3n}{2} - \\frac{3}{2} \\\\\n    & = (\\lceil \\frac{3n}{2} \\rceil - \\frac{1}{2}) - \\frac{3}{2} \\\\\n    & = \\lceil \\frac{3n}{2} \\rceil - 2\n\\end{align}  comparisons.  If $n$ is even, there are  \\begin{align}\n1 + \\frac{3(n - 2)}{2}\n    & = \\frac{3n}{2} - 2 \\\\\n    & = \\lceil \\frac{3n}{2} \\rceil - 2\n\\end{align}  comparisons.",
            "title": "9.1-2 $\\star$"
        },
        {
            "location": "/Chap09/9.2/",
            "text": "9.2-1\n\n\n\n\nShow that $\\text{RANDOMIZED-SELECT}$ never makes a recursive call to a $0$-length array.\n\n\n\n\nCalling a $0$-length array would mean that the second and third arguments are equal. So, if the call is made on line 8, we would need that $p = q - 1$, which means that $q - p + 1 = 0$.\nHowever, $i$ is assumed to be a nonnegative number, and to be executing line 8, we would need that $i < k = q - p + 1 = 0$, a contradiction. The other possibility is that the bad recursive call occurs on line 9. This would mean that $q + 1 = r$. To be executing line 9, we need that $i > k = q - p + 1 = r - p$. This would be a nonsensical original call to the array though because we are asking for the ith element from an array of strictly less size.\n\n\n9.2-2\n\n\n\n\nArgue that the indicator random variable $X_k$ and the value $T(\\max(k - 1, n - k))$ are independent.\n\n\n\n\nThe probability that $X_k$ is equal to $1$ is unchanged when we know the max of $k - 1$ and $n - k$. In other words, $\\Pr\\{X_k = a \\mid \\max(k - 1, n - k) = m\\} = \\Pr\\{X_k = a\\}$ for $a = 0, 1$ and $m = k - 1, n - k$ so $X_k$ and $\\max(k - 1, n - k)$ are independent.\n\n\nBy C.3-5, so are $X_k$ and $T(\\max(k - 1, n - k))$.\n\n\n9.2-3\n\n\n\n\nWrite an iterative version of $\\text{RANDOMIZED-SELECT}$.\n\n\n\n\nPARTITION\n(\nA\n,\n \np\n,\n \nr\n)\n\n    \nx\n \n=\n \nA\n[\nr\n]\n\n    \ni\n \n=\n \np\n\n    \nfor\n \nk\n \n=\n \np\n \n-\n \n1\n \nto\n \nr\n\n       \nif\n \nA\n[\nk\n]\n \n<\n \nx\n\n           \ni\n \n=\n \ni\n \n+\n \n1\n\n           \nswap\n(\nA\n[\ni\n],\n \nA\n[\nk\n])\n\n    \ni\n \n=\n \ni\n \n+\n \n1\n\n    \nswap\n(\nA\n[\ni\n],\n \nA\n[\nr\n])\n\n        \nreturn\n \ni\n\n\n\n\n\nRANDOMIZED\n-\nPARTITION\n(\nA\n,\n \np\n,\n \nr\n)\n\n    \nx\n \n=\n \nrand\n(\np\n \n-\n \n1\n,\n \nr\n)\n\n    \nswap\n(\nA\n[\nx\n],\n \nA\n[\nr\n])\n\n    \nreturn\n \nPARTITION\n(\nA\n,\n \np\n,\n \nr\n)\n\n\n\n\n\nRANDOMIZED\n-\nSELECT\n(\nA\n,\n \np\n,\n \nr\n,\n \ni\n)\n\n    \nwhile\n \nTRUE\n\n        \nif\n \np\n \n==\n \nr\n\n            \nreturn\n \nA\n[\np\n]\n\n        \nq\n \n=\n \nRANDOMIZED\n-\nPARTITION\n(\nA\n,\n \np\n,\n \nr\n)\n\n        \nk\n \n=\n \nq\n \n-\n \np\n \n+\n \n1\n\n        \nif\n \ni\n \n==\n \nk\n\n            \nreturn\n \nA\n[\nq\n]\n\n        \nif\n \ni\n \n<\n \nk\n\n            \nr\n \n=\n \nq\n\n        \nelse\n\n            \np\n \n=\n \nq\n\n            \ni\n \n=\n \ni\n \n-\n \nk\n\n\n\n\n\n9.2-4\n\n\n\n\nSuppose we use $\\text{RANDOMIZED-SELECT}$ to select the minimum element of the array $A = \\langle 3, 2, 9, 0, 7, 5, 4, 8, 6, 1 \\rangle$. Describe a sequence of partitions that results in a worst-case performance of $\\text{RANDOMIZED-SELECT}$.\n\n\n\n\nWhen the partition selected is always the maximum element of the array we get worst-case performance. In the example, the sequence would be $9, 8, 7, 6, 5, 4, 3, 2, 1, 0$.",
            "title": "9.2 Selection in expected linear time"
        },
        {
            "location": "/Chap09/9.2/#92-1",
            "text": "Show that $\\text{RANDOMIZED-SELECT}$ never makes a recursive call to a $0$-length array.   Calling a $0$-length array would mean that the second and third arguments are equal. So, if the call is made on line 8, we would need that $p = q - 1$, which means that $q - p + 1 = 0$.\nHowever, $i$ is assumed to be a nonnegative number, and to be executing line 8, we would need that $i < k = q - p + 1 = 0$, a contradiction. The other possibility is that the bad recursive call occurs on line 9. This would mean that $q + 1 = r$. To be executing line 9, we need that $i > k = q - p + 1 = r - p$. This would be a nonsensical original call to the array though because we are asking for the ith element from an array of strictly less size.",
            "title": "9.2-1"
        },
        {
            "location": "/Chap09/9.2/#92-2",
            "text": "Argue that the indicator random variable $X_k$ and the value $T(\\max(k - 1, n - k))$ are independent.   The probability that $X_k$ is equal to $1$ is unchanged when we know the max of $k - 1$ and $n - k$. In other words, $\\Pr\\{X_k = a \\mid \\max(k - 1, n - k) = m\\} = \\Pr\\{X_k = a\\}$ for $a = 0, 1$ and $m = k - 1, n - k$ so $X_k$ and $\\max(k - 1, n - k)$ are independent.  By C.3-5, so are $X_k$ and $T(\\max(k - 1, n - k))$.",
            "title": "9.2-2"
        },
        {
            "location": "/Chap09/9.2/#92-3",
            "text": "Write an iterative version of $\\text{RANDOMIZED-SELECT}$.   PARTITION ( A ,   p ,   r ) \n     x   =   A [ r ] \n     i   =   p \n     for   k   =   p   -   1   to   r \n        if   A [ k ]   <   x \n            i   =   i   +   1 \n            swap ( A [ i ],   A [ k ]) \n     i   =   i   +   1 \n     swap ( A [ i ],   A [ r ]) \n         return   i   RANDOMIZED - PARTITION ( A ,   p ,   r ) \n     x   =   rand ( p   -   1 ,   r ) \n     swap ( A [ x ],   A [ r ]) \n     return   PARTITION ( A ,   p ,   r )   RANDOMIZED - SELECT ( A ,   p ,   r ,   i ) \n     while   TRUE \n         if   p   ==   r \n             return   A [ p ] \n         q   =   RANDOMIZED - PARTITION ( A ,   p ,   r ) \n         k   =   q   -   p   +   1 \n         if   i   ==   k \n             return   A [ q ] \n         if   i   <   k \n             r   =   q \n         else \n             p   =   q \n             i   =   i   -   k",
            "title": "9.2-3"
        },
        {
            "location": "/Chap09/9.2/#92-4",
            "text": "Suppose we use $\\text{RANDOMIZED-SELECT}$ to select the minimum element of the array $A = \\langle 3, 2, 9, 0, 7, 5, 4, 8, 6, 1 \\rangle$. Describe a sequence of partitions that results in a worst-case performance of $\\text{RANDOMIZED-SELECT}$.   When the partition selected is always the maximum element of the array we get worst-case performance. In the example, the sequence would be $9, 8, 7, 6, 5, 4, 3, 2, 1, 0$.",
            "title": "9.2-4"
        },
        {
            "location": "/Chap09/9.3/",
            "text": "9.3-1\n\n\n\n\nIn the algorithm $\\text{SELECT}$, the input elements are divided into groups of $5$. Will the algorithm work in linear time if they are divided into groups of $7$? Argue that $\\text{SELECT}$ does not run in linear time if groups of $3$ are used.\n\n\n\n\nFor groups of $7$, the algorithm still works in linear time. The number of elements greater than $x$ (and similarly, the number less than $x$) is at least\n\n\n$$4\\Bigg(\\Bigg\\lceil \\frac{1}{2} \\Big\\lceil \\frac{n}{7} \\Big\\rceil\\Bigg\\rceil - 2\\Bigg) \\ge \\frac{2n}{7} - 8,$$\n\n\nand the recurrence becomes\n\n\n$$T(n) \\le T(\\lceil n/7 \\rceil) + T(5n/7 + 8) + O(n),$$\n\n\nwhich can be shown to be $O(n)$ by substitution, as for the groups of $5$ case in the text.\n\n\nFor groups of $3$, however, the algorithm no longer works in linear time. The number of elements greater than $x$, and the number of elements less than $x$, is at least\n\n\n$$2\\Bigg(\\Bigg\\lceil \\frac{1}{2} \\Big\\lceil \\frac{n}{3} \\Big\\rceil\\Bigg\\rceil - 2\\Bigg) \\ge \\frac{n}{3} - 4,$$\n\n\nand the recurrence becomes\n\n\n$$T(n) \\le T(\\lceil n / 3 \\rceil) + T(2n / 3 + 4) + O(n),$$\n\n\nwhich does not have a linear solution.\n\n\nWe can prove that the worst-case time for groups of $3$ is \u007f$\\Omega(n\\lg n)$. We do so by deriving a recurrence for a particular case that takes \u007f$\\Omega(n\\lg n)$ time.\n\n\nIn counting up the number of elements greater than $x$ (and similarly, the number less than $x$), consider the particular case in which there are exactly $\\Big\\lceil \\frac{1}{2} \\Big\\lceil \\frac{n}{3} \\Big\\rceil\\Big\\rceil$ groups with medians $\\ge x$ and in which the \"leftover\" group does contribute 2 elements greater than $x$. Then the number of elements greater than $x$ is exactly $2\\Big(\\Big\\lceil \\frac{1}{2} \\Big\\lceil \\frac{n}{3} \\Big\\rceil\\Big\\rceil - 1\\Big) + 1$ (the $-1$ discounts $x$'s group, as usual, and the $+1$ is contributed by $x$'s group) $= 2\\lceil n / 6 \\rceil - 1$, and the recursive step for elements $\\le x$ has $n - (2 \\lceil n / 6 \\rceil - 1) \\ge n - (2(n / 6 + 1) - 1) = 2n / 3 - 1$ elements. Observe also that the $O(n)$ term in the recurrence is really $\\Theta(n)$, since the partitioning in step 4 takes $\\Theta(n)$ (not just $O(n)$) time. Thus, we get the recurrence\n\n\n\\begin{align}\nT(n) & \\ge T(\\lceil n / 3 \\rceil) + T(2n / 3 - 1) + \\Theta(n) \\\\\n     & \\ge T(n / 3) + T(2n / 3 - 1) + \\Theta(n),\n\\end{align}\n\n\nfrom which you can show that $T(n) \\ge cn\\lg n$ by substitution. You can also see that $T(n)$ is nonlinear by noticing that each level of the recursion tree sums to $n$.\n\n\n[In fact, any odd group size $\\ge 5$ works in linear time.]\n\n\n9.3-2\n\n\n\n\nAnalyze $\\text{SELECT}$ to show that if $n \\ge 140$, then at least $\\lceil n / 4 \\rceil$ elements are greater than the median-of-medians $x$ and at least $\\lceil n / 4 \\rceil$ elements are less than $x$.\n\n\n\n\n\\begin{align}\n\\frac{3n}{10} - 6 & \\ge \\lceil \\frac{n}{4} \\rceil \\\\\n\\frac{3n}{10} - 6 & \\ge \\frac{n}{4} + 1 \\\\\n        12n - 240 & \\ge 10n + 40 \\\\\n                n & \\ge 140.\n\\end{align}\n\n\n9.3-3\n\n\n\n\nShow how quicksort can be made to run in $O(n\\lg n)$ time in the worst case, assuming that all elements are distinct.\n\n\n\n\nA modification to quicksort that allows it to run in $O(n\\lg n)$ time in the worst case uses the deterministic $\\text{PARTITION}$ algorithm that was modified to take an element to partition around as an input parameter.\n\n\n$\\text{SELECT}$ takes an array $A$, the bounds $p$ and $r$ of the subarray in $A$, and the rank $i$ of an order statistic, and in time linear in the size of the subarray $A[p..r]$\u008d it returns the ith smallest element in $A[p..r]$.\n\n\nBEST\n-\nCASE\n-\nQUICKSORT\n(\nA\n,\n \np\n,\n \nr\n)\n\n    \nif\n \np\n \n<\n \nr\n\n        \ni\n \n=\n \nfloor\n((\nr\n \n-\n \np\n \n+\n \n1\n)\n \n/\n \n2\n)\n\n        \nx\n \n=\n \nSELECT\n(\nA\n,\n \np\n,\n \nr\n,\n \ni\n)\n\n        \nq\n \n=\n \nPARTITION\n(\nx\n)\n\n        \nBEST\n-\nCASE\n-\nQUICKSORT\n(\nA\n,\n \np\n,\n \nq\n \n-\n \n1\n)\n\n        \nBEST\n-\nCASE\n-\nQUICKSORT\n(\nA\n,\n \nq\n \n+\n \n1\n,\n \nr\n)\n\n\n\n\n\nFor an $n$-element array, the largest subarray that $\\text{BEST-CASE-QUICKSORT}$ recurses on has $n / 2$ elements. This situation occurs when $n = r - p + 1$ is even; then the subarray $A[q + 1..r]$\u008d has $n / 2$ elements, and the subarray $A[p..q - 1]$\u008d has $n / 2 - 1$ elements.\n\n\nBecause $\\text{BEST-CASE-QUICKSORT}$ always recurses on subarrays that are at most half the size of the original array, the recurrence for the worst-case running time is $T(n) \\le 2T(n / 2) + \\Theta(n) = O(n\\lg n)$.\n\n\n9.3-4 $\\star$\n\n\n\n\nSuppose that an algorithm uses only comparisons to find the $i$th smallest element in a set of $n$ elements. Show that it can also find the $i - 1$ smaller elements and $n - i$ larger elements without performing additional comparisons.\n\n\n\n\nCreate a graph with $n$ vertices and draw a directed edge from vertex $i$ to vertex $j$ if the $i$th and $j$th elements of the array are compared in the algorithm and we discover that $A[i] \\ge A[j]$. Observe that $A[i]$ is one of the $i - 1$ smaller elements if there exists a path from $x$ to $i$ in the graph, and $A[i]$ is one of the $n - i$ larger elements if there exists a path from $i$ to $x$ in the graph. Every vertex $i$ must either lie on a path to or from $x$ because otherwise the algorithm can't distinguish between $i \\le x$ and $i \\ge x$. Moreover, if a vertex $i$ lies on both a path to $x$ and a path from $x$, then it must be such that $x \\le A[i] \\le x$,so $x = A[i]$. In this case, we can break ties arbitrarily.\n\n\n9.3-5\n\n\n\n\nSuppose that you have a \"black-box\" worst-case linear-time median subroutine. Give a simple, linear-time algorithm that solves the selection problem for an arbitrary order statistic.\n\n\n\n\nWe assume that are given a procedure $\\text{MEDIAN}$ that takes as parameters an array $A$ and subarray indices $p$ and $r$, and returns the value of the median element of $A[p..r]$ in $O(n)$ time in the worst case.\n\n\nGiven $\\text{MEDIAN}$, here is a linear-time algorithm $\\text{SELECT}'$ for finding the $i$th smallest element in $A[p..r]$. This algorithm uses the deterministic $\\text{PARTITION}$ algorithm that was modified to take an element to partition around as an input parameter.\n\n\nSELECT\n'\n(\nA\n,\n \np\n,\n \nr\n,\n \ni\n)\n\n    \nif\n \np\n \n==\n \nr\n\n        \nreturn\n \nA\n[\np\n]\n\n    \nx\n \n=\n \nMEDIAN\n(\nA\n,\n \np\n,\n \nr\n)\n\n    \nq\n \n=\n \nPARTITION\n(\nx\n)\n\n    \nk\n \n=\n \nq\n \n-\n \np\n \n+\n \n1\n\n    \nif\n \ni\n \n==\n \nk\n\n        \nreturn\n \nA\n[\nq\n]\n\n    \nelse\n \nif\n \ni\n \n<\n \nk\n\n        \nreturn\n \nSELECT\n'\n(\nA\n,\n \np\n,\n \nq\n \n-\n \n1\n,\n \ni\n)\n\n    \nelse\n \nreturn\n \nSELECT\n'\n(\nA\n,\n \nq\n \n+\n \n1\n,\n \nr\n,\n \ni\n \n-\n \nk\n)\n\n\n\n\n\nBecause $x$ is the median of $A[p..r]$\u008d, each of the subarrays $A[p..q - 1]$\u008d and $A[q + 1..r]$\u008d has at most half the number of elements of $A[p..r]$\u008d. The recurrence for the worst-case running time of $\\text{SELECT}'$ is $T(n) \\le T(n / 2) + O(n) = O(n)$.\n\n\n9.3-6\n\n\n\n\nThe $k$th \nquantiles\n of an $n$-element set are the $k - 1$ order statistics that divide the sorted set into $k$ equal-sized sets (to within $1$). Give an $O(n\\lg k)$-time algorithm to list the $k$th quantiles of a set.\n\n\n\n\nPre-calculate the positions of the quantiles in $O(k)$, we use the $O(n)$ select algorithm to find the $\\lfloor k / 2 \\rfloor$th position, after that the elements are divided into two sets by the pivot the $\\lfloor k / 2 \\rfloor$th position, we do it recursively in the two sets to find other positions. Since the maximum depth is $\\lceil \\lg k \\rceil$, the total running time is $O(n\\lg k)$.\n\n\nPARTITION\n(\nA\n,\n \np\n,\n \nr\n)\n\n    \nx\n \n=\n \nA\n[\nr\n]\n\n    \ni\n \n=\n \np\n\n    \nfor\n \nk\n \n=\n \np\n \nto\n \nr\n\n        \nif\n \nA\n[\nk\n]\n \n<\n \nx\n\n            \ni\n \n=\n \ni\n \n+\n \n1\n\n            \nswap\n(\nA\n[\ni\n],\n \nA\n[\nk\n])\n\n    \ni\n \n=\n \ni\n \n+\n \n1\n\n    \nswap\n(\na\n[\ni\n],\n \na\n[\nr\n])\n\n    \nreturn\n \ni\n\n\n\n\n\nRANDOMIZED\n-\nPARTITION\n(\nA\n,\n \np\n,\n \nr\n)\n\n    \nx\n \n=\n \nrand\n(\np\n,\n \nr\n)\n\n    \nswap\n(\nA\n[\nx\n],\n \nA\n[\nr\n])\n\n    \nreturn\n \nPARTITION\n(\nA\n,\n \np\n,\n \nr\n)\n\n\n\n\n\nRANDOMIZED\n-\nSELECT\n(\nA\n,\n \np\n,\n \nr\n,\n \ni\n)\n\n    \nwhile\n \nTRUE\n\n        \nif\n \np\n \n==\n \nr\n\n            \nreturn\n \np\n,\n \nA\n[\np\n]\n\n        \nq\n \n=\n \nRANDOMIZED\n-\nPARTITION\n(\nA\n,\n \np\n,\n \nr\n)\n\n        \nk\n \n=\n \nq\n \n-\n \np\n \n+\n \n1\n\n        \nif\n \ni\n \n==\n \nk\n\n            \nreturn\n \nq\n,\n \nA\n[\nq\n]\n\n        \nif\n \ni\n \n<\n \nk\n\n            \nr\n \n=\n \nq\n\n        \nelse\n\n            \np\n \n=\n \nq\n \n+\n \n1\n\n            \ni\n \n=\n \ni\n \n-\n \nk\n\n\n\n\n\nk\n-\nQUANTITLES\n-\nSUB\n(\nA\n,\n \np\n,\n \nr\n,\n \npos\n,\n \nf\n,\n \ne\n,\n \nquantiles\n)\n\n    \nif\n \nf\n \n+\n \n1\n \n>\n \ne\n\n        \nreturn\n\n    \nmid\n \n=\n \n(\nf\n \n+\n \ne\n)\n \n/\n \n2\n\n    \nq\n,\n \nval\n \n=\n \nRANDOMIZED\n-\nSELECT\n(\nA\n,\n \np\n,\n \nr\n,\n \npos\n[\nmid\n)\n\n    \nquantiles\n[\nmid\n]\n \n=\n \nval\n\n    \nk\n \n=\n \nq\n \n-\n \np\n \n+\n \n1\n\n    \nfor\n \ni\n \n=\n \nmid\n \n+\n \n1\n \nto\n \ne\n\n        \npos\n[\ni\n]\n \n=\n \npos\n[\ni\n]\n \n-\n \nk\n\n    \nk\n-\nQUANTILES\n-\nSUB\n(\nA\n,\n \nq\n \n+\n \n1\n,\n \nr\n,\n \npos\n,\n \nmid\n \n+\n \n1\n,\n \ne\n,\n \nquantiles\n)\n\n\n\n\n\nk\n-\nQUANTITLES\n(\nA\n,\n \nk\n)\n\n    \nnum\n \n=\n \nA\n.\nsize\n()\n \n/\n \nk\n\n    \nmod\n \n=\n \nA\n.\nsize\n()\n \n%\n \nk\n\n    \npos\n \n=\n \nnum\n[\n1.\n.\nk\n]\n\n    \nfor\n \ni\n \n=\n \n1\n \nto\n \nmod\n\n        \npos\n[\ni\n]\n \n=\n \npos\n[\ni\n]\n \n+\n \n1\n\n    \nfor\n \ni\n \n=\n \n1\n \nto\n \nk\n\n        \npos\n[\ni\n]\n \n=\n \npos\n[\ni\n]\n \n+\n \npos\n[\ni\n \n-\n \n1\n]\n\n    \nquantiles\n \n=\n \n[\n1.\n.\nk\n]\n\n    \nk\n-\nQUANTITLES\n-\nSUB\n(\nA\n,\n \n0\n,\n \nA\n.\nlength\n,\n \npos\n,\n \n0\n,\n \npos\n.\nsize\n(),\n \nquantiles\n)\n\n    \nreturn\n \nquantiles\n\n\n\n\n\n9.3-7\n\n\n\n\nDescribe an $O(n)$-time algorithm that, given a set $S$ of $n$ distinct numbers and a positive integer $k \\le n$, determines the $k$ numbers in $S$ that are closest to the median of $S$.\n\n\n\n\nFind the median in $O(n)$; create a new array, each element is the absolute value of the original value subtract the median; find the $k$th smallest number in $O(n)$,  then the desired values are the elements whose absolute difference with the median is less than or equal to the $k$th smallest number in the new array.\n\n\n9.3-8\n\n\n\n\nLet $X[1..n]$ and $Y[1..n]$ be two arrays, each containing $n$ numbers already in sorted order. Give an $O(\\lg n)$-time algorithm to find the median of all $2n$ elements in arrays $X$ and $Y$.\n\n\n\n\nLet's start out by supposing that the median (the lower median, since we know we have an even number of elements) is in $X$. Let's call the median value $m$, and let's suppose that it's in $X[k]$\u008d. Then $k$ elements of $X$ are less than or equal to $m$ and $n - k$ elements of X are greater than or equal to m. We know that in the two arrays combined, there must be $n$ elements less than or equal to $m$ and $n$ elements greater than or equal to $m$, and so there must be $n - k$ elements of $Y$ that are less than or equal to $m$ and $n - (n - k)=k$ elements of $Y$ that are greater than or equal to $m$.\n\n\nThus, we can check that $X[k]$\u008d is the lower median by checking whether $Y[n - k] \\le X[k] \\le Y[n - k + 1]$. A boundary case occurs for $k = n$. Then $n - k = 0$, and there is no array entry $Y[0]$\u008d; we only need to check that $X[n] \\le Y[1]$\u008d.\n\n\nNow, if the median is in $X$ but is not in $X[k]$\u008d, then the above condition will not hold. If the median is in $X[k']$ \u008d, where $k' < k$, then $X[k]$\u008d is above the median, and $Y[n - k + 1] < X[k]$\u008d. Conversely, if the median is in $X[k'']$\u008d, where $k'' > k$, then $X[k]$\u008d is below the median, and $X[k] < Y[n - k]$\u008d.\n\n\nThus, we can use a binary search to determine whether there is an $X[k]$\u008d such that either $k < n$ and $X[n - k] \\le Y[k] \\le X[n - k + 1]$ or $k = n$ and $X[k] \\le Y[n - k + 1]$; if we find such an $X[k]$\u008d, then it is the median. Otherwise, we know that the median is in $Y$, and we use a binary search to find a $Y[k]$\u008d such that either $k < n$ and $X[n - k] \\le Y[k] \\le X[n - k + 1]$ or $k = n$\u008d is the median. Since each binary search takes $O(\\lg n)$ time, we spend a total of $O(\\lg n)$ time.\n\n\nHere's how we write the algorithm in pseudocode:\n\n\nTWO\n-\nARRAY\n-\nMEDIAN\n(\nX\n,\n \nY\n)\n\n    \nn\n \n=\n \nX\n.\nlength\n        \n// n also equals Y.length\n\n    \nmedian\n \n=\n \nFIND\n-\nMEDIAN\n(\nX\n,\n \nY\n,\n \nn\n,\n \n1\n,\n \nn\n)\n\n    \nif\n \nmedian\n \n==\n \nNOT\n-\nFOUND\n\n        \nmedian\n \n=\n \nFIND\n-\nMEDIAN\n(\nY\n,\n \nX\n,\n \nn\n,\n \n1\n,\n \nn\n)\n\n    \nreturn\n \nmedian\n\n\n\n\n\nFIND\n-\nMEDIAN\n(\nA\n,\n \nB\n,\n \nn\n,\n \nlow\n,\n \nhign\n)\n\n    \nif\n \nlow\n \n>\n \nhigh\n\n        \nreturn\n \nNOT\n-\nFOUND\n\n    \nelse\n \nk\n \n=\n \nfloor\n((\nlow\n \n+\n \nhigh\n)\n \n/\n \n2\n)\n\n        \nif\n \nk\n \n==\n \nn\n \nand\n \nA\n[\nn\n]\n \n\u2264\n \nB\n[\n1\n]\n\n            \nreturn\n \nA\n[\nn\n]\n\n        \nelse\n \nif\n \nk\n \n<\n \nn\n \nand\n \nB\n[\nn\n \n-\n \nk\n]\n \n\u2264\n \nA\n[\nk\n]\n \n\u2264\n \nB\n[\nn\n \n-\n \nk\n \n+\n \n1\n]\n\n            \nreturn\n \nA\n[\nk\n]\n\n        \nelse\n \nA\n[\nk\n]\n \n>\n \nB\n[\nn\n \n-\n \nk\n \n+\n \n1\n]\n\n            \nreturn\n \nFIND\n-\nMEDIAN\n(\nA\n,\n \nB\n,\n \nn\n,\n \nlow\n,\n \nk\n \n-\n \n1\n)\n\n        \nelse\n \nreturn\n \nFIND\n-\nMEDIAN\n(\nA\n,\n \nB\n,\n \nn\n,\n \nk\n \n+\n \n1\n,\n \nhigh\n)\n\n\n\n\n\n9.3-9\n\n\n\n\nProfessor Olay is consulting for an oil company, which is planning a large pipeline running east to west through an oil field of $n$ wells. The company wants to connect a spur pipeline from each well directly to the main pipeline along a shortest route (either north or south), as shown in Figure 9.2. Given the $x$- and $y$-coordinates of the wells, how should the professor pick the optimal location of the main pipeline, which would be the one that minimizes the total length of the spurs? Show how to determine the optimal location in linear time.\n\n\n\n\nIn order to find the optimal placement for Professor Olay's pipeline, we need only find the median(s) of the $y$-coordinates of his oil wells, as the following proof explains.\n\n\nClaim\n \n\n\nThe optimal $y$-coordinate for Professor Olay's east-west oil pipeline is as follows:\n\n\n\n\nIf $n$ is even, then on either the oil well whose $y$-coordinate is the lower median or the one whose $y$-coordinate is the upper median, or anywhere between them.\n\n\nIf $n$ is odd, then on the oil well whose $y$-coordinate is the median.\n\n\n\n\nProof\n \n\n\nWe examine various cases. In each case, we will start out with the pipeline at a particular $y$-coordinate and see what happens when we move it. We'll denote by $s$ the sum of the north-south spurs with the pipeline at the starting location, and $s'$ will denote the sum after moving the pipeline.\n\n\nWe start with the case in which n is even. Let us start with the pipeline somewhere on or between the two oil wells whose $y$-coordinates are the lower and upper medians. If we move the pipeline by a vertical distance $d$ without crossing either of the median wells, then $n / 2$ of the wells become $d$ farther from the pipeline and $n / 2$ become $d$ closer, and so $s' = s + dn / 2 - dn / 2 = s$; thus, all locations on or between the two medians are equally good.\n\n\nNow suppose that the pipeline goes through the oil well whose $y$-coordinate is the upper median. What happens when we increase the $y$-coordinate of the pipeline by $d > 0$ units, so that it moves above the oil well that achieves the upper median? All oil wells whose $y$-coordinates are at or below the upper median become d units farther from the pipeline, and there are at least $n / 2 + 1$ such oil wells (the upper median, and every well at or below the lower median). There are at most $n / 2 - 1$ oil wells whose $y$-coordinates are above the upper median, and each of these oil wells becomes at most d units closer to the pipeline when it moves up. Thus, we have a lower bound on $s'$ of $s' \\ge s + d(n / 2 + 1) - d(n / 2 - 1) = s + 2d > s$. We conclude that moving the pipeline up from the oil well at the upper median increases the total spur length. A symmetric argument shows that if we start with the pipeline going through the oil well whose $y$-coordinate is the lower median and move it down, then the total spur length increases.\n\n\nWe see, therefore, that when $n$ is even, an optimal placement of the pipeline is anywhere on or between the two medians.\n\n\nNow we consider the case when $n$ is odd. We start with the pipeline going through the oil well whose $y$-coordinate is the median, and we consider what happens when we move it up by $d > 0$ units. All oil wells at or below the median become $d$ units farther from the pipeline, and there are at least $(n + 1) / 2$ such wells (the one at the median and the $(n - 1) / 2$ at or below the median. There are at most $(n - 1) / 2$ oil wells above the median, and each of these becomes at most d units closer to the pipeline. We get a lower bound on $s'$ of $s' \\ge s + d(n + 1) / 2 - d(n - 1) / 2 = s + d > s$, and we conclude that moving the pipeline up from the oil well at the median increases the total spur length. A symmetric argument shows that moving the pipeline down from the median also increases the total spur length, and so the optimal placement of the pipeline is on the median. (claim)\n\n\nSince we know we are looking for the median, we can use the linear-time median-finding algorithm.",
            "title": "9.3 Selection in worst-case linear time"
        },
        {
            "location": "/Chap09/9.3/#93-1",
            "text": "In the algorithm $\\text{SELECT}$, the input elements are divided into groups of $5$. Will the algorithm work in linear time if they are divided into groups of $7$? Argue that $\\text{SELECT}$ does not run in linear time if groups of $3$ are used.   For groups of $7$, the algorithm still works in linear time. The number of elements greater than $x$ (and similarly, the number less than $x$) is at least  $$4\\Bigg(\\Bigg\\lceil \\frac{1}{2} \\Big\\lceil \\frac{n}{7} \\Big\\rceil\\Bigg\\rceil - 2\\Bigg) \\ge \\frac{2n}{7} - 8,$$  and the recurrence becomes  $$T(n) \\le T(\\lceil n/7 \\rceil) + T(5n/7 + 8) + O(n),$$  which can be shown to be $O(n)$ by substitution, as for the groups of $5$ case in the text.  For groups of $3$, however, the algorithm no longer works in linear time. The number of elements greater than $x$, and the number of elements less than $x$, is at least  $$2\\Bigg(\\Bigg\\lceil \\frac{1}{2} \\Big\\lceil \\frac{n}{3} \\Big\\rceil\\Bigg\\rceil - 2\\Bigg) \\ge \\frac{n}{3} - 4,$$  and the recurrence becomes  $$T(n) \\le T(\\lceil n / 3 \\rceil) + T(2n / 3 + 4) + O(n),$$  which does not have a linear solution.  We can prove that the worst-case time for groups of $3$ is \u007f$\\Omega(n\\lg n)$. We do so by deriving a recurrence for a particular case that takes \u007f$\\Omega(n\\lg n)$ time.  In counting up the number of elements greater than $x$ (and similarly, the number less than $x$), consider the particular case in which there are exactly $\\Big\\lceil \\frac{1}{2} \\Big\\lceil \\frac{n}{3} \\Big\\rceil\\Big\\rceil$ groups with medians $\\ge x$ and in which the \"leftover\" group does contribute 2 elements greater than $x$. Then the number of elements greater than $x$ is exactly $2\\Big(\\Big\\lceil \\frac{1}{2} \\Big\\lceil \\frac{n}{3} \\Big\\rceil\\Big\\rceil - 1\\Big) + 1$ (the $-1$ discounts $x$'s group, as usual, and the $+1$ is contributed by $x$'s group) $= 2\\lceil n / 6 \\rceil - 1$, and the recursive step for elements $\\le x$ has $n - (2 \\lceil n / 6 \\rceil - 1) \\ge n - (2(n / 6 + 1) - 1) = 2n / 3 - 1$ elements. Observe also that the $O(n)$ term in the recurrence is really $\\Theta(n)$, since the partitioning in step 4 takes $\\Theta(n)$ (not just $O(n)$) time. Thus, we get the recurrence  \\begin{align}\nT(n) & \\ge T(\\lceil n / 3 \\rceil) + T(2n / 3 - 1) + \\Theta(n) \\\\\n     & \\ge T(n / 3) + T(2n / 3 - 1) + \\Theta(n),\n\\end{align}  from which you can show that $T(n) \\ge cn\\lg n$ by substitution. You can also see that $T(n)$ is nonlinear by noticing that each level of the recursion tree sums to $n$.  [In fact, any odd group size $\\ge 5$ works in linear time.]",
            "title": "9.3-1"
        },
        {
            "location": "/Chap09/9.3/#93-2",
            "text": "Analyze $\\text{SELECT}$ to show that if $n \\ge 140$, then at least $\\lceil n / 4 \\rceil$ elements are greater than the median-of-medians $x$ and at least $\\lceil n / 4 \\rceil$ elements are less than $x$.   \\begin{align}\n\\frac{3n}{10} - 6 & \\ge \\lceil \\frac{n}{4} \\rceil \\\\\n\\frac{3n}{10} - 6 & \\ge \\frac{n}{4} + 1 \\\\\n        12n - 240 & \\ge 10n + 40 \\\\\n                n & \\ge 140.\n\\end{align}",
            "title": "9.3-2"
        },
        {
            "location": "/Chap09/9.3/#93-3",
            "text": "Show how quicksort can be made to run in $O(n\\lg n)$ time in the worst case, assuming that all elements are distinct.   A modification to quicksort that allows it to run in $O(n\\lg n)$ time in the worst case uses the deterministic $\\text{PARTITION}$ algorithm that was modified to take an element to partition around as an input parameter.  $\\text{SELECT}$ takes an array $A$, the bounds $p$ and $r$ of the subarray in $A$, and the rank $i$ of an order statistic, and in time linear in the size of the subarray $A[p..r]$\u008d it returns the ith smallest element in $A[p..r]$.  BEST - CASE - QUICKSORT ( A ,   p ,   r ) \n     if   p   <   r \n         i   =   floor (( r   -   p   +   1 )   /   2 ) \n         x   =   SELECT ( A ,   p ,   r ,   i ) \n         q   =   PARTITION ( x ) \n         BEST - CASE - QUICKSORT ( A ,   p ,   q   -   1 ) \n         BEST - CASE - QUICKSORT ( A ,   q   +   1 ,   r )   For an $n$-element array, the largest subarray that $\\text{BEST-CASE-QUICKSORT}$ recurses on has $n / 2$ elements. This situation occurs when $n = r - p + 1$ is even; then the subarray $A[q + 1..r]$\u008d has $n / 2$ elements, and the subarray $A[p..q - 1]$\u008d has $n / 2 - 1$ elements.  Because $\\text{BEST-CASE-QUICKSORT}$ always recurses on subarrays that are at most half the size of the original array, the recurrence for the worst-case running time is $T(n) \\le 2T(n / 2) + \\Theta(n) = O(n\\lg n)$.",
            "title": "9.3-3"
        },
        {
            "location": "/Chap09/9.3/#93-4-star",
            "text": "Suppose that an algorithm uses only comparisons to find the $i$th smallest element in a set of $n$ elements. Show that it can also find the $i - 1$ smaller elements and $n - i$ larger elements without performing additional comparisons.   Create a graph with $n$ vertices and draw a directed edge from vertex $i$ to vertex $j$ if the $i$th and $j$th elements of the array are compared in the algorithm and we discover that $A[i] \\ge A[j]$. Observe that $A[i]$ is one of the $i - 1$ smaller elements if there exists a path from $x$ to $i$ in the graph, and $A[i]$ is one of the $n - i$ larger elements if there exists a path from $i$ to $x$ in the graph. Every vertex $i$ must either lie on a path to or from $x$ because otherwise the algorithm can't distinguish between $i \\le x$ and $i \\ge x$. Moreover, if a vertex $i$ lies on both a path to $x$ and a path from $x$, then it must be such that $x \\le A[i] \\le x$,so $x = A[i]$. In this case, we can break ties arbitrarily.",
            "title": "9.3-4 $\\star$"
        },
        {
            "location": "/Chap09/9.3/#93-5",
            "text": "Suppose that you have a \"black-box\" worst-case linear-time median subroutine. Give a simple, linear-time algorithm that solves the selection problem for an arbitrary order statistic.   We assume that are given a procedure $\\text{MEDIAN}$ that takes as parameters an array $A$ and subarray indices $p$ and $r$, and returns the value of the median element of $A[p..r]$ in $O(n)$ time in the worst case.  Given $\\text{MEDIAN}$, here is a linear-time algorithm $\\text{SELECT}'$ for finding the $i$th smallest element in $A[p..r]$. This algorithm uses the deterministic $\\text{PARTITION}$ algorithm that was modified to take an element to partition around as an input parameter.  SELECT ' ( A ,   p ,   r ,   i ) \n     if   p   ==   r \n         return   A [ p ] \n     x   =   MEDIAN ( A ,   p ,   r ) \n     q   =   PARTITION ( x ) \n     k   =   q   -   p   +   1 \n     if   i   ==   k \n         return   A [ q ] \n     else   if   i   <   k \n         return   SELECT ' ( A ,   p ,   q   -   1 ,   i ) \n     else   return   SELECT ' ( A ,   q   +   1 ,   r ,   i   -   k )   Because $x$ is the median of $A[p..r]$\u008d, each of the subarrays $A[p..q - 1]$\u008d and $A[q + 1..r]$\u008d has at most half the number of elements of $A[p..r]$\u008d. The recurrence for the worst-case running time of $\\text{SELECT}'$ is $T(n) \\le T(n / 2) + O(n) = O(n)$.",
            "title": "9.3-5"
        },
        {
            "location": "/Chap09/9.3/#93-6",
            "text": "The $k$th  quantiles  of an $n$-element set are the $k - 1$ order statistics that divide the sorted set into $k$ equal-sized sets (to within $1$). Give an $O(n\\lg k)$-time algorithm to list the $k$th quantiles of a set.   Pre-calculate the positions of the quantiles in $O(k)$, we use the $O(n)$ select algorithm to find the $\\lfloor k / 2 \\rfloor$th position, after that the elements are divided into two sets by the pivot the $\\lfloor k / 2 \\rfloor$th position, we do it recursively in the two sets to find other positions. Since the maximum depth is $\\lceil \\lg k \\rceil$, the total running time is $O(n\\lg k)$.  PARTITION ( A ,   p ,   r ) \n     x   =   A [ r ] \n     i   =   p \n     for   k   =   p   to   r \n         if   A [ k ]   <   x \n             i   =   i   +   1 \n             swap ( A [ i ],   A [ k ]) \n     i   =   i   +   1 \n     swap ( a [ i ],   a [ r ]) \n     return   i   RANDOMIZED - PARTITION ( A ,   p ,   r ) \n     x   =   rand ( p ,   r ) \n     swap ( A [ x ],   A [ r ]) \n     return   PARTITION ( A ,   p ,   r )   RANDOMIZED - SELECT ( A ,   p ,   r ,   i ) \n     while   TRUE \n         if   p   ==   r \n             return   p ,   A [ p ] \n         q   =   RANDOMIZED - PARTITION ( A ,   p ,   r ) \n         k   =   q   -   p   +   1 \n         if   i   ==   k \n             return   q ,   A [ q ] \n         if   i   <   k \n             r   =   q \n         else \n             p   =   q   +   1 \n             i   =   i   -   k   k - QUANTITLES - SUB ( A ,   p ,   r ,   pos ,   f ,   e ,   quantiles ) \n     if   f   +   1   >   e \n         return \n     mid   =   ( f   +   e )   /   2 \n     q ,   val   =   RANDOMIZED - SELECT ( A ,   p ,   r ,   pos [ mid ) \n     quantiles [ mid ]   =   val \n     k   =   q   -   p   +   1 \n     for   i   =   mid   +   1   to   e \n         pos [ i ]   =   pos [ i ]   -   k \n     k - QUANTILES - SUB ( A ,   q   +   1 ,   r ,   pos ,   mid   +   1 ,   e ,   quantiles )   k - QUANTITLES ( A ,   k ) \n     num   =   A . size ()   /   k \n     mod   =   A . size ()   %   k \n     pos   =   num [ 1. . k ] \n     for   i   =   1   to   mod \n         pos [ i ]   =   pos [ i ]   +   1 \n     for   i   =   1   to   k \n         pos [ i ]   =   pos [ i ]   +   pos [ i   -   1 ] \n     quantiles   =   [ 1. . k ] \n     k - QUANTITLES - SUB ( A ,   0 ,   A . length ,   pos ,   0 ,   pos . size (),   quantiles ) \n     return   quantiles",
            "title": "9.3-6"
        },
        {
            "location": "/Chap09/9.3/#93-7",
            "text": "Describe an $O(n)$-time algorithm that, given a set $S$ of $n$ distinct numbers and a positive integer $k \\le n$, determines the $k$ numbers in $S$ that are closest to the median of $S$.   Find the median in $O(n)$; create a new array, each element is the absolute value of the original value subtract the median; find the $k$th smallest number in $O(n)$,  then the desired values are the elements whose absolute difference with the median is less than or equal to the $k$th smallest number in the new array.",
            "title": "9.3-7"
        },
        {
            "location": "/Chap09/9.3/#93-8",
            "text": "Let $X[1..n]$ and $Y[1..n]$ be two arrays, each containing $n$ numbers already in sorted order. Give an $O(\\lg n)$-time algorithm to find the median of all $2n$ elements in arrays $X$ and $Y$.   Let's start out by supposing that the median (the lower median, since we know we have an even number of elements) is in $X$. Let's call the median value $m$, and let's suppose that it's in $X[k]$\u008d. Then $k$ elements of $X$ are less than or equal to $m$ and $n - k$ elements of X are greater than or equal to m. We know that in the two arrays combined, there must be $n$ elements less than or equal to $m$ and $n$ elements greater than or equal to $m$, and so there must be $n - k$ elements of $Y$ that are less than or equal to $m$ and $n - (n - k)=k$ elements of $Y$ that are greater than or equal to $m$.  Thus, we can check that $X[k]$\u008d is the lower median by checking whether $Y[n - k] \\le X[k] \\le Y[n - k + 1]$. A boundary case occurs for $k = n$. Then $n - k = 0$, and there is no array entry $Y[0]$\u008d; we only need to check that $X[n] \\le Y[1]$\u008d.  Now, if the median is in $X$ but is not in $X[k]$\u008d, then the above condition will not hold. If the median is in $X[k']$ \u008d, where $k' < k$, then $X[k]$\u008d is above the median, and $Y[n - k + 1] < X[k]$\u008d. Conversely, if the median is in $X[k'']$\u008d, where $k'' > k$, then $X[k]$\u008d is below the median, and $X[k] < Y[n - k]$\u008d.  Thus, we can use a binary search to determine whether there is an $X[k]$\u008d such that either $k < n$ and $X[n - k] \\le Y[k] \\le X[n - k + 1]$ or $k = n$ and $X[k] \\le Y[n - k + 1]$; if we find such an $X[k]$\u008d, then it is the median. Otherwise, we know that the median is in $Y$, and we use a binary search to find a $Y[k]$\u008d such that either $k < n$ and $X[n - k] \\le Y[k] \\le X[n - k + 1]$ or $k = n$\u008d is the median. Since each binary search takes $O(\\lg n)$ time, we spend a total of $O(\\lg n)$ time.  Here's how we write the algorithm in pseudocode:  TWO - ARRAY - MEDIAN ( X ,   Y ) \n     n   =   X . length          // n also equals Y.length \n     median   =   FIND - MEDIAN ( X ,   Y ,   n ,   1 ,   n ) \n     if   median   ==   NOT - FOUND \n         median   =   FIND - MEDIAN ( Y ,   X ,   n ,   1 ,   n ) \n     return   median   FIND - MEDIAN ( A ,   B ,   n ,   low ,   hign ) \n     if   low   >   high \n         return   NOT - FOUND \n     else   k   =   floor (( low   +   high )   /   2 ) \n         if   k   ==   n   and   A [ n ]   \u2264   B [ 1 ] \n             return   A [ n ] \n         else   if   k   <   n   and   B [ n   -   k ]   \u2264   A [ k ]   \u2264   B [ n   -   k   +   1 ] \n             return   A [ k ] \n         else   A [ k ]   >   B [ n   -   k   +   1 ] \n             return   FIND - MEDIAN ( A ,   B ,   n ,   low ,   k   -   1 ) \n         else   return   FIND - MEDIAN ( A ,   B ,   n ,   k   +   1 ,   high )",
            "title": "9.3-8"
        },
        {
            "location": "/Chap09/9.3/#93-9",
            "text": "Professor Olay is consulting for an oil company, which is planning a large pipeline running east to west through an oil field of $n$ wells. The company wants to connect a spur pipeline from each well directly to the main pipeline along a shortest route (either north or south), as shown in Figure 9.2. Given the $x$- and $y$-coordinates of the wells, how should the professor pick the optimal location of the main pipeline, which would be the one that minimizes the total length of the spurs? Show how to determine the optimal location in linear time.   In order to find the optimal placement for Professor Olay's pipeline, we need only find the median(s) of the $y$-coordinates of his oil wells, as the following proof explains.  Claim    The optimal $y$-coordinate for Professor Olay's east-west oil pipeline is as follows:   If $n$ is even, then on either the oil well whose $y$-coordinate is the lower median or the one whose $y$-coordinate is the upper median, or anywhere between them.  If $n$ is odd, then on the oil well whose $y$-coordinate is the median.   Proof    We examine various cases. In each case, we will start out with the pipeline at a particular $y$-coordinate and see what happens when we move it. We'll denote by $s$ the sum of the north-south spurs with the pipeline at the starting location, and $s'$ will denote the sum after moving the pipeline.  We start with the case in which n is even. Let us start with the pipeline somewhere on or between the two oil wells whose $y$-coordinates are the lower and upper medians. If we move the pipeline by a vertical distance $d$ without crossing either of the median wells, then $n / 2$ of the wells become $d$ farther from the pipeline and $n / 2$ become $d$ closer, and so $s' = s + dn / 2 - dn / 2 = s$; thus, all locations on or between the two medians are equally good.  Now suppose that the pipeline goes through the oil well whose $y$-coordinate is the upper median. What happens when we increase the $y$-coordinate of the pipeline by $d > 0$ units, so that it moves above the oil well that achieves the upper median? All oil wells whose $y$-coordinates are at or below the upper median become d units farther from the pipeline, and there are at least $n / 2 + 1$ such oil wells (the upper median, and every well at or below the lower median). There are at most $n / 2 - 1$ oil wells whose $y$-coordinates are above the upper median, and each of these oil wells becomes at most d units closer to the pipeline when it moves up. Thus, we have a lower bound on $s'$ of $s' \\ge s + d(n / 2 + 1) - d(n / 2 - 1) = s + 2d > s$. We conclude that moving the pipeline up from the oil well at the upper median increases the total spur length. A symmetric argument shows that if we start with the pipeline going through the oil well whose $y$-coordinate is the lower median and move it down, then the total spur length increases.  We see, therefore, that when $n$ is even, an optimal placement of the pipeline is anywhere on or between the two medians.  Now we consider the case when $n$ is odd. We start with the pipeline going through the oil well whose $y$-coordinate is the median, and we consider what happens when we move it up by $d > 0$ units. All oil wells at or below the median become $d$ units farther from the pipeline, and there are at least $(n + 1) / 2$ such wells (the one at the median and the $(n - 1) / 2$ at or below the median. There are at most $(n - 1) / 2$ oil wells above the median, and each of these becomes at most d units closer to the pipeline. We get a lower bound on $s'$ of $s' \\ge s + d(n + 1) / 2 - d(n - 1) / 2 = s + d > s$, and we conclude that moving the pipeline up from the oil well at the median increases the total spur length. A symmetric argument shows that moving the pipeline down from the median also increases the total spur length, and so the optimal placement of the pipeline is on the median. (claim)  Since we know we are looking for the median, we can use the linear-time median-finding algorithm.",
            "title": "9.3-9"
        },
        {
            "location": "/Chap09/Problems/9-1/",
            "text": "Given a set of $n$ numbers, we wish to find the $i$ largest in sorted order using a comparison-based algorithm. Find the algorithm that implements each of the following methods with the best asymptotic worst-case running time, and analyze the running times of the algorithms in terms of $n$ and $i$ .\n\n\na.\n Sort the numbers, and list the $i$ largest.\n\n\nb.\n Build a max-priority queue from the numbers, and call $\\text{EXTRACT-MAX}$ $i$ times.\n\n\nc.\n Use an order-statistic algorithm to find the $i$th largest number, partition around that number, and sort the $i$ largest numbers.\n\n\n\n\nWe assume that the numbers start out in an array.\n\n\na.\n Sort the numbers using merge sort or heapsort, which take $\\Theta(n\\lg n)$ worst-case time. (Don't use quicksort or insertion sort, which can take $\\Theta(n^2)$ time.) Put the $i$ largest elements (directly accessible in the sorted array) into the output array, taking $\\Theta(i)$ time.\n\n\nTotal worst-case running time: $\\Theta(n\\lg n + i) = \\Theta(n\\lg n)$ (because $i \\le n$).\n\n\nb.\n Implement the priority queue as a heap. Build the heap using $\\text{BUILD-HEAP}$, which takes $\\Theta(n)$ time, then call $\\text{HEAP-EXTRACT-MAX}$ $i$ times to get the $i$ largest elements, in $\\Theta(i\\lg n)$ worst-case time, and store them in reverse order of extraction in the output array. The worst-case extraction time is $\\Theta(i\\lg n)$ because\n\n\n\n\n$i$ extractions from a heap with $O(n)$ elements takes $i \\cdot O(\\lg n) = O(i\\lg n)$ time, and \n\n\nhalf of the $i$ extractions are from a heap with $\\ge n / 2$ elements, so those $i / 2$ extractions take $(i / 2)\\Omega(\\lg n / 2)) = \\Omega(i\\lg n)$ time in the worst case.\n\n\n\n\nTotal worst-case running time: $\\Theta(n + i\\lg n)$.\n\n\nc.\n Use the $\\text{SELECT}$ algorithm of Section 9.3 to find the $i$th largest number in $\\Theta(n)$ time. Partition around that number in $\\Theta(n)$ time. Sort the i largest numbers in $\\Theta(i\\lg i)$ worst-case time (with merge sort or heapsort).\n\n\nTotal worst-case running time: $\\Theta(n + i\\lg i)$.\n\n\nNote that method (c) is always asymptotically at least as good as the other two methods, and that method (b) is asymptotically at least as good as (a). (Comparing (c) to (b) is easy, but it is less obvious how to compare (c) and (b) to (a). (c) and (b) are asymptotically at least as good as (a) because $n$, $i\\lg i$, and $i\\lg n$ are all $O(n\\lg n)$. The sum of two things that are $O(n\\lg n)$ is also $O(n\\lg n)$.)",
            "title": "9-1 Largest ii numbers in sorted order"
        },
        {
            "location": "/Chap09/Problems/9-2/",
            "text": "For $n$ distinct elements $x_1, x_2, \\ldots, x_n$ with positive weights $w_1, w_2, \\ldots, w_n$ such that $\\sum_{i = 1}^n w_i = 1$, the \nweighted (lower) median\n is the element $x_k$ satisfying\n\n\n$$\\sum_{x_i < x_k} w_i < \\frac{1}{2}$$\n\n\nand\n\n\n$$\\sum_{x_i > x_k} w_i \\le \\frac{1}{2}.$$\n\n\nFor example, if the elements are $0.1, 0.35, 0.05, 0.1, 0.15, 0.05, 0.2$ and each element equals its weight (that is, $w_i = x_i$ for $i = 1, 2, \\ldots, 7$), then the median is $0.1$, but the weighted median is $0.2$.\n\n\na.\n Argue that the median of $x_1, x_2, \\ldots, x_n$ is the weighted median of the $x_i$ with weights $w_i = 1 / n$ for $i = 1, 2, \\ldots, n$.\n\n\nb.\n Show how to compute the weighted median of $n$ elements in $O(n\\lg n)$ worstcase time using sorting.\n\n\nc.\n Show how to compute the weighted median in $\\Theta(n)$ worst-case time using a linear-time median algorithm such as $\\text{SELECT}$ from Section 9.3.\n\n\nThe \npost-office location problem\n is defined as follows. We are given $n$ points $p_1, p_2, \\ldots, p_n$ with associated weights $w_1, w_2, \\ldots, w_n$. We wish to find a point $p$ (not necessarily one of the input points) that minimizes the sum $\\sum_{i = 1}^n w_i d(p, p_i)$, where $d(a, b)$ is the distance between points $a$ and $b$.\n\n\nd.\n Argue that the weighted median is a best solution for the $1$-dimensional postoffice location problem, in which points are simply real numbers and the distance between points $a$ and $b$ is $d(a, b) = |a - b|$.\n\n\ne.\n Find the best solution for the $2$-dimensional post-office location problem, in which the points are $(x,y)$ coordinate pairs and the distance between points $a = (x_1, y_1)$ and $b = (x_2, y_2)$ is the \nManhattan distance\n given by $d(a, b) = |x_1 - x_2| + |y_1 - y_2|$.\n\n\n\n\na.\n The median $x$ of the elements $x_1, x_2, \\ldots, x_n$, is an element $x = x_k$ satisfying $|{x_i: 1\\le i\\le n \\text{ and } x_i < x}| \\le n / 2$ and $|{x_i: 1 \\le i \\le n \\text{ and } x_i > x}| \\le n / 2$. If each element $x_i$ is assigned a weight $x_i = 1 / n$, then we get\n\n\n\\begin{align}\n\\sum_{x_i < x} w_i\n    & =   \\sum_{x_i < x} \\frac{1}{n} \\\\\n    & =   \\frac{1}{n} \\cdot \\sum_{x_i < x} 1 \\\\\n    & =   \\frac{1}{n} \\cdot |{x_i: 1\\le i\\le n\\text{ and } x_i < x}| \\\\\n    & \\le \\frac{1}{n} \\cdot \\frac{n}{2} \\\\\n    & =   \\frac{1}{2},\n\\end{align}\n\n\nand \n\n\n\\begin{align}\n\\sum_{x_i > x} w_i\n    & =   \\sum_{x_i > x} \\frac{1}{n} \\\\\n    & =   \\frac{1}{n} \\cdot \\sum_{x_i > x} 1 \\\\\n    & =   \\frac{1}{n} \\cdot |{x_i: 1\\le i\\le n\\text{ and } x_i > x}| \\\\\n    & \\le \\frac{1}{n} \\cdot \\frac{n}{2} \\\\\n    & =   \\frac{1}{2},\n\\end{align}\n\n\nwhich proves that $x$ is also the weighted median of $x_1, x_2, \\ldots, x_n$ with weights $x_i = 1 / n$, for $i = 1, 2, \\ldots, n$.\n\n\nb.\n We first sort the $n$ elements into increasing order by $x_i$ values. Then we scan the array of sorted $x_i$'s, starting with the smallest element and accumulating weights as we scan, until the total exceeds $1 / 2$. The last element, say $x_k$, whose weight caused the total to exceed $1 / 2$, is the weighted median. Notice that the total weight of all elements smaller than $x_k$ is less than $1 / 2$, because $x_k$ was the first element that caused the total weight to exceed $1 / 2$. Similarly, the total weight of all elements larger than $x_k$ is also less than $1 / 2$, because the total weight of all the other elements exceeds $1 / 2$.\n\n\nThe sorting phase can be done in $O(n\\lg n)$ worst-case time (using merge sort or heapsort), and the scanning phase takes $O(n)$ time. The total running time in the worst case, therefore, is $O(n\\lg n)$.\n\n\nc.\n We find the weighted median in $\\Theta(n)$ worst-case time using the $\\Theta(n)$ worst-case median algorithm in Section 9.3. (Although the first paragraph of the section only claims an $O(n)$ upper bound, it is easy to see that the more precise running time of $\\Theta(n)$ applies as well, since steps 1, 2, and 4 of $\\text{SELECT}$ actually take $\\Theta(n)$ time.)\n\n\nThe weighted-median algorithm works as follows. If $n \\le 2$, we just return the brute-force solution. Otherwise, we proceed as follows. We find the actual median $x_k$ of the $n$ elements and then partition around it. We then compute the total weights of the two halves. If the weights of the two halves are each strictly less than $1 / 2$, then the weighted median is $x_k$ . Otherwise, the weighted median should be in the half with total weight exceeding $1 / 2$. The total weight of the \"light\" half is lumped into the weight of $x_k$ , and the search continues within the half that weighs more than $1 / 2$. Here's pseudocode, which takes as input a set $X = {x_1, x_2, \\ldots, x_n}$:\n\n\nWEIGHTED\n-\nMEDIAN\n(\nX\n)\n\n    \nif\n \nn\n \n==\n \n1\n\n        \nreturn\n \nx1\n\n    \nelse\n \nif\n \nn\n \n==\n \n2\n\n        \nif\n \nw1\n \n\u2265\n \nw2\n\n            \nreturn\n \nx1\n\n        \nelse\n \nreturn\n \nx2\n\n    \nelse\n \nfind\n \nthe\n \nmedian\n \nxk\n \nof\n \nX\n \n=\n \n{\nx1\n,\n \nx2\n,...,\n \nxn\n}\n\n        \npartition\n \nthe\n \nset\n \nX\n \naround\n \nxk\n\n        \ncompute\n \nWL\n \n=\n \nsum_\n{\nxi\n \n<\n \nxk\n}(\nwi\n)\n \nand\n \nWG\n \n=\n \nsum_\n{\nxi\n \n>\n \nxk\n}(\nwi\n)\n\n        \nif\n \nWL\n \n<\n \n1\n \n/\n \n2\n \nand\n \nWG\n \n<\n \n1\n \n/\n \n2\n\n            \nreturn\n \nxk\n\n        \nelse\n \nif\n \nWL\n \n>\n \n1\n \n/\n \n2\n\n            \nwk\n \n=\n \nwk\n \n+\n \nWG\n\n            \nX\n'\n \n=\n \n{\nxi\n \n\u2208\n \nX\n:\n \nxi\n \n\u2264\n \nxk\n}\n\n            \nreturn\n \nWEIGHTED\n-\nMEDIAN\n(\nX\n'\n)\n\n        \nelse\n \nwk\n \n=\n \nwk\n \n+\n \nWL\n\n            \nX\n'\n \n=\n \n{\nxi\n \n\u2208\n \nX\n:\n \nxi\n \n\u2265\n \nxk\n}\n\n            \nreturn\n \nWEIGHTED\n-\nMEDIAN\n(\nX\n'\n)\n\n\n\n\n\nThe recurrence for the worst-case running time of $\\text{WEIGHTED-MEDIAN}$ is $T(n) = T(n / 2 + 1) + \\Theta(n)$, since there is at most one recursive call on half the number of elements, plus the median element $x_k$, and all the work preceding the recursive call takes $\\Theta(n)$ time. The solution of the recurrence is $T (n) = \\Theta(n)$.\n\n\nd.\n Let the $n$ points be denoted by their coordinates $x_1, x_2, \\ldots, x_n$, let the corresponding weights be $w_1, w_2, \\ldots, w_n$, and let $x = x_k$ be the weighted median. For any point $p$, let $f(p) = \\sum_{i = 1}^n w_i |p - x_i|$; we want to find a point $p$ such that $f(p)$ is minimum. Let $y$ be any point (real number) other than $x$. We show the optimality of the weighted median $x$ by showing that $f(y) - f(x) \\ge 0$. We examine separately the cases in which $y > x$ and $x > y$. For any $x$ and $y$, we have\n\n\n\\begin{align}\nf(y) - f(x) & = \\sum_{i = 1}^n w_i |y - x_i| - \\sum_{i = 1}^n w_i |x - x_i| \\\\\n            & = \\sum_{i = 1}^n w_i (|y - x_i| - |x - x_i|).\n\\end{align}\n\n\nWhen $y > x$, we bound the quantity $|y - x_i| - |x - x_i|$ from below by examining three cases:\n\n\n\n\n$x < y \\le x_i$: Here, $|x - y| + |y - x_i| = |x - x_i|$ and $|x - y| = y - x$, which imply that $|y - x_i| - |x - x_i| = -|x - y| = x - y$.\n\n\n$x < x_i \\le y$: Here, $|y - x_i| \\ge 0$ and $|x_i - x| \\le y - x$, which imply that $|y - x_i| - |x - x_i| \\ge -(y - x) = x - y$.\n\n\n$x_i \\le x < y$: Here, $|x - x_i| + |y - x| = |y - x_i|$ and $|y - x| = y - x$, which imply that $y - x_i| - |x - x_i| = |y - x| = y - x$.\n\n\n\n\nSeparating out the first two cases, in which $x < x_i$, from the third case, in which $x \\ge x_i$, we get\n\n\n\\begin{align}\nf(y) - f(x) & =   \\sum_{i = 1}^n w_i(|y - x_i| - |x - x_i|) \\\\\n            & \\ge \\sum_{x < x_i} w_i (x - y) + \\sum_{x \\ge x_i} w_i (y - x) \\\\\n            & =   (y - x) \\Bigg(\\sum_{x \\ge x_i} w_i - \\sum_{x < x_i} w_i \\Bigg).\n\\end{align}\n\n\nThe property that $\\sum_{x_i < x} w_i < 1 / 2$ implies that $\\sum_{x \\ge x_i} w_i \\ge 1 / 2$. This fact, combined with $y - x > 0$ and $\\sum_{x < x_i} w_i \\le 1 / 2$, yields that $f(y) - f(x) \\ge 0$.\n\n\nWhen $x > y$, we bound the quantity $|y - x_i| - |x - x_i|$ from below by examining three cases:\n\n\n\n\n$x_i \\le y < x$: Here, $|y - x_i| + |x - y| = |x - x_i|$ and $|x - y| = x - y$, which imply that $|y - x_i| - |x - x_i| = -|x - y| = y - x$.\n\n\n$y \\le x_i < x$: Here, $|y - x_i| \\ge 0$ and $|x - x_i| \\le x - y$, which imply that $|y - x_i| - |x - x_i| \\ge -(x - y) = y - x$.\n\n\n$y < x \\le x_i$: Here, $|x - y| + |x - x_i| = |y - x_i|$ and $|x - y| = x - y$, which imply that $y - x_i| - |x - x_i| = |x - y| = x - y$.\n\n\n\n\nSeparating out the first two cases, in which $x > x_i$, from the third case, in which $x \\le x_i$, we get\n\n\n\\begin{align}\nf(y) - f(x) & =   \\sum_{i = 1}^n w_i(|y - x_i| - |x - x_i|) \\\\\n            & \\ge \\sum_{x > x_i} w_i(y - x) + \\sum_{x \\ge x_i} w_i(x - y) \\\\\n            & =   (x - y) \\Bigg(\\sum_{x \\le x_i} w_i - \\sum_{x > x_i} w_i \\Bigg).\n\\end{align}\n\n\nThe property that $sum_{x_i > x} w_i \\le 1 / 2$ implies that $\\sum_{x \\le x_i} w_i > 1 / 2$. This fact, combined with $x - y > 0$ and $\\sum_{x > x_i} w_i < 1 / 2$, yields that $f(y) - f(x) > 0$.\n\n\ne.\n We are given $n$ 2-dimensional points $p_1, p_2, \\ldots, p_n$, where each $p_i$ is a pair of real numbers $p_i = (x_i, y_i)$, and positive weights $w_1, w_2, \\ldots, w_n$. The goal is to find a point $p = (x, y)$ that minimizes the sum\n\n\n$$f(x, y) = \\sum_{i = 1}^n w_i(|x - x_i| + |y - y_i|).$$\n\n\nWe can express the cost function of the two variables, $f(x, y)$, as the sum of two functions of one variable each: $f(x, y) = g(x) + h(y)$, where $g(x) = \\sum_{i = 1}^n w_i |x - x_i|$, and $h(y) = \\sum_{i = 1}^n w_i |y - y_i|$. The goal of finding a point $p = (x, y)$ that minimizes the value of $f(x, y)$ can be achieved by treating each dimension independently, because $g$ does not depend on $y$ and $h$ does not depend on $x$. Thus,\n\n\n\\begin{align}\n\\min_{x, y} f(x, y)\n    & = \\min_{x, y} (g(x) + h(y)) \\\\\n    & = \\min_x \\Big(\\min_y(g(x) + h(y))\\Big) \\\\\n    & = \\min_x \\Big(g(x) + \\min_y h(y)\\Big) \\\\\n    & = \\min_x g(x) + \\min_y h(y).\n\\end{align}\n\n\nConsequently, finding the best location in 2 dimensions can be done by finding the weighted median $x_k$ of the $x$-coordinates and then finding the weighted median $y_j$ of the $y$-coordinates. The point $(x_k, y_j)$ is an optimal solution for the 2-dimensional post-office location problem.",
            "title": "9-2 Weighted median"
        },
        {
            "location": "/Chap09/Problems/9-3/",
            "text": "We showed that the worst-case number $T(n)$ of comparisons used by $\\text{SELECT}$ to select the $i$th order statistic from $n$ numbers satisfies $T(n) = \\Theta(n)$, but the constant hidden by the $\\Theta$-notation is rather large. When $i$ is small relative to $n$, we can implement a different procedure that uses $\\text{SELECT}$ as a subroutine but makes fewer comparisons in the worst case.\n\n\na.\n Describe an algorithm that uses $U_i(n)$ comparisons to find the $i$th smallest of $n$ elements, where\n\n\n$$\nU_i(n) = \n\\begin{cases} \nT(n) & = \\text{ if $i \\ge n / 2$}, \\\\\n\\lfloor n / 2 \\rfloor + U_i(\\lfloor n / 2 \\rfloor) + T(2i) & = \\text{ otherwise}.\n\\end{cases}\n$$\n\n\n($\\textit{Hint:}$ Begin with $\\lfloor n / 2 \\rfloor$ disjoint pairwise comparisons, and recurse on the set containing the smaller element from each pair.)\n\n\nb.\n Show that, if $i < n / 2$, then $U_i(n) = n + O(T(2i)\\lg(n / i))$.\n\n\nc.\n Show that if $i$ is a constant less than $n / 2$, then $U_i(n) = n + O(\\lg n)$.\n\n\nd.\n Show that if $i = n / k$ for $k \\ge 2$, then $U_i(n) = n + O(T(2n / k)\\lg k)$.\n\n\n\n\na.\n Our algorithm relies on a particular property of $\\text{SELECT}$: that not only does it return the $i$th smallest element, but that it also partitions the input array so that the first $i$ positions contain the $i$ smallest elements (though not necessarily in sorted order). To see that $\\text{SELECT}$ has this property, observe that there are only two ways in which returns a value: when $n = 1$, and when immediately after partitioning in step 4, it finds that there are exactly $i$ elements on the low side of the partition.\n\n\nTaking the hint from the book, here is our modified algorithm to select the $i$th smallest element of $n$ elements. Whenever it is called with $i \\ge n / 2$, it just calls $\\text{SELECT}$ and returns its result; in this case, $U_i(n) = T(n)$.\n\n\nWhen $i < n / 2$, our modified algorithm works as follows. Assume that the input is in a subarray $A[p + 1..p + n]$, and let $m = \\lfloor n / 2 \\rfloor$. In the initial call, $p = 1$.\n\n\n\n\nDivide the input as follows. If $n$ is even, divide the input into two parts: $A[p + 1..p + m]$ and $A[p + m + 1..p + n]$. If $n$ is odd, divide the input into three parts: $A[p + 1..p + m]$\u008d, $A[p + m + 1..p + n - 1]$\u008d, and $A[p + n]$\u008d as a leftover piece.\n\n\nCompare $A[p + i]$\u008d and $A[p + i + m]$ for $i = 1, 2, \\ldots, m$, putting the smaller of the the two elements into $A[p + i + m]$\u008d and the larger into $A[p + i]$\u008d.\n\n\nRecursively find the $i$th smallest element in $A[p + m + 1..p + n]$, but with an additional action performed by the partitioning procedure: whenever it exchanges $A[j]$ \u008d and $A[k]$\u008d (where $p + m + 1 \\le j$, $k \\le p + 2m$), it also exchanges $A[j - m]$\u008d and $A[k - m]$\u008d. The idea is that after recursively finding the $i$th smallest element in $A[p + m + 1..p + n]$\u008d, the subarray $A[p + m + 1..p + m + i]$\u008d contains the $i$ smallest elements that had been in $A[p + m + 1..p + n]$ and the subarray $A[p + 1..p + i]$\u008d contains their larger counterparts, as found in step 1. The ith smallest element of $A[p + 1..p + n]$ must be either one of the $i$ smallest, as placed into $A[p + m + 1..p + m + i]$\u008d, or it must be one of the larger counterparts, as placed into $A[p + 1..p + i]$.\n\n\nCollect the subarrays $A[p + 1..p + i]$ and $A[p + m + 1..p + m + i]$\u008d into a single array $B[1..2i]$\u008d, call $\\text{SELECT}$ to find the ith smallest element of $B$, and return the result of this call to $\\text{SELECT}$.\n\n\n\n\nThe number of comparisons in each step is as follows:\n\n\n\n\nNo comparisons.\n\n\n$m = \\lfloor n / 2 \\lfloor$ comparisons.\n\n\nSince we recurse on $A[p + m + 1..p + n]$, which has dn / 2e elements, the number of comparisons is $U_i(\\lceil n / 2 \\rceil)$.\n\n\nSince we call $\\text{SELECT}$ on an array with $2i$ elements, the number of comparisons is $T(2i)$.\n\n\n\n\nThus, when $i < n / 2$, the total number of comparisons is $\\lfloor n / 2 \\rfloor + U_i(\\lceil n / 2 \\rceil) + T(2i)$.\n\n\nb.\n We show by substitution that if $i < n / 2$, then $U_i(n) = n + O(T(2i)\\lg(n / i))$. In particular, we show that\n\n\n\\begin{align}\nU_i(n) & \\le n + cT (2i)\\lg(n / i) - d(\\lg\\lg n)T(2i) \\\\\n       & =   n + cT(2i)\\lg n - cT(2i)\\lg i - d(\\lg\\lg n)T(2i)\n\\end{align}\n\n\nfor some positive constant $c$, some positive constant $d$ to be chosen later, and $n \\ge 4$. We have\n\n\n\\begin{align}\nU_i(n) \n    & =   \\lfloor n / 2 \\rfloor + U_i(\\lceil n / 2 \\rceil) + T(2i) \\\\\n    & \\le \\lfloor n / 2 \\rfloor + \\lceil n / 2 \\rceil + cT(2i)\\lg\\lceil n / 2 \\rceil - cT(2i)\\lg i - d(\\lg\\lg\\lceil n / 2 \\rceil)T(2i) \\\\\n    & =   n + cT(2i)\\lg\\lceil n / 2 \\rceil - cT(2i)\\lg i - d(\\lg\\lg\\lceil n / 2 \\rceil)T(2i) \\\\\n    & \\le n + cT(2i)\\lg(n / 2 + 1) - cT(2i)\\lg i - d(\\lg\\lg(n / 2))T(2i) \\\\\n    & =   n + cT(2i)\\lg(n / 2 + 1) - cT(2i)\\lg i - d(\\lg(\\lg n - 1))T(2i) \\\\\n    & \\le n + cT(2i)\\lg n - cT(2i)\\lg i - d(\\lg\\lg n)T(2i).\n\\end{align}\n\n\nIf\n\n\ncT(2i)\\lg(n)2 + 1) - d(\\lg(\\lg n - 1))T(2i) \\le cT(2i)\\lg n - d(\\lg\\lg n)T(2i),\n\n\nsimple algebraic manipulations gives the following sequence of equivalent conditions:\n\n\n\\begin{align}\n& cT(2i)\\lg(n / 2 + 1) - d(\\lg(\\lg n - 1))T(2i) \\le cT(2i)\\lg n - d(\\lg\\lg n)T(2i) \\\\\n& c\\lg(n / 2 + 1) - d(\\lg(\\lg n - 1)) \\le c\\lg n - d(\\lg\\lg n) \\\\\n& c(\\lg(n / 2 + 1) - \\lg n) \\le d(\\lg(\\lg n - 1) - \\lg\\lg n) \\\\\n& c\\Bigg(\\lg\\frac{n / 2 + 1}{n}\\Bigg) \\le d\\lg\\frac{\\lg n - 1}{\\lg n} \\\\\n& c\\Bigg(\\lg\\Bigg(\\frac{1}{2} + \\frac{1}{n}\\Bigg)\\Bigg) \\le d\\lg\\frac{\\lg n - 1}{\\lg n}\n\\end{align}\n\n\nObserve that $1 / 2 + 1 / n$ decreases as $n$ increases, but $(\\lg n - 1) / \\lg n$ increases as $n$ increases. When $n = 4$, we have $1 / 2 + 1 / n = 3 / 4$ and $(\\lg n - 1) = \\lg n = 1 / 2$. Thus, we just need to choose $d$ such that $c\\lg(3 / 4) \\le d\\lg(1 / 2)$ or, equivalently, $c\\lg(3 / 4) \\le -d$. Multiplying both sides by $-1$, we get $d \\le -c\\lg(3 / 4) = c\\lg(4 / 3)$. Thus, any value of $d$ that is at most $c\\lg(4 / 3)$ suffices.\n\n\nc.\n When $i$ is a constant, $T(2i) = O(1)$ and $\\lg(n / i) = \\lg n - \\lg i = O(\\lg n)$.\n\n\nThus, when $i$ is a constant less than $n / 2$, we have that\n\n\n\\begin{align}\nU_i(n) & = n + O(T(2i)\\lg(n / i)) \\\\\n       & = n + O(O(1) \\cdot O(\\lg n)) \\\\\n       & = n + O(\\lg n).\n\\end{align}\n\n\nd.\n Suppose that $i = n / k$ for $k \\ge 2$. Then $i \\le n / 2$. If $k > 2$, then $i < n / 2$, and we have\n\n\n\\begin{align}\nU_i(n) & = n + O(T(2i)\\lg(n / i)) \\\\\n       & = n + O(T(2n / k)\\lg(n/(n / k)) \\\\\n       & = n + O(T(2n / k)\\lg k).\n\\end{align}\n\n\nIf $k = 2$, then $n = 2i$ and $\\lg k = 1$. We have\n\n\n\\begin{align}\nU_i(n) & =   T(n) \\\\\n       & =   n + (T(n) - n) \\\\\n       & \\le n + (T(2i) - n) \\\\\n       & =   n + (T(2n / k) - n) \\\\\n       & =   n + (T(2n / k)\\lg k - n) \\\\\n       & =   n + O(T(2n / k)\\lg k).\n\\end{align}",
            "title": "9-3 Small order statistics"
        },
        {
            "location": "/Chap09/Problems/9-4/",
            "text": "In this problem, we use indicator random variables to analyze the $\\text{RANDOMIZED-SELECT}$ procedure in a manner akin to our analysis of $\\text{RANDOMIZED-QUICKSORT}$ in Section 7.4.2.\n\n\nAs in the quicksort analysis, we assume that all elements are distinct, and we rename the elements of the input array $A$ as $z_1, z_2, \\ldots, z_n$, where $z_i$ is the $i$th smallest element. Thus, the call $\\text{RANDOMIZED-SELECT}(A, 1, n, k)$ returns $z_k$.\n\n\nFor $1 \\le i < j \\le n$, let\n\n\n$$X_{ijk} = \\text{I \\{$z_i$ is compared with $z_j$ sometime during the execution of the algorithm to find $z_k$\\}}.$$\n\n\na.\n Give an exact expression for $\\text E[X_{ijk}]$. ($\\textit{Hint:}$ Your expression may have differ- ent values, depending on the values of $i$, $j$, and $k$.)\n\n\nb.\n Let $X_k$ denote the total number of comparisons between elements of array $A$ when finding $z_k$. Show that\n\n\n$$\\text E[X_k] \\le 2 (\\sum_{i = 1}^{k}\\sum_{j = k}^n \\frac{1}{j - i + 1} + \\sum_{j = k + 1}^{n} \\frac{j - k - 1}{j - k + 1} + \\sum_{i = 1}^{k-2} \\frac{k - i - 1}{k - i + 1}).$$\n\n\nc.\n Show that $\\text E[X_k] \\le 4n$.\n\n\nd.\n Conclude that, assuming all elements of array $A$ are distinct, $\\text{RANDOMIZED-SELECT}$ runs in expected time $O(n)$.\n\n\n\n\na.\n As in the quicksort analysis, elements $z_i$ and $z_j$ will not be compared with each other if any element in $\\{z_{i + 1}, z_{i + 2}, \\ldots, z_{j - 1}\\}$ is chosen as a pivot element before either $z_i$ or $z_j$, because $z_i$ and $z_j$ would then lie in separate partitions. There can be another reason that $z_i$ and $z_j$ might not be compared, however. Suppose that $k < i$, so that $z_k < z_i$ , and suppose further that the element chosen as the pivot is $z_l$, where $k \\le l < i$. In this case, because $k \\le l$, the recursion won't consider elements indexed higher than $l$. Therefore, the recursion will never look at $z_i$ or $z_j$ , and they will never be compared with each other. Similarly, if $j < k$ and the pivot element $z_l$ is such that $j < l \\le k$, then the recursion won't consider elements indexed less than $l$, and again $z_i$ and $z_j$ will never be compared with each other. The final case is when $i \\le k \\le j$ (but disallowing $i = j$), so that $z_i \\le z_k \\le z_j$; in this case, we have the same analysis as for quicksort: $z_i$ and $z_j$ are compared with each other only if one of them is chosen as the pivot element.\n\n\nGetting back to the case in which $k < i$, it is again true that $z_i$ and $z_j$ are compared with each other only if one of them is chosen as the pivot element. As we know, they won't be compared with each other if the pivot element is between them, and we argued above that they won't be compared with each other if the pivot element is $z_l$ for $l < i$. Similarly, when $j < k$, elements $z_i$ and $z_j$ are compared with each other only if one of them is chosen as the pivot element.\n\n\nNow we need to compute the probability that $z_i$ and $z_j$ are compared with each other. Let $Z_{ijk}$ be the set of elements that includes $z_i, \\ldots, z_j$, along with $z_k, \\ldots, z_{i - 1}$ if $k < i$ or $z_{j + 1}, \\ldots, z_k$ if $j < k$. In other words,\n\n\n$$\nZ_{ijk} =\n\\begin{cases}\n{z_i, z_{i + 1}, \\ldots, z_j} & \\text{if $i \\le k \\le j$}, \\\\\n{z_k, z_{k + 1}, \\ldots, z_j} & \\text{if $k < i$}, \\\\\n{z_i, z_{i + 1}, \\ldots, z_k} & \\text{if $j < k$}.\n\\end{cases}\n$$\n\n\nWith this definition of $Z_{ijk}$, we have that\n\n\n$$|Z_{ijk}| = \\max(j - i + 1, j - k + 1, k - i + 1).$$\n\n\nAs in the quicksort analysis, we observe that until an element from $Z_{ijk}$ is chosen as the pivot, the whole set $Z_{ijk}$ is together in the same partition, and so each element of $Z_{ijk}$ is equally likely to be the first one chosen as the pivot.\n\n\nLetting $C$ be the event that $z_i$ is compared with $z_j$ during the execution of the algorithm, we have that\n\n\n\\begin{align}\n\\text E[X_{ijk}] \n    & = \\Pr{C} \\\\\n    & = \\Pr{z_i \\text{ or } z_j \\text{ is the first pivot chosen from } Z_{ijk}} \\\\\n    & = \\Pr{z_i \\text{ is the first pivot chosen from } Z_{ijk}} + \\Pr{z_j \\text{ is the first pivot chosen from } Z_{ijk}} \\\\\n    & = \\frac{1}{|Z_{ijk}|} + \\frac{1}{|Z_{ijk}|} \\\\\n    & = \\frac{2}{\\max(j - i + 1, j - k + 1, k - i + 1)}.\n\\end{align}\n\n\nb.\n Adding up all the possible pairs that might be compared gives\n\n\n$$X_k = \\sum_{i = 1}^{n - 1} \\sum_{j = i + 1}^n X_{ijk},$$\n\n\nand so, by linearity of expectation, we have\n\n\n\\begin{align}\n\\text E[X_k]\n    & = \\text E \\Bigg[\\sum_{i = 1}^{n - 1}\\sum_{j = i + 1}^n X_{ijk} \\Bigg] \\\\\n    & = \\sum_{i = 1}^{n - 1} \\sum_{j = i + 1}^n \\text E[X_{ijk}] \\\\\n    & = \\sum_{i = 1}^{n - 1} \\sum_{j = i + 1}^n \\frac{2}{\\max(j - i + 1, j - k + 1, k - i + 1)}.\n\\end{align}\n\n\nWe break this sum into the same three cases as before: $i \\le k \\le j$, $k < i$ and $j < k$. With $k$ fixed, we vary $i$ and $j$. We get an inequality because we cannot have $i = k = j$, but our summation will allow it:\n\n\n\\begin{align}\n\\text E[X_k]\n    & \\le 2\\Bigg(\\sum_{i = 1}^k \\sum_{j = k}^n \\frac{1}{j - i + 1} \n               + \\sum_{j = k + 1}^n \\sum_{i = k + 1}^{j - 1} \\frac{1}{j - k + 1} \n               + \\sum_{i = 1}^{k - 2} \\sum_{j = i + 1}^{k - 1} \\frac{1}{k - i + 1}\\Bigg) \\\\\n    & =   2\\Bigg(\\sum_{i = 1}^k \\sum_{j = k}^n \\frac{1}{j - i + 1} \n               + \\sum_{j = k + 1}^n \\frac{j - k - 1}{j - k + 1} \n               + \\sum_{i = 1}^{k - 2} \\frac{k - i - 1}{k - i + 1}\\Bigg).\n\\end{align}\n\n\nc.\n First, let's focus on the latter two summations. Each one sums fractions that are strictly less than 1. The middle summation has $n - k$ terms, and the right-hand summation has $k - 2$ terms, and so the latter two summations sum to less than $n$.\n\n\nNow we look at the first summation. Let $m = j - i$. There is only one way for $m$ to equal $0$: if $i = k = j$. There are only two ways for $m$ to equal $1$: if $i = k - 1$ and $j = k$, or if $i = k$ and $j = k + 1$. There are only three ways for $m$ to equal $2$: if $i = k - 2$ and $j = k$, if $i = k - 1$ and $j = k + 1$, or if $i = k$ and $j = k + 2$. Continuing on, we see that there are at most $m + 1$ ways for $j - i$ to equal $m$. Since $j - i \\le n - 1$, we can rewrite the first summation as\n\n\n$$\\sum_{m = 0}^{n - 1} \\frac{m + 1}{m + 1} = n.$$\n\n\nThus, we have\n\n\n\\begin{align}\n\\text E[X_k]\n    & < 2(n + n) \\\\\n    & = 4n.\n\\end{align}\n\n\nd.\n To show that $\\text{RANDOMIZED-SELECT}$ runs in expected time $O(n)$, we adapt Lemma 7.1 for $\\text{RANDOMIZED-SELECT}$. The adaptation is trivial: just replace the variable $X$ in the lemma statement by the random variable $X_k$ that we just analyzed. Thus, the expected running time of $\\text{RANDOMIZED-SELECT}$ is $O(n + X_k) = O(n)$.",
            "title": "9-4 Alternative analysis of randomized selection"
        },
        {
            "location": "/Chap10/10.1/",
            "text": "10.1-1\n\n\n\n\nUsing Figure 10.1 as a model, illustrate the result of each operation in the sequence $\\text{PUSH}(S, 4)$, $\\text{PUSH}(S, 1)$, $\\text{PUSH}(S, 3)$, $\\text{POP}(S)$, $\\text{PUSH}(S, 8)$, and $\\text{POP}(S)$ on an initially empty stack $S$ stored in array $S[1..6]$.\n\n\n\n\n\\begin{array}{l|ccc}\n\\text{PUSH($S, 4$)} & 4 &   &   \\\\   \n\n\\text{PUSH($S, 1$)} & 4 & 1 &   \\\\\n\\text{PUSH($S, 3$)} & 4 & 1 & 3 \\\\\n\n\\text{POP($S$)}     & 4 & 1 &   \\\\\n\\text{PUSH($S, 8$)} & 4 & 1 & 8 \\\\\n\\text{POP($S$)}     & 4 & 1 &\n\\end{array}\n\n\n10.1-2\n\n\n\n\nExplain how to implement two stacks in one array $A[1..n]$ in such a way that neither stack overflows unless the total number of elements in both stacks together is $n$. The $\\text{PUSH}$ and $\\text{POP}$ operations should run in $O(1)$ time.\n\n\n\n\nThe first stack starts at $1$ and grows up towards n, while the second starts form $n$ and grows down towards $1$. Stack overflow happens when an element is pushed when the two stack pointers are adjacent.\n\n\n10.1-3\n\n\n\n\nUsing Figure 10.2 as a model, illustrate the result of each operation in the sequence $\\text{ENQUEUE}(Q, 4)$, $\\text{ENQUEUE}(Q ,1)$, $\\text{ENQUEUE}(Q, 3)$, $\\text{DEQUEUE}(Q)$, $\\text{ENQUEUE}(Q, 8)$, and $\\text{DEQUEUE}(Q)$ on an initially empty queue $Q$ stored in array $Q[1..6]$.\n\n\n\n\n\\begin{array}{l|cccc}\n\\text{ENQUEUE($Q, 4$)} & 4 &   &   &   \\\\\n\\text{ENQUEUE($Q, 1$)} & 4 & 1 &   &   \\\\\n\\text{ENQUEUE($Q, 3$)} & 4 & 1 & 3 &   \\\\\n\\text{DEQUEUE($Q$)}    &   & 1 & 3 &   \\\\\n\\text{ENQUEUE($Q, 8$)} &   & 1 & 3 & 8 \\\\\n\\text{DEQUEUE($Q$)}    &   &   & 3 & 8\n\\end{array}\n\n\n10.1-4\n\n\n\n\nRewrite $\\text{ENQUEUE}$ and $\\text{DEQUEUE}$ to detect underflow and overflow of a queue.\n\n\n\n\nENQUEUE\n(\nQ\n,\n \nx\n)\n\n    \nif\n \nQ\n.\nhead\n \n==\n \nQ\n.\ntail\n\n        \nerror\n \n\"Queue overflow\"\n\n    \nQ\n[\nQ\n.\ntail\n]\n \n=\n \nx\n\n    \nif\n \nQ\n.\nhead\n \n==\n \nNIL\n\n        \nQ\n.\nhead\n \n=\n \nQ\n.\ntail\n\n    \nif\n \nQ\n.\ntail\n \n==\n \nQ\n.\nlength\n\n        \nQ\n.\ntail\n \n=\n \n1\n\n    \nelse\n \nQ\n.\ntail\n \n=\n \nQ\n.\ntail\n \n+\n \n1\n\n\n\n\n\nDEQUEUE\n(\nQ\n)\n\n    \nif\n \nQ\n.\nhead\n \n==\n \nNIL\n\n        \nerror\n \n\"Queue underflow\"\n\n    \nx\n \n=\n \nQ\n[\nQ\n.\nhead\n]\n\n    \nif\n \nQ\n.\nhead\n \n==\n \nQ\n.\nlength\n\n        \nQ\n.\nhead\n \n=\n \n1\n\n    \nelse\n \nQ\n.\nhead\n \n=\n \nQ\n.\nhead\n \n+\n \n1\n\n    \nif\n \nQ\n.\nhead\n \n==\n \nQ\n.\ntail\n\n        \nQ\n.\nhead\n \n=\n \nNIL\n\n    \nreturn\n \nx\n\n\n\n\n\n10.1-5\n\n\n\n\nWhereas a stack allows insertion and deletion of elements at only one end, and a queue allows insertion at one end and deletion at the other end, a \ndeque\n (doubleended queue) allows insertion and deletion at both ends. Write four $O(1)$-time procedures to insert elements into and delete elements from both ends of a deque implemented by an array.\n\n\n\n\nAs in the example code given in the section, we will neglect to check for overflow and underflow errors.\n\n\nHEAD\n-\nENQUEUE\n(\nQ\n,\n \nx\n)\n\n    \nQ\n[\nQ\n.\nhead\n]\n \n=\n \nx\n\n    \nif\n \nQ\n.\nhead\n \n==\n \n1\n\n        \nQ\n.\nhead\n \n=\n \nQ\n.\nlength\n\n    \nelse\n \nQ\n.\nhead\n \n=\n \nQ\n.\nhead\n \n-\n \n1\n\n\n\n\n\nTAIL\n-\nENQUEUE\n(\nQ\n,\n \nx\n)\n\n    \nQ\n[\nQ\n.\ntail\n]\n \n=\n \nx\n\n    \nif\n \nQ\n.\ntail\n \n==\n \nQ\n.\nlength\n\n        \nQ\n.\ntail\n \n=\n \n1\n\n    \nelse\n \nQ\n.\ntail\n \n=\n \nQ\n.\ntail\n \n+\n \n1\n\n\n\n\n\nHEAD\n-\nDEQUEUE\n(\nQ\n,\n \nx\n)\n\n    \nx\n \n=\n \nQ\n[\nQ\n.\nhead\n]\n\n    \nif\n \nQ\n.\nhead\n \n==\n \nQ\n.\nlength\n\n        \nQ\n.\nhead\n \n=\n \n1\n\n    \nelse\n \nQ\n.\nhead\n \n=\n \nQ\n.\nhead\n \n+\n \n1\n\n\n\n\n\nTAIL\n-\nDEQUEUE\n(\nQ\n,\n \nx\n)\n\n    \nx\n \n=\n \nQ\n[\nQ\n.\ntail\n]\n\n    \nif\n \nQ\n.\ntail\n \n==\n \n1\n\n        \nQ\n.\ntail\n \n=\n \nQ\n.\nlength\n\n    \nelse\n \nQ\n.\ntail\n \n=\n \nQ\n.\ntail\n \n-\n \n1\n\n\n\n\n\n10.1-6\n\n\n\n\nShow how to implement a queue using two stacks. Analyze the running time of the queue operations.\n\n\n\n\n\n\n$\\text{ENQUEUE}$: $\\Theta(1)$.\n\n\n$\\text{DEQUEUE}$: worst $O(n)$, amortized $\\Theta(1)$.\n\n\n\n\nLet the two stacks be $A$ and $B$.\n\n\n$\\text{ENQUEUE}$ pushes elements on $B$. $\\text{DEQUEUE}$ pops elements from $A$. If $A$ is empty, the contents of $B$ are transfered to $A$ by popping them out of $B$ and pushing them to $A$. That way they appear in reverse order and are popped in the original.\n\n\nA $\\text{DEQUEUE}$ operation can perform in $\\Theta(n)$ time, but that will happen only when $A$ is empty. If many $\\text{ENQUEUE}$s and $\\text{DEQUEUE}$s are performed, the total time will be linear to the number of elements, not to the largest length of the queue.\n\n\n10.1-7\n\n\n\n\nShow how to implement a stack using two queues. Analyze the running time of the stack operations.\n\n\n\n\n\n\n$\\text{PUSH}$: $\\Theta(1)$.\n\n\n$\\text{POP}$: $\\Theta(n)$.\n\n\n\n\nWe have two queues and mark one of them as active. $\\text{PUSH}$ queues an element on the active queue. $\\text{POP}$ should dequeue all but one element of the active queue and queue them on the inactive. The roles of the queues are then reversed, and the final element left in the (now) inactive queue is returned.\n\n\nThe $\\text{PUSH}$ operation is $\\Theta(1)$, but the $\\text{POP}$ operation is $\\Theta(n)$ where $n$ is the number of elements in the stack.",
            "title": "10.1 Stacks and queues"
        },
        {
            "location": "/Chap10/10.1/#101-1",
            "text": "Using Figure 10.1 as a model, illustrate the result of each operation in the sequence $\\text{PUSH}(S, 4)$, $\\text{PUSH}(S, 1)$, $\\text{PUSH}(S, 3)$, $\\text{POP}(S)$, $\\text{PUSH}(S, 8)$, and $\\text{POP}(S)$ on an initially empty stack $S$ stored in array $S[1..6]$.   \\begin{array}{l|ccc}\n\\text{PUSH($S, 4$)} & 4 &   &   \\\\    \n\\text{PUSH($S, 1$)} & 4 & 1 &   \\\\\n\\text{PUSH($S, 3$)} & 4 & 1 & 3 \\\\ \n\\text{POP($S$)}     & 4 & 1 &   \\\\\n\\text{PUSH($S, 8$)} & 4 & 1 & 8 \\\\\n\\text{POP($S$)}     & 4 & 1 &\n\\end{array}",
            "title": "10.1-1"
        },
        {
            "location": "/Chap10/10.1/#101-2",
            "text": "Explain how to implement two stacks in one array $A[1..n]$ in such a way that neither stack overflows unless the total number of elements in both stacks together is $n$. The $\\text{PUSH}$ and $\\text{POP}$ operations should run in $O(1)$ time.   The first stack starts at $1$ and grows up towards n, while the second starts form $n$ and grows down towards $1$. Stack overflow happens when an element is pushed when the two stack pointers are adjacent.",
            "title": "10.1-2"
        },
        {
            "location": "/Chap10/10.1/#101-3",
            "text": "Using Figure 10.2 as a model, illustrate the result of each operation in the sequence $\\text{ENQUEUE}(Q, 4)$, $\\text{ENQUEUE}(Q ,1)$, $\\text{ENQUEUE}(Q, 3)$, $\\text{DEQUEUE}(Q)$, $\\text{ENQUEUE}(Q, 8)$, and $\\text{DEQUEUE}(Q)$ on an initially empty queue $Q$ stored in array $Q[1..6]$.   \\begin{array}{l|cccc}\n\\text{ENQUEUE($Q, 4$)} & 4 &   &   &   \\\\\n\\text{ENQUEUE($Q, 1$)} & 4 & 1 &   &   \\\\\n\\text{ENQUEUE($Q, 3$)} & 4 & 1 & 3 &   \\\\\n\\text{DEQUEUE($Q$)}    &   & 1 & 3 &   \\\\\n\\text{ENQUEUE($Q, 8$)} &   & 1 & 3 & 8 \\\\\n\\text{DEQUEUE($Q$)}    &   &   & 3 & 8\n\\end{array}",
            "title": "10.1-3"
        },
        {
            "location": "/Chap10/10.1/#101-4",
            "text": "Rewrite $\\text{ENQUEUE}$ and $\\text{DEQUEUE}$ to detect underflow and overflow of a queue.   ENQUEUE ( Q ,   x ) \n     if   Q . head   ==   Q . tail \n         error   \"Queue overflow\" \n     Q [ Q . tail ]   =   x \n     if   Q . head   ==   NIL \n         Q . head   =   Q . tail \n     if   Q . tail   ==   Q . length \n         Q . tail   =   1 \n     else   Q . tail   =   Q . tail   +   1   DEQUEUE ( Q ) \n     if   Q . head   ==   NIL \n         error   \"Queue underflow\" \n     x   =   Q [ Q . head ] \n     if   Q . head   ==   Q . length \n         Q . head   =   1 \n     else   Q . head   =   Q . head   +   1 \n     if   Q . head   ==   Q . tail \n         Q . head   =   NIL \n     return   x",
            "title": "10.1-4"
        },
        {
            "location": "/Chap10/10.1/#101-5",
            "text": "Whereas a stack allows insertion and deletion of elements at only one end, and a queue allows insertion at one end and deletion at the other end, a  deque  (doubleended queue) allows insertion and deletion at both ends. Write four $O(1)$-time procedures to insert elements into and delete elements from both ends of a deque implemented by an array.   As in the example code given in the section, we will neglect to check for overflow and underflow errors.  HEAD - ENQUEUE ( Q ,   x ) \n     Q [ Q . head ]   =   x \n     if   Q . head   ==   1 \n         Q . head   =   Q . length \n     else   Q . head   =   Q . head   -   1   TAIL - ENQUEUE ( Q ,   x ) \n     Q [ Q . tail ]   =   x \n     if   Q . tail   ==   Q . length \n         Q . tail   =   1 \n     else   Q . tail   =   Q . tail   +   1   HEAD - DEQUEUE ( Q ,   x ) \n     x   =   Q [ Q . head ] \n     if   Q . head   ==   Q . length \n         Q . head   =   1 \n     else   Q . head   =   Q . head   +   1   TAIL - DEQUEUE ( Q ,   x ) \n     x   =   Q [ Q . tail ] \n     if   Q . tail   ==   1 \n         Q . tail   =   Q . length \n     else   Q . tail   =   Q . tail   -   1",
            "title": "10.1-5"
        },
        {
            "location": "/Chap10/10.1/#101-6",
            "text": "Show how to implement a queue using two stacks. Analyze the running time of the queue operations.    $\\text{ENQUEUE}$: $\\Theta(1)$.  $\\text{DEQUEUE}$: worst $O(n)$, amortized $\\Theta(1)$.   Let the two stacks be $A$ and $B$.  $\\text{ENQUEUE}$ pushes elements on $B$. $\\text{DEQUEUE}$ pops elements from $A$. If $A$ is empty, the contents of $B$ are transfered to $A$ by popping them out of $B$ and pushing them to $A$. That way they appear in reverse order and are popped in the original.  A $\\text{DEQUEUE}$ operation can perform in $\\Theta(n)$ time, but that will happen only when $A$ is empty. If many $\\text{ENQUEUE}$s and $\\text{DEQUEUE}$s are performed, the total time will be linear to the number of elements, not to the largest length of the queue.",
            "title": "10.1-6"
        },
        {
            "location": "/Chap10/10.1/#101-7",
            "text": "Show how to implement a stack using two queues. Analyze the running time of the stack operations.    $\\text{PUSH}$: $\\Theta(1)$.  $\\text{POP}$: $\\Theta(n)$.   We have two queues and mark one of them as active. $\\text{PUSH}$ queues an element on the active queue. $\\text{POP}$ should dequeue all but one element of the active queue and queue them on the inactive. The roles of the queues are then reversed, and the final element left in the (now) inactive queue is returned.  The $\\text{PUSH}$ operation is $\\Theta(1)$, but the $\\text{POP}$ operation is $\\Theta(n)$ where $n$ is the number of elements in the stack.",
            "title": "10.1-7"
        },
        {
            "location": "/Chap10/10.2/",
            "text": "10.2-1\n\n\n\n\nCan you implement the dynamic-set operation $\\text{INSERT}$ on a singly linked list in $O(1)$ time? How about $\\text{DELETE}$?\n\n\n\n\n\n\n\n\n$\\text{INSERT}$: can be implemented in constant time by prepending it to the list.\n\n\nLIST\n-\nINSERT\n(\nL\n,\n \nx\n)\n\n    \nx\n.\nnext\n \n=\n \nL\n.\nhead\n\n    \nL\n.\nhead\n \n=\n \nx\n\n\n\n\n\n\n\n\n\n$\\text{DELETE}$: cannot be implemented in constant time, unless you pass to it as an argument the predecessor of the element you are deleting.\n\n\n\n\n\n\n10.2-2\n\n\n\n\nImplement a stack using a singly linked list $L$. The operations $\\text{PUSH}$ and $\\text{POP}$ should still take $O(1)$ time.\n\n\n\n\nSTACK\n-\nEMPTY\n(\nS\n)\n\n    \nif\n \nL\n.\nhead\n \n==\n \nNIL\n\n        \nreturn\n \nTRUE\n\n    \nelse\n \nreturn\n \nFALSE\n\n\n\n\n\n\n\n\n\n$\\text{PUSH}$: adds an element in the beginning of the list.\n\n\nPUSH\n(\nS\n,\n \nx\n)\n\n    \nLIST\n-\nINSERT\n(\nL\n,\n \nx\n)\n\n\n\n\n\n\n\n\n\n$\\text{POP}$: removes the first element from the list.\n\n\nPOP\n(\nS\n)\n\n    \nx\n \n=\n \nL\n.\nhead\n\n    \nLIST\n-\nDELETE\n(\nL\n,\n \nL\n.\nhead\n)\n\n    \nreturn\n \nx\n\n\n\n\n\n\n\n\n\n10.2-3\n\n\n\n\nImplement a queue by a singly linked list $L$. The operations $\\text{ENQUEUE}$ and $\\text{DEQUEUE}$ should still take $O(1)$ time.\n\n\n\n\nQUEUE\n-\nEMPTY\n(\nQ\n)\n\n    \nif\n \nL\n.\nhead\n \n==\n \nNIL\n\n        \nreturn\n \nTRUE\n\n    \nelse\n \nreturn\n \nFALSE\n\n\n\n\n\n\n\n\n\n$\\text{ENQUEUE}$: inserts an element in the beginning of the list.\n\n\nENQUEUE\n(\nQ\n,\n \nx\n)\n\n    \nif\n \nQUEUE\n-\nEMPTY\n(\nQ\n)\n\n        \nQ\n.\nhead\n \n=\n \nx\n\n    \nelse\n \nQ\n.\ntail\n.\nnext\n \n=\n \nx\n\n    \nQ\n.\ntail\n \n=\n \nx\n\n    \nx\n.\nnext\n \n=\n \nNIL\n\n\n\n\n\n\n\n\n\n$\\text{DEQUEUE}$: removes an element from the end of the list. In this case we need to keep track of the last element of the list. We can do that with a sentinel.\n\n\nDEQUEUE\n(\nQ\n)\n\n    \nif\n \nQUEUE\n-\nEMPTY\n(\nQ\n)\n\n        \nerror\n \n\"underflow\"\n\n    \nelse\n\n        \nif\n \nQ\n.\nhead\n \n==\n \nQ\n.\ntail\n\n            \nQ\n.\ntail\n \n=\n \nNIL\n\n        \nQ\n.\nhead\n \n=\n \nQ\n.\nhead\n.\nnext\n\n        \nx\n \n=\n \nL\n.\nhead\n\n        \nLIST\n-\nDELETE\n(\nL\n,\n \nL\n.\nhead\n)\n\n        \nreturn\n \nx\n\n\n\n\n\n\n\n\n\n10.2-4\n\n\n\n\nAs written, each loop iteration in the $\\text{LIST-SEARCH}'$ procedure requires two tests: one for $x \\ne L.nil$ and one for $x.key \\ne k$. Show how to eliminate the test for $x \\ne L.nil$ in each iteration.\n\n\n\n\nLIST\n-\nSEARCH\n'\n(\nL\n,\n \nk\n)\n\n    \nx\n \n=\n \nL\n.\nnil\n.\nnext\n\n    \nL\n.\nnil\n.\nkey\n \n=\n \nk\n\n    \nwhile\n \nx\n.\nkey\n \n!=\n \nk\n\n        \nx\n \n=\n \nx\n.\nnext\n\n    \nreturn\n \nx\n\n\n\n\n\n10.2-5\n\n\n\n\nImplement the dictionary operations $\\text{INSERT}$, $\\text{DELETE}$, and $\\text{SEARCH}$ using singly linked, circular lists. What are the running times of your procedures?\n\n\n\n\n\n\n\n\n$\\text{INSERT}$: $O(n)$.\n\n\nLIST\n-\nINSERT\n''\n(\nL\n,\n \nx\n)\n\n    \nx\n.\nnext\n \n=\n \nL\n.\nnil\n.\nnext\n\n    \nL\n.\nnil\n.\nnext\n \n=\n \nx\n\n\n\n\n\n\n\n\n\n$\\text{DELETE}$: $O(n)$.\n\n\nLIST\n-\nDELETE\n''\n(\nL\n,\n \nx\n)\n\n    \nprev\n \n=\n \nL\n.\nnil\n\n    \nwhile\n \nprev\n.\nnext\n.\nkey\n \n!=\n \nx\n\n        \nif\n \nprev\n.\nnext\n \n==\n \nL\n.\nnil\n\n            \nerror\n \n\"element not exist\"\n\n        \nprev\n \n=\n \nprev\n.\nnext\n\n    \nprev\n.\nnext\n \n=\n \nx\n.\nnext\n\n\n\n\n\n\n\n\n\n$\\text{SEARCH}$: $O(n)$.\n\n\nLIST\n-\nSEARCH\n''\n(\nL\n,\n \nx\n)\n\n    \nL\n.\nnil\n\n    \nx\n \n=\n \nL\n.\nnil\n.\nnext\n\n    \nwhile\n \nx\n.\nkey\n \n!=\n \nk\n\n        \nx\n \n=\n \nx\n.\nnext\n\n    \nreturn\n \nx\n\n\n\n\n\n\n\n\n\n10.2-6\n\n\n\n\nThe dynamic-set operation $\\text{UNION}$ takes two disjoint sets $S_1$ and $S_2$ as input, and it returns a set $S = S_1 \\cup S_2$ consisting of all the elements of $S_1$ and $S_2$. The sets $S_1$ and $S_2$ are usually destroyed by the operation. Show how to support $\\text{UNION}$ in $O(1)$ time using a suitable list data structure.\n\n\n\n\nIf both sets are a doubly linked lists, we just point link the last element of the first list to the first element in the second. If the implementation uses sentinels, we need to destroy one of them.\n\n\nLIST\n-\nUNION\n(\nL1\n,\n \nL2\n)\n\n    \nL2\n.\nnil\n.\nnext\n.\nprev\n \n=\n \nL1\n.\nnil\n.\nprev\n\n    \nL1\n.\nnil\n.\nprev\n.\nnext\n \n=\n \nL2\n.\nnil\n.\nnext\n\n    \nL2\n.\nnil\n.\nprev\n.\nnext\n \n=\n \nL1\n.\nnil\n\n    \nL1\n.\nnil\n.\nprev\n \n=\n \nL2\n.\nnil\n.\nprev\n\n\n\n\n\n10.2-7\n\n\n\n\nGive a $\\Theta(n)$-time nonrecursive procedure that reverses a singly linked list of $n$ elements. The procedure should use no more than constant storage beyond that needed for the list itself.\n\n\n\n\nLIST\n-\nREVERSE\n(\nL\n)\n\n    \nif\n \nL\n.\nhead\n \n==\n \nNIL\n\n        \nerror\n \n\"empty list\"\n\n    \nelse\n \nif\n \nL\n.\nhead\n.\nnext\n \n==\n \nNIL\n\n        \nreturn\n\n    \nelse\n\n        \np1\n \n=\n \nL\n.\nhead\n.\nnext\n\n        \nL\n.\nhead\n.\nnext\n \n=\n \nNIL\n\n        \np2\n \n=\n \np1\n.\nnext\n\n        \np1\n \n=\n \nnext\n \n=\n \nL\n.\nhead\n\n        \nwhile\n \np2\n \n!=\n \nNIL\n\n            \np3\n \n=\n \np2\n.\nnext\n\n            \np2\n.\nnext\n \n=\n \np1\n\n            \np1\n \n=\n \np2\n\n            \np2\n \n=\n \np3\n\n        \nL\n.\nhead\n \n=\n \np1\n\n\n\n\n\n10.2-8 $\\star$\n\n\n\n\nExplain how to implement doubly linked lists using only one pointer value $x.np$ per item instead of the usual two ($next$ and $prev$). Assume all pointer values can be interpreted as $k$-bit integers, and define $x.np$ to be $x.np = x.next$ XOR $x.prev$, the $k$-bit \"exclusive-or\" of $x.next$ and $x.prev$. (The value $\\text{NIL}$ is represented by $0$.) Be sure to describe what information you need to access the head of the list. Show how to implement the $\\text{SEARCH}$, $\\text{INSERT}$, and $\\text{DELETE}$ operations on such a list. Also show how to reverse such a list in $O(1)$ time.\n\n\n\n\n\\begin{align}\nhead.np &= next \\\\\ntail.np &= prev \\\\\n   next &= x.np \\text{ XOR } prev \\\\\n   prev &= x.np \\text{ XOR } next \\\\\n\\end{align}\n\n\n\n\nReverse:\n\n\n\n\n\\begin{align}\n      head.np.np &= (head\\text{ XOR }head.np.np)\\text{ XOR }tail \\\\\n      tail.np.np &= (tail\\text{ XOR }tail.np.np)\\text{ XOR }head \\\\\nhead.np, tail.np &= tail.np, head.np\n\\end{align}",
            "title": "10.2 Linked lists"
        },
        {
            "location": "/Chap10/10.2/#102-1",
            "text": "Can you implement the dynamic-set operation $\\text{INSERT}$ on a singly linked list in $O(1)$ time? How about $\\text{DELETE}$?     $\\text{INSERT}$: can be implemented in constant time by prepending it to the list.  LIST - INSERT ( L ,   x ) \n     x . next   =   L . head \n     L . head   =   x     $\\text{DELETE}$: cannot be implemented in constant time, unless you pass to it as an argument the predecessor of the element you are deleting.",
            "title": "10.2-1"
        },
        {
            "location": "/Chap10/10.2/#102-2",
            "text": "Implement a stack using a singly linked list $L$. The operations $\\text{PUSH}$ and $\\text{POP}$ should still take $O(1)$ time.   STACK - EMPTY ( S ) \n     if   L . head   ==   NIL \n         return   TRUE \n     else   return   FALSE     $\\text{PUSH}$: adds an element in the beginning of the list.  PUSH ( S ,   x ) \n     LIST - INSERT ( L ,   x )     $\\text{POP}$: removes the first element from the list.  POP ( S ) \n     x   =   L . head \n     LIST - DELETE ( L ,   L . head ) \n     return   x",
            "title": "10.2-2"
        },
        {
            "location": "/Chap10/10.2/#102-3",
            "text": "Implement a queue by a singly linked list $L$. The operations $\\text{ENQUEUE}$ and $\\text{DEQUEUE}$ should still take $O(1)$ time.   QUEUE - EMPTY ( Q ) \n     if   L . head   ==   NIL \n         return   TRUE \n     else   return   FALSE     $\\text{ENQUEUE}$: inserts an element in the beginning of the list.  ENQUEUE ( Q ,   x ) \n     if   QUEUE - EMPTY ( Q ) \n         Q . head   =   x \n     else   Q . tail . next   =   x \n     Q . tail   =   x \n     x . next   =   NIL     $\\text{DEQUEUE}$: removes an element from the end of the list. In this case we need to keep track of the last element of the list. We can do that with a sentinel.  DEQUEUE ( Q ) \n     if   QUEUE - EMPTY ( Q ) \n         error   \"underflow\" \n     else \n         if   Q . head   ==   Q . tail \n             Q . tail   =   NIL \n         Q . head   =   Q . head . next \n         x   =   L . head \n         LIST - DELETE ( L ,   L . head ) \n         return   x",
            "title": "10.2-3"
        },
        {
            "location": "/Chap10/10.2/#102-4",
            "text": "As written, each loop iteration in the $\\text{LIST-SEARCH}'$ procedure requires two tests: one for $x \\ne L.nil$ and one for $x.key \\ne k$. Show how to eliminate the test for $x \\ne L.nil$ in each iteration.   LIST - SEARCH ' ( L ,   k ) \n     x   =   L . nil . next \n     L . nil . key   =   k \n     while   x . key   !=   k \n         x   =   x . next \n     return   x",
            "title": "10.2-4"
        },
        {
            "location": "/Chap10/10.2/#102-5",
            "text": "Implement the dictionary operations $\\text{INSERT}$, $\\text{DELETE}$, and $\\text{SEARCH}$ using singly linked, circular lists. What are the running times of your procedures?     $\\text{INSERT}$: $O(n)$.  LIST - INSERT '' ( L ,   x ) \n     x . next   =   L . nil . next \n     L . nil . next   =   x     $\\text{DELETE}$: $O(n)$.  LIST - DELETE '' ( L ,   x ) \n     prev   =   L . nil \n     while   prev . next . key   !=   x \n         if   prev . next   ==   L . nil \n             error   \"element not exist\" \n         prev   =   prev . next \n     prev . next   =   x . next     $\\text{SEARCH}$: $O(n)$.  LIST - SEARCH '' ( L ,   x ) \n     L . nil \n     x   =   L . nil . next \n     while   x . key   !=   k \n         x   =   x . next \n     return   x",
            "title": "10.2-5"
        },
        {
            "location": "/Chap10/10.2/#102-6",
            "text": "The dynamic-set operation $\\text{UNION}$ takes two disjoint sets $S_1$ and $S_2$ as input, and it returns a set $S = S_1 \\cup S_2$ consisting of all the elements of $S_1$ and $S_2$. The sets $S_1$ and $S_2$ are usually destroyed by the operation. Show how to support $\\text{UNION}$ in $O(1)$ time using a suitable list data structure.   If both sets are a doubly linked lists, we just point link the last element of the first list to the first element in the second. If the implementation uses sentinels, we need to destroy one of them.  LIST - UNION ( L1 ,   L2 ) \n     L2 . nil . next . prev   =   L1 . nil . prev \n     L1 . nil . prev . next   =   L2 . nil . next \n     L2 . nil . prev . next   =   L1 . nil \n     L1 . nil . prev   =   L2 . nil . prev",
            "title": "10.2-6"
        },
        {
            "location": "/Chap10/10.2/#102-7",
            "text": "Give a $\\Theta(n)$-time nonrecursive procedure that reverses a singly linked list of $n$ elements. The procedure should use no more than constant storage beyond that needed for the list itself.   LIST - REVERSE ( L ) \n     if   L . head   ==   NIL \n         error   \"empty list\" \n     else   if   L . head . next   ==   NIL \n         return \n     else \n         p1   =   L . head . next \n         L . head . next   =   NIL \n         p2   =   p1 . next \n         p1   =   next   =   L . head \n         while   p2   !=   NIL \n             p3   =   p2 . next \n             p2 . next   =   p1 \n             p1   =   p2 \n             p2   =   p3 \n         L . head   =   p1",
            "title": "10.2-7"
        },
        {
            "location": "/Chap10/10.2/#102-8-star",
            "text": "Explain how to implement doubly linked lists using only one pointer value $x.np$ per item instead of the usual two ($next$ and $prev$). Assume all pointer values can be interpreted as $k$-bit integers, and define $x.np$ to be $x.np = x.next$ XOR $x.prev$, the $k$-bit \"exclusive-or\" of $x.next$ and $x.prev$. (The value $\\text{NIL}$ is represented by $0$.) Be sure to describe what information you need to access the head of the list. Show how to implement the $\\text{SEARCH}$, $\\text{INSERT}$, and $\\text{DELETE}$ operations on such a list. Also show how to reverse such a list in $O(1)$ time.   \\begin{align}\nhead.np &= next \\\\\ntail.np &= prev \\\\\n   next &= x.np \\text{ XOR } prev \\\\\n   prev &= x.np \\text{ XOR } next \\\\\n\\end{align}   Reverse:   \\begin{align}\n      head.np.np &= (head\\text{ XOR }head.np.np)\\text{ XOR }tail \\\\\n      tail.np.np &= (tail\\text{ XOR }tail.np.np)\\text{ XOR }head \\\\\nhead.np, tail.np &= tail.np, head.np\n\\end{align}",
            "title": "10.2-8 $\\star$"
        },
        {
            "location": "/Chap10/10.3/",
            "text": "10.3-1\n\n\n\n\nDraw a picture of the sequence $\\langle 13, 4, 8, 19, 5, 11 \\rangle$ stored as a doubly linked list using the multiple-array representation. Do the same for the single-array representation.\n\n\n\n\n\n\n\n\nA multiple array version could be $L = 2$,\n\n\n\\begin{array}{ccccccc}\n/ & 3  & 4 & 5 & 6  & 7 & /  \\\\\n  & 12 & 4 & 8 & 19 & 5 & 11 \\\\\n  &    & 2 & 3 & 4  & 5 & 6\n\\end{array}\n\n\n\n\n\n\nA single array version could be $L = 4$,\n\n\n\\begin{array}{cccccccccccccccccc}\n12 & 7 & / & 4 & 10 & 4 & 8 & 13 & 7 & 19 & 16 & 10 & 5 & 19 & 13 & 11 & / & 16\n\\end{array}\n\n\n\n\n\n\n10.3-2\n\n\n\n\nWrite the procedures $\\text{ALLOCATE-OBJECT}$ and $\\text{FREE-OBJECT}$ for a homogeneous collection of objects implemented by the single-array representation.\n\n\n\n\nALLOCATE\n-\nOBJECT\n()\n\n    \nif\n \nfree\n \n==\n \nNIL\n\n        \nerror\n \n\"out of space\"\n\n    \nelse\n \nx\n \n=\n \nfree\n\n        \nfree\n \n=\n \nA\n[\nx\n \n+\n \n1\n]\n\n        \nreturn\n \nx\n\n\n\n\n\nFREE\n-\nOBJECT\n(\nx\n)\n\n    \nA\n[\nx\n \n+\n \n1\n]\n \n=\n \nfree\n\n    \nfree\n \n=\n \nx\n\n\n\n\n\n10.3-3\n\n\n\n\nWhy don't we need to set or reset the prev attributes of objects in the implementation of the $\\text{ALLOCATE-OBJECT}$ and $\\text{FREE-OBJECT}$ procedures?\n\n\n\n\nWe implement $\\text{ALLOCATE-OBJECT}$ and $\\text{FREE-OBJECT}$ in the hope of managing the storage of currently non-used object in the free list so that one can be allocated for reusing. As the free list acts like a stack, to maintain this stack-like collection, we merely remember its first pointer and set the $next$ attribute of objects. There is no need to worry the $prev$ attribute, for it hardly has any impact on the resulting free list.\n\n\n10.3-4\n\n\n\n\nIt is often desirable to keep all elements of a doubly linked list compact in storage, using, for example, the first $m$ index locations in the multiple-array representation. (This is the case in a paged, virtual-memory computing environment.) Explain how to implement the procedures $\\text{ALLOCATE-OBJECT}$ and $\\text{FREE-OBJECT}$ so that the representation is compact. Assume that there are no pointers to elements of the linked list outside the list itself. ($\\textit{Hint:}$ Use the array implementation of a stack.)\n\n\n\n\nALLOCATE\n-\nOBJECT\n()\n\n    \nif\n \nSTACK\n-\nEMPTY\n(\nF\n)\n\n        \nerror\n \n\"out of space\"\n\n    \nelse\n \nx\n \n=\n \nPOP\n(\nF\n)\n\n        \nreturn\n \nx\n\n\n\n\n\nFREE\n-\nOBJECT\n(\nx\n)\n\n    \np\n \n=\n \nF\n.\ntop\n \n-\n \n1\n\n    \np\n.\nprev\n.\nnext\n \n=\n \nx\n\n    \np\n.\nnext\n.\nprev\n \n=\n \nx\n\n    \nx\n.\nkey\n \n=\n \np\n.\nkey\n\n    \nx\n.\nprev\n \n=\n \np\n.\nprev\n\n    \nx\n.\nnext\n \n=\n \np\n.\nnext\n\n    \nPUSH\n(\nF\n,\n \np\n)\n\n\n\n\n\n10.3-5\n\n\n\n\nLet $L$ be a doubly linked list of length $n$ stored in arrays $key$, $prev$, and $next$ of length $m$. Suppose that these arrays are managed by $\\text{ALLOCATE-OBJECT}$ and $\\text{FREE-OBJECT}$ procedures that keep a doubly linked free list $F$. Suppose further that of the $m$ items, exactly $n$ are on list $L$ and $m - n$ are on the free list. Write a procedure $\\text{COMPACTIFY-LIST}(L, F)$ that, given the list $L$ and the free list $F$, moves the items in $L$ so that they occupy array positions $1, 2, \\ldots, n$ and adjusts the free list $F$ so that it remains correct, occupying array positions $n + 1, n + 2, \\ldots, m$. The running time of your procedure should be $\\Theta(n)$, and it should use only a constant amount of extra space. Argue that your procedure is correct.\n\n\n\n\nWe represent the combination of arrays $key$, $prev$, and $next$ by a multible-array $A$. Each object of $A$'s is either in list $L$ or in the free list $F$, but not in both. The procedure $\\text{COMPACTIFY-LIST}$ transposes the first object in $L$ with the first object in $A$, the second objects until the list $L$ is exhausted.\n\n\nCOMPACTIFY\n-\nLIST\n(\nL\n,\n \nF\n)\n\n    \nTRANSPOSE\n(\nA\n[\nL\n.\nhead\n],\n \nA\n[\n1\n])\n\n    \nif\n \nF\n.\nhead\n \n==\n \n1\n\n        \nF\n.\nhead\n \n=\n \nL\n.\nhead\n\n    \nL\n.\nhead\n \n=\n \n1\n\n    \nl\n \n=\n \nA\n[\nL\n.\nhead\n].\nnext\n\n    \ni\n \n=\n \n2\n\n    \nwhile\n \nl\n \n!=\n \nNIL\n\n        \nTRANSPOSE\n(\nA\n[\nl\n],\n \nA\n[\ni\n])\n\n        \nif\n \nF\n \n==\n \ni\n\n            \nF\n \n=\n \nl\n\n        \nl\n \n=\n \nA\n[\nl\n].\nnext\n\n        \ni\n \n=\n \ni\n \n+\n \n1\n\n\n\n\n\nTRANSPOSE\n(\na\n,\n \nb\n)\n\n    \nswap\n(\na\n.\nprev\n.\nnext\n,\n \nb\n.\nprev\n.\nnext\n)\n\n    \nswap\n(\na\n.\nprev\n,\n \nb\n.\nprev\n)\n\n    \nswap\n(\na\n.\nnext\n.\nprev\n,\n \nb\n.\nnext\n.\nprev\n)\n\n    \nswap\n(\na\n.\nnext\n,\n \nb\n.\nnext\n)",
            "title": "10.3 Implementing pointers and objects"
        },
        {
            "location": "/Chap10/10.3/#103-1",
            "text": "Draw a picture of the sequence $\\langle 13, 4, 8, 19, 5, 11 \\rangle$ stored as a doubly linked list using the multiple-array representation. Do the same for the single-array representation.     A multiple array version could be $L = 2$,  \\begin{array}{ccccccc}\n/ & 3  & 4 & 5 & 6  & 7 & /  \\\\\n  & 12 & 4 & 8 & 19 & 5 & 11 \\\\\n  &    & 2 & 3 & 4  & 5 & 6\n\\end{array}    A single array version could be $L = 4$,  \\begin{array}{cccccccccccccccccc}\n12 & 7 & / & 4 & 10 & 4 & 8 & 13 & 7 & 19 & 16 & 10 & 5 & 19 & 13 & 11 & / & 16\n\\end{array}",
            "title": "10.3-1"
        },
        {
            "location": "/Chap10/10.3/#103-2",
            "text": "Write the procedures $\\text{ALLOCATE-OBJECT}$ and $\\text{FREE-OBJECT}$ for a homogeneous collection of objects implemented by the single-array representation.   ALLOCATE - OBJECT () \n     if   free   ==   NIL \n         error   \"out of space\" \n     else   x   =   free \n         free   =   A [ x   +   1 ] \n         return   x   FREE - OBJECT ( x ) \n     A [ x   +   1 ]   =   free \n     free   =   x",
            "title": "10.3-2"
        },
        {
            "location": "/Chap10/10.3/#103-3",
            "text": "Why don't we need to set or reset the prev attributes of objects in the implementation of the $\\text{ALLOCATE-OBJECT}$ and $\\text{FREE-OBJECT}$ procedures?   We implement $\\text{ALLOCATE-OBJECT}$ and $\\text{FREE-OBJECT}$ in the hope of managing the storage of currently non-used object in the free list so that one can be allocated for reusing. As the free list acts like a stack, to maintain this stack-like collection, we merely remember its first pointer and set the $next$ attribute of objects. There is no need to worry the $prev$ attribute, for it hardly has any impact on the resulting free list.",
            "title": "10.3-3"
        },
        {
            "location": "/Chap10/10.3/#103-4",
            "text": "It is often desirable to keep all elements of a doubly linked list compact in storage, using, for example, the first $m$ index locations in the multiple-array representation. (This is the case in a paged, virtual-memory computing environment.) Explain how to implement the procedures $\\text{ALLOCATE-OBJECT}$ and $\\text{FREE-OBJECT}$ so that the representation is compact. Assume that there are no pointers to elements of the linked list outside the list itself. ($\\textit{Hint:}$ Use the array implementation of a stack.)   ALLOCATE - OBJECT () \n     if   STACK - EMPTY ( F ) \n         error   \"out of space\" \n     else   x   =   POP ( F ) \n         return   x   FREE - OBJECT ( x ) \n     p   =   F . top   -   1 \n     p . prev . next   =   x \n     p . next . prev   =   x \n     x . key   =   p . key \n     x . prev   =   p . prev \n     x . next   =   p . next \n     PUSH ( F ,   p )",
            "title": "10.3-4"
        },
        {
            "location": "/Chap10/10.3/#103-5",
            "text": "Let $L$ be a doubly linked list of length $n$ stored in arrays $key$, $prev$, and $next$ of length $m$. Suppose that these arrays are managed by $\\text{ALLOCATE-OBJECT}$ and $\\text{FREE-OBJECT}$ procedures that keep a doubly linked free list $F$. Suppose further that of the $m$ items, exactly $n$ are on list $L$ and $m - n$ are on the free list. Write a procedure $\\text{COMPACTIFY-LIST}(L, F)$ that, given the list $L$ and the free list $F$, moves the items in $L$ so that they occupy array positions $1, 2, \\ldots, n$ and adjusts the free list $F$ so that it remains correct, occupying array positions $n + 1, n + 2, \\ldots, m$. The running time of your procedure should be $\\Theta(n)$, and it should use only a constant amount of extra space. Argue that your procedure is correct.   We represent the combination of arrays $key$, $prev$, and $next$ by a multible-array $A$. Each object of $A$'s is either in list $L$ or in the free list $F$, but not in both. The procedure $\\text{COMPACTIFY-LIST}$ transposes the first object in $L$ with the first object in $A$, the second objects until the list $L$ is exhausted.  COMPACTIFY - LIST ( L ,   F ) \n     TRANSPOSE ( A [ L . head ],   A [ 1 ]) \n     if   F . head   ==   1 \n         F . head   =   L . head \n     L . head   =   1 \n     l   =   A [ L . head ]. next \n     i   =   2 \n     while   l   !=   NIL \n         TRANSPOSE ( A [ l ],   A [ i ]) \n         if   F   ==   i \n             F   =   l \n         l   =   A [ l ]. next \n         i   =   i   +   1   TRANSPOSE ( a ,   b ) \n     swap ( a . prev . next ,   b . prev . next ) \n     swap ( a . prev ,   b . prev ) \n     swap ( a . next . prev ,   b . next . prev ) \n     swap ( a . next ,   b . next )",
            "title": "10.3-5"
        },
        {
            "location": "/Chap10/10.4/",
            "text": "10.4-1\n\n\n\n\nDraw the binary tree rooted at index 6 that is represented by the following attributes:\n\n\n\\begin{array}{cccc}\n\\text{index} & key & left & right \\\\\n\\hline\n 1 & 12 &  7         &  3         \\\\\n 2 & 15 &  8         & \\text{NIL} \\\\\n 3 &  4 & 10         & \\text{NIL} \\\\\n 4 & 10 &  5         &  9         \\\\\n 5 &  2 & \\text{NIL} & \\text{NIL} \\\\\n 6 & 18 &  1         &  4         \\\\\n 7 &  7 & \\text{NIL} & \\text{NIL} \\\\\n 8 & 14 &  6         &  2         \\\\\n 9 & 21 & \\text{NIL} & \\text{NIL} \\\\\n10 &  5 & \\text{NIL} & \\text{NIL} \n\\end{array}\n\n\n\n\n\n\n10.4-2\n\n\n\n\nWrite an $O(n)$-time recursive procedure that, given an $n$-node binary tree, prints out the key of each node in the tree.\n\n\n\n\nPRINT\n-\nBINARY\n-\nTREE\n(\nT\n)\n\n    \nx\n \n=\n \nT\n.\nroot\n\n    \nif\n \nx\n \n!=\n \nNIL\n\n        \nPRINT\n-\nBINARY\n-\nTREE\n(\nx\n.\nleft\n)\n\n        \nprint\n \nx\n.\nkey\n\n        \nPRINT\n-\nBINARY\n-\nTREE\n(\nx\n.\nright\n)\n\n\n\n\n\n10.4-3\n\n\n\n\nWrite an O$(n)$-time nonrecursive procedure that, given an $n$-node binary tree, prints out the key of each node in the tree. Use a stack as an auxiliary data structure.\n\n\n\n\nPRINT\n-\nBINARY\n-\nTREE\n(\nT\n,\n \nS\n)\n\n    \nPUSH\n(\nS\n,\n \nT\n.\nroot\n)\n\n    \nwhile\n \n!\nSTACK\n-\nEMPTY\n(\nS\n)\n\n        \nx\n \n=\n \nS\n[\nS\n.\ntop\n]\n\n        \nwhile\n \nx\n \n!=\n \nNIL\n      \n// store all nodes on the path towards the leftmost leaf\n\n            \nPUSH\n(\nS\n,\n \nx\n.\nleft\n)\n\n            \nx\n \n=\n \nS\n[\nS\n.\ntop\n]\n\n        \nPOP\n(\nS\n)\n              \n// S has NIL on its top, so pop it\n\n        \nif\n \n!\nSTACK\n-\nEMPTY\n(\nS\n)\n  \n// print this nodes, leap to its in-order successor\n\n            \nx\n \n=\n \nPOP\n(\nS\n)\n\n            \nprint\n \nx\n.\nkey\n\n            \nPUSH\n(\nS\n,\n \nx\n.\nright\n)\n\n\n\n\n\n10.4-4\n\n\n\n\nWrite an $O(n)$-time procedure that prints all the keys of an arbitrary rooted tree with $n$ nodes, where the tree is stored using the left-child, right-sibling representation.\n\n\n\n\nPRINT\n-\nLCRS\n-\nTREE\n(\nT\n)\n\n    \nx\n \n=\n \nT\n.\nroot\n\n    \nif\n \nx\n \n!=\n \nNIL\n\n        \nprint\n \nx\n.\nkey\n\n        \nlc\n \n=\n \nx\n.\nleft\n-\nchild\n\n        \nif\n \nlc\n \n!=\n \nNIL\n\n            \nPRINT\n-\nLCRS\n-\nTREE\n(\nlc\n)\n\n            \nrs\n \n=\n \nlc\n.\nright\n-\nsibling\n\n            \nwhile\n \nrs\n \n!=\n \nNIL\n\n                \nPRINT\n-\nLCRS\n-\nTREE\n(\nrs\n)\n\n                \nrs\n \n=\n \nrs\n.\nright\n-\nsibling\n\n\n\n\n\n10.4-5 $\\star$\n\n\n\n\nWrite an $O(n)$-time nonrecursive procedure that, given an $n$-node binary tree, prints out the key of each node. Use no more than constant extra space outside of the tree itself and do not modify the tree, even temporarily, during the procedure.\n\n\n\n\nPRINT\n-\nKEY\n(\nT\n)\n\n    \nprev\n \n=\n \nNIL\n\n    \nx\n \n=\n \nT\n.\nroot\n\n    \nwhile\n \nx\n \n!=\n \nNIL\n\n        \nif\n \nprev\n \n=\n \nx\n.\nparent\n\n            \nprint\n \nx\n.\nkey\n\n            \nif\n \nx\n \n==\n \nx\n.\nleft\n\n                \nx\n.\nleft\n\n            \nelse\n\n                \nif\n \nx\n.\nright\n\n                    \nx\n.\nright\n\n                \nelse\n \nx\n.\nparent\n\n            \nelse\n \nif\n \nprev\n \n==\n \nx\n.\nleft\n \nand\n \nx\n.\nleft\n \n!=\n \nNIL\n\n                \nprev\n \n=\n \nx\n\n                \nx\n \n=\n \nx\n.\nright\n\n            \nelse\n\n                \nprev\n \n=\n \nx\n\n                \nx\n \n=\n \nx\n.\nparent\n\n\n\n\n\n10.4-6 $\\star$\n\n\n\n\nThe left-child, right-sibling representation of an arbitrary rooted tree uses three pointers in each node: \nleft-child\n, \nright-sibling\n, and \nparent\n. From any node, its parent can be reached and identified in constant time and all its children can be reached and identified in time linear in the number of children. Show how to use only two pointers and one boolean value in each node so that the parent of a node or all of its children can be reached and identified in time linear in the number of children.\n\n\n\n\nUse boolean to identify the last sibling, and the last sibling's right-sibling points to the parent.",
            "title": "10.4 Representing rooted trees"
        },
        {
            "location": "/Chap10/10.4/#104-1",
            "text": "Draw the binary tree rooted at index 6 that is represented by the following attributes:  \\begin{array}{cccc}\n\\text{index} & key & left & right \\\\\n\\hline\n 1 & 12 &  7         &  3         \\\\\n 2 & 15 &  8         & \\text{NIL} \\\\\n 3 &  4 & 10         & \\text{NIL} \\\\\n 4 & 10 &  5         &  9         \\\\\n 5 &  2 & \\text{NIL} & \\text{NIL} \\\\\n 6 & 18 &  1         &  4         \\\\\n 7 &  7 & \\text{NIL} & \\text{NIL} \\\\\n 8 & 14 &  6         &  2         \\\\\n 9 & 21 & \\text{NIL} & \\text{NIL} \\\\\n10 &  5 & \\text{NIL} & \\text{NIL} \n\\end{array}",
            "title": "10.4-1"
        },
        {
            "location": "/Chap10/10.4/#104-2",
            "text": "Write an $O(n)$-time recursive procedure that, given an $n$-node binary tree, prints out the key of each node in the tree.   PRINT - BINARY - TREE ( T ) \n     x   =   T . root \n     if   x   !=   NIL \n         PRINT - BINARY - TREE ( x . left ) \n         print   x . key \n         PRINT - BINARY - TREE ( x . right )",
            "title": "10.4-2"
        },
        {
            "location": "/Chap10/10.4/#104-3",
            "text": "Write an O$(n)$-time nonrecursive procedure that, given an $n$-node binary tree, prints out the key of each node in the tree. Use a stack as an auxiliary data structure.   PRINT - BINARY - TREE ( T ,   S ) \n     PUSH ( S ,   T . root ) \n     while   ! STACK - EMPTY ( S ) \n         x   =   S [ S . top ] \n         while   x   !=   NIL        // store all nodes on the path towards the leftmost leaf \n             PUSH ( S ,   x . left ) \n             x   =   S [ S . top ] \n         POP ( S )                // S has NIL on its top, so pop it \n         if   ! STACK - EMPTY ( S )    // print this nodes, leap to its in-order successor \n             x   =   POP ( S ) \n             print   x . key \n             PUSH ( S ,   x . right )",
            "title": "10.4-3"
        },
        {
            "location": "/Chap10/10.4/#104-4",
            "text": "Write an $O(n)$-time procedure that prints all the keys of an arbitrary rooted tree with $n$ nodes, where the tree is stored using the left-child, right-sibling representation.   PRINT - LCRS - TREE ( T ) \n     x   =   T . root \n     if   x   !=   NIL \n         print   x . key \n         lc   =   x . left - child \n         if   lc   !=   NIL \n             PRINT - LCRS - TREE ( lc ) \n             rs   =   lc . right - sibling \n             while   rs   !=   NIL \n                 PRINT - LCRS - TREE ( rs ) \n                 rs   =   rs . right - sibling",
            "title": "10.4-4"
        },
        {
            "location": "/Chap10/10.4/#104-5-star",
            "text": "Write an $O(n)$-time nonrecursive procedure that, given an $n$-node binary tree, prints out the key of each node. Use no more than constant extra space outside of the tree itself and do not modify the tree, even temporarily, during the procedure.   PRINT - KEY ( T ) \n     prev   =   NIL \n     x   =   T . root \n     while   x   !=   NIL \n         if   prev   =   x . parent \n             print   x . key \n             if   x   ==   x . left \n                 x . left \n             else \n                 if   x . right \n                     x . right \n                 else   x . parent \n             else   if   prev   ==   x . left   and   x . left   !=   NIL \n                 prev   =   x \n                 x   =   x . right \n             else \n                 prev   =   x \n                 x   =   x . parent",
            "title": "10.4-5 $\\star$"
        },
        {
            "location": "/Chap10/10.4/#104-6-star",
            "text": "The left-child, right-sibling representation of an arbitrary rooted tree uses three pointers in each node:  left-child ,  right-sibling , and  parent . From any node, its parent can be reached and identified in constant time and all its children can be reached and identified in time linear in the number of children. Show how to use only two pointers and one boolean value in each node so that the parent of a node or all of its children can be reached and identified in time linear in the number of children.   Use boolean to identify the last sibling, and the last sibling's right-sibling points to the parent.",
            "title": "10.4-6 $\\star$"
        },
        {
            "location": "/Chap10/Problems/10-1/",
            "text": "For each of the four types of lists in the following table, what is the asymptotic worst-case running time for each dynamic-set operation listed?\n\n\n\\begin{array}{l|cccc}\n                           & \\text{unsorted, singly linked} \n                           & \\text{sorted, singly linked} \n                           & \\text{unsorted, doubly linked} \n                           & \\text{sorted, doubly linked} \\\\\n\\hline\n\\text{SEARCH($L, k$)}      & & & & \\\\\n\\text{INSERT($L, x$)}      & & & & \\\\\n\\text{DELETE($L, x$)}      & & & & \\\\\n\\text{SUCCESSOR($L, x$)}   & & & & \\\\\n\\text{PREDECESSOR($L, x$)} & & & & \\\\\n\\text{MINIMUM($L$)}        & & & & \\\\\n\\text{MAXIMUM($L$)}        & & & &\n\\end{array}\n\n\n\n\n\\begin{array}{l|cccc}\n                           & \\text{unsorted, singly linked} \n                           & \\text{sorted, singly linked} \n                           & \\text{unsorted, doubly linked} \n                           & \\text{sorted, doubly linked} \\\\\n\\hline\n\\text{SEARCH($L, k$)}      & \\Theta(n) & \\Theta(n) & \\Theta(n) & \\Theta(n) \\\\\n\\text{INSERT($L, x$)}      & \\Theta(1) & \\Theta(n) & \\Theta(1) & \\Theta(n) \\\\\n\\text{DELETE($L, x$)}      & \\Theta(n) & \\Theta(n) & \\Theta(1) & \\Theta(1) \\\\\n\\text{SUCCESSOR($L, x$)}   & \\Theta(n) & \\Theta(1) & \\Theta(n) & \\Theta(1) \\\\\n\\text{PREDECESSOR($L, x$)} & \\Theta(n) & \\Theta(n) & \\Theta(n) & \\Theta(1) \\\\\n\\text{MINIMUM($L$)}        & \\Theta(n) & \\Theta(1) & \\Theta(n) & \\Theta(1) \\\\\n\\text{MAXIMUM($L$)}        & \\Theta(n) & \\Theta(n) & \\Theta(n) & \\Theta(n)\n\\end{array}",
            "title": "10-1 Comparisons among lists"
        },
        {
            "location": "/Chap10/Problems/10-2/",
            "text": "A \nmergeable heap\n supports the following operations: $\\text{MAKE-HEAP}$ (which creates an empty mergeable heap), $\\text{INSERT}$, $\\text{MINIMUM}$, $\\text{EXTRACT-MIN}$, and $\\text{UNION}$. Show how to implement mergeable heaps using linked lists in each of the following cases. Try to make each operation as efficient as possible. Analyze the running time of each operation in terms of the size of the dynamic set(s) being operated on.\n\n\na.\n Lists are sorted.\n\n\nb.\n Lists are unsorted.\n\n\nc.\n Lists are unsorted, and dynamic sets to be merged are disjoint.\n\n\n\n\nIn all three cases, $\\text{MAKE-HEAP}$ simply creates a new list $L$, sets $L.head = \\text{NIL}$, and returns $L$ in constant time. Assume lists are doubly linked. To realize a linked list as a heap, we imagine the usual array implementation of a binary heap, where the children of the $i$th element are $2i$ and $2i + 1$.\n\n\na.\n To insert, we perform a linear scan to see where to insert an element such that the list remains sorted. This takes linear time. The first element in the list is the minimum element, and we can find it in constant time. $\\text{EXTRACT-MIN}$ returns the first element of the list, then deletes it. Union performs a merge operation between the two sorted lists, interleaving their entries such that the resulting list is sorted. This takes time linear in the sum of the lengths of the two lists.\n\n\nb.\n To insert an element $x$ into the heap, begin linearly scanning the list until the first instance of an element $y$ which is strictly larger than $x$. If no such larger element exists, simply insert $x$ at the end of the list. If $y$ does exist, replace $y \\text t$ by $x$.\n\n\nThis maintains the min-heap property because $x \\le y$ and $y$ was smaller than each of its children, so $x$ must be as well. \n\n\nMoreover, $x$ is larger than its parent because $y$ was the first element in the list to exceed $x$. Now insert $y$, starting the scan at the node following $x$. Since we check each node at most once, the time is linear in the size of the list. \n\n\nTo get the minimum element, return the key of the head of the list in constant time.\n\n\nTo extract the minimum element, we first call $\\text{MINIMUM}$. Next, we'll replace the key of the head of the list by the key of the second smallest element $y$ in the list. We'll take the key stored at the end of the list and use it to replace the key of $y$. Finally, we'll delete the last element of the list, and call $\\text{MIN-HEAPIFY}$ on the list. \n\n\nTo implement this with linked lists, we need to step through the list to get from element $i$ to element $2i$. We omit this detail from the code, but we'll consider it for runtime analysis. Since the value of $i$ on which $\\text{MIN-HEAPIFY}$ is called is always increasing and we never need to step through elements multiple times, the runtime is linear in the length of the list.\n\n\nEXTRACT\n-\nMIN\n(\nL\n)\n\n    \nmin\n \n=\n \nMINIMIM\n(\nL\n)\n\n    \nlinearly\n \nscan\n \nfor\n \nthe\n \nsecond\n \nsmallest\n \nelement\n,\n \nlocated\n \nin\n \nposition\n \ni\n.\n\n    \nL\n.\nhead\n.\nkey\n \n=\n \nL\n[\ni\n]\n\n    \nL\n[\ni\n].\nkey\n \n=\n \nL\n[\nL\n.\nlength\n].\nkey\n\n    \nDELETE\n(\nL\n,\n \nL\n[\nL\n.\nlength\n])\n\n    \nMIN\n-\nHEAPIFY\n(\nL\n[\ni\n],\n \ni\n)\n\n    \nreturn\n \nmin\n\n\n\n\n\nMIN\n-\nHEAPIFY\n(\nL\n[\ni\n],\n \ni\n)\n\n    \nl\n \n=\n \nL\n[\n2\ni\n].\nkey\n\n    \nr\n \n=\n \nL\n[\n2\ni\n \n+\n \n1\n].\nkey\n\n    \np\n \n=\n \nL\n[\ni\n].\nkey\n\n    \nsmallest\n \n=\n \ni\n\n    \nif\n \nL\n[\n2\ni\n]\n \n!=\n \nNIL\n \nand\n \nl\n \n<\n \np\n\n        \nsmallest\n \n=\n \n2\ni\n\n    \nif\n \nL\n[\n2\ni\n \n+\n \n1\n]\n \n!=\n \nNIL\n \nand\n \nr\n \n<\n \nL\n[\nsmallest\n]\n\n        \nsmallest\n \n=\n \n2\ni\n \n+\n \n1\n\n    \nif\n \nsmallest\n \n!=\n \ni\n\n        \nexchange\n \nL\n[\ni\n]\n \nwith\n \nL\n[\nsmallest\n]\n\n        \nMIN\n-\nHEAPIFY\n(\nL\n[\nsmallest\n],\n \nsmallest\n])\n\n\n\nUnion is implemented below, where we assume $A$ and $B$ are the two list representations of heaps to be merged. The runtime is again linear in the lengths of the lists to be merged.\n\n\nc.\n Since the algorithms in part (b) didn't depend on the elements being distinct, we can use the same ones.",
            "title": "10-2 Mergeable heaps using linked lists"
        },
        {
            "location": "/Chap10/Problems/10-3/",
            "text": "Exercise 10.3-4 asked how we might maintain an n-element list compactly in the first n positions of an array. We shall assume that all keys are distinct and that the compact list is also sorted, that is, $key[i] < key[next[i]]$\u008d\u008d for all $i = 1, 2, \\ldots, n$ such that $next[i] \\ne \\text{NIL}$. We will also assume that we have a variable $L$ that contains the index of the first element on the list. Under these assumptions, you will show that we can use the following randomized algorithm to search the list in $O(\\sqrt n)$ expected time.\n\n\nCOMPACT\n-\nLIST\n-\nSEARCH\n(\nL\n,\n \nn\n,\n \nk\n)\n\n    \ni\n \n=\n \nL\n\n    \nwhile\n \ni\n \n!=\n \nNIL\n \nand\n \nkey\n[\ni\n]\n \n<\n \nk\n\n        \nj\n \n=\n \nRANDOM\n(\n1\n,\n \nn\n)\n\n        \nif\n \nkey\n[\ni\n]\n \n<\n \nkey\n[\nj\n]\n \nand\n \nkey\n[\nj\n]\n \n\u2264\n \nk\n\n            \ni\n \n=\n \nj\n\n            \nif\n \nkey\n[\ni\n]\n \n==\n \nk\n\n                \nreturn\n \ni\n\n        \ni\n \n=\n \nnext\n[\ni\n]\n\n    \nif\n \ni\n \n==\n \nNIL\n \nor\n \nkey\n[\ni\n]\n \n>\n \nk\n\n        \nreturn\n \nNIL\n\n    \nelse\n \nreturn\n \ni\n\n\n\n\n\nIf we ignore lines 3\u20137 of the procedure, we have an ordinary algorithm for searching a sorted linked list, in which index $i$ points to each position of the list in turn. The search terminates once the index $i$ ''falls off'' the end of the list or once $key[i] = k$. In the latter case, if $key[i] = k$, clearly we have found a key with the value $k$. If, however, $key[i] > k$, then we will never find a key with the value $k$, and so terminating the search was the right thing to do.\n\n\nLines 3\u20137 attempt to skip ahead to a randomly chosen position $j$. Such a skip benefits us if $key[j]$ \u008d is larger than $key[i]$\u008d and no larger than $k$; in such a case, $j$ marks a position in the list that $i$ would have to reach during an ordinary list search. Because the list is compact, we know that any choice of $j$ between $1$ and $n$ indexes some object in the list rather than a slot on the free list.\n\n\nInstead of analyzing the performance of $\\text{COMPACT-LIST-SEARCH}$ directly, we shall analyze a related algorithm, $\\text{COMPACT-LIST-SEARCH}'$, which executes two separate loops. This algorithm takes an additional parameter $t$ which determines an upper bound on the number of iterations of the first loop.\n\n\nCOMPACT\n-\nLIST\n-\nSEARCH\n'\n(\nL\n,\n \nn\n,\n \nk\n,\n \nt\n)\n\n    \ni\n \n=\n \nL\n\n    \nfor\n \nq\n \n=\n \n1\n \nto\n \nt\n\n        \nj\n \n=\n \nRANDOM\n(\n1\n,\n \nn\n)\n\n        \nif\n \nkey\n[\ni\n]\n \n<\n \nkey\n[\nj\n]\n \nand\n \nkey\n[\nj\n]\n \n\u2264\n \nk\n\n            \ni\n \n=\n \nj\n\n            \nif\n \nkey\n[\ni\n]\n \n==\n \nk\n\n                \nreturn\n \ni\n\n    \nwhile\n \ni\n \n!=\n \nNIL\n \nand\n \nkey\n[\ni\n]\n \n<\n \nk\n\n        \ni\n \n=\n \nnext\n[\ni\n]\n\n    \nif\n \ni\n \n==\n \nNIL\n \nor\n \nkey\n[\ni\n]\n \n>\n \nk\n\n        \nreturn\n \nNIL\n\n    \nelse\n \nreturn\n \ni\n\n\n\n\n\nTo compare the execution of the algorithms $\\text{COMPACT-LIST-SEARCH}(L, n, k)$ and $\\text{COMPACT-LIST-SEARCH}'(L, n, k, t)$, assume that the sequence of integers returned by the calls of $\\text{RANDOM}(1, n)$ is the same for both algorithms.\n\n\na.\n Suppose that $\\text{COMPACT-LIST-SEARCH}(L, n, k)$ takes $t$ iterations of the while loop of lines 2\u20138. Argue that $\\text{COMPACT-LIST-SEARCH}'(L, n, k, t)$ returns the same answer and that the total number of iterations of both the for and while loops within $\\text{COMPACT-LIST-SEARCH}'$ is at least $t$.\n\n\nIn the call $\\text{COMPACT-LIST-SEARCH}'(L, n, k, t)$, let $X_t$ be the random variable that describes the distance in the linked list (that is, through the chain of $next$ pointers) from position $i$ to the desired key $k$ after $t$ iterations of the \nfor\n loop of lines 2\u20137 have occurred.\n\n\nb.\n Argue that the expected running time of $\\text{COMPACT-LIST-SEARCH}'(L, n, k, t)$ is $O(t + \\text E[X_t])$.\n\n\nc.\n Show that $\\text E[X_t] \\le \\sum_{r = 1}^n (1 - r / n)^t$. ($\\textit{Hint:}$ Use equation $\\text{(C.25)}$.)\n\n\nd.\n Show that $\\sum_{r = 0}^{n - 1} r^t \\le n^{t + 1} / (t + 1)$.\n\n\ne.\n Prove that $\\text E[X_t] \\le n / (t + 1)$.\n\n\nf.\n Show that $\\text{COMPACT-LIST-SEARCH}'(L, n, k, t)$ runs in $O(t + n / t)$ expected time.\n\n\ng.\n Conclude that $\\text{COMPACT-LIST-SEARCH}$ runs in $O(\\sqrt n)$ expected time.\n\n\nh.\n Why do we assume that all keys are distinct in $\\text{COMPACT-LIST-SEARCH}$? Argue that random skips do not necessarily help asymptotically when the list contains repeated key values.\n\n\n\n\na.\n If the original version of the algorithm takes only $t$ iterations, then, we have that it was only at most t random skips though the list to get to the desired value, since each iteration of the original while loop is a possible random jump followed by a normal step through the linked list.\n\n\nb.\n The for loop on lines 2\u20137 will get run exactly $t$ times, each of which is constant runtime. After that, the while loop on lines 8\u20139 will be run exactly $X_t$ times. So, the total runtime is $O(t + \\text E[X_t])$.\n\n\nUNION\n(\nA\n,\n \nB\n)\n\n    \nif\n \nA\n.\nhead\n \n==\n \nNIL\n\n        \nreturn\n \nB\n\n    \ni\n \n=\n \n1\n\n    \nx\n \n=\n \nA\n.\nhead\n\n    \nwhile\n \nB\n.\nhead\n \n!=\n \nNIL\n\n        \nif\n \nB\n.\nhead\n.\nkey\n \n\u2264\n \nx\n.\nkey\n\n            \nInsert\n \na\n \nnode\n \nat\n \nthe\n \nend\n \nof\n \nlist\n \nB\n \nwith\n \nkey\n \n=\n \nx\n.\nkey\n\n            \nx\n.\nkey\n \n=\n \nB\n.\nhead\n.\nkey\n\n            \nDELETE\n(\nB\n,\n \nB\n.\nhead\n)\n\n        \nx\n \n=\n \nx\n.\nnext\n\n    \nreturn\n \nA\n\n\n\n\n\nc.\n Using equation $\\text{C.25}$, we have that $\\text E[X_t] = \\sum_{i = 1}^\\infty \\Pr\\{X_t \\ge i\\}$. So, we need to show that $\\Pr\\{X_t \\ge i\\} \\le (1 - i / n)^t$. This can be seen because having $X_t$ being greater than $i$ means that each random choice will result in an element that is either at least $i$ steps before the desired element, or is after the desired element. There are $n - i$ such elements, out of the total $n$ elements that we were pricking from. So, for a single one of the choices to be from such a range, we have a probability of $(n - i) / n = (1 - i / n)$. Since each of the selections was independent, the total probability that all of them were is $(1 - i / n)^t$, as desired. Lastly, we can note that since the linked list has length $n$, the probability that $X_t$ is greater than $n$ is equal to zero.\n\n\nd.\n Since we have that $t > 0$, we know that the function $f(x) = x^t$ is increasing, so, that means that $\\lfloor x \\rfloor^t \\le f(x)$. So,\n\n\n$$\\sum_{r = 0}^{n - 1} r^t = \\int_0^n \\lfloor r \\rfloor^t dr \\le \\int_0^n f(r)dr = \\frac{n^{t + 1}}{t + 1}.$$\n\n\ne.\n\n\n\\begin{align}\n\\text E[X_t] & \\le \\sum_{r = 1}^n (1 - r / n)^t \\\\\n             & =   \\sum_{r = 1}^n \\sum_{i = 0}^t \\binom{t}{i} (-r / n)^i \\\\\n             & =   \\sum_{i = 0}^t \\sum_{r = 1}^n \\binom{t}{i} (-r / n)^i \\\\\n             & =   \\sum_{i = 0}^t \\binom{t}{i} (-1)^i \\Bigg(n^i - 1 + \\sum_{r = 0}^{n - 1} r^t\\Bigg) / n \\\\\n             & \\le \\sum_{i = 0}^t \\binom{t}{i} (-1)^i \\Big(n^i - 1 + \\frac{n^{i + 1}}{i + 1}) / n \\\\\n             & \\le \\sum_{i = 0}^t \\binom{t}{i} (-1)^i \\frac{n^i}{i + 1} \\\\\n             & =   \\frac{1}{t + 1} \\sum_{i = 0}^t \\binom{t + 1}{i + 1} (-n)^i \\\\\n             & \\le \\frac{(1 - n)^{t + 1}}{t + 1}.\n\\end{align}\n\n\nf.\n We just put together parts (b) and (e) to get that it runs in time $O(t + n / (t + 1))$. But, this is the same as $O(t + n / t)$.\n\n\ng.\n Since we have that for any number of iterations $t$ that the first algorithm takes to find its answer, the second algorithm will return it in time $O(t + n / t)$. In particular, if we just have that $t = \\sqrt n$. The second algorithm takes time only $O(\\sqrt n)$. This means that tihe first list search algorithm is $O(\\sqrt n)$ as well.\n\n\nh.\n If we don't have distinct key values, then, we may randomly select an element that is further along than we had been before, but not jump to it because it has the same key as what we were currently at. The analysis will break when we try to bound the probability that $X_t \\ge i$.",
            "title": "10-3 Searching a sorted compact list"
        },
        {
            "location": "/Chap11/11.1/",
            "text": "11.1-1\n\n\n\n\nSuppose that a dynamic set $S$ is represented by a direct-address table $T$ of length $m$. Describe a procedure that finds the maximum element of $S$. What is the worst-case performance of your procedure?\n\n\n\n\nAs the dynamic set $S$ is represented by the direct-address table $T$, for each key $k$ in $S$, there is a slot $k$ in $T$ points to it. If no element with key $k$ in $S$, then $T[k] = \\text{NIL}$. Using this property, we can find the maximum element of $S$ by traversing down from the highest slot to seek the first non-$\\text{NIL}$ one.\n\n\nMAXIMUM\n(\nS\n)\n\n    \nreturn\n \nTABLE\n-\nMAXIMUM\n(\nT\n,\n \nm\n \n-\n \n1\n)\n\n\n\n\n\nTABLE\n-\nMAXIMUM\n(\nT\n,\n \nl\n)\n\n    \nif\n \nl\n \n<\n \n0\n\n        \nreturn\n \nNIL\n\n    \nelse\n \nif\n \nDIRECT\n-\nADDRESS\n-\nSEARCH\n(\nT\n,\n \nl\n)\n \n!=\n \nNIL\n\n        \nreturn\n \nl\n\n    \nelse\n \nreturn\n \nTABLE\n-\nMAXIMUM\n(\nT\n,\n \nl\n \n-\n \n1\n)\n\n\n\n\n\nThe $\\text{TABLE-MAXIMUM}$ procedure gest down and checks $1$ sloc at a time, linearly approaches the solution. In the worst case where $S$ is empty, $\\text{TABLE-MAXIMUM}$ examines $m$ slots. Therefore, the worst-case performance of $\\text{MAXIMUM}$ is $O(n)$, where $n$ is the number of elements in the set $S$.\n\n\n11.1-2\n\n\n\n\nA \nbit vector\n is simply an array of bits ($0$s and $1$s). A bit vector of length $m$ takes much less space than an array of $m$ pointers. Describe how to use a bit vector to represent a dynamic set of distinct elements with no satellite data. Dictionary operations should run in $O(1)$ time.\n\n\n\n\nUsing the bit vector data structure, we can represent keys less than $m$ by a string of $m$ bits, denoted by $V[0..m - 1]$, in which each position that occupied by the bit $1$, corresponds to a key in the set $S$. If the set contains no element with key $k$, then $V[k] = 0$. For instance, we can store the set ${2, 4, 6, 10, 16}$ in a bit vector of length $20$:\n\n\n001010100010000010000\n\n\nBITMAP\n-\nSEARCH\n(\nV\n,\n \nk\n)\n\n    \nif\n \nV\n[\nk\n]\n \n!=\n \n0\n\n        \nreturn\n \nk\n\n    \nelse\n \nreturn\n \nNIL\n\n\n\n\n\nBITMAP\n-\nINSERT\n(\nV\n,\n \nx\n)\n\n    \nV\n[\nx\n]\n \n=\n \n1\n\n\n\n\n\nBITMAP\n-\nDELETE\n(\nV\n,\n \nx\n)\n\n    \nV\n[\nx\n]\n \n=\n \n0\n\n\n\n\n\nEach of these operations takes only $O(1)$ time.\n\n\n11.1-3\n\n\n\n\nSuggest how to implement a direct-address table in which the keys of stored elements do not need to be distinct and the elements can have satellite data. All three dictionary operations ($\\text{INSERT}$, $\\text{DELETE}$, and $\\text{SEARCH}$) should run in $O(1)$ time. (Don't forget that $\\text{DELETE}$ takes as an argument a pointer to an object to be deleted, not a key.)\n\n\n\n\nAssuming that fetching an element should return the satellite data of all the stored elements, we can have each key map to a doubly linked list.\n\n\n\n\n$\\text{INSERT}$: appends the element to the list in constant time\n\n\n$\\text{DELETE}$: removes the element from the linked list in constant time (the element contains pointers to the previous and next element)\n\n\n$\\text{SEARCH}$: returns the first element, which is a node in a linked list, in constant time\n\n\n\n\n11.1-4 $\\star$\n\n\n\n\nWe wish to implement a dictionary by using direct addressing on a \nhuge\n array. At the start, the array entries may contain garbage, and initializing the entire array is impractical because of its size. Describe a scheme for implementing a direct-address dictionary on a huge array. Each stored object should use $O(1)$ space; the operations $\\text{SEARCH}$, $\\text{INSERT}$, and $\\text{DELETE}$ should take $O(1)$ time each; and initializing the data structure should take $O(1)$ time. ($\\textit{Hint:}$ Use an additional array, treated somewhat like a stack whose size is the number of keys actually stored in the dictionary, to help determine whether a given entry in the huge array is valid or not.)\n\n\n\n\nWe denote the huge array by $T$ and, taking the hint from the book, we also have a stack implemented by an array $S$. The size of $S$ equals the number of keys actually stored, so that $S$ should be allocated at the dictionary's maximum size. The stack\n\nhas an attribute $S.top$, so that only entries $S[1..S.top]$ are valid.\n\n\nThe idea of this scheme is that entries of $T$ and $S$ validate each other. If key $k$ is\n\nactually stored in $T$, then $T[k]$ contains the index, say $j$, of a valid entry in $S$, and\n\n$S[j]$ contains the value $k$. Let us call this situation, in which $1 \\le T[k] \\le S.top$, $S[T[k]] = k$, and $T[S[j]] = j$, a \nvalidating cycle\n.  \n\n\nAssuming that we also need to store pointers to objects in our direct-address table, we can store them in an array that is parallel to either $T$ or $S$. Since $S$ is smaller than $T$, we'll use an array $S'$, allocated to be the same size as $S$, for these pointers. Thus, if the dictionary contains an object $x$ with key $k$, then there is a validating cycle and $S'[T[k]]$ points to $x$.\n\n\nThe operations on the dictionary work as follows:  \n\n\n\n\nInitialization:\n Simply set $S.top = 0$, so that there are no valid entries in the stack.  \n\n\nSEARCH:\n Given key $k$, we check whether we have a validating cycle, i.e., whether $1 \\le T [k] \\le S.top$ and $S[T[k]] = k$. If so, we return $S'[T[k]]$, and otherwise we return $\\text{NIL}$.  \n\n\nINSERT:\n To insert object $x$ with key $k$, assuming that this object is not already in the dictionary, we increment $S.top$, set $S[S.top] = k$, set $S'[S.top] = x$, and set $T[k] = S.top$.  \n\n\nDELETE:\n To delete object $x$ with key $k$, assuming that this object is in the dictionary, we need to break the validating cycle. The trick is to also ensure that we don't leave a \"hole\" in the stack, and we solve this problem by moving the top entry of the stack into the position that we are vacating-and then fixing up \nthat\n entry's validating cycle. That is, we execute the following sequence of assignments:  \n\n\n\n\n\\begin{align}\n    & S[T[k]] = S[S.top]   \\\\\n    & S'[T[k]] = S'[S.top] \\\\\n    & T[S[T[k]]] = T[k]    \\\\\n    & T[k] = 0             \\\\\n    & S.top = S.top - 1\n\\end{align}\n\n\nEach of these operation - initialization, $\\text{SEARCH}$, $\\text{INSERT}$, and $\\text{DELETE}$-takes $O(1)$ time.",
            "title": "11.1 Direct-address tables"
        },
        {
            "location": "/Chap11/11.1/#111-1",
            "text": "Suppose that a dynamic set $S$ is represented by a direct-address table $T$ of length $m$. Describe a procedure that finds the maximum element of $S$. What is the worst-case performance of your procedure?   As the dynamic set $S$ is represented by the direct-address table $T$, for each key $k$ in $S$, there is a slot $k$ in $T$ points to it. If no element with key $k$ in $S$, then $T[k] = \\text{NIL}$. Using this property, we can find the maximum element of $S$ by traversing down from the highest slot to seek the first non-$\\text{NIL}$ one.  MAXIMUM ( S ) \n     return   TABLE - MAXIMUM ( T ,   m   -   1 )   TABLE - MAXIMUM ( T ,   l ) \n     if   l   <   0 \n         return   NIL \n     else   if   DIRECT - ADDRESS - SEARCH ( T ,   l )   !=   NIL \n         return   l \n     else   return   TABLE - MAXIMUM ( T ,   l   -   1 )   The $\\text{TABLE-MAXIMUM}$ procedure gest down and checks $1$ sloc at a time, linearly approaches the solution. In the worst case where $S$ is empty, $\\text{TABLE-MAXIMUM}$ examines $m$ slots. Therefore, the worst-case performance of $\\text{MAXIMUM}$ is $O(n)$, where $n$ is the number of elements in the set $S$.",
            "title": "11.1-1"
        },
        {
            "location": "/Chap11/11.1/#111-2",
            "text": "A  bit vector  is simply an array of bits ($0$s and $1$s). A bit vector of length $m$ takes much less space than an array of $m$ pointers. Describe how to use a bit vector to represent a dynamic set of distinct elements with no satellite data. Dictionary operations should run in $O(1)$ time.   Using the bit vector data structure, we can represent keys less than $m$ by a string of $m$ bits, denoted by $V[0..m - 1]$, in which each position that occupied by the bit $1$, corresponds to a key in the set $S$. If the set contains no element with key $k$, then $V[k] = 0$. For instance, we can store the set ${2, 4, 6, 10, 16}$ in a bit vector of length $20$:  001010100010000010000  BITMAP - SEARCH ( V ,   k ) \n     if   V [ k ]   !=   0 \n         return   k \n     else   return   NIL   BITMAP - INSERT ( V ,   x ) \n     V [ x ]   =   1   BITMAP - DELETE ( V ,   x ) \n     V [ x ]   =   0   Each of these operations takes only $O(1)$ time.",
            "title": "11.1-2"
        },
        {
            "location": "/Chap11/11.1/#111-3",
            "text": "Suggest how to implement a direct-address table in which the keys of stored elements do not need to be distinct and the elements can have satellite data. All three dictionary operations ($\\text{INSERT}$, $\\text{DELETE}$, and $\\text{SEARCH}$) should run in $O(1)$ time. (Don't forget that $\\text{DELETE}$ takes as an argument a pointer to an object to be deleted, not a key.)   Assuming that fetching an element should return the satellite data of all the stored elements, we can have each key map to a doubly linked list.   $\\text{INSERT}$: appends the element to the list in constant time  $\\text{DELETE}$: removes the element from the linked list in constant time (the element contains pointers to the previous and next element)  $\\text{SEARCH}$: returns the first element, which is a node in a linked list, in constant time",
            "title": "11.1-3"
        },
        {
            "location": "/Chap11/11.1/#111-4-star",
            "text": "We wish to implement a dictionary by using direct addressing on a  huge  array. At the start, the array entries may contain garbage, and initializing the entire array is impractical because of its size. Describe a scheme for implementing a direct-address dictionary on a huge array. Each stored object should use $O(1)$ space; the operations $\\text{SEARCH}$, $\\text{INSERT}$, and $\\text{DELETE}$ should take $O(1)$ time each; and initializing the data structure should take $O(1)$ time. ($\\textit{Hint:}$ Use an additional array, treated somewhat like a stack whose size is the number of keys actually stored in the dictionary, to help determine whether a given entry in the huge array is valid or not.)   We denote the huge array by $T$ and, taking the hint from the book, we also have a stack implemented by an array $S$. The size of $S$ equals the number of keys actually stored, so that $S$ should be allocated at the dictionary's maximum size. The stack \nhas an attribute $S.top$, so that only entries $S[1..S.top]$ are valid.  The idea of this scheme is that entries of $T$ and $S$ validate each other. If key $k$ is \nactually stored in $T$, then $T[k]$ contains the index, say $j$, of a valid entry in $S$, and \n$S[j]$ contains the value $k$. Let us call this situation, in which $1 \\le T[k] \\le S.top$, $S[T[k]] = k$, and $T[S[j]] = j$, a  validating cycle .    Assuming that we also need to store pointers to objects in our direct-address table, we can store them in an array that is parallel to either $T$ or $S$. Since $S$ is smaller than $T$, we'll use an array $S'$, allocated to be the same size as $S$, for these pointers. Thus, if the dictionary contains an object $x$ with key $k$, then there is a validating cycle and $S'[T[k]]$ points to $x$.  The operations on the dictionary work as follows:     Initialization:  Simply set $S.top = 0$, so that there are no valid entries in the stack.    SEARCH:  Given key $k$, we check whether we have a validating cycle, i.e., whether $1 \\le T [k] \\le S.top$ and $S[T[k]] = k$. If so, we return $S'[T[k]]$, and otherwise we return $\\text{NIL}$.    INSERT:  To insert object $x$ with key $k$, assuming that this object is not already in the dictionary, we increment $S.top$, set $S[S.top] = k$, set $S'[S.top] = x$, and set $T[k] = S.top$.    DELETE:  To delete object $x$ with key $k$, assuming that this object is in the dictionary, we need to break the validating cycle. The trick is to also ensure that we don't leave a \"hole\" in the stack, and we solve this problem by moving the top entry of the stack into the position that we are vacating-and then fixing up  that  entry's validating cycle. That is, we execute the following sequence of assignments:     \\begin{align}\n    & S[T[k]] = S[S.top]   \\\\\n    & S'[T[k]] = S'[S.top] \\\\\n    & T[S[T[k]]] = T[k]    \\\\\n    & T[k] = 0             \\\\\n    & S.top = S.top - 1\n\\end{align}  Each of these operation - initialization, $\\text{SEARCH}$, $\\text{INSERT}$, and $\\text{DELETE}$-takes $O(1)$ time.",
            "title": "11.1-4 $\\star$"
        },
        {
            "location": "/Chap11/11.2/",
            "text": "11.2-1\n\n\n\n\nSuppose we use a hash function $h$ to hash $n$ distinct keys into an array $T$ of length $m$. Assuming simple uniform hashing, what is the expected number of collisions? More precisely, what is the expected cardinality of $\\{\\{k, l\\}: k \\ne l \\text{ and } h(k) = h(l)\\}$?\n\n\n\n\nFor each pair of keys $k$, $l$, where $k \\ne l$, define the indicator random variable $X_{kl} = \\text I\\{h(k) = h(l)\\}$. Since we assume simple uniform hashing, $\\Pr\\{X_{kl} = 1\\} = \\Pr\\{h(k) = h(l)\\} = 1 / m$, and so $\\text E[X_{kl}] = 1 / m$.\n\n\nNow define the random variable $Y$ to be the total number of collisions, so that $Y = \\sum_{k \\ne l} X_{kl}$. The expected number of collisions is \n\n\n\\begin{align}\n\\text E[Y] & = \\text E\\bigg[\\sum_{k \\ne l} X_{kl}\\bigg] \\\\\n           & = \\sum_{k \\ne l} \\text E[X_{kl}] & \\text{(linearity of expectation)} \\\\\n           & = \\binom{n}{2}\\frac{1}{m} \\\\\n           & = \\frac{n(n - 1)}{2} \\cdot \\frac{1}{m} \\\\\n           & = \\frac{n(n - 1)}{2m}.\n\\end{align}\n\n\n11.2-2\n\n\n\n\nDemonstrate what happens when we insert the keys $5, 28, 19, 15, 20, 33, 12, 17, 10$ into a hash table with collisions resolved by chaining. Let the table have $9$ slots, and let the hash function be $h(k) = k \\mod 9$.\n\n\n\n\nStart with a bit vector $b$ which contains a $1$ in position $k$ if $k$ is in the dynamic set, and a $0$ otherwise. \n\n\n\n\nTo search, we return true if $b[x] = 1$. \n\n\nTo insert $x$, set $b[x] = 1$. \n\n\nTo delete $x$, set $b[x] = 0$. \n\n\n\n\nEach of these takes $O(1)$ time.\n\n\n11.2-3\n\n\n\n\nProfessor Marley hypothesizes that he can obtain substantial performance gains by modifying the chaining scheme to keep each list in sorted order. How does the professor's modification affect the running time for successful searches, unsuccessful searches, insertions, and deletions?\n\n\n\n\n\n\nSuccessful searches: no difference, $\\Theta(1 + \\alpha)$.\n\n\nUnsuccessful searches: faster but still $\\Theta(1 + \\alpha)$.\n\n\nInsertions: same as successful searches, $\\Theta(1 + \\alpha)$.\n\n\nDeletions: same as successful searches, $\\Theta(1 + \\alpha)$.\n\n\n\n\n11.2-4\n\n\n\n\nSuggest how to allocate and deallocate storage for elements within the hash table itself by linking all unused slots into a free list. Assume that one slot can store a flag and either one element plus a pointer or two pointers. All dictionary and free-list operations should run in $O(1)$ expected time. Does the free list need to be doubly linked, or does a singly linked free list suffice?\n\n\n\n\nThe flag in each slot will indicate whether the slot is free.\n\n\n\n\nA free slot is in the free list, a doubly linked list of all free slots in the table. The slot thus contains two pointers.\n\n\nA used slot contains an element and a pointer (possibly $\\text{NIL}$) to the next element that hashes to this slot. (Of course, that pointer points to another slot in the table.)\n\n\n\n\nOperations\n\n\n\n\n\n\nInsertion:\n\n\n\n\nIf the element hashes to a free slot, just remove the slot from the free list and store the element there (with a $\\text{NIL}$ pointer). The free list must be doubly linked in order for this deletion to run in $O(1)$ time.\n\n\n\n\nIf the element hashes to a used slot $j$, check whether the element $x$ already there ''belongs'' there (its key also hashes to slot $j$).\n\n\n\n\nIf so, add the new element to the chain of elements in this slot. To do so, allocate a free slot (e.g., take the head of the free list) for the new element and put this new slot at the head of the list pointed to by the hashed-to slot ($j$).\n\n\nIf not, $E$ is part of another slot's chain. Move it to a new slot by allocating one from the free list, copying the old slot's ($j$'s) contents (element $x$ and pointer) to the new slot, and updating the pointer in the slot that pointed to $j$ to point to the new slot. Then insert the new element in the now-empty slot as usual.\n\n\n\n\nTo update the pointer to $j$, it is necessary to find it by searching the chain of elements starting in the slot $x$ hashes to.\n\n\n\n\n\n\n\n\n\n\nDeletion:\n Let $j$ be the slot the element $x$ to be deleted hashes to.\n\n\n\n\nIf $x$ is the only element in $j$ ($j$ doesn't point to any other entries), just free the slot, returning it to the head of the free list.\n\n\nIf $x$ is in $j$ but there's a pointer to a chain of other elements, move the first pointed-to entry to slot $j$ and free the slot it was in.\n\n\nIf $x$ is found by following a pointer from $j$, just free $x$'s slot and splice it out of the chain (i.e., update the slot that pointed to $x$ to point to $x$'s successor).\n\n\n\n\n\n\n\n\nSearching:\n Check the slot the key hashes to, and if that is not the desired element, follow the chain of pointers from the slot.\n    All the operations take expected $O(1)$ times for the same reason they do with the version in the book: The expected time to search the chains is $O(1 + \\alpha)$ regardless of where the chains are stored, and the fact that all the elements are stored in the table means that $\\alpha \\le 1$. If the free list were singly linked, then operations that involved removing an arbitrary slot from the free list would not run in $O(1)$ time.\n\n\n\n\n\n\n11.2-5\n\n\n\n\nSuppose that we are storing a set of $n$ keys into a hash table of size $m$. Show that if the keys are drawn from a universe $U$ with $|U| > nm$, then $U$ has a subset of size $n$ consisting of keys that all hash to the same slot, so that the worst-case searching time for hashing with chaining is $\\Theta(n)$.\n\n\n\n\nSuppose the $m - 1$ slots contains at most $n - 1$ elements, then the remaining slot should have \n\n\n$$|U| - (m - 1)(n - 1) > nm - (m - 1)(n - 1) = n + m - 1 \\ge n$$\n\n\nelements, thus $U$ has a subset of size $n$.\n\n\n11.2-6\n\n\n\n\nSuppose we have stored $n$ keys in a hash table of size $m$, with collisions resolved by chaining, and that we know the length of each chain, including the length $L$ of the longest chain. Describe a procedure that selects a key uniformly at random from among the keys in the hash table and returns it in expected time $O(L \\cdot (1 + 1 / \\alpha))$.\n\n\n\n\nWe can view the hash table as if it had $m$ rows and $L$ columns; each row stores one chain. The array has $mL$ entries storing $n$ keys, and $mL - n$ empty values. The procedure picks array positions at random until it finds a key, which it returns. The probability of success on one draw is $n / mL$, so $mL / n = L / \\alpha$ trials are needed. Each trial takes time $O(1)$, since the individual chain sizes are known. The chain for the last draw needs to be scanned to find the desired element, however, costing $O(L)$.",
            "title": "11.2 Hash tables"
        },
        {
            "location": "/Chap11/11.2/#112-1",
            "text": "Suppose we use a hash function $h$ to hash $n$ distinct keys into an array $T$ of length $m$. Assuming simple uniform hashing, what is the expected number of collisions? More precisely, what is the expected cardinality of $\\{\\{k, l\\}: k \\ne l \\text{ and } h(k) = h(l)\\}$?   For each pair of keys $k$, $l$, where $k \\ne l$, define the indicator random variable $X_{kl} = \\text I\\{h(k) = h(l)\\}$. Since we assume simple uniform hashing, $\\Pr\\{X_{kl} = 1\\} = \\Pr\\{h(k) = h(l)\\} = 1 / m$, and so $\\text E[X_{kl}] = 1 / m$.  Now define the random variable $Y$ to be the total number of collisions, so that $Y = \\sum_{k \\ne l} X_{kl}$. The expected number of collisions is   \\begin{align}\n\\text E[Y] & = \\text E\\bigg[\\sum_{k \\ne l} X_{kl}\\bigg] \\\\\n           & = \\sum_{k \\ne l} \\text E[X_{kl}] & \\text{(linearity of expectation)} \\\\\n           & = \\binom{n}{2}\\frac{1}{m} \\\\\n           & = \\frac{n(n - 1)}{2} \\cdot \\frac{1}{m} \\\\\n           & = \\frac{n(n - 1)}{2m}.\n\\end{align}",
            "title": "11.2-1"
        },
        {
            "location": "/Chap11/11.2/#112-2",
            "text": "Demonstrate what happens when we insert the keys $5, 28, 19, 15, 20, 33, 12, 17, 10$ into a hash table with collisions resolved by chaining. Let the table have $9$ slots, and let the hash function be $h(k) = k \\mod 9$.   Start with a bit vector $b$ which contains a $1$ in position $k$ if $k$ is in the dynamic set, and a $0$ otherwise.    To search, we return true if $b[x] = 1$.   To insert $x$, set $b[x] = 1$.   To delete $x$, set $b[x] = 0$.    Each of these takes $O(1)$ time.",
            "title": "11.2-2"
        },
        {
            "location": "/Chap11/11.2/#112-3",
            "text": "Professor Marley hypothesizes that he can obtain substantial performance gains by modifying the chaining scheme to keep each list in sorted order. How does the professor's modification affect the running time for successful searches, unsuccessful searches, insertions, and deletions?    Successful searches: no difference, $\\Theta(1 + \\alpha)$.  Unsuccessful searches: faster but still $\\Theta(1 + \\alpha)$.  Insertions: same as successful searches, $\\Theta(1 + \\alpha)$.  Deletions: same as successful searches, $\\Theta(1 + \\alpha)$.",
            "title": "11.2-3"
        },
        {
            "location": "/Chap11/11.2/#112-4",
            "text": "Suggest how to allocate and deallocate storage for elements within the hash table itself by linking all unused slots into a free list. Assume that one slot can store a flag and either one element plus a pointer or two pointers. All dictionary and free-list operations should run in $O(1)$ expected time. Does the free list need to be doubly linked, or does a singly linked free list suffice?   The flag in each slot will indicate whether the slot is free.   A free slot is in the free list, a doubly linked list of all free slots in the table. The slot thus contains two pointers.  A used slot contains an element and a pointer (possibly $\\text{NIL}$) to the next element that hashes to this slot. (Of course, that pointer points to another slot in the table.)   Operations    Insertion:   If the element hashes to a free slot, just remove the slot from the free list and store the element there (with a $\\text{NIL}$ pointer). The free list must be doubly linked in order for this deletion to run in $O(1)$ time.   If the element hashes to a used slot $j$, check whether the element $x$ already there ''belongs'' there (its key also hashes to slot $j$).   If so, add the new element to the chain of elements in this slot. To do so, allocate a free slot (e.g., take the head of the free list) for the new element and put this new slot at the head of the list pointed to by the hashed-to slot ($j$).  If not, $E$ is part of another slot's chain. Move it to a new slot by allocating one from the free list, copying the old slot's ($j$'s) contents (element $x$ and pointer) to the new slot, and updating the pointer in the slot that pointed to $j$ to point to the new slot. Then insert the new element in the now-empty slot as usual.   To update the pointer to $j$, it is necessary to find it by searching the chain of elements starting in the slot $x$ hashes to.      Deletion:  Let $j$ be the slot the element $x$ to be deleted hashes to.   If $x$ is the only element in $j$ ($j$ doesn't point to any other entries), just free the slot, returning it to the head of the free list.  If $x$ is in $j$ but there's a pointer to a chain of other elements, move the first pointed-to entry to slot $j$ and free the slot it was in.  If $x$ is found by following a pointer from $j$, just free $x$'s slot and splice it out of the chain (i.e., update the slot that pointed to $x$ to point to $x$'s successor).     Searching:  Check the slot the key hashes to, and if that is not the desired element, follow the chain of pointers from the slot.\n    All the operations take expected $O(1)$ times for the same reason they do with the version in the book: The expected time to search the chains is $O(1 + \\alpha)$ regardless of where the chains are stored, and the fact that all the elements are stored in the table means that $\\alpha \\le 1$. If the free list were singly linked, then operations that involved removing an arbitrary slot from the free list would not run in $O(1)$ time.",
            "title": "11.2-4"
        },
        {
            "location": "/Chap11/11.2/#112-5",
            "text": "Suppose that we are storing a set of $n$ keys into a hash table of size $m$. Show that if the keys are drawn from a universe $U$ with $|U| > nm$, then $U$ has a subset of size $n$ consisting of keys that all hash to the same slot, so that the worst-case searching time for hashing with chaining is $\\Theta(n)$.   Suppose the $m - 1$ slots contains at most $n - 1$ elements, then the remaining slot should have   $$|U| - (m - 1)(n - 1) > nm - (m - 1)(n - 1) = n + m - 1 \\ge n$$  elements, thus $U$ has a subset of size $n$.",
            "title": "11.2-5"
        },
        {
            "location": "/Chap11/11.2/#112-6",
            "text": "Suppose we have stored $n$ keys in a hash table of size $m$, with collisions resolved by chaining, and that we know the length of each chain, including the length $L$ of the longest chain. Describe a procedure that selects a key uniformly at random from among the keys in the hash table and returns it in expected time $O(L \\cdot (1 + 1 / \\alpha))$.   We can view the hash table as if it had $m$ rows and $L$ columns; each row stores one chain. The array has $mL$ entries storing $n$ keys, and $mL - n$ empty values. The procedure picks array positions at random until it finds a key, which it returns. The probability of success on one draw is $n / mL$, so $mL / n = L / \\alpha$ trials are needed. Each trial takes time $O(1)$, since the individual chain sizes are known. The chain for the last draw needs to be scanned to find the desired element, however, costing $O(L)$.",
            "title": "11.2-6"
        },
        {
            "location": "/Chap11/11.3/",
            "text": "11.3-1\n\n\n\n\nSuppose we wish to search a linked list of length $n$, where each element contains a key $k$ along with a hash value $h(k)$. Each key is a long character string. How might we take advantage of the hash values when searching the list for an element with a given key?\n\n\n\n\nIf every element also contained a hash of the long character string, when we are searching for the desired element, we'll first check if the hashvalue of the node in the linked list, and move on if it disagrees. This can increase the runtime by a factor proportional to the length of the long character strings.\n\n\n11.3-2\n\n\n\n\nSuppose that we hash a string of $r$ characters into $m$ slots by treating it as a radix-128 number and then using the division method. We can easily represent the number $m$ as a 32-bit computer word, but the string of $r$ characters, treated as a radix-128 number, takes many words. How can we apply the division method to compute the hash value of the character string without using more than a constant number of words of storage outside the string itself?\n\n\n\n\n    \nsum\n \n=\n \n0\n\n    \nfor\n \ni\n \n=\n \n1\n \nto\n \nr\n\n        \nsum\n \n=\n \n(\nsum\n \n*\n \n128\n \n+\n \ns\n[\ni\n])\n \n%\n \nm\n\n\n\n\n\nUse \nsum\n as the key.\n\n\n11.3-3\n\n\n\n\nConsider a version of the division method in which $h(k) = k \\mod m$, where $m = 2^p - 1$ and $k$ is a character string interpreted in radix $2^p$. Show that if we can derive string $x$ from string $y$ by permuting its characters, then $x$ and $y$ hash to the same value. Give an example of an application in which this property would be undesirable in a hash function.\n\n\n\n\nFirst, we observe that we can generate any permutation by a sequence of interchanges of pairs of characters. One can prove this property formally, but informally, consider that both heapsort and quicksort work by interchanging pairs of elements and that they have to be able to produce any permutation of their input array. Thus, it suffices to show that if string $x$ can be derived from string $y$ by interchanging a single pair of characters, then $x$ and $y$ hash to the same value.\n\n\nLet us denote the $i$th character in $x$ by $x_i$, and similarly for $y$. The interpretation of $x$ in radix $2^p$ is $\\sum_{i = 0}^{n - 1} x_i 2^{ip}$, and so $h(x) = (\\sum_{i = 0}^{n - 1} x_i 2^{ip}) \\mod (2^p - 1)$. Similarly, $h(y) = (\\sum_{i = 0}^{n - 1} y_i 2^{ip}) \\mod (2^p - 1)$.\n\n\nSuppose that $x$ and $y$ are identical strings of $n$ characters except that the characters in positions $a$ and $b$ are interchanged: $x_a = y_b$ and $y_a = x_b$. Without loss of generality, let $a > b$. We have\n\n\n$$h(x) - h(y) = \\Big(\\sum_{i = 0}^{n - 1} x_i 2^{ip}\\Big) \\mod (2^p - 1) - \\Big(\\sum_{i = 0}^{n - 1} y_i 2^{ip}\\Big) \\mod (2^p - 1).$$\n\n\nSince $0 \\le h(x)$, $h(y) < 2^p - 1$, we have that $-(2^p - 1) < h(x) - h(y) < 2^p - 1$. If we show that $(h(x) - h(y)) \\mod (2^p - 1) = 0$, then $h(x) = h(y)$.\n\n\nSince the sums in the hash functions are the same except for indices $a$ and $b$, we have\n\n\n\\begin{align}\n(h(x) - h(y)) \\mod (2^p - 1)\n    & = ((x_a 2^{ap} + x_b 2^{bp}) - (y_a 2^{ap} + y_b 2^{bp})) \\mod (2^p - 1) \\\\\n    & = ((x_a 2^{ap} + x_b 2^{bp}) - (x_b 2^{ap} + x_a 2^{bp})) \\mod (2^p - 1) \\\\\n    & = ((x_a - x_b)2^{ap} - (x_a - x_b) 2^{bp}) \\mod (2^p - 1) \\\\\n    & = ((x_a - x_b)(2^{ap} - 2^{bp})) \\mod (2^p - 1) \\\\\n    & = ((x_a - x_b)2^{bp}(2^{(a - b)p} - 1)) \\mod (2^p - 1).\n\\end{align}\n\n\nBy equation $\\text{(A.5)}$,\n\n\n$$\\sum_{i = 0}^{a - b - 1} 2^{pi} = \\frac{2^{(a - b)p} - 1}{2^p - 1},$$\n\n\nand multiplying both sides by $s^p - 1$, we get $2^{(a - b)p} - 1 = \\big(\\sum_{i = 0}^{a - b - 1} 2^{pi}\\big)(2^p - 1)$. Thus,\n\n\n\\begin{align}\n(h(x) - h(y))\\mod(2^p - 1)\n    & = \\Bigg((x_a - x_b)2^{bp}\\Bigg(\\sum_{i = 0}^{a - b - 1} 2^{pi}\\Bigg)(2^p - 1)\\Bigg) \\mod (2^p - 1) \\\\\n    & = 0,\n\\end{align}\n\n\nsince one of the factors is $2^p - 1$.\n\n\nWe have shown that $(h(x) - h(y)) \\mod (2^p - 1) = 0$, and so $h(x) = h(y)$.\n\n\n11.3-4\n\n\n\n\nConsider a hash table of size $m = 1000$ and a corresponding hash function $h(k) = \\lfloor m (kA \\mod 1) \\rfloor$ for $A = (\\sqrt 5 - 1) / 2$. Compute the locations to which the keys $61$, $62$, $63$, $64$, and $65$ are mapped.\n\n\n\n\n\n\n$h(61) = \\lfloor 1000(61 \\cdot \\frac{\\sqrt 5 - 1}{2} \\mod 1) \\rfloor = 700$.\n\n\n$h(62) = \\lfloor 1000(62 \\cdot \\frac{\\sqrt 5 - 1}{2} \\mod 1) \\rfloor = 318$.\n\n\n$h(63) = \\lfloor 1000(63 \\cdot \\frac{\\sqrt 5 - 1}{2} \\mod 1) \\rfloor = 936$.\n\n\n$h(64) = \\lfloor 1000(64 \\cdot \\frac{\\sqrt 5 - 1}{2} \\mod 1) \\rfloor = 554$.\n\n\n$h(65) = \\lfloor 1000(65 \\cdot \\frac{\\sqrt 5 - 1}{2} \\mod 1) \\rfloor = 172$.\n\n\n\n\n11.3-5 $\\star$\n\n\n\n\nDefine a family $\\mathcal H$ of hash functions from a finite set $U$ to a finite set $B$ to be \n$\\epsilon$-universal\n if for all pairs of distinct elements $k$ and $l$ in $U$,\n\n\n$$\\Pr\\{h(k) = h(l)\\} \\le \\epsilon,$$\n\n\nwhere the probability is over the choice of the hash function $h$ drawn at random from the family $\\mathcal H$. Show that an $\\epsilon$-universal family of hash functions must have\n\n\n$$\\epsilon \\ge \\frac{1}{|B|} - \\frac{1}{|U|}.$$\n\n\n\n\nLet $b = |B|$ and $u = |U|$. We start by showing that the total number of collisions is minimized by a hash function that maps $u / b$ elements of $U$ to each of the $b$ values in $B$. For a given hash function, let $u_j$ be the number of elements that map to $j \\in B$. We have $u = \\sum_{j \\in B} u_j$. We also have that the number of collisions for a given value of $j \\in B$ is $\\binom{u_j}{2} = u_j(u_j - 1) / 2$.\n\n\nLemma\n\n\nThe total number of collisions is minimized when $u_j = u / b$ for each $j \\in B$.\n\n\nProof\n \n\n\nIf $u_j \\le u / b$, let us call $j$ \nunderloaded\n, and if $u_j \\ge u / b$, let us call $j$ \noverloaded\n. Consider an unbalanced situation in which $u_j \\ne u / b$ for at least one value $j \\in B$. We can think of converting a balanced situation in which all $u_j$ equal $u / b$ into the unbalanced situation by repeatedly moving an element that maps to an underloaded value to map instead to an overloaded value. (If you think of the values of $B$ as representing buckets, we are repeatedly moving elements from buckets containing at most $u / b$ elements to buckets containing at least $u / b$ elements.)\n\n\nWe now show that each such move increases the number of collisions, so that all the moves together must increase the number of collisions. Suppose that we move an element from an underloaded value $j$ to an overloaded value $k$, and we leave all other elements alone. Because $j$ is underloaded and $k$ is overloaded, $u_j \\le u / b\\le u_k$. Considering just the collisions for values $j$ and $k$, we have $u_j(u_j - 1) / 2 + u_k(u_k - 1) / 2$ collisions before the move and $(u_j - 1)(u_j - 2) / 2 + (u_k + 1)u_k / 2$ collisions afterward. We wish to show that\n\n\n$$u_j(u_j - 1) / 2 + u_k(u_k - 1) / 2 < (u_j - 1)(u_j - 2) / 2 + (u_k + 1)u_k / 2.$$\n\n\nWe have the following sequence of equivalent inequalities:\n\n\n\\begin{align}\n                                u_j & < u_k + 1 \\\\\n                               2u_j & < 2u_k + 2 \\\\\n                               -u_k & < u_k - 2u_j + 2 \\\\\n          u_j^2 - u_j + u_k^2 - u_k & < u_j^2 - 3u_j + 2 + u_k^2 + u_k \\\\\n        u_j(u_j - 1) + u_k(u_k - 1) & < (u_j - 1)(u_j - 2) + (u_k + 1)u_k \\\\\nu_j(u_j - 1) / 2 + u_k(u_k - 1) / 2 & < (u_j - 1)(u_j - 2) / 2 + (u_k + 1)u_k / 2.\n\\end{align}\n\n\nThus, each move increases the number of collisions. We conclude that the number of collisions is minimized when $u_j = u / b$ for each $j \\in B$.\n\n\nBy the above lemma, for any hash function, the total number of collisions must  be at least $b(u / b)(u / b - 1) / 2$. The number of pairs of distinct elements is $\\binom{u}{2} = u(u - 1) / 2$. Thus, the number of collisions per pair of distinct elements must be at least\n\n\n\\begin{align}\n\\frac{b(u / b)(u / b - 1) / 2}{u(u - 1) / 2}\n    & = \\frac{u / b - 1}{u - 1} \\\\\n    & > \\frac{u / b - 1}{u} \\\\\n    & = \\frac{1}{b} - \\frac{1}{u}.\n\\end{align}\n\n\nThus, the bound  on the probability of a collision for any pair of distinct elements can be no less than $1 / b - 1 / u = 1 / |B| - 1 / |U|$.\n\n\n11.3-6 $\\star$\n\n\n\n\nLet $U$ be the set of $n$-tuples of values drawn from $\\mathbb Z_p$, and let $B = \\mathbb Z_p$, where $p$ is prime. Define the hash function $h_b: U \\rightarrow B$ for $b \\in \\mathbb Z_p$ on an input $n$-tuple $\\langle a_0, a_1, \\ldots, a_{n - 1} \\rangle$ from $U$ as\n\n\n$$h_b(\\langle a_0, a_1, \\ldots, a_{n - 1} \\rangle) = (\\sum_{j = 0}^{n - 1} a_jb^j) \\mod p,$$\n\n\nand let $\\mathcal{H} = \\{h_b : b \\in \\mathbb Z_p\\}$. Argue that $\\mathcal H$ is $((n - 1) / p)$-universal according to the definition of $\\epsilon$-universal in Exercise 11.3-5. ($\\textit{Hint:}$ See Exercise 31.4-4.)\n\n\n\n\nFix $b \\in \\mathbb Z_p$. By exercise 31.4-4, $h_b(x)$ collides with $h_b(y)$ for at most $n - 1$ other $y \\in U$. Since there are a total of $p$ possible values that $h_b$ takes on, the\nprobability that $h_b(x) = h_b(y)$ is bounded from above by $\\frac{n - 1}{p}$, since this holds for any value of $b$, $\\mathcal H$ is $((n - 1 ) /p)$-universal.",
            "title": "11.3 Hash functions"
        },
        {
            "location": "/Chap11/11.3/#113-1",
            "text": "Suppose we wish to search a linked list of length $n$, where each element contains a key $k$ along with a hash value $h(k)$. Each key is a long character string. How might we take advantage of the hash values when searching the list for an element with a given key?   If every element also contained a hash of the long character string, when we are searching for the desired element, we'll first check if the hashvalue of the node in the linked list, and move on if it disagrees. This can increase the runtime by a factor proportional to the length of the long character strings.",
            "title": "11.3-1"
        },
        {
            "location": "/Chap11/11.3/#113-2",
            "text": "Suppose that we hash a string of $r$ characters into $m$ slots by treating it as a radix-128 number and then using the division method. We can easily represent the number $m$ as a 32-bit computer word, but the string of $r$ characters, treated as a radix-128 number, takes many words. How can we apply the division method to compute the hash value of the character string without using more than a constant number of words of storage outside the string itself?        sum   =   0 \n     for   i   =   1   to   r \n         sum   =   ( sum   *   128   +   s [ i ])   %   m   Use  sum  as the key.",
            "title": "11.3-2"
        },
        {
            "location": "/Chap11/11.3/#113-3",
            "text": "Consider a version of the division method in which $h(k) = k \\mod m$, where $m = 2^p - 1$ and $k$ is a character string interpreted in radix $2^p$. Show that if we can derive string $x$ from string $y$ by permuting its characters, then $x$ and $y$ hash to the same value. Give an example of an application in which this property would be undesirable in a hash function.   First, we observe that we can generate any permutation by a sequence of interchanges of pairs of characters. One can prove this property formally, but informally, consider that both heapsort and quicksort work by interchanging pairs of elements and that they have to be able to produce any permutation of their input array. Thus, it suffices to show that if string $x$ can be derived from string $y$ by interchanging a single pair of characters, then $x$ and $y$ hash to the same value.  Let us denote the $i$th character in $x$ by $x_i$, and similarly for $y$. The interpretation of $x$ in radix $2^p$ is $\\sum_{i = 0}^{n - 1} x_i 2^{ip}$, and so $h(x) = (\\sum_{i = 0}^{n - 1} x_i 2^{ip}) \\mod (2^p - 1)$. Similarly, $h(y) = (\\sum_{i = 0}^{n - 1} y_i 2^{ip}) \\mod (2^p - 1)$.  Suppose that $x$ and $y$ are identical strings of $n$ characters except that the characters in positions $a$ and $b$ are interchanged: $x_a = y_b$ and $y_a = x_b$. Without loss of generality, let $a > b$. We have  $$h(x) - h(y) = \\Big(\\sum_{i = 0}^{n - 1} x_i 2^{ip}\\Big) \\mod (2^p - 1) - \\Big(\\sum_{i = 0}^{n - 1} y_i 2^{ip}\\Big) \\mod (2^p - 1).$$  Since $0 \\le h(x)$, $h(y) < 2^p - 1$, we have that $-(2^p - 1) < h(x) - h(y) < 2^p - 1$. If we show that $(h(x) - h(y)) \\mod (2^p - 1) = 0$, then $h(x) = h(y)$.  Since the sums in the hash functions are the same except for indices $a$ and $b$, we have  \\begin{align}\n(h(x) - h(y)) \\mod (2^p - 1)\n    & = ((x_a 2^{ap} + x_b 2^{bp}) - (y_a 2^{ap} + y_b 2^{bp})) \\mod (2^p - 1) \\\\\n    & = ((x_a 2^{ap} + x_b 2^{bp}) - (x_b 2^{ap} + x_a 2^{bp})) \\mod (2^p - 1) \\\\\n    & = ((x_a - x_b)2^{ap} - (x_a - x_b) 2^{bp}) \\mod (2^p - 1) \\\\\n    & = ((x_a - x_b)(2^{ap} - 2^{bp})) \\mod (2^p - 1) \\\\\n    & = ((x_a - x_b)2^{bp}(2^{(a - b)p} - 1)) \\mod (2^p - 1).\n\\end{align}  By equation $\\text{(A.5)}$,  $$\\sum_{i = 0}^{a - b - 1} 2^{pi} = \\frac{2^{(a - b)p} - 1}{2^p - 1},$$  and multiplying both sides by $s^p - 1$, we get $2^{(a - b)p} - 1 = \\big(\\sum_{i = 0}^{a - b - 1} 2^{pi}\\big)(2^p - 1)$. Thus,  \\begin{align}\n(h(x) - h(y))\\mod(2^p - 1)\n    & = \\Bigg((x_a - x_b)2^{bp}\\Bigg(\\sum_{i = 0}^{a - b - 1} 2^{pi}\\Bigg)(2^p - 1)\\Bigg) \\mod (2^p - 1) \\\\\n    & = 0,\n\\end{align}  since one of the factors is $2^p - 1$.  We have shown that $(h(x) - h(y)) \\mod (2^p - 1) = 0$, and so $h(x) = h(y)$.",
            "title": "11.3-3"
        },
        {
            "location": "/Chap11/11.3/#113-4",
            "text": "Consider a hash table of size $m = 1000$ and a corresponding hash function $h(k) = \\lfloor m (kA \\mod 1) \\rfloor$ for $A = (\\sqrt 5 - 1) / 2$. Compute the locations to which the keys $61$, $62$, $63$, $64$, and $65$ are mapped.    $h(61) = \\lfloor 1000(61 \\cdot \\frac{\\sqrt 5 - 1}{2} \\mod 1) \\rfloor = 700$.  $h(62) = \\lfloor 1000(62 \\cdot \\frac{\\sqrt 5 - 1}{2} \\mod 1) \\rfloor = 318$.  $h(63) = \\lfloor 1000(63 \\cdot \\frac{\\sqrt 5 - 1}{2} \\mod 1) \\rfloor = 936$.  $h(64) = \\lfloor 1000(64 \\cdot \\frac{\\sqrt 5 - 1}{2} \\mod 1) \\rfloor = 554$.  $h(65) = \\lfloor 1000(65 \\cdot \\frac{\\sqrt 5 - 1}{2} \\mod 1) \\rfloor = 172$.",
            "title": "11.3-4"
        },
        {
            "location": "/Chap11/11.3/#113-5-star",
            "text": "Define a family $\\mathcal H$ of hash functions from a finite set $U$ to a finite set $B$ to be  $\\epsilon$-universal  if for all pairs of distinct elements $k$ and $l$ in $U$,  $$\\Pr\\{h(k) = h(l)\\} \\le \\epsilon,$$  where the probability is over the choice of the hash function $h$ drawn at random from the family $\\mathcal H$. Show that an $\\epsilon$-universal family of hash functions must have  $$\\epsilon \\ge \\frac{1}{|B|} - \\frac{1}{|U|}.$$   Let $b = |B|$ and $u = |U|$. We start by showing that the total number of collisions is minimized by a hash function that maps $u / b$ elements of $U$ to each of the $b$ values in $B$. For a given hash function, let $u_j$ be the number of elements that map to $j \\in B$. We have $u = \\sum_{j \\in B} u_j$. We also have that the number of collisions for a given value of $j \\in B$ is $\\binom{u_j}{2} = u_j(u_j - 1) / 2$.  Lemma  The total number of collisions is minimized when $u_j = u / b$ for each $j \\in B$.  Proof    If $u_j \\le u / b$, let us call $j$  underloaded , and if $u_j \\ge u / b$, let us call $j$  overloaded . Consider an unbalanced situation in which $u_j \\ne u / b$ for at least one value $j \\in B$. We can think of converting a balanced situation in which all $u_j$ equal $u / b$ into the unbalanced situation by repeatedly moving an element that maps to an underloaded value to map instead to an overloaded value. (If you think of the values of $B$ as representing buckets, we are repeatedly moving elements from buckets containing at most $u / b$ elements to buckets containing at least $u / b$ elements.)  We now show that each such move increases the number of collisions, so that all the moves together must increase the number of collisions. Suppose that we move an element from an underloaded value $j$ to an overloaded value $k$, and we leave all other elements alone. Because $j$ is underloaded and $k$ is overloaded, $u_j \\le u / b\\le u_k$. Considering just the collisions for values $j$ and $k$, we have $u_j(u_j - 1) / 2 + u_k(u_k - 1) / 2$ collisions before the move and $(u_j - 1)(u_j - 2) / 2 + (u_k + 1)u_k / 2$ collisions afterward. We wish to show that  $$u_j(u_j - 1) / 2 + u_k(u_k - 1) / 2 < (u_j - 1)(u_j - 2) / 2 + (u_k + 1)u_k / 2.$$  We have the following sequence of equivalent inequalities:  \\begin{align}\n                                u_j & < u_k + 1 \\\\\n                               2u_j & < 2u_k + 2 \\\\\n                               -u_k & < u_k - 2u_j + 2 \\\\\n          u_j^2 - u_j + u_k^2 - u_k & < u_j^2 - 3u_j + 2 + u_k^2 + u_k \\\\\n        u_j(u_j - 1) + u_k(u_k - 1) & < (u_j - 1)(u_j - 2) + (u_k + 1)u_k \\\\\nu_j(u_j - 1) / 2 + u_k(u_k - 1) / 2 & < (u_j - 1)(u_j - 2) / 2 + (u_k + 1)u_k / 2.\n\\end{align}  Thus, each move increases the number of collisions. We conclude that the number of collisions is minimized when $u_j = u / b$ for each $j \\in B$.  By the above lemma, for any hash function, the total number of collisions must  be at least $b(u / b)(u / b - 1) / 2$. The number of pairs of distinct elements is $\\binom{u}{2} = u(u - 1) / 2$. Thus, the number of collisions per pair of distinct elements must be at least  \\begin{align}\n\\frac{b(u / b)(u / b - 1) / 2}{u(u - 1) / 2}\n    & = \\frac{u / b - 1}{u - 1} \\\\\n    & > \\frac{u / b - 1}{u} \\\\\n    & = \\frac{1}{b} - \\frac{1}{u}.\n\\end{align}  Thus, the bound  on the probability of a collision for any pair of distinct elements can be no less than $1 / b - 1 / u = 1 / |B| - 1 / |U|$.",
            "title": "11.3-5 $\\star$"
        },
        {
            "location": "/Chap11/11.3/#113-6-star",
            "text": "Let $U$ be the set of $n$-tuples of values drawn from $\\mathbb Z_p$, and let $B = \\mathbb Z_p$, where $p$ is prime. Define the hash function $h_b: U \\rightarrow B$ for $b \\in \\mathbb Z_p$ on an input $n$-tuple $\\langle a_0, a_1, \\ldots, a_{n - 1} \\rangle$ from $U$ as  $$h_b(\\langle a_0, a_1, \\ldots, a_{n - 1} \\rangle) = (\\sum_{j = 0}^{n - 1} a_jb^j) \\mod p,$$  and let $\\mathcal{H} = \\{h_b : b \\in \\mathbb Z_p\\}$. Argue that $\\mathcal H$ is $((n - 1) / p)$-universal according to the definition of $\\epsilon$-universal in Exercise 11.3-5. ($\\textit{Hint:}$ See Exercise 31.4-4.)   Fix $b \\in \\mathbb Z_p$. By exercise 31.4-4, $h_b(x)$ collides with $h_b(y)$ for at most $n - 1$ other $y \\in U$. Since there are a total of $p$ possible values that $h_b$ takes on, the\nprobability that $h_b(x) = h_b(y)$ is bounded from above by $\\frac{n - 1}{p}$, since this holds for any value of $b$, $\\mathcal H$ is $((n - 1 ) /p)$-universal.",
            "title": "11.3-6 $\\star$"
        },
        {
            "location": "/Chap11/11.4/",
            "text": "11.4-1\n\n\n\n\nConsider inserting the keys $10, 22, 31, 4, 15, 28, 17, 88, 59$ into a hash table of length $m = 11$ using open addressing with the auxiliary hash function $h'(k) = k$. Illustrate the result of inserting these keys using linear probing, using quadratic probing with $c_1 = 1$ and $c_2 = 3$, and using double hashing with $h_1(k) = k$ and $h_2(k) = 1 + (k \\mod (m - 1))$.\n\n\n\n\n\n\n\n\nLinear probing:\n\n\n\\begin{array}{r|ccccccccc}\n\\mod 0 &    & 22 & 22 & 22 & 22 & 22 & 22 & 22 & 22 \\\\\n\\mod 1 &    &    &    &    &    &    &    & 88 & 88 \\\\\n\\mod 2 &    &    &    &    &    &    &    &    &    \\\\\n\\mod 3 &    &    &    &    &    &    &    &    &    \\\\\n\\mod 4 &    &    &    &  4 &  4 &  4 &  4 &  4 &  4 \\\\\n\\mod 5 &    &    &    &    & 15 & 15 & 15 & 15 & 15 \\\\\n\\mod 6 &    &    &    &    &    & 28 & 28 & 28 & 28 \\\\\n\\mod 7 &    &    &    &    &    &    & 17 & 17 & 17 \\\\\n\\mod 8 &    &    &    &    &    &    &    &    & 59 \\\\\n\\mod 9 &    &    & 31 & 31 & 31 & 31 & 31 & 31 & 31 \\\\\n\\mod10 & 10 & 10 & 10 & 10 & 10 & 10 & 10 & 10 & 10 \n\\end{array}\n\n\n\n\n\n\nQuadradic probing, it will look identical until there is a collision on inserting the fifth element: \n\n\n\\begin{array}{r|ccccccccc}\n\\mod 0 &    & 22 & 22 & 22 & 22 & 22 & 22 & 22 & 22 \\\\\n\\mod 1 &    &    &    &    &    &    &    &    &    \\\\\n\\mod 2 &    &    &    &    &    &    &    & 88 & 88 \\\\\n\\mod 3 &    &    &    &    &    &    & 17 & 17 & 17 \\\\\n\\mod 4 &    &    &    &  4 &  4 &  4 &  4 &  4 &  4 \\\\\n\\mod 5 &    &    &    &    &    &    &    &    &    \\\\\n\\mod 6 &    &    &    &    &    & 28 & 28 & 28 & 28 \\\\\n\\mod 7 &    &    &    &    &    &    &    &    & 59 \\\\\n\\mod 8 &    &    &    &    & 15 & 15 & 15 & 15 & 15 \\\\\n\\mod 9 &    &    & 31 & 31 & 31 & 31 & 31 & 31 & 31 \\\\\n\\mod10 & 10 & 10 & 10 & 10 & 10 & 10 & 10 & 10 & 10  \n\n\n\n\n\n\nNote that there is no way to insert the element $59$ now, because the offsets coming from $c_1 = 1$ and $c_2 = 3$ can only be even, and an odd offset would be required to insert $59$ because $59 \\mod 11 = 4$ and all the empty positions are at odd indices.\n\n\n\n\n\n\nDouble hashing:\n\n\n\\begin{array}{r|ccccccccc}\n\\mod 0 &    & 22 & 22 & 22 & 22 & 22 & 22 & 22 & 22 \\\\\n\\mod 1 &    &    &    &    &    &    &    &    &    \\\\\n\\mod 2 &    &    &    &    &    &    &    &    & 59 \\\\\n\\mod 3 &    &    &    &    &    &    & 17 & 17 & 17 \\\\\n\\mod 4 &    &    &    &  4 &  4 &  4 &  4 &  4 &  4 \\\\\n\\mod 5 &    &    &    &    & 15 & 15 & 15 & 15 & 15 \\\\\n\\mod 6 &    &    &    &    &    & 28 & 28 & 28 & 28 \\\\\n\\mod 7 &    &    &    &    &    &    &    & 88 & 88 \\\\\n\\mod 8 &    &    &    &    &    &    &    &    &    \\\\\n\\mod 9 &    &    & 31 & 31 & 31 & 31 & 31 & 31 & 31 \\\\\n\\mod10 & 10 & 10 & 10 & 10 & 10 & 10 & 10 & 10 & 10 \n\\end{array}\n\n\n\n\n\n\n11.4-2\n\n\n\n\nWrite pseudocode for $\\text{HASH-DELETE}$ as outlined in the text, and modify $\\text{HASH-INSERT}$ to handle the special value $\\text{DELETED}$.\n\n\n\n\nHASH\n-\nDELETE\n(\nT\n,\n \nk\n)\n\n    \ni\n \n=\n \n0\n\n    \nrepeat\n\n        \nj\n \n=\n \nh\n(\nk\n,\n \ni\n)\n\n        \nif\n \nT\n[\nj\n]\n \n==\n \nk\n\n            \nT\n[\nj\n]\n \n=\n \nNIL\n\n            \nreturn\n \nj\n\n        \nelse\n \ni\n \n=\n \ni\n \n+\n \n1\n\n    \nuntil\n \nT\n[\nj\n]\n \n==\n \nNIL\n \nor\n \ni\n \n==\n \nm\n\n    \nerror\n \n\"element not exist\"\n\n\n\n\n\nBy implementing $\\text{HASH-DELETE}$ in this way, the $\\text{HASH-INSERT}$ need to be modified to treat $\\text{NIL}$ slots as empty ones.\n\n\nHASH\n-\nINSERT\n(\nT\n,\n \nk\n)\n\n    \ni\n \n=\n \n0\n\n    \nrepeat\n\n        \nj\n \n=\n \nh\n(\nk\n,\n \ni\n)\n\n        \nif\n \nT\n[\nj\n]\n \n==\n \nNIL\n \nor\n \nT\n[\nj\n]\n \n==\n \nDELETE\n\n            \nT\n[\nj\n]\n \n=\n \nk\n\n            \nreturn\n \nj\n\n        \nelse\n \nj\n\n    \nuntil\n \ni\n \n==\n \nm\n\n    \nerror\n \n\"hash table overflow\"\n\n\n\n\n\n11.4-3\n\n\n\n\nConsider an open-address hash table with uniform hashing. Give upper bounds on the expected number of probes in an unsuccessful search and on the expected number of probes in a successful search when the load factor is $3 / 4$ and when it is $7 / 8$.\n\n\n\n\n\n\n$\\alpha = 3 / 4$,\n\n\nunsuccessful: $\\frac{1}{1 - \\frac{3}{4}} = 4$ probes,\n\n\nsuccessful: $\\frac{1}{\\frac{3}{4}} \\ln\\frac{1}{1-\\frac{3}{4}} \\approx 1.848$ probes.\n\n\n\n\n\n\n$\\alpha = 7 / 8$,\n\n\nunsuccessful: $\\frac{1}{1 - \\frac{7}{8}} = 8$ probes,\n\n\nsuccessful: $\\frac{1}{\\frac{7}{8}} \\ln\\frac{1}{1 - \\frac{7}{8}} \\approx 2.377$ probes.\n\n\n\n\n\n\n\n\n11.4-4 $\\star$\n\n\n\n\nSuppose that we use double hashing to resolve collisions\u2014that is, we use the hash function $h(k, i) = (h_1(k) + ih_2(k) \\mod m$. Show that if $m$ and $h_2(k)$ have greatest common divisor $d \\ge 1$ for some key $k$, then an unsuccessful search for key $k$ examines $(1/d)$th of the hash table before returning to slot $h_1(k)$. Thus, when $d = 1$, so that $m$ and $h_2(k)$ are relatively prime, the search may examine the entire hash table. ($\\textit{Hint:}$ See Chapter 31.)\n\n\n\n\nSuppose $d = \\gcd(m, h_2(k))$, the $\\text{LCM}$ $l = m \\cdot h_2(k) / d$.\n\n\nSince $d | h_2(k)$, then $m \\cdot h_2(k) / d \\mod m = 0 \\cdot (h_2(k) / d \\mod m) = 0$, therefore $(l + ih_2(k)) \\mod m = ih_2(k) \\mod m$, which means $ih_2(k) \\mod m$ has a period of $m / d$.\n\n\n11.4-5 $\\star$\n\n\n\n\nConsider an open-address hash table with a load factor $\\alpha$. Find the nonzero value $\\alpha$ for which the expected number of probes in an unsuccessful search equals twice the expected number of probes in a successful search. Use the upper bounds given by Theorems 11.6 and 11.8 for these expected numbers of probes.\n\n\n\n\n\\begin{align}\n\\frac{1}{1 - \\alpha} & = 2 \\cdot \\frac{1}{\\alpha} \\ln\\frac{1}{1 - \\alpha} \\\\\n              \\alpha & = 0.71533.\n\\end{align}",
            "title": "11.4 Open addressing"
        },
        {
            "location": "/Chap11/11.4/#114-1",
            "text": "Consider inserting the keys $10, 22, 31, 4, 15, 28, 17, 88, 59$ into a hash table of length $m = 11$ using open addressing with the auxiliary hash function $h'(k) = k$. Illustrate the result of inserting these keys using linear probing, using quadratic probing with $c_1 = 1$ and $c_2 = 3$, and using double hashing with $h_1(k) = k$ and $h_2(k) = 1 + (k \\mod (m - 1))$.     Linear probing:  \\begin{array}{r|ccccccccc}\n\\mod 0 &    & 22 & 22 & 22 & 22 & 22 & 22 & 22 & 22 \\\\\n\\mod 1 &    &    &    &    &    &    &    & 88 & 88 \\\\\n\\mod 2 &    &    &    &    &    &    &    &    &    \\\\\n\\mod 3 &    &    &    &    &    &    &    &    &    \\\\\n\\mod 4 &    &    &    &  4 &  4 &  4 &  4 &  4 &  4 \\\\\n\\mod 5 &    &    &    &    & 15 & 15 & 15 & 15 & 15 \\\\\n\\mod 6 &    &    &    &    &    & 28 & 28 & 28 & 28 \\\\\n\\mod 7 &    &    &    &    &    &    & 17 & 17 & 17 \\\\\n\\mod 8 &    &    &    &    &    &    &    &    & 59 \\\\\n\\mod 9 &    &    & 31 & 31 & 31 & 31 & 31 & 31 & 31 \\\\\n\\mod10 & 10 & 10 & 10 & 10 & 10 & 10 & 10 & 10 & 10 \n\\end{array}    Quadradic probing, it will look identical until there is a collision on inserting the fifth element:   \\begin{array}{r|ccccccccc}\n\\mod 0 &    & 22 & 22 & 22 & 22 & 22 & 22 & 22 & 22 \\\\\n\\mod 1 &    &    &    &    &    &    &    &    &    \\\\\n\\mod 2 &    &    &    &    &    &    &    & 88 & 88 \\\\\n\\mod 3 &    &    &    &    &    &    & 17 & 17 & 17 \\\\\n\\mod 4 &    &    &    &  4 &  4 &  4 &  4 &  4 &  4 \\\\\n\\mod 5 &    &    &    &    &    &    &    &    &    \\\\\n\\mod 6 &    &    &    &    &    & 28 & 28 & 28 & 28 \\\\\n\\mod 7 &    &    &    &    &    &    &    &    & 59 \\\\\n\\mod 8 &    &    &    &    & 15 & 15 & 15 & 15 & 15 \\\\\n\\mod 9 &    &    & 31 & 31 & 31 & 31 & 31 & 31 & 31 \\\\\n\\mod10 & 10 & 10 & 10 & 10 & 10 & 10 & 10 & 10 & 10      Note that there is no way to insert the element $59$ now, because the offsets coming from $c_1 = 1$ and $c_2 = 3$ can only be even, and an odd offset would be required to insert $59$ because $59 \\mod 11 = 4$ and all the empty positions are at odd indices.    Double hashing:  \\begin{array}{r|ccccccccc}\n\\mod 0 &    & 22 & 22 & 22 & 22 & 22 & 22 & 22 & 22 \\\\\n\\mod 1 &    &    &    &    &    &    &    &    &    \\\\\n\\mod 2 &    &    &    &    &    &    &    &    & 59 \\\\\n\\mod 3 &    &    &    &    &    &    & 17 & 17 & 17 \\\\\n\\mod 4 &    &    &    &  4 &  4 &  4 &  4 &  4 &  4 \\\\\n\\mod 5 &    &    &    &    & 15 & 15 & 15 & 15 & 15 \\\\\n\\mod 6 &    &    &    &    &    & 28 & 28 & 28 & 28 \\\\\n\\mod 7 &    &    &    &    &    &    &    & 88 & 88 \\\\\n\\mod 8 &    &    &    &    &    &    &    &    &    \\\\\n\\mod 9 &    &    & 31 & 31 & 31 & 31 & 31 & 31 & 31 \\\\\n\\mod10 & 10 & 10 & 10 & 10 & 10 & 10 & 10 & 10 & 10 \n\\end{array}",
            "title": "11.4-1"
        },
        {
            "location": "/Chap11/11.4/#114-2",
            "text": "Write pseudocode for $\\text{HASH-DELETE}$ as outlined in the text, and modify $\\text{HASH-INSERT}$ to handle the special value $\\text{DELETED}$.   HASH - DELETE ( T ,   k ) \n     i   =   0 \n     repeat \n         j   =   h ( k ,   i ) \n         if   T [ j ]   ==   k \n             T [ j ]   =   NIL \n             return   j \n         else   i   =   i   +   1 \n     until   T [ j ]   ==   NIL   or   i   ==   m \n     error   \"element not exist\"   By implementing $\\text{HASH-DELETE}$ in this way, the $\\text{HASH-INSERT}$ need to be modified to treat $\\text{NIL}$ slots as empty ones.  HASH - INSERT ( T ,   k ) \n     i   =   0 \n     repeat \n         j   =   h ( k ,   i ) \n         if   T [ j ]   ==   NIL   or   T [ j ]   ==   DELETE \n             T [ j ]   =   k \n             return   j \n         else   j \n     until   i   ==   m \n     error   \"hash table overflow\"",
            "title": "11.4-2"
        },
        {
            "location": "/Chap11/11.4/#114-3",
            "text": "Consider an open-address hash table with uniform hashing. Give upper bounds on the expected number of probes in an unsuccessful search and on the expected number of probes in a successful search when the load factor is $3 / 4$ and when it is $7 / 8$.    $\\alpha = 3 / 4$,  unsuccessful: $\\frac{1}{1 - \\frac{3}{4}} = 4$ probes,  successful: $\\frac{1}{\\frac{3}{4}} \\ln\\frac{1}{1-\\frac{3}{4}} \\approx 1.848$ probes.    $\\alpha = 7 / 8$,  unsuccessful: $\\frac{1}{1 - \\frac{7}{8}} = 8$ probes,  successful: $\\frac{1}{\\frac{7}{8}} \\ln\\frac{1}{1 - \\frac{7}{8}} \\approx 2.377$ probes.",
            "title": "11.4-3"
        },
        {
            "location": "/Chap11/11.4/#114-4-star",
            "text": "Suppose that we use double hashing to resolve collisions\u2014that is, we use the hash function $h(k, i) = (h_1(k) + ih_2(k) \\mod m$. Show that if $m$ and $h_2(k)$ have greatest common divisor $d \\ge 1$ for some key $k$, then an unsuccessful search for key $k$ examines $(1/d)$th of the hash table before returning to slot $h_1(k)$. Thus, when $d = 1$, so that $m$ and $h_2(k)$ are relatively prime, the search may examine the entire hash table. ($\\textit{Hint:}$ See Chapter 31.)   Suppose $d = \\gcd(m, h_2(k))$, the $\\text{LCM}$ $l = m \\cdot h_2(k) / d$.  Since $d | h_2(k)$, then $m \\cdot h_2(k) / d \\mod m = 0 \\cdot (h_2(k) / d \\mod m) = 0$, therefore $(l + ih_2(k)) \\mod m = ih_2(k) \\mod m$, which means $ih_2(k) \\mod m$ has a period of $m / d$.",
            "title": "11.4-4 $\\star$"
        },
        {
            "location": "/Chap11/11.4/#114-5-star",
            "text": "Consider an open-address hash table with a load factor $\\alpha$. Find the nonzero value $\\alpha$ for which the expected number of probes in an unsuccessful search equals twice the expected number of probes in a successful search. Use the upper bounds given by Theorems 11.6 and 11.8 for these expected numbers of probes.   \\begin{align}\n\\frac{1}{1 - \\alpha} & = 2 \\cdot \\frac{1}{\\alpha} \\ln\\frac{1}{1 - \\alpha} \\\\\n              \\alpha & = 0.71533.\n\\end{align}",
            "title": "11.4-5 $\\star$"
        },
        {
            "location": "/Chap11/11.5/",
            "text": "11.5-1 $\\star$\n\n\n\n\nSuppose that we insert $n$ keys into a hash table of size $m$ using open addressing and uniform hashing. Let $p(n, m)$ be the probability that no collisions occur. Show that $p(n, m) \\le e^{-n(n - 1) / 2m}$. ($\\textit{Hint:}$ See equation $\\text{(3.12)}$.) Argue that when $n$ exceeds $m$, the probability of avoiding collisions goes rapidly to zero.\n\n\n\n\n\\begin{align}\np(n, m) & = \\frac{m}{m} \\cdot \\frac{m - 1}{m} \\cdots \\frac{m - n + 1}{m} \\\\\n        & = \\frac{m \\cdot (m - 1) \\cdots (m - n + 1)}{m^n}\n\\end{align}\n\\begin{align}\n(m - i) \\cdot (m - n + i)\n    & =    (m - \\frac{n}{2} + \\frac{n}{2} - i) \\cdot (m - \\frac{n}{2} - \\frac{n}{2} + i) \\\\\n    & =    (m - \\frac{n}{2})^2 - (i - \\frac{n}{2})^2 \\\\\n    & \\le  (m - \\frac{n}{2})^2\n\\end{align}\n\\begin{align}\np(n, m) & \\le \\frac{m \\cdot (m - \\frac{n}{2})^{n - 1}}{m^n} \\\\\n        & =   (1 - \\frac{n}{2m}) ^ {n - 1}. \\\\\n\\end{align}\n\n\nBased on equation $\\text{(3.12)}$, $e^x \\ge 1 + x$,\n\n\n\\begin{align}\np(n, m) & \\le (e^{-n / 2m})^{n - 1} \\\\\n        & =   e^{-n(n - 1) / 2m}.\n\\end{align}",
            "title": "11.5 Perfect hashing"
        },
        {
            "location": "/Chap11/11.5/#115-1-star",
            "text": "Suppose that we insert $n$ keys into a hash table of size $m$ using open addressing and uniform hashing. Let $p(n, m)$ be the probability that no collisions occur. Show that $p(n, m) \\le e^{-n(n - 1) / 2m}$. ($\\textit{Hint:}$ See equation $\\text{(3.12)}$.) Argue that when $n$ exceeds $m$, the probability of avoiding collisions goes rapidly to zero.   \\begin{align}\np(n, m) & = \\frac{m}{m} \\cdot \\frac{m - 1}{m} \\cdots \\frac{m - n + 1}{m} \\\\\n        & = \\frac{m \\cdot (m - 1) \\cdots (m - n + 1)}{m^n}\n\\end{align}\n\\begin{align}\n(m - i) \\cdot (m - n + i)\n    & =    (m - \\frac{n}{2} + \\frac{n}{2} - i) \\cdot (m - \\frac{n}{2} - \\frac{n}{2} + i) \\\\\n    & =    (m - \\frac{n}{2})^2 - (i - \\frac{n}{2})^2 \\\\\n    & \\le  (m - \\frac{n}{2})^2\n\\end{align}\n\\begin{align}\np(n, m) & \\le \\frac{m \\cdot (m - \\frac{n}{2})^{n - 1}}{m^n} \\\\\n        & =   (1 - \\frac{n}{2m}) ^ {n - 1}. \\\\\n\\end{align}  Based on equation $\\text{(3.12)}$, $e^x \\ge 1 + x$,  \\begin{align}\np(n, m) & \\le (e^{-n / 2m})^{n - 1} \\\\\n        & =   e^{-n(n - 1) / 2m}.\n\\end{align}",
            "title": "11.5-1 $\\star$"
        },
        {
            "location": "/Chap11/Problems/11-1/",
            "text": "Suppose that we use an open-addressed hash table of size $m$ to store $n \\le m / 2$ items.\n\n\na.\n Assuming uniform hashing, show that for $i = 1, 2, \\ldots, n$, the probability is at most $2^{-k}$ that the $i$th insertion requires strictly more than $k$ probes.\n\n\nb.\n Show that for $i = 1, 2, \\ldots, n$, the probability is $O(1 / n^2)$ that the $i$th insertion requires more than $2\\lg n$ probes.\n\n\nLet the random variable $X_i$ denote the number of probes required by the $i$th insertion. You have shown in part (b) that $\\Pr\\{X_i > 2\\lg n\\} = O(1 / n^2)$. Let the random variable $X = \\max_{1 \\le i \\le n} X_i$ denote the maximum number of probes required by any of the $n$ insertions.\n\n\nc.\n Show that $\\Pr\\{X > 2\\lg n\\} = O(1 / n)$.\n\n\nd.\n Show that the expected length $\\text E[X]$ of the longest probe sequence is $O(\\lg n)$.\n\n\n\n\na.\n Since we assume uniform hashing, we can use the same observation as is used in Corollary 11.7: that inserting a key entails an unsuccessful search followed by placing the key into the first empty slot found. As in the proof of Theorem 11.6, if we let $X$ be the random variable denoting the number of probes in an unsuccessful search, then $\\Pr\\{X \\ge i\\} \\le \\alpha^{i - 1}$. Since $n \\le m / 2$, we have $\\alpha \\le 1 / 2$. Letting $i = k + 1$, we have $\\Pr\\{X > k\\} = \\Pr\\{X \\ge k + 1\\} \\le (1 / 2)^{(k + 1) - 1} = 2^{-k}$.\n\n\nb.\n Substituting $k = 2\\lg n$ into the statement of part (a) yields that the probability that the $i$th insertion requires more than $k = 2\\lg n$ probes is at most $2^{-2\\lg n} = (2^{\\lg n})^{-2} = n^{-2} = 1 / n^2$.\n\n\nWe must deal with the possibility that $2\\lg n$ is not an integer, however. Then the event that the $i$th insertion requires more than $2\\lg n$ probes is the same as the event that the $i$th insertion requires more than $\\lfloor 2\\lg n \\rfloor$ probes. Since $\\lfloor 2\\lg n \\rfloor > 2\\lg n - 1$, we have that the probability of this event is at most $2^{-\\lfloor 2\\lg n \\rfloor} < 2^{-(2\\lg n - 1)} = 2 / n^2 = O(1 / n^2)$.\n\n\nc.\n Let the event $A$ be $X > 2\\lg n$, and for $i = 1, 2, \\ldots, n$, let the event $A_i$ be $X_i > 2\\lg n$. In part (b), we showed that $\\Pr\\{A_i\\} = O(1 / n^2)$ for $i = 1, 2, \\ldots, n$. From how we defined these events, $A = A_1 \\cup A_2 \\cup \\cdots \\cup A_n$. Using Boole's inequality, $\\text{(C.19)}$, we have\n\n\n\\begin{align}\n\\Pr\\{A\\} & \\le \\Pr\\{A_1\\} + \\Pr\\{A_1\\} + \\cdots + \\Pr\\{A_n\\} \\\\\n         & \\le n \\cdot O(1 / n^2) \\\\\n         & =   O(1 / n).\n\\end{align}\n\n\nd.\n We use the definition of expectation and break the sum into two parts:\n\n\n\\begin{align}\n\\text E[X] & =   \\sum_{k = 1}^n k \\cdot \\Pr\\{X = k\\} \\\\\n           & =   \\sum_{k = 1}^{\\lceil 2\\lg n \\rceil} k \\cdot \\Pr\\{X = k\\} + \\sum_{\\lceil 2\\lg n \\rceil + 1}^n k \\cdot \\Pr\\{X = k\\} \\\\\n           & \\le \\sum_{k = 1}^{\\lceil 2\\lg n \\rceil} \\lceil 2\\lg n \\rceil \\cdot \\Pr\\{X = k\\} + \\sum_{\\lceil 2\\lg n \\rceil + 1}^n n \\cdot \\Pr\\{X = k\\} \\\\\n           & =   \\lceil 2\\lg n \\rceil \\sum_{k = 1}^{\\lceil 2\\lg n \\rceil} \\Pr\\{X = k\\} + n \\sum_{\\lceil 2\\lg n \\rceil + 1}^n \\Pr\\{X = k\\}.\n\\end{align}\n\n\nSince $X$ takes on exactly one value, we have that $\\sum_{k = 1}^{\\lceil 2\\lg n \\rceil} \\Pr\\{X = k\\} = \\Pr\\{X \\le \\lceil 2\\lg n \\rceil\\} \\le 1$ and $\\sum_{k = \\lceil 2\\lg n \\rceil + 1}^n \\Pr\\{X = k\\} \\le \\Pr\\{X > 2\\lg n\\} = O(1 / n)$, by part (c). Therefore,\n\n\n\\begin{align}\n\\text E[X] & \\le \\lceil 2\\lg n \\rceil \\cdot 1 + n \\cdot O(1 / n) \\\\\n           & =   \\lceil 2\\lg n \\rceil + O(1) \\\\\n           & =   O(\\lg n).\n\\end{align}",
            "title": "11-1 Longest-probe bound for hashing"
        },
        {
            "location": "/Chap11/Problems/11-2/",
            "text": "Suppose that we have a hash table with $n$ slots, with collisions resolved by chaining, and suppose that $n$ keys are inserted into the table. Each key is equally likely to be hashed to each slot. Let $M$ be the maximum number of keys in any slot after all the keys have been inserted. Your mission is to prove an $O(\\lg n / \\lg\\lg n)$ upper bound on $\\text E[M]$, the expected value of $M$.\n\n\na.\n Argue that the probability $Q_k$ that exactly $k$ keys hash to a particular slot is given by\n\n\n$$Q_k = (\\frac{1}{n})k (1 - \\frac{1}{n})^{n - k} \\binom{n}{k}.$$\n\n\nb.\n Let $P_k$ be the probability that $M = k$, that is, the probability that the slot containing the most keys contains $k$ keys. Show that $P_k \\le n Q_k$.\n\n\nc.\n Use Stirling's approximation, equation $\\text{(3.18)}$, to show that $Q_k < e^k / k^k$.\n\n\nd.\n Show that there exists a constant $c > 1$ such that $Q_{k_0} < 1 / n^3$ for $k_0 = c\\lg n / \\lg\\lg n$. Conclude that $P_k < 1 / n^2$ for $k \\ge k_0 = c\\lg n / \\lg\\lg n$.\n\n\ne.\n Argue that\n\n\n$$\\text E[M] \\le \\Pr\\{M > \\frac{c\\lg n}{\\lg\\lg n}\\} \\cdot n + \\Pr\\{M \\le \\frac{c\\lg n}{\\lg\\lg n}\\} \\cdot \\frac{c\\lg n}{\\lg\\lg n}.$$\n\n\nConclude that $\\text E[M] = O(\\lg n / \\lg\\lg n)$.\n\n\n\n\na.\n A particular key is hashed to a particular slot with probability $1 / n$. Suppose we select a specific set of $k$ keys. The probability that these $k$ keys are inserted into the slot in question and that all other keys are inserted elsewhere is\n\n\n$$\\Big(\\frac{1}{n}\\Big)^k \\Big(1 - \\frac{1}{n}\\Big)^{n - k}.$$\n\n\nSince there are $\\binom{n}{k}$ ways to choose our $k$ keys, we get\n\n\n$$Q_k = \\Big(\\frac{1}{n}\\Big)^k \\Big(1 - \\frac{1}{n}\\Big)^{n - k} \\binom{n}{k}.$$\n\n\nb.\n For $i = 1, 2, \\ldots, n$, let $X_i$ be a random variable denoting the number of keys that hash to slot $i$, and let $A_i$ be the event that $X_i = k$, i.e., that exactly $k$ keys hash to slot $i$. From part (a), we have $\\Pr\\{A\\} = Q_k$. Then,\n\n\n\\begin{align}\nP_k & =   \\Pr\\{M = k\\} \\\\\n    & =   \\Pr\\Big\\{\\Big(\\max_{1 \\le i \\le n} X_i\\Big) = k\\Big\\} \\\\\n    & =   \\Pr\\{\\text{there exists $i$ such that $X_i = k$ and that $X_i\\le k$ for $i = 1, 2, \\ldots, n$}\\} \\\\\n    & \\le \\Pr\\{\\text{there exists $i$ such that $X_i = k$}\\} \\\\\n    & =   \\Pr\\{A_1 \\cup A_2 \\cup \\cdots \\cup A_n\\} \\\\\n    & \\le \\Pr\\{A_1\\} + \\Pr\\{A_2\\} + \\cdots + \\Pr\\{A_n\\} \\qquad \\text{(by inequality (C.19))} \\\\\n    & =   nQ_k.\n\\end{align}\n\n\nc.\n We start by showing two facts. First, $1 - 1 / n < 1$, which implies $(1 - 1 / n)^{n - k} < 1$. Second, $n! / (n - k)! = n \\cdot (n - 1) \\cdot (n - 2) \\cdots (n - k + 1) < n^k$. Using these facts, along with the simplification $k! > (k / e)^k$ of equation $\\text{(3.18)}$, we have\n\n\n\\begin{align}\nQ_k & = \\Big(\\frac{1}{n}\\Big)^k \\Big(1 - \\frac{1}{n}\\Big)^{n - k} \\frac{n!}{k!(n - k)!} \\\\\n    & < \\frac{n!}{n^k k! (n - k)!} & ((1 - 1 / n)^{n - k} < 1) \\\\\n    & < \\frac{1}{k!}               & (n! / (n - k)! < n^k) \\\\\n    & < \\frac{e^k}{k^k}.           & (k! > (k / e)^k)\n\\end{align}\n\n\nd.\n Notice that when $n = 2$, $\\lg\\lg n = 0$, so to be precise, we need to assume that $n \\ge 3$.\n\n\nIn part (c), we showed that $Q_k < e^k / k^k$ for any $k$; in particular, this inequality holds for $k_0$. Thus, it suffices to show that $e^{k_0} / k_0^{k_0} < 1 / n^3$ or, equivalently, that $n^3 < k_0^{k_0} / e^{k_0}$.\n\n\nTaking logarithms of both sides gives an equivalent condition:\n\n\n\\begin{align}\n3\\lg n & < k_0(\\lg k_0 - \\lg e) \\\\\n       & = \\frac{c\\lg n}{\\lg\\lg n}(\\lg c + \\lg\\lg n - \\lg\\lg\\lg n - \\lg e).\n\\end{align}\n\n\nDividing both sides by $\\lg n$ gives the condition\n\n\n\\begin{align}\n3 & < \\frac{c}{\\lg\\lg n} (\\lg c + \\lg\\lg n - \\lg\\lg\\lg n - \\lg e) \\\\\n  & = c \\Big(1 + \\frac{\\lg c - \\lg e}{\\lg\\lg n} - \\frac{\\lg\\lg\\lg n}{\\lg\\lg n}\\Big).\n\\end{align}\n\n\nLet $x$ be the last expression in parentheses:\n\n\n$$x = \\Big(1 + \\frac{\\lg c - \\lg e}{\\lg\\lg n} - \\frac{\\lg\\lg\\lg n}{\\lg\\lg n}\\Big).$$\n\n\nWe need to show that there exists a constant $c > 1$ such that $3 < cx$.\n\n\nNoting that $\\lim_{n \\to \\infty} x = 1$, we see that there exists $n_0$ such that $x \\ge 1 / 2$ for all $n \\ge n_0$. Thus, any constant $c > 6$ works for $n \\ge n_0$.\n\n\nWe handle smaller values of $n$\u2014in particular, $3 \\le n < n_0$\u2014as follows. Since $n$ is constrained to be an integer, there are a finite number of n in the range $3 \\le n < n_0$. We can evaluate the expression $x$ for each such value of $n$ and determine a value of $c$ for which $3 < cx$ for all values of $n$. The final value of $c$ that we use is the larger of\n\n\n\n\n$6$, which works for all $n \\ge n_0$, and \n\n\n$\\max_{3 \\le n \\le n_0}\\{c: 3 < cx\\}$, i.e., the largest value of $c$ that we chose for the range $3 \\le n < n_0$.\n\n\n\n\nThus, we have shown that $Q_{k_0} < 1 / n^3$, as desired.\n\n\nTo see that $P_k < 1 / n^2$ for $k \\ge k_0$, we observe that by part (b), $P_k \\le nQ_k$ for all $k$. Choosing $k = k_0$ gives $P_{k_0} \\le nQ_{k_0} < n \\cdot (1 / n^3) = 1 / n^2$. For $k > k_0$, we will show that we can pick the constant $c$ such that $Q_k < 1 / n^3$ for all $k \\ge k_0$, and thus conclude that $P_k < 1 / n^2$ for all $k \\ge k_0$.\n\n\nTo pick $c$ as required, we let $c$ be large enough that $k_0 > 3 > e$. Then $e / k < 1$ for all $k \\ge k_0$, and so $e^k / k^k$ decreases as $k$ increases. Thus,\n\n\n\\begin{align}\nQ_k & <   e^k / k^k \\\\\n    & \\le e^{k_0} / k^{k_0} \\\\\n    & <   1 / n^3 \n\\end{align}\n\n\nfor $k \\ge k_0$.\n\n\ne.\n The expectation of $M$ is\n\n\n\\begin{align}\n\\text E[M] & =   \\sum_{k = 0}^n k \\cdot \\Pr\\{M = k\\} \\\\\n           & =   \\sum_{k = 0}^{k_0} k \\cdot \\Pr\\{M = k\\} + \\sum_{k = k_0 + 1}^n k \\cdot \\Pr\\{M = k\\} \\\\\n           & \\le \\sum_{k = 0}^{k_0} k_0 \\cdot \\Pr\\{M = k\\} + \\sum_{k = k_0 + 1}^n n \\cdot \\Pr\\{M = k\\} \\\\\n           & \\le k_0 \\sum_{k = 0}^{k_0} \\Pr\\{M = k\\} + n \\sum_{k = k_0 + 1}^n \\Pr\\{M = k\\} \\\\\n           & =   k_0 \\cdot \\Pr\\{M \\le k_0\\} + n \\cdot \\Pr\\{M > k_0\\},\n\\end{align}\n\n\nwhich is what we needed to show, since $k_0 = c \\lg n / \\lg\\lg n$.\n\n\nTo show that $\\text E[M] = O(\\lg n / \\lg\\lg n)$, note that $\\Pr\\{M \\le k_0\\} \\le 1$ and\n\n\n\\begin{align}\n\\Pr\\{M > k_0\\} & = \\sum_{k = k_0 + 1}^n \\Pr\\{M = k\\} \\\\\n               & = \\sum_{k = k_0 + 1}^n P_k \\\\\n               & < \\sum_{k = k_0 + 1}^n 1 / n^2 & \\text{(by part (d))} \\\\\n               & < n \\cdot (1 / n^2) \\\\\n               & = 1 / n.\n\\end{align}\n\n\nWe conclude that\n\n\n\\begin{align}\n\\text E[M] & \\le k_0 \\cdot 1 + n \\cdot (1 / n) \\\\\n           & =   k_0 + 1 \\\\\n           & =   O(\\lg n / \\lg\\lg n).\n\\end{align}",
            "title": "11-2 Slot-size bound for chaining"
        },
        {
            "location": "/Chap11/Problems/11-3/",
            "text": "Suppose that we are given a key $k$ to search for in a hash table with positions $0, 1, \\ldots, m - 1$, and suppose that we have a hash function $h$ mapping the key space into the set ${0, 1, \\ldots, m - 1}$. The search scheme is as follows:\n\n\n\n\nCompute the value $j = h(k)$, and set $i = 0$.\n\n\nProbe in position $j$ for the desired key $k$. If you find it, or if this position is empty, terminate the search.\n\n\nSet $i = i + 1$. If $i$ now equals $m$, the table is full, so terminate the search. Otherwise, set $j = (i + j) \\mod m$, and return to step 2.\n\n\n\n\nAssume that $m$ is a power of $2$.\n\n\na.\n Show that this scheme is an instance of the general ''quadratic probing'' scheme by exhibiting the appropriate constants $c_1$ and $c_2$ for equation $\\text{(11.5)}$.\n\n\nb.\n Prove that this algorithm examines every table position in the worst case.\n\n\n\n\na.\n From how the probe-sequence computation is specified, it is easy to see that the probe sequence is\n\n\n$$\\langle h(k), h(k) + 1, h(k) + 1 + 2, h(k) + 1 + 2 + 3, \\ldots, h(k) + 1 + 2 + 3 + \\cdots + i, \\ldots \\rangle,$$\n\n\nwhere all arithmetic is modulo $m$. Starting the probe numbers from $0$, the $i$th probe is offset (modulo $m$) from $h(k)$ by\n\n\n$$\\sum_{j = 0}^i j = \\frac{i(i + 1)}{2} = \\frac{1}{2}i^2 + \\frac{1}{2}i.$$\n\n\nThus, we can write the probe sequence as\n\n\n$$h'(k, i) = \\Big(h(k) + \\frac{1}{2} i + \\frac{1}{2} i^2 \\Big)\\mod m,$$\n\n\nwhich demonstrates that this scheme is a special case of quadratic probing.\n\n\nb.\n Let $h'(k, i)$ denote the ith probe of our scheme. We saw in part (a) that $h'(k, i) = (h(k) + i(i + 1) / 2) \\mod m$. To show that our algorithm examines every table position in the worst case, we show that for a given key, each of the first $m$ probes hashes to a distinct value. That is, for any key $k$ and for any probe numbers $i$ and $j$ such that $0 \\le i < j < m$, we have $h'(k, i) \\ne h'(k, j)$. We do so by showing that $h'(k, i) = h'(k, j)$ yields a contradiction.\n\n\nLet us assume that there exists a key $k$ and probe numbers $i$ and $j$ satsifying $0 \\le i < j < m$ for which $h'(k, i) = h'(k, j)$. Then\n\n\n$$h(k) + i(i + 1) / 2 \\equiv h(k) + j(j + 1) / 2 \\quad(\\text{mod $m$}),$$\n\n\nwhich in turn implies that\n\n\n$$i(i + 1) / 2 \\equiv j(j + 1) / 2 \\quad(\\text{mod $m$}),$$\n\n\nor\n\n\n$$j(j + 1) / 2 - i(i + 1) / 2 \\equiv 0 \\quad(\\text{mod $m$}).$$\n\n\nSince $j(j + 1) / 2 - i(i + 1) / 2 = (j - i)(j + i + 1) / 2$, we have\n\n\n$$(j - i)(j + i + 1) / 2 \\equiv 0 \\quad(\\text{mod $m$}).$$\n\n\nThe factors $j - i$ and $j + i + 1$ must have different parities, i.e., $j - i$ is even if and only if $j + i + 1$ is odd. (Work out the various cases in which $i$ and $j$ are even and odd.) Since $(j - i)(j + i + 1) / 2 \\equiv 0 \\mod m$, we have $(j - i)(j + i + 1) / 2 = rm$ for some integer $r$ or, equivalently, $(j - i)(j + i + 1) = r \\cdot 2m$. Using the assumption that $m$ is a power of $2$, let $m = 2^p$ for some nonnegative integer $p$, so that now we have $(j - i)(j + i + 1) = r \\cdot 2^{p + 1}$. Because exactly one of the factors $j - i$ and $j + i + 1$ is even, $2^{p + 1}$ must divide one of the factors. It cannot be $j - i$, since $j - i < m < 2^{p + 1}$. But it also cannot be $j + i + 1$, since $j + i + 1 \\le (m - 1) + (m - 2) + 1 = 2m - 2 < 2^{p + 1}$. Thus we have derived the contradiction that $2^{p + 1}$ divides neither of the factors $j - i$ and $j + i + 1$. We conclude that $h'(k, i) \\ne h'(k, j)$.",
            "title": "11-3 Quadratic probing"
        },
        {
            "location": "/Chap11/Problems/11-4/",
            "text": "Let $\\mathcal H$ be a class of hash functions in which each hash function $h \\in \\mathcal H$ maps the universe $U$ of keys to ${0, 1, \\ldots, m - 1}$. We say that $\\mathcal H$ is \nk-universal\n if, for every fixed sequence of $k$ distinct keys $\\langle x^{(1)}, x^{(2)}, \\ldots, x^{(k)} \\rangle$ and for any $h$ chosen at random from $\\mathcal H$, the sequence $\\langle h(x^{(1)}), h(x^{(2)}), \\ldots, h(x^{(k)}) \\rangle$ is equally likely to be any of the $m^k$ sequences of length $k$ with elements drawn from ${0, 1, \\ldots, m - 1}$.\n\n\na.\n Show that if the family $\\mathcal H$ of hash functions is $2$-universal, then it is universal.\n\n\nb.\n Suppose that the universe $U$ is the set of $n$-tuples of values drawn from $\\mathbb Z_p = \\{0, 1, \\ldots, p - 1\\}$, where $p$ is prime. Consider an element $x = \\langle x_0, x_1, \\ldots, x_{n - 1} \\rangle \\in U$. For any $n$-tuple $a = \\langle a_0, a_1, \\ldots, a_{n - 1} \\rangle \\in U$, define the hash function $h_a$ by\n\n\n$$h_a(x) = (\\sum_{j = 0}^{n - 1} a_j x_j) \\mod p.$$\n\n\nLet $\\mathcal H = {h_a}$. Show that $\\mathcal H$ is universal, but not $2$-universal.\n\n\nc.\n Suppose that we modify $\\mathcal H$ slightly from part (b): for any $a \\in U$ and for any $b \\in \\mathbb Z_p$, define\n\n\n$$h'_{ab}(x) = (\\sum_{j = 0}^{n - 1} a_j x_j) \\mod p$$\n\n\nand $\\mathcal h' = \\{h'_{ab}\\}$. Argue that $\\mathcal h'$ is $2$-universal. ($\\textit{Hint:}$ Consider fixed $n$-tuples $x \\in U$ and $y \\in U$, with $x_i \\ne y_i$ for some $i$. What happens to $h'_{ab}(x)$ and $h'_{ab}(y)$ as $a_i$ and $b$ range over $\\mathbb Z_p$?)\n\n\nd.\n Suppose that Alice and Bob secretly agree on a hash function $h$ form $2$-universal family $\\mathcal H$ of hash functions. Each $h \\in \\mathcal H$ maps from a universe of keys $u$ to $\\mathbb Z_p$, where $p$ is aprime. Later, Alice sends a message $m$ to Bob over the Internet, where $m \\in U$. She authenticates this message to Bob by also sending an authentication tag $t = h(m)$, and Bob checks that the pair $(m, t)$ he receives indeed satisfies $t = h(m)$. Suppose that an adversary intercepts $(m, t)$ en route and tries to fool Bob by replacing the pair $(m, t)$ with a different pair $(m', t')$. Argue that the probability that the adversary succeeds in fooling Bob into accepting $(m', t')$ is at most $1 / p$, no matter how much computing power the adversary has, and even if the adversary knows the family $\\mathcal H$ of hash functions used.\n\n\n\n\na.\n The number of hash functions for which $h(k)=h(l)$ is $\\frac{m}{m^2}|\\mathcal H|=\\frac{1}{m}|\\mathcal H|$, therefore the family is universal. \n\n\nb.\n For $x = \\langle 0, 0, \\ldots, 0 \\rangle$, $\\mathcal H$ could not be $2$-universal.\n\n\nc.\n Let $x, y \\in U$ be fixed, distinct $n$-tuples. As $a_i$ and $b$ range over $\\mathbb Z_p, h'_{ab}(x)$ is equally likely to achieve every value from $1$ to $p$ since for any sequence $a$, we can let $b$ vary from $1$ to $p - 1$.\n\n\nThus, $\\langle h'_{ab}(x), h'_{ab}(y) \\rangle$ is equally likely to be any of the $p^2$ sequences, so $\\mathcal H$ is $2$-universal.\n\n\nd.\n Since $\\mathcal H$ is $2$-universal, every pair of $\\langle t, t' \\rangle$ is equally likely to appear, thus $t'$ could be any value from $\\mathbb Z_p$. Even the adversary knows $\\mathcal H$, since $\\mathcal H$ is $2$-universal, then $\\mathcal H$ is universal, the probability of choosing a hash function that $h(k) = h(l)$ is at most $1 / p$, therefore the probability is at most $1 / p$.",
            "title": "11-4 Hashing and authentication"
        },
        {
            "location": "/Chap12/12.1/",
            "text": "12.1-1\n\n\n\n\nFor the set of $\\langle 1, 4, 5, 10, 16, 17, 21 \\rangle$ of keys, draw binary search trees of heights $2$, $3$, $4$, $5$, and $6$.\n\n\n\n\n\n\n\n\n$height = 2$:\n\n\n\n\n\n\n\n\n$height = 3$:\n\n\n\n\n\n\n\n\n$height = 4$:\n\n\n\n\n\n\n\n\n$height = 5$:\n\n\n\n\n\n\n\n\n$height = 6$:\n\n\n\n\n\n\n\n\n12.1-2\n\n\n\n\nWhat is the difference between the binary-search-tree property and the min-heap property (see page 153)? Can the min-heap property be used to print out the keys of an $n$-node tree in sorted order in $O(n)$ time? Show how, or explain why not.\n\n\n\n\nIn a heap, a node's key is $\\ge$ both of its children's keys. In a binary search tree, a node's key is $\\ge$ its left child's key, but $\\le$ its right child's key.\n\n\nThe heap property, unlike the binary-searth-tree property, doesn't help print the nodes in sorted order because it doesn't tell which subtree of a node contains the element to print before that node. In a heap, the largest element smaller than the node could be in either subtree.\n\n\nNote that if the heap property could be used to print the keys in sorted order in $O(n)$ time, we would have an $O(n)$-time algorithm for sorting, because building the heap takes only $O(n)$ time. But we know (Chapter 8) that a comparison sort must take \u007f$\\Omega(n\\lg n)$ time.\n\n\n12.1-3\n\n\n\n\nGive a nonrecursive algorithm that performs an inorder tree walk. ($\\textit{Hint:}$ An easy solution uses a stack as an auxiliary data structure. A more complicated, but elegant, solution uses no stack but assumes that we can test two pointers for equality.)\n\n\n\n\nINORDER\n-\nTREE\n-\nWALK\n(\nT\n)\n\n    \ncreate\n \nan\n \nempty\n \nstack\n \nS\n \n=\n \nNIL\n\n    \ncurrent\n \n=\n \nT\n.\nroot\n\n    \ndone\n \n=\n \n0\n\n    \nwhile\n \n!\ndone\n\n        \nif\n \ncurrent\n \n!=\n \nNIL\n\n            \nS\n.\npush\n(\ncurrent\n)\n\n            \ncurrent\n \n=\n \ncurrent\n->\nleft\n\n        \nelse\n\n            \nif\n \n!\nS\n.\nempty\n()\n\n                \ncurrent\n \n=\n \nS\n.\npop\n(\nS\n)\n\n                \nprint\n \ncurrent\n\n                \ncurrent\n \n=\n \ncurrent\n->\nright\n\n            \nelse\n \ndone\n \n=\n \n1\n\n\n\n\n\n12.1-4\n\n\n\n\nGive recursive algorithms that perform preorder and postorder tree walks in $\\Theta(n)$ time on a tree of $n$ nodes.\n\n\n\n\nPREORDER\n-\nTREE\n-\nWALK\n(\nx\n)\n\n    \nif\n \nx\n \n!=\n \nNIL\n\n        \nprint\n \nx\n.\nkey\n\n        \nPREORDER\n-\nTREE\n-\nWALK\n(\nx\n->\nleft\n)\n\n        \nPREORDER\n-\nTREE\n-\nWALK\n(\nx\n->\nright\n)\n\n\n\n\n\nPOSTORDER\n-\nTREE\n-\nWALK\n(\nx\n)\n\n    \nif\n \nx\n \n!=\n \nNIL\n\n        \nPOSTORDER\n-\nTREE\n-\nWALK\n(\nx\n->\nleft\n)\n\n        \nPOSTORDER\n-\nTREE\n-\nWALK\n(\nx\n->\nright\n)\n\n        \nprint\n \nx\n.\nkey\n\n\n\n\n\n12.1-5\n\n\n\n\nArgue that since sorting $n$ elements takes $\\Omega(n\\lg n)$ time in the worst case in the comparison model, any comparison-based algorithm for constructing a binary search tree from an arbitrary list of $n$ elements takes $\\Omega(n\\lg n)$ time in the worst case.\n\n\n\n\nIf we construct the binary search tree by comparison-based algorithm using less than $\\Omega(n\\lg n)$ time, since the inorder tree walk is $\\Theta(n)$, then we can get the sorted elements in less than $\\Omega(n\\lg n)$ time, which contradicts the fact that sorting $n$ elements takes $\\Omega(n\\lg n)$ time in the worst case.",
            "title": "12.1 What is a binary search tree?"
        },
        {
            "location": "/Chap12/12.1/#121-1",
            "text": "For the set of $\\langle 1, 4, 5, 10, 16, 17, 21 \\rangle$ of keys, draw binary search trees of heights $2$, $3$, $4$, $5$, and $6$.     $height = 2$:     $height = 3$:     $height = 4$:     $height = 5$:     $height = 6$:",
            "title": "12.1-1"
        },
        {
            "location": "/Chap12/12.1/#121-2",
            "text": "What is the difference between the binary-search-tree property and the min-heap property (see page 153)? Can the min-heap property be used to print out the keys of an $n$-node tree in sorted order in $O(n)$ time? Show how, or explain why not.   In a heap, a node's key is $\\ge$ both of its children's keys. In a binary search tree, a node's key is $\\ge$ its left child's key, but $\\le$ its right child's key.  The heap property, unlike the binary-searth-tree property, doesn't help print the nodes in sorted order because it doesn't tell which subtree of a node contains the element to print before that node. In a heap, the largest element smaller than the node could be in either subtree.  Note that if the heap property could be used to print the keys in sorted order in $O(n)$ time, we would have an $O(n)$-time algorithm for sorting, because building the heap takes only $O(n)$ time. But we know (Chapter 8) that a comparison sort must take \u007f$\\Omega(n\\lg n)$ time.",
            "title": "12.1-2"
        },
        {
            "location": "/Chap12/12.1/#121-3",
            "text": "Give a nonrecursive algorithm that performs an inorder tree walk. ($\\textit{Hint:}$ An easy solution uses a stack as an auxiliary data structure. A more complicated, but elegant, solution uses no stack but assumes that we can test two pointers for equality.)   INORDER - TREE - WALK ( T ) \n     create   an   empty   stack   S   =   NIL \n     current   =   T . root \n     done   =   0 \n     while   ! done \n         if   current   !=   NIL \n             S . push ( current ) \n             current   =   current -> left \n         else \n             if   ! S . empty () \n                 current   =   S . pop ( S ) \n                 print   current \n                 current   =   current -> right \n             else   done   =   1",
            "title": "12.1-3"
        },
        {
            "location": "/Chap12/12.1/#121-4",
            "text": "Give recursive algorithms that perform preorder and postorder tree walks in $\\Theta(n)$ time on a tree of $n$ nodes.   PREORDER - TREE - WALK ( x ) \n     if   x   !=   NIL \n         print   x . key \n         PREORDER - TREE - WALK ( x -> left ) \n         PREORDER - TREE - WALK ( x -> right )   POSTORDER - TREE - WALK ( x ) \n     if   x   !=   NIL \n         POSTORDER - TREE - WALK ( x -> left ) \n         POSTORDER - TREE - WALK ( x -> right ) \n         print   x . key",
            "title": "12.1-4"
        },
        {
            "location": "/Chap12/12.1/#121-5",
            "text": "Argue that since sorting $n$ elements takes $\\Omega(n\\lg n)$ time in the worst case in the comparison model, any comparison-based algorithm for constructing a binary search tree from an arbitrary list of $n$ elements takes $\\Omega(n\\lg n)$ time in the worst case.   If we construct the binary search tree by comparison-based algorithm using less than $\\Omega(n\\lg n)$ time, since the inorder tree walk is $\\Theta(n)$, then we can get the sorted elements in less than $\\Omega(n\\lg n)$ time, which contradicts the fact that sorting $n$ elements takes $\\Omega(n\\lg n)$ time in the worst case.",
            "title": "12.1-5"
        },
        {
            "location": "/Chap12/12.2/",
            "text": "12.2-1\n\n\n\n\nSuppose that we have numbers between $1$ and $1000$ in a binary search tree, and we want to search for the number $363$. Which of the following sequences could not be the sequence of nodes examined?\n\n\na.\n $2, 252, 401, 398, 330, 344, 397, 363$.\n\n\nb.\n $924, 220, 911, 244, 898, 258, 362, 363$.\n\n\nc.\n $925, 202, 911, 240, 912, 245, 363$.\n\n\nd.\n $2, 399, 387, 219, 266, 382, 381, 278, 363$.\n\n\ne.\n $935, 278, 347, 621, 299, 392, 358, 363$.\n\n\n\n\n\n\nc.\n could not be the sequence of nodes explored because we take the left child from the $911$ node, and yet somehow manage to get to the $912$ node which cannot belong the left subtree of $911$ because it is greater. \n\n\ne.\n is also impossible because we take the right subtree on the $347$ node and yet later come across the $299$ node.\n\n\n\n\n12.2-2\n\n\n\n\nWrite recursive versions of $\\text{TREE-MINIMUM}$ and $\\text{TREE-MAXIMUM}$.\n\n\n\n\nTREE\n-\nMINIMUM\n(\nx\n)\n\n    \nif\n \n!\nx\n->\nleft\n\n        \nreturn\n \nTREE\n-\nMINIMUM\n(\nx\n->\nleft\n)\n\n    \nreturn\n \nx\n\n\n\n\n\nTREE\n-\nMAXIMUM\n(\nx\n)\n\n    \nif\n \n!\nx\n->\nright\n\n        \nreturn\n \nTREE\n-\nMAXIMUM\n(\nx\n->\nright\n)\n\n    \nreturn\n \nx\n\n\n\n\n\n12.2-3\n\n\n\n\nWrite the $\\text{TREE-PREDECESSOR}$ procedure.\n\n\n\n\nTREE\n-\nPREDECESSOR\n(\nx\n)\n\n    \nif\n \n!\nx\n->\nleft\n\n        \nreturn\n \nTREE\n-\nMAXIMUM\n(\nx\n->\nleft\n)\n\n    \ny\n \n=\n \nx\n->\nparent\n\n    \nwhile\n \n!\ny\n \nand\n \nx\n \n==\n \ny\n->\nleft\n\n        \nx\n \n=\n \ny\n\n        \ny\n \n=\n \ny\n->\nparent\n\n    \nreturn\n \ny\n\n\n\n\n\n12.2-4\n\n\n\n\nProfessor Bunyan thinks he has discovered a remarkable property of binary search trees. Suppose that the search for key $k$ in a binary search tree ends up in a leaf. Consider three sets: $A$, the keys to the left of the search path; $B$, the keys on the search path; and $C$, the keys to the right of the search path. Professor Bunyan claims that any three keys $a \\in A$, $b \\in B$, and $c \\in C$ must satisfy $a \\le b \\le c$. Give a smallest possible counterexample to the professor's claim.\n\n\n\n\nSearch for $9$ in this tree. Then $A = {7}$, $B = {5, 8, 9}$ and $C = {}$.  So, since $7 > 5$ it breaks professor's claim.\n\n\n12.2-5\n\n\n\n\nShow that if a node in a binary search tree has two children, then its successor has no left child and its predecessor has no right child.\n\n\n\n\nLet $x$ be a node with two children. In an inorder tree walk, the nodes in $x$'s left subtree immediately precede $x$ and the nodes in $x$'s right subtree immediately follow $x$. Thus, $x$'s predecessor is in its left subtree, and its successor is in its right subtree.\n\n\nLet $s$ be $x$'s successor. Then s cannot have a left child, for a left child of $s$ would come between $x$ and $s$ in the inorder walk. (It's after $x$ because it's in $x$'s right subtree, and it's before s because it's in $s$'s left subtree.) If any node were to come between $x$ and $s$ in an inorder walk, then s would not be $x$'s successor, as we had supposed.\n\n\nSymmetrically, $x$'s predecessor has no right child.\n\n\n12.2-6\n\n\n\n\nConsider a binary search tree $T$ whose keys are distinct. Show that if the right subtree of a node $x$ in $T$ is empty and $x$ has a successor $y$, then $y$ is the lowest ancestor of $x$ whose left child is also an ancestor of $x$. (Recall that every node is its own ancestor.)\n\n\n\n\nFirst we establish that $y$ must be an ancestor of $x$. If $y$ weren't an ancestor of $x$, then let $z$ denote the first common ancestor of $x$ and $y$. By the binary-search-tree property, $x < z < y$, so $y$ cannot be the successor of $x$.\n\n\nNext observe that $y.left$ must be an ancestor of $x$ because if it weren't, then $y.right$ would be an ancestor of $x$, implying that $x > y$. Finally, suppose that $y$ is not the lowest ancestor of $x$ whose left child is also an ancestor of $x$. Let $z$ denote this lowest ancestor. Then $z$ must be in the left subtree of $y$, which implies $z < y$, contradicting the fact that $y$ is the successor if $x$.\n\n\n12.2-7\n\n\n\n\nAn alternative method of performing an inorder tree walk of an $n$-node binary search tree finds the minimum element in the tree by calling $\\text{TREE-MINIMUM}$ and then making $n - 1$ calls to $\\text{TREE-SUCCESSOR}$. Prove that this algorithm runs in $\\Theta(n)$ time.\n\n\n\n\nNote that a call to $\\text{TREE-MINIMUM}$ followed by $n - 1$ calls to $\\text{TREE-SUCCESSOR}$ performs exactly the same inorder walk of the tree as does the procedure $\\text{INORDER-TREE-WALK}$. $\\text{INORDER-TREE-WALK}$ prints the $\\text{TREE-MINIMUM}$ first, and by\n\n\ndefinition, the $\\text{TREE-SUCCESSOR}$ of a node is the next node in the sorted order determined by an inorder tree walk.\n\n\nThis algorithm runs in $\\Theta(n)$ time because:\n\n\n\n\nIt requires \u007f$O(n)$ time to do the n procedure calls.\n\n\nIt traverses each of the $n - 1$ tree edges at most twice, which takes $O(n)$ time.\n\n\n\n\nTo see that each edge is traversed at most twice (once going down the tree and once going up), consider the edge between any node $u$ and either of its children, node $v$. By starting at the root, we must traverse $(u, v)$ downward from $u$ to $v$, before traversing it upward from $v$ to $u$. The only time the tree is traversed downward is in code of $\\text{TREE-MINIMUM}$, and the only time the tree is traversed upward is in code of $\\text{TREE-SUCCESSOR}$ when we look for the successor of a node that has no right subtree.\n\n\nSuppose that  is $u$'s left child.\n\n\n\n\nBefore printing $u$, we must print all the nodes in its left subtree, which is rooted at $v$, guaranteeing the downward traversal of edge $(u, v)$.\n\n\nAfter all nodes in $u$'s left subtree are printed, $u$ must be printed next. Procedure $\\text{TREE-SUCCESSOR}$ traverses an upward path to $u$ from the maximum element (which has no right subtree) in the subtree rooted at . This path clearly includes edge $(u, v)$, and since all nodes in $u$'s left subtree are printed, edge $(u, v)$ is never traversed again.\n\n\n\n\nNow suppose that $v$ is $u$'s right child.\n\n\n\n\nAfter $u$ is printed, $\\text{TREE-SUCCESSOR}(u)$ is called. To get to the minimum element in $u$'s right subtree (whose root is $v$), the edge $(u, v)$ must be traversed downward.\n\n\nAfter all values in $u$'s right subtree are printed, $\\text{TREE-SUCCESSOR}$ is called on the maximum element (again, which has no right subtree) in the subtree rooted at $v$. $\\text{TREE-SUCCESSOR}$ traverses a path up the tree to an element after $u$, since $u$ was already printed. Edge $(u, v)$ must be traversed upward on this path, and since all nodes in $u$'s right subtree have been printed, edge $(u, v)$ is never traversed again.\n\n\n\n\nHence, no edge is traversed twice in the same direction.\n\n\nTherefore, this algorithm runs in $\\Theta(n)$ time.\n\n\n12.2-8\n\n\n\n\nProve that no matter what node we start at in a height-$h$ binary search tree, $k$ successive calls to $\\text{TREE-SUCCESSOR}$ take $O(k + h)$ time.\n\n\n\n\nSuppose $x$ is the starting node and $y$ is the ending node. The distance between $x$ and $y$ is at most $2h$, and all the edges connecting the $k$ nodes are visited twice, therefore it takes $O(k + h)$ time.\n\n\n12.2-9\n\n\n\n\nLet $T$ be a binary search tree whose keys are distinct, let $x$ be a leaf node, and let $y$ be its parent. Show that $y.key$ is either the smallest key in $T$ larger than $x.key$ or the largest key in $T$ smaller than $x.key$.\n\n\n\n\n\n\nIf $x = y.left$, then calling successor on $x$ will result in no iterations of the while loop, and so will return $y$.\n\n\nIf $x = y.right$, the while loop for calling predecessor(see exercise 3) will be run no times, and so $y$ will be returned.",
            "title": "12.2 Querying a binary search tree"
        },
        {
            "location": "/Chap12/12.2/#122-1",
            "text": "Suppose that we have numbers between $1$ and $1000$ in a binary search tree, and we want to search for the number $363$. Which of the following sequences could not be the sequence of nodes examined?  a.  $2, 252, 401, 398, 330, 344, 397, 363$.  b.  $924, 220, 911, 244, 898, 258, 362, 363$.  c.  $925, 202, 911, 240, 912, 245, 363$.  d.  $2, 399, 387, 219, 266, 382, 381, 278, 363$.  e.  $935, 278, 347, 621, 299, 392, 358, 363$.    c.  could not be the sequence of nodes explored because we take the left child from the $911$ node, and yet somehow manage to get to the $912$ node which cannot belong the left subtree of $911$ because it is greater.   e.  is also impossible because we take the right subtree on the $347$ node and yet later come across the $299$ node.",
            "title": "12.2-1"
        },
        {
            "location": "/Chap12/12.2/#122-2",
            "text": "Write recursive versions of $\\text{TREE-MINIMUM}$ and $\\text{TREE-MAXIMUM}$.   TREE - MINIMUM ( x ) \n     if   ! x -> left \n         return   TREE - MINIMUM ( x -> left ) \n     return   x   TREE - MAXIMUM ( x ) \n     if   ! x -> right \n         return   TREE - MAXIMUM ( x -> right ) \n     return   x",
            "title": "12.2-2"
        },
        {
            "location": "/Chap12/12.2/#122-3",
            "text": "Write the $\\text{TREE-PREDECESSOR}$ procedure.   TREE - PREDECESSOR ( x ) \n     if   ! x -> left \n         return   TREE - MAXIMUM ( x -> left ) \n     y   =   x -> parent \n     while   ! y   and   x   ==   y -> left \n         x   =   y \n         y   =   y -> parent \n     return   y",
            "title": "12.2-3"
        },
        {
            "location": "/Chap12/12.2/#122-4",
            "text": "Professor Bunyan thinks he has discovered a remarkable property of binary search trees. Suppose that the search for key $k$ in a binary search tree ends up in a leaf. Consider three sets: $A$, the keys to the left of the search path; $B$, the keys on the search path; and $C$, the keys to the right of the search path. Professor Bunyan claims that any three keys $a \\in A$, $b \\in B$, and $c \\in C$ must satisfy $a \\le b \\le c$. Give a smallest possible counterexample to the professor's claim.   Search for $9$ in this tree. Then $A = {7}$, $B = {5, 8, 9}$ and $C = {}$.  So, since $7 > 5$ it breaks professor's claim.",
            "title": "12.2-4"
        },
        {
            "location": "/Chap12/12.2/#122-5",
            "text": "Show that if a node in a binary search tree has two children, then its successor has no left child and its predecessor has no right child.   Let $x$ be a node with two children. In an inorder tree walk, the nodes in $x$'s left subtree immediately precede $x$ and the nodes in $x$'s right subtree immediately follow $x$. Thus, $x$'s predecessor is in its left subtree, and its successor is in its right subtree.  Let $s$ be $x$'s successor. Then s cannot have a left child, for a left child of $s$ would come between $x$ and $s$ in the inorder walk. (It's after $x$ because it's in $x$'s right subtree, and it's before s because it's in $s$'s left subtree.) If any node were to come between $x$ and $s$ in an inorder walk, then s would not be $x$'s successor, as we had supposed.  Symmetrically, $x$'s predecessor has no right child.",
            "title": "12.2-5"
        },
        {
            "location": "/Chap12/12.2/#122-6",
            "text": "Consider a binary search tree $T$ whose keys are distinct. Show that if the right subtree of a node $x$ in $T$ is empty and $x$ has a successor $y$, then $y$ is the lowest ancestor of $x$ whose left child is also an ancestor of $x$. (Recall that every node is its own ancestor.)   First we establish that $y$ must be an ancestor of $x$. If $y$ weren't an ancestor of $x$, then let $z$ denote the first common ancestor of $x$ and $y$. By the binary-search-tree property, $x < z < y$, so $y$ cannot be the successor of $x$.  Next observe that $y.left$ must be an ancestor of $x$ because if it weren't, then $y.right$ would be an ancestor of $x$, implying that $x > y$. Finally, suppose that $y$ is not the lowest ancestor of $x$ whose left child is also an ancestor of $x$. Let $z$ denote this lowest ancestor. Then $z$ must be in the left subtree of $y$, which implies $z < y$, contradicting the fact that $y$ is the successor if $x$.",
            "title": "12.2-6"
        },
        {
            "location": "/Chap12/12.2/#122-7",
            "text": "An alternative method of performing an inorder tree walk of an $n$-node binary search tree finds the minimum element in the tree by calling $\\text{TREE-MINIMUM}$ and then making $n - 1$ calls to $\\text{TREE-SUCCESSOR}$. Prove that this algorithm runs in $\\Theta(n)$ time.   Note that a call to $\\text{TREE-MINIMUM}$ followed by $n - 1$ calls to $\\text{TREE-SUCCESSOR}$ performs exactly the same inorder walk of the tree as does the procedure $\\text{INORDER-TREE-WALK}$. $\\text{INORDER-TREE-WALK}$ prints the $\\text{TREE-MINIMUM}$ first, and by  definition, the $\\text{TREE-SUCCESSOR}$ of a node is the next node in the sorted order determined by an inorder tree walk.  This algorithm runs in $\\Theta(n)$ time because:   It requires \u007f$O(n)$ time to do the n procedure calls.  It traverses each of the $n - 1$ tree edges at most twice, which takes $O(n)$ time.   To see that each edge is traversed at most twice (once going down the tree and once going up), consider the edge between any node $u$ and either of its children, node $v$. By starting at the root, we must traverse $(u, v)$ downward from $u$ to $v$, before traversing it upward from $v$ to $u$. The only time the tree is traversed downward is in code of $\\text{TREE-MINIMUM}$, and the only time the tree is traversed upward is in code of $\\text{TREE-SUCCESSOR}$ when we look for the successor of a node that has no right subtree.  Suppose that  is $u$'s left child.   Before printing $u$, we must print all the nodes in its left subtree, which is rooted at $v$, guaranteeing the downward traversal of edge $(u, v)$.  After all nodes in $u$'s left subtree are printed, $u$ must be printed next. Procedure $\\text{TREE-SUCCESSOR}$ traverses an upward path to $u$ from the maximum element (which has no right subtree) in the subtree rooted at . This path clearly includes edge $(u, v)$, and since all nodes in $u$'s left subtree are printed, edge $(u, v)$ is never traversed again.   Now suppose that $v$ is $u$'s right child.   After $u$ is printed, $\\text{TREE-SUCCESSOR}(u)$ is called. To get to the minimum element in $u$'s right subtree (whose root is $v$), the edge $(u, v)$ must be traversed downward.  After all values in $u$'s right subtree are printed, $\\text{TREE-SUCCESSOR}$ is called on the maximum element (again, which has no right subtree) in the subtree rooted at $v$. $\\text{TREE-SUCCESSOR}$ traverses a path up the tree to an element after $u$, since $u$ was already printed. Edge $(u, v)$ must be traversed upward on this path, and since all nodes in $u$'s right subtree have been printed, edge $(u, v)$ is never traversed again.   Hence, no edge is traversed twice in the same direction.  Therefore, this algorithm runs in $\\Theta(n)$ time.",
            "title": "12.2-7"
        },
        {
            "location": "/Chap12/12.2/#122-8",
            "text": "Prove that no matter what node we start at in a height-$h$ binary search tree, $k$ successive calls to $\\text{TREE-SUCCESSOR}$ take $O(k + h)$ time.   Suppose $x$ is the starting node and $y$ is the ending node. The distance between $x$ and $y$ is at most $2h$, and all the edges connecting the $k$ nodes are visited twice, therefore it takes $O(k + h)$ time.",
            "title": "12.2-8"
        },
        {
            "location": "/Chap12/12.2/#122-9",
            "text": "Let $T$ be a binary search tree whose keys are distinct, let $x$ be a leaf node, and let $y$ be its parent. Show that $y.key$ is either the smallest key in $T$ larger than $x.key$ or the largest key in $T$ smaller than $x.key$.    If $x = y.left$, then calling successor on $x$ will result in no iterations of the while loop, and so will return $y$.  If $x = y.right$, the while loop for calling predecessor(see exercise 3) will be run no times, and so $y$ will be returned.",
            "title": "12.2-9"
        },
        {
            "location": "/Chap12/12.3/",
            "text": "12.3-1\n\n\n\n\nGive a recursive version of the $\\text{TREE-INSERT}$ procedure.\n\n\n\n\nINSERT\n(\nvalue\n)\n\n    \nroot\n \n=\n \nINSERT\n(\nvalue\n,\n \nroot\n)\n\n\n\n\n\nTREE\n-\nINSERT\n(\nvalue\n,\n \nnode\n)\n\n    \nif\n \nnode\n \n==\n \nNIL\n\n        \ninitialize\n \nBSTnode\n(\nvalue\n)\n\n    \nelse\n \nif\n \nnode\n.\nkey\n \n>\n \nvalue\n\n        \nnode\n.\nleft\n \n=\n \nINSERT\n(\nvalue\n,\n \nnode\n.\nleft\n)\n\n    \nelse\n\n        \nnode\n.\nright\n \n=\n \nINSERT\n(\nvalue\n,\n \nnode\n.\nright\n)\n\n    \nreturn\n \nnode\n\n\n\n\n\n12.3-2\n\n\n\n\nSuppose that we construct a binary search tree by repeatedly inserting distinct values into the tree. Argue that the number of nodes examined in searching for a value in the tree is one plus the number of nodes examined when the value was first inserted into the tree.\n\n\n\n\nNumber of nodes examined while searching also includes the node which is searched for, which isn't the case when we inserted it.\n\n\n12.3-3\n\n\n\n\nWe can sort a given set of $n$ numbers by first building a binary search tree containing these numbers (using $\\text{TREE-INSERT}$ repeatedly to insert the numbers one by one) and then printing the numbers by an inorder tree walk. What are the worst-case and best-case running times for this sorting algorithm?\n\n\n\n\nHere's the algorithm:\n\n\nTREE\n-\nSORT\n(\nA\n)\n\n    \nlet\n \nT\n \nbe\n \nan\n \nempty\n \nbinary\n \nsearch\n \ntree\n\n    \nfor\n \ni\n \n=\n \n1\n \nto\n \nn\n\n        \nTREE\n-\nINSERT\n(\nT\n,\n \nA\n[\ni\n])\n\n    \nINORDER\n-\nTREE\n-\nWALK\n(\nT\n.\nroot\n)\n\n\n\n\n\n\n\nWorst case: $\\Theta(n^2)$\u2014occurs when a linear chain of nodes results from the repeated $\\text{TREE-INSERT}$ operations.\n\n\nBest case: $\\Theta(n\\lg n)$\u2014occurs when a binary tree of height $\\Theta(\\lg n)$ results from the repeated $\\text{TREE-INSERT}$ operations.\n\n\n\n\n12.3-4\n\n\n\n\nIs the operation of deletion ''commutative'' in the sense that deleting $x$ and then $y$ from a binary search tree leaves the same tree as deleting $y$ and then $x$? Argue why it is or give a counterexample.\n\n\n\n\nIf node $z$ has two child, when the node $z$ is deleted we'll copy the satellite data of it's successor which is node $y$ and replace it's satellite data with it's right child's data. Now, if this happens the data structure pointing to $y$ will point to a node with a completely different satellite data.\n\n\nUpdate the data structure to point to the new node which contains satellite data of $y$.\n\n\n12.3-5\n\n\n\n\nSuppose that instead of each node $x$ keeping the attribute $x.p$, pointing to $x$'s parent, it keeps $x.succ$, pointing to $x$'s successor. Give pseudocode for $\\text{SEARCH}$, $\\text{INSERT}$, and $\\text{DELETE}$ on a binary search tree $T$ using this representation. These procedures should operate in time $O(h)$, where $h$ is the height of the tree $T$. ($\\textit{Hint:}$ You may wish to implement a subroutine that returns the parent of a node.)\n\n\n\n\nIn $\\text{SEARCH}$ and $\\text{INSERT}$, we do not need to know the parent of $x$.\n\n\nGET\n-\nPARENT\n(\nroot\n,\n \nnode\n)\n\n    \nif\n \nnode\n \n==\n \nNIL\n\n        \nreturn\n \nNIL\n\n    \nx\n \n=\n \nTREE\n-\nSUCCESSOR\n(\nTREE\n-\nMAXIMUM\n(\nnode\n))\n\n    \nif\n \nx\n \n!=\n \nNIL\n\n        \nx\n \n=\n \nroot\n\n    \nelse\n\n        \nif\n \nx\n.\nleft\n \n==\n \nnode\n\n            \nreturn\n \nx\n\n        \nx\n \n=\n \nx\n.\nleft\n\n    \nwhile\n \nx\n \n!=\n \nNIL\n \nand\n \nx\n.\nright\n \n!=\n \nnode\n\n        \nx\n \n=\n \nx\n.\nright\n\n    \nreturn\n \nx\n\n\n\n\n\nTherefore we can find $x$'s parent in $O(h)$, $\\text{DELETE}$ is $O(h + h) = O(h)$.\n\n\n12.3-6\n\n\n\n\nWhen node $z$ in $\\text{TREE-DELETE}$ has two children, we could choose node $y$ as its predecessor rather than its successor. What other changes to $\\text{TREE-DELETE}$ would be necessary if we did so? Some have argued that a fair strategy, giving equal priority to predecessor and successor, yields better empirical performance. How might $\\text{TREE-DELETE}$ be changed to implement such a fair strategy?\n\n\n\n\nUpdate line 5 so that $y$ is set equal to $\\text{TREE-MAXIMUM}(z.left)$. \n\n\nTo implement the fair strategy, we could randomly decide each time $\\text{TREE-DELETE}$ is called whether or not to use the predecessor or successor.",
            "title": "12.3 Insertion and deletion"
        },
        {
            "location": "/Chap12/12.3/#123-1",
            "text": "Give a recursive version of the $\\text{TREE-INSERT}$ procedure.   INSERT ( value ) \n     root   =   INSERT ( value ,   root )   TREE - INSERT ( value ,   node ) \n     if   node   ==   NIL \n         initialize   BSTnode ( value ) \n     else   if   node . key   >   value \n         node . left   =   INSERT ( value ,   node . left ) \n     else \n         node . right   =   INSERT ( value ,   node . right ) \n     return   node",
            "title": "12.3-1"
        },
        {
            "location": "/Chap12/12.3/#123-2",
            "text": "Suppose that we construct a binary search tree by repeatedly inserting distinct values into the tree. Argue that the number of nodes examined in searching for a value in the tree is one plus the number of nodes examined when the value was first inserted into the tree.   Number of nodes examined while searching also includes the node which is searched for, which isn't the case when we inserted it.",
            "title": "12.3-2"
        },
        {
            "location": "/Chap12/12.3/#123-3",
            "text": "We can sort a given set of $n$ numbers by first building a binary search tree containing these numbers (using $\\text{TREE-INSERT}$ repeatedly to insert the numbers one by one) and then printing the numbers by an inorder tree walk. What are the worst-case and best-case running times for this sorting algorithm?   Here's the algorithm:  TREE - SORT ( A ) \n     let   T   be   an   empty   binary   search   tree \n     for   i   =   1   to   n \n         TREE - INSERT ( T ,   A [ i ]) \n     INORDER - TREE - WALK ( T . root )    Worst case: $\\Theta(n^2)$\u2014occurs when a linear chain of nodes results from the repeated $\\text{TREE-INSERT}$ operations.  Best case: $\\Theta(n\\lg n)$\u2014occurs when a binary tree of height $\\Theta(\\lg n)$ results from the repeated $\\text{TREE-INSERT}$ operations.",
            "title": "12.3-3"
        },
        {
            "location": "/Chap12/12.3/#123-4",
            "text": "Is the operation of deletion ''commutative'' in the sense that deleting $x$ and then $y$ from a binary search tree leaves the same tree as deleting $y$ and then $x$? Argue why it is or give a counterexample.   If node $z$ has two child, when the node $z$ is deleted we'll copy the satellite data of it's successor which is node $y$ and replace it's satellite data with it's right child's data. Now, if this happens the data structure pointing to $y$ will point to a node with a completely different satellite data.  Update the data structure to point to the new node which contains satellite data of $y$.",
            "title": "12.3-4"
        },
        {
            "location": "/Chap12/12.3/#123-5",
            "text": "Suppose that instead of each node $x$ keeping the attribute $x.p$, pointing to $x$'s parent, it keeps $x.succ$, pointing to $x$'s successor. Give pseudocode for $\\text{SEARCH}$, $\\text{INSERT}$, and $\\text{DELETE}$ on a binary search tree $T$ using this representation. These procedures should operate in time $O(h)$, where $h$ is the height of the tree $T$. ($\\textit{Hint:}$ You may wish to implement a subroutine that returns the parent of a node.)   In $\\text{SEARCH}$ and $\\text{INSERT}$, we do not need to know the parent of $x$.  GET - PARENT ( root ,   node ) \n     if   node   ==   NIL \n         return   NIL \n     x   =   TREE - SUCCESSOR ( TREE - MAXIMUM ( node )) \n     if   x   !=   NIL \n         x   =   root \n     else \n         if   x . left   ==   node \n             return   x \n         x   =   x . left \n     while   x   !=   NIL   and   x . right   !=   node \n         x   =   x . right \n     return   x   Therefore we can find $x$'s parent in $O(h)$, $\\text{DELETE}$ is $O(h + h) = O(h)$.",
            "title": "12.3-5"
        },
        {
            "location": "/Chap12/12.3/#123-6",
            "text": "When node $z$ in $\\text{TREE-DELETE}$ has two children, we could choose node $y$ as its predecessor rather than its successor. What other changes to $\\text{TREE-DELETE}$ would be necessary if we did so? Some have argued that a fair strategy, giving equal priority to predecessor and successor, yields better empirical performance. How might $\\text{TREE-DELETE}$ be changed to implement such a fair strategy?   Update line 5 so that $y$ is set equal to $\\text{TREE-MAXIMUM}(z.left)$.   To implement the fair strategy, we could randomly decide each time $\\text{TREE-DELETE}$ is called whether or not to use the predecessor or successor.",
            "title": "12.3-6"
        },
        {
            "location": "/Chap12/12.4/",
            "text": "12.4-1\n\n\n\n\nProve equation $\\text{(12.3)}$.\n\n\n$$\\sum_{i = 0}^{n - 1} \\binom{i + 3}{3} = \\binom{n + 3}{4}. \\tag{12.3}$$\n\n\n\n\n\\begin{align}\n\\sum_{i = 0}^{n - 1} \\binom{i + 3}{3}\n    & =  \\sum_{i = 0}^{n - 1} \\frac{(i + 3)(i + 2)(i + 1)}{6} \\\\\n    & =  \\frac{1}{6} \\sum_{i = 0}^{n - 1} i^3 + 6i^2 + 11i + 6 \\\\\n    & =  \\frac{1}{6} (\\frac{(n - 1)^2 n^2}{4} + \\frac{6(n - 1)n(2n - 1)}{6} + \\frac{11n(n - 1)}{2} + 6n) \\\\\n    & =  \\frac{n(n + 1)(n + 2)(n + 3)}{24} \\\\\n    & =  \\binom{n + 3}{4}.\n\\end{align}\n\n\n12.4-2\n\n\n\n\nDescribe a binary search tree on n nodes such that the average depth of a node in the tree is $\\Theta(\\lg n)$ but the height of the tree is $\\omega(\\lg n)$. Give an asymptotic upper bound on the height of an $n$-node binary search tree in which the average depth of a node is $\\Theta(\\lg n)$.\n\n\n\n\nWe will answer the second part first. We shall show that if the average depth of a p node is $\\Theta(\\lg n)$, then the height of the tree is $O(n\\lg n)$. Then we will answer the first part by exhibiting that this bound is tight: there is a binary search tree with p average node depth $\\Theta(\\lg n)$ and height $\\Theta(\\sqrt{n\\lg n}) = \\omega(\\lg n)$.\n\n\nLemma\n \n\n\nIf the average depth of p a node in an $n$-node binary search tree is $\\Theta(\\lg n)$, then the height of the tree is $O(\\sqrt{n\\lg n})$.\n\n\nProof\n\n\nSuppose that an $n$-node binary search tree has average depth $\\Theta(\\lg n)$ and height $h$. Then there exists a path from the root to a node at depth $h$, and the depths of the nodes on this path are $0, 1, \\ldots, h$. Let $P$ be the set of nodes on this path and $Q$ be all other nodes. Then the average depth of a node is\n\n\n\\begin{align}\n\\frac{1}{n} \\Big(\\sum_{x \\in P} \\text{depth($x$)} + \\sum_{y \\in Q} \\text{depth($y$)}\\Big)\n    & \\ge \\frac{1}{n} \\sum_{x \\in P} \\text{depth($x$)} \\\\\n    & =   \\frac{1}{n} \\sum_{d = 0}^h d \\\\\n    & =   \\frac{1}{n} \\cdot \\Theta(h^2).\n\\end{align}\n\n\nFor the purpose of contradiction, suppose that $h$ is not $O(\\sqrt{n\\lg n})$, so that $h = \\omega(\\sqrt{n\\lg n})$. Then we have\n\n\n\\begin{align}\n\\frac{1}{n} \\cdot \\Theta(h^2)\n    & = \\frac{1}{n} \\cdot \\omega(n\\lg n) \\\\\n    & = \\omega(\\lg n),\n\\end{align}\n\n\nwhich contradicts the assumption that the average depth is $\\Theta(\\lg n)$. Thus, the height is $O(\\sqrt{n\\lg n})$.\n\n\nHere is an example of an $n$-node binary search tree with average node depth $\\Theta(\\lg n)$ but height $\\omega(\\lg n)$:\n\n\n\n\nIn this tree, $n - \\sqrt{n\\lg n}$ nodes are a complete binary tree, and the other $\\sqrt{n\\lg n}$ nodes protrude from below as a single chain. This tree has height\n\n\n\\begin{align}\n\\Theta(\\lg(n - \\sqrt{n\\lg n})) + \\sqrt{n\\lg n}\n    & = \\Theta(\\sqrt{n\\lg n}) \\\\\n    & = \\omega(\\lg n).\n\\end{align}\n\n\nTo compute an upper bound on the average depth of a node, we use $O(\\lg n)$ as an upper bound on the depth p of each of the $n - \\sqrt{n\\lg n}$ nodes in the complete binary tree part and $O(\\lg n + \\sqrt{n\\lg n})$ as an upper bound on the depth of each of the $\\sqrt{n\\lg n}$ nodes in the protruding chain. Thus, the average depth of a node is bounded from above by \n\n\n\\begin{align}\n\\frac{1}{n} \\cdot O(\\sqrt{n\\lg n}(\\lg n + \\sqrt{n\\lg n}) + (n - \\sqrt{n\\lg n})\\lg n)\n    & = \\frac{1}{n} \\cdot O(n\\lg n) \\\\\n    & = O(\\lg n).\n\\end{align}\n\n\nTo bound the average depth of a node from below, observe that the bottommost level of the complete binary tree part has $\\Theta(n - \\sqrt{n - \\lg n})$ nodes, and each of these nodes has depth $\\Theta(\\lg n)$. Thus, the average node depth is at least\n\n\n\\begin{align}\n\\frac{1}{n} \\cdot \\Theta((n - \\sqrt{n - \\lg n})\\lg n)\n    & = \\frac{1}{n} \\cdot \\Omega(n\\lg n) \\\\\n    & = \\Omega(\\lg n).\n\\end{align}\n\n\nBecause the average node depth is both $O(\\lg n)$ and $\\Omega(\\lg n)$, it is $\\Theta(\\lg n)$.\n\n\n12.4-3\n\n\n\n\nShow that the notion of a randomly chosen binary search tree on $n$ keys, where each binary search tree of $n$ keys is equally likely to be chosen, is different from the notion of a randomly built binary search tree given in this section. ($\\textit{Hint:}$ List the possibilities when $n = 3$.)\n\n\n\n\nFor $n = 3$, there are $5$ binary search trees. However, if we build the trees will a random permutation, the first tree will built twice.\n\n\n12.4-4\n\n\n\n\nShow that the function $f(x) = 2^x$ is convex.\n\n\n\n\nWe'll go one better than showing that the function $2^x$ is convex. Instead, we'll show that the function $c^x$ is convex, for any positive constant $c$. According to the definition of convexity on page 1199 of the text, a function $f(x)$ is convex if for all $x$ and $y$ and for all $0 \\le \\lambda \\le 1$, we have $f(\\lambda x + (1 - \\lambda)y) \\le \\lambda f(x) + (1 - \\lambda)f(y)$. Thus, we need to show that for all $0 \\le \\lambda \\le 1$, we have $c^{\\lambda x + (1 - \\lambda)y} \\le \\lambda c^x + (1 - \\lambda)c^y$.\n\n\nWe start by proving the following lemma.\n\n\nLemma\n\n\nFor any real numbers $a$ and $b$ and any positive real number $c$,\n\n\n$$c^a \\ge c^b + (a - b)c^b\\ln c.$$\n\n\nProof\n \n\n\nWe first show that for all real $r$, we have $c^r \\ge 1 + r\\ln c$. By equation $\\text{(3.12)}$ from the text, we have $e^x \\ge 1 + x$ for all real $x$. Let $x = r\\ln c$, so that $e^x = e^{r\\ln c} = (e^{\\ln c})^r = c^r$. Then we have $c^r = e^{r\\ln c} \\ge 1 + r\\ln c$.\n\n\nSubstituting $a - b$ for $r$ in the above inequality, we have $c^{a - b} \\ge 1 + (a - b)\\ln c$. Multiplying both sides by $c^b$ gives $c^a \\ge c^b + (a - b)c^b\\ln c$.  (lemma)\n\n\nNow we can show that $c^{\\lambda x + (1 - \\lambda)y} \\le \\lambda c^x + (1 - \\lambda)c^y$ for all $0 \\le \\lambda \\le 1$. For convenience, let $z = \\lambda x + (1 - \\lambda)y$.\n\n\nIn the inequality given by the lemma, substitute $x$ for $a$ and $z$ for $b$, giving\n\n\n$$c^x \\ge c^z + (x - z)c^z\\ln c.$$\n\n\nAlso substitute $y$ for $a$ and $z$ for $b$, giving\n\n\n$$c^y \\ge c^z + (y - z)c^z\\ln c.$$\n\n\nIf we multiply the first inequality by $\\lambda$ and the second by $1 - \\lambda$ and then add the resulting inequalities, we get\n\n\n\\begin{align}\n\\lambda c^x + (1 - \\lambda)c^y\n    & \\ge \\lambda(c^z + (x - z)c^z\\ln c) + (1 - \\lambda)(c^z + (y - z)c^z\\ln c) \\\\\n    & =   \\lambda c^z + \\lambda x c^z\\ln c - \\lambda z c^z\\ln c + (1 - \\lambda)c^z + (1 - \\lambda)yc^z\\ln c - (1 - \\lambda)zc^z\\ln c \\\\\n    & =   (\\lambda + (1 - \\lambda))c^z + (\\lambda x + (1 - \\lambda)y)c^z\\ln c - (\\lambda + (1 - \\lambda))zc^z\\ln c \\\\\n    & =   c^z + zc^z\\ln c - zc^z\\ln c \\\\\n    & =   c^z \\\\\n    & =   c^{\\lambda x + (1 - \\lambda)y},\n\\end{align}\n\n\nas we wished to show.\n\n\n12.4-5 $\\star$\n\n\n\n\nConsider $\\text{RANDOMIZED-QUICKSORT}$ operating on a sequence of $n$ distinct input numbers. Prove that for any constant $k > 0$, all but $O(1 / n^k)$ of the $n!$ input permutations yield an $O(n\\lg n)$ running time.\n\n\n\n\nLet $A(n)$ denote the probability that when quicksorting a list of length $n$, some pivot is selected to not be in the middle $n^{1 - k / 2}$ of the numberes. This doesn't happen with probability $\\frac{1}{n^{k / 2}}$. Then, we have that the two subproblems are of size $n_1, n_2$ with $n_1 + n_2 = n - 1$, then\n\n\n$$A(n) \\le \\frac{1}{n^{k / 2}} + T(n_1)+T(n_2).$$\n\n\nSince we bounded the depth by $O(1 / \\lg n)$ let ${a_{i, j}}_i$ be all the subproblem sizes left at depth $j$,\n\n\n$$A(n) \\le \\frac{1}{n^{k / 2}} \\sum_j\\sum_i \\frac{1}{a}.$$",
            "title": "12.4 Randomly built binary search trees"
        },
        {
            "location": "/Chap12/12.4/#124-1",
            "text": "Prove equation $\\text{(12.3)}$.  $$\\sum_{i = 0}^{n - 1} \\binom{i + 3}{3} = \\binom{n + 3}{4}. \\tag{12.3}$$   \\begin{align}\n\\sum_{i = 0}^{n - 1} \\binom{i + 3}{3}\n    & =  \\sum_{i = 0}^{n - 1} \\frac{(i + 3)(i + 2)(i + 1)}{6} \\\\\n    & =  \\frac{1}{6} \\sum_{i = 0}^{n - 1} i^3 + 6i^2 + 11i + 6 \\\\\n    & =  \\frac{1}{6} (\\frac{(n - 1)^2 n^2}{4} + \\frac{6(n - 1)n(2n - 1)}{6} + \\frac{11n(n - 1)}{2} + 6n) \\\\\n    & =  \\frac{n(n + 1)(n + 2)(n + 3)}{24} \\\\\n    & =  \\binom{n + 3}{4}.\n\\end{align}",
            "title": "12.4-1"
        },
        {
            "location": "/Chap12/12.4/#124-2",
            "text": "Describe a binary search tree on n nodes such that the average depth of a node in the tree is $\\Theta(\\lg n)$ but the height of the tree is $\\omega(\\lg n)$. Give an asymptotic upper bound on the height of an $n$-node binary search tree in which the average depth of a node is $\\Theta(\\lg n)$.   We will answer the second part first. We shall show that if the average depth of a p node is $\\Theta(\\lg n)$, then the height of the tree is $O(n\\lg n)$. Then we will answer the first part by exhibiting that this bound is tight: there is a binary search tree with p average node depth $\\Theta(\\lg n)$ and height $\\Theta(\\sqrt{n\\lg n}) = \\omega(\\lg n)$.  Lemma    If the average depth of p a node in an $n$-node binary search tree is $\\Theta(\\lg n)$, then the height of the tree is $O(\\sqrt{n\\lg n})$.  Proof  Suppose that an $n$-node binary search tree has average depth $\\Theta(\\lg n)$ and height $h$. Then there exists a path from the root to a node at depth $h$, and the depths of the nodes on this path are $0, 1, \\ldots, h$. Let $P$ be the set of nodes on this path and $Q$ be all other nodes. Then the average depth of a node is  \\begin{align}\n\\frac{1}{n} \\Big(\\sum_{x \\in P} \\text{depth($x$)} + \\sum_{y \\in Q} \\text{depth($y$)}\\Big)\n    & \\ge \\frac{1}{n} \\sum_{x \\in P} \\text{depth($x$)} \\\\\n    & =   \\frac{1}{n} \\sum_{d = 0}^h d \\\\\n    & =   \\frac{1}{n} \\cdot \\Theta(h^2).\n\\end{align}  For the purpose of contradiction, suppose that $h$ is not $O(\\sqrt{n\\lg n})$, so that $h = \\omega(\\sqrt{n\\lg n})$. Then we have  \\begin{align}\n\\frac{1}{n} \\cdot \\Theta(h^2)\n    & = \\frac{1}{n} \\cdot \\omega(n\\lg n) \\\\\n    & = \\omega(\\lg n),\n\\end{align}  which contradicts the assumption that the average depth is $\\Theta(\\lg n)$. Thus, the height is $O(\\sqrt{n\\lg n})$.  Here is an example of an $n$-node binary search tree with average node depth $\\Theta(\\lg n)$ but height $\\omega(\\lg n)$:   In this tree, $n - \\sqrt{n\\lg n}$ nodes are a complete binary tree, and the other $\\sqrt{n\\lg n}$ nodes protrude from below as a single chain. This tree has height  \\begin{align}\n\\Theta(\\lg(n - \\sqrt{n\\lg n})) + \\sqrt{n\\lg n}\n    & = \\Theta(\\sqrt{n\\lg n}) \\\\\n    & = \\omega(\\lg n).\n\\end{align}  To compute an upper bound on the average depth of a node, we use $O(\\lg n)$ as an upper bound on the depth p of each of the $n - \\sqrt{n\\lg n}$ nodes in the complete binary tree part and $O(\\lg n + \\sqrt{n\\lg n})$ as an upper bound on the depth of each of the $\\sqrt{n\\lg n}$ nodes in the protruding chain. Thus, the average depth of a node is bounded from above by   \\begin{align}\n\\frac{1}{n} \\cdot O(\\sqrt{n\\lg n}(\\lg n + \\sqrt{n\\lg n}) + (n - \\sqrt{n\\lg n})\\lg n)\n    & = \\frac{1}{n} \\cdot O(n\\lg n) \\\\\n    & = O(\\lg n).\n\\end{align}  To bound the average depth of a node from below, observe that the bottommost level of the complete binary tree part has $\\Theta(n - \\sqrt{n - \\lg n})$ nodes, and each of these nodes has depth $\\Theta(\\lg n)$. Thus, the average node depth is at least  \\begin{align}\n\\frac{1}{n} \\cdot \\Theta((n - \\sqrt{n - \\lg n})\\lg n)\n    & = \\frac{1}{n} \\cdot \\Omega(n\\lg n) \\\\\n    & = \\Omega(\\lg n).\n\\end{align}  Because the average node depth is both $O(\\lg n)$ and $\\Omega(\\lg n)$, it is $\\Theta(\\lg n)$.",
            "title": "12.4-2"
        },
        {
            "location": "/Chap12/12.4/#124-3",
            "text": "Show that the notion of a randomly chosen binary search tree on $n$ keys, where each binary search tree of $n$ keys is equally likely to be chosen, is different from the notion of a randomly built binary search tree given in this section. ($\\textit{Hint:}$ List the possibilities when $n = 3$.)   For $n = 3$, there are $5$ binary search trees. However, if we build the trees will a random permutation, the first tree will built twice.",
            "title": "12.4-3"
        },
        {
            "location": "/Chap12/12.4/#124-4",
            "text": "Show that the function $f(x) = 2^x$ is convex.   We'll go one better than showing that the function $2^x$ is convex. Instead, we'll show that the function $c^x$ is convex, for any positive constant $c$. According to the definition of convexity on page 1199 of the text, a function $f(x)$ is convex if for all $x$ and $y$ and for all $0 \\le \\lambda \\le 1$, we have $f(\\lambda x + (1 - \\lambda)y) \\le \\lambda f(x) + (1 - \\lambda)f(y)$. Thus, we need to show that for all $0 \\le \\lambda \\le 1$, we have $c^{\\lambda x + (1 - \\lambda)y} \\le \\lambda c^x + (1 - \\lambda)c^y$.  We start by proving the following lemma.  Lemma  For any real numbers $a$ and $b$ and any positive real number $c$,  $$c^a \\ge c^b + (a - b)c^b\\ln c.$$  Proof    We first show that for all real $r$, we have $c^r \\ge 1 + r\\ln c$. By equation $\\text{(3.12)}$ from the text, we have $e^x \\ge 1 + x$ for all real $x$. Let $x = r\\ln c$, so that $e^x = e^{r\\ln c} = (e^{\\ln c})^r = c^r$. Then we have $c^r = e^{r\\ln c} \\ge 1 + r\\ln c$.  Substituting $a - b$ for $r$ in the above inequality, we have $c^{a - b} \\ge 1 + (a - b)\\ln c$. Multiplying both sides by $c^b$ gives $c^a \\ge c^b + (a - b)c^b\\ln c$.  (lemma)  Now we can show that $c^{\\lambda x + (1 - \\lambda)y} \\le \\lambda c^x + (1 - \\lambda)c^y$ for all $0 \\le \\lambda \\le 1$. For convenience, let $z = \\lambda x + (1 - \\lambda)y$.  In the inequality given by the lemma, substitute $x$ for $a$ and $z$ for $b$, giving  $$c^x \\ge c^z + (x - z)c^z\\ln c.$$  Also substitute $y$ for $a$ and $z$ for $b$, giving  $$c^y \\ge c^z + (y - z)c^z\\ln c.$$  If we multiply the first inequality by $\\lambda$ and the second by $1 - \\lambda$ and then add the resulting inequalities, we get  \\begin{align}\n\\lambda c^x + (1 - \\lambda)c^y\n    & \\ge \\lambda(c^z + (x - z)c^z\\ln c) + (1 - \\lambda)(c^z + (y - z)c^z\\ln c) \\\\\n    & =   \\lambda c^z + \\lambda x c^z\\ln c - \\lambda z c^z\\ln c + (1 - \\lambda)c^z + (1 - \\lambda)yc^z\\ln c - (1 - \\lambda)zc^z\\ln c \\\\\n    & =   (\\lambda + (1 - \\lambda))c^z + (\\lambda x + (1 - \\lambda)y)c^z\\ln c - (\\lambda + (1 - \\lambda))zc^z\\ln c \\\\\n    & =   c^z + zc^z\\ln c - zc^z\\ln c \\\\\n    & =   c^z \\\\\n    & =   c^{\\lambda x + (1 - \\lambda)y},\n\\end{align}  as we wished to show.",
            "title": "12.4-4"
        },
        {
            "location": "/Chap12/12.4/#124-5-star",
            "text": "Consider $\\text{RANDOMIZED-QUICKSORT}$ operating on a sequence of $n$ distinct input numbers. Prove that for any constant $k > 0$, all but $O(1 / n^k)$ of the $n!$ input permutations yield an $O(n\\lg n)$ running time.   Let $A(n)$ denote the probability that when quicksorting a list of length $n$, some pivot is selected to not be in the middle $n^{1 - k / 2}$ of the numberes. This doesn't happen with probability $\\frac{1}{n^{k / 2}}$. Then, we have that the two subproblems are of size $n_1, n_2$ with $n_1 + n_2 = n - 1$, then  $$A(n) \\le \\frac{1}{n^{k / 2}} + T(n_1)+T(n_2).$$  Since we bounded the depth by $O(1 / \\lg n)$ let ${a_{i, j}}_i$ be all the subproblem sizes left at depth $j$,  $$A(n) \\le \\frac{1}{n^{k / 2}} \\sum_j\\sum_i \\frac{1}{a}.$$",
            "title": "12.4-5 $\\star$"
        },
        {
            "location": "/Chap12/Problems/12-1/",
            "text": "Equal keys pose a problem for the implementation of binary search trees.\n\n\na.\n What is the asymptotic performance of $\\text{TREE-INSERT}$ when used to insert $n$ items with identical keys into an initially empty binary search tree?\n\n\nWe propose to improve $\\text{TREE-INSERT}$ by testing before line 5 to determine whether $z.key = x.key$ and by testing before line 11 to determine whether $z.key = y.key$.\n\n\nIf equality holds, we implement one of the following strategies. For each strategy, find the asymptotic performance of inserting $n$ items with identical keys into an initially empty binary search tree. (The strategies are described for line 5, in which we compare the keys of $z$ and $x$. Substitute $y$ for $x$ to arrive at the strategies for line 11.)\n\n\nb.\n Keep a boolean flag $x.b$ at node $x$, and set $x$ to either $x.left$ or $x.right$ based on the value of $x.b$, which alternates between $\\text{FALSE}$ and $\\text{TRUE}$ each time we visit $x$ while inserting a node with the same key as $x$.\n\n\nc.\n Keep a list of nodes with equal keys at $x$, and insert $z$ into the list.\n\n\nd.\n Randomly set $x$ to either $x.left$ or $x.right$. (Give the worst-case performance and informally derive the expected running time.)\n\n\n\n\na.\n Each insertion will add the element to the right of the rightmost leaf because the inequality on line 11 will always evaluate to false. This will result in the runtime being $\\sum_{i = 1}^n i \\in \\Theta(n^2)$.\n\n\nb.\n This strategy will result in each of the two children subtrees having a difference in size at most one. This means that the height will be $\\Theta(\\lg n)$. So, the total runtime will be $\\sum_{i = 1}^n \\lg n \\in \\Theta(n\\lg n)$.\n\n\nc.\n This will only take linear time since the tree itself will be height $0$, and a single insertion into a list can be done in constant time.\n\n\nd.\n \n\n\n\n\nWorst-case:\n every random choice is to the right (or all to the left) this will result in the same behavior as in the first part of this problem, $\\Theta(n)$.\n\n\nExpected running time:\n notice that when randomly choosing, we will pick left roughly half the time, so, the tree will be roughly balanced, so, we have that the depth is roughly $\\lg(n)$, $\\Theta(n\\lg n)$.",
            "title": "12-1 Binary search trees with equal keys"
        },
        {
            "location": "/Chap12/Problems/12-2/",
            "text": "Given two strings $a = a_0a_1 \\ldots a_p$ and $b = b_0b_1 \\ldots b_q$, where each $a_i$ and each $b_j$ is in some ordered set of characters, we say that string $a$ is \nlexicographically less than\n string $b$ if either\n\n\n\n\nthere exists an integer $j$, where $0 \\le j \\le \\min(p, q)$, such that $a_i = b_i$ for all $i = 0, 1, \\ldots j - 1$ and $a_j < b_j$, or\n\n\n$p < q$ and $a_i = b_i$ for all $i = 0, 1, \\ldots, p$.\n\n\n\n\nFor example, if $a$ and $b$ are bit strings, then $10100 < 10110$ by rule 1 (letting $j = 3$) and $10100 < 101000$ by rule 2. This ordering is similar to that used in English-language dictionaries.\n\n\nThe \nradix tree\n data structure shown in Figure 12.5 stores the bit strings $1011, 10, 011, 100$, and $0$. When searching for a key $a = a_0a_1 \\ldots a_p$, we go left at a node of depth $i$ if $a_i = 0$ and right if $a_i = 1$. Let $S$ be a set of distinct bit strings whose lengths sum to $n$. Show how to use a radix tree to sort $S$ lexicographically in $\\Theta(n)$ time. For the example in Figure 12.5, the output of the sort should be the sequence $0, 011, 10, 100, 1011$.\n\n\n\n\nTo sort the strings of $S$, we first insert them into a radix tree, and then use a preorder tree walk to extract them in lexicographically sorted order. The tree walk outputs strings only for nodes that indicate the existence of a string (i.e., those that are lightly shaded in Figure 12.5 of the text).\n\n\nCorrectness:\n The preorder ordering is the correct order because:\n\n\n\n\nAny node's string is a prefix of all its descendants' strings and hence belongs before them in the sorted order (rule 2).\n\n\nA node's left descendants belong before its right descendants because the corresponding strings are identical up to that parent node, and in the next position the left subtree's strings have $0$ whereas the right subtree's strings have $1$ (rule 1).\n\n\n\n\nTime:\n $\\Theta(n)$.\n\n\n\n\nInsertion takes $\\Theta(n)$ time, since the insertion of each string takes time proportional to its length (traversing a path through the tree whose length is the length of the string), and the sum of all the string lengths is $n$.\n\n\nThe preorder tree walk takes $O(n)$ time. It is just like $\\text{INORDER-TREE-WALK}$ (it prints the current node and calls itself recursively on the left and right subtrees), so it takes time proportional to the number of nodes in the tree. The number of nodes is at most $1$ plus the sum $(n)$ of the lengths of the binary strings in the tree, because a length-$i$ string corresponds to a path through the root and $i$ other nodes, but a single node may be shared among many string paths.",
            "title": "12-2 Radix trees"
        },
        {
            "location": "/Chap12/Problems/12-3/",
            "text": "In this problem, we prove that the average depth of a node in a randomly built binary search tree with n nodes is $O(\\lg n)$. Although this result is weaker than that of Theorem 12.4, the technique we shall use reveals a surprising similarity between the building of a binary search tree and the execution of $\\text{RANDOMIZED-QUICKSORT}$ from Section 7.3.\n\n\nWe define the \ntotal path length\n $P(T)$ of a binary tree $T$ as the sum, over all nodes $x$ in $T$, of the depth of node $x$, which we denote by $d(x, T)$.\n\n\na.\n Argue that the average depth of a node in $T$ is\n\n\n$$\\frac{1}{n} \\sum_{x \\in T} d(x, T) = \\frac{1}{n} P(T).$$\n\n\nThus, we wish to show that the expected value of $P(T)$ is $O(n\\lg n)$.\n\n\nb.\n Let $T_L$ and $T_R$ denote the left and right subtrees of tree $T$, respectively. Argue that if $T$ has $n$ nodes, then\n\n\n$$P(T) = P(T_L) + P(T_R) + n - 1.$$\n\n\nc.\n Let $P(n)$ denote the average total path length of a randomly built binary search tree with n nodes. Show that\n\n\n$$P(n) = \\frac{1}{n} \\sum_{i = 0}^{n - 1} (P(i) + P(n - i - 1) + n - 1).$$\n\n\nd.\n Show how to rewrite $P(n)$ as\n\n\n$$P(n) = \\frac{2}{n} \\sum_{k = 1}^{n - 1} P(k) + \\Theta(n).$$\n\n\ne.\n Recalling the alternative analysis of the randomized version of quicksort given in Problem 7-3, conclude that $P(n) = O(n\\lg n)$.\nAt each recursive invocation of quicksort, we choose a random pivot element to partition the set of elements being sorted. Each node of a binary search tree partitions the set of elements that fall into the subtree rooted at that node.\n\n\nf.\n Describe an implementation of quicksort in which the comparisons to sort a set of elements are exactly the same as the comparisons to insert the elements into a binary search tree. (The order in which comparisons are made may differ, but the same comparisons must occur.)\n\n\n\n\na.\n The total path length $P(T)$ is defined as $\\sum_{x \\in T} d(x, T)$. Dividing both quantities by $n$ gives the desired equation.\n\n\nb.\n For any node $x$ in $T_L$, we have $d(x, T_L) = d(x, T) - 1$, since the distance to the root of $T_L$ is one less than the distance to the root of $T$. Similarly, for any node $x$ in $T_R$, we have $d(x, T_R) = d(x, T) - 1$. Thus if $T$ has $n$ nodes, we have\n\n\n$$P(T) = P(T_L) + P(T_R) + n - 1,$$\n\n\nsince each of the $n$ nodes of $T$ (except the root) is in either $T_L$ or $T_R$.\n\n\nc.\n If $T$ is a randomly built binary search tree, then the root is equally likely to be any of the $n$ elements in the tree, since the root is the first element inserted. It follows that the number of nodes in subtree $T_L$ is eqaully likely to be any integer in the set ${0, 1, \\ldots, n - 1}$. The definition of $P(n)$ as the average total path length of a randomly built binary search tree, along with part (b), gives us the recurrence\n\n\n$$P(n) = \\frac{1}{n} \\sum_{i = 0}^{n - 1} (P(i) + P(n - i - 1) + n - 1).$$\n\n\nd.\n Since $P(0) = 0$, and since for $k = 1, 2, \\ldots, n - 1$, each term $P(k)$ in the summation appears once as $P(i)$ and once as $P(n - i - 1)$, we can rewrite the equation from part (c) as\n\n\n$$P(n) = \\frac{2}{n} \\sum_{k = 1}^{n - 1} P(k) + \\Theta(n).$$\n\n\ne.\n Observe that if, in the recurrence $\\text{(7.6)}$ in part (c) Problem 7-3, we replace $\\text E[T(\\cdot)]$ by $P(\\cdot)$ and we replace $q$ by $k$, we get almost the same recurrence as in part (d) of Problem 12-3. The remaining difference is that in Problem 12-3(d), the summation starts at $1$ rather than $2$. Observe, however, that a binary tree with just one node has a total path length of $0$, so that $P(1) = 0$. Thus, we can rewrite the recurrence in Problem 12-3(d) as\n\n\n$$P(n) = \\frac{2}{n} \\sum_{k = 2}^{n - 1} P(k) + \\Theta(n)$$\n\n\nand use the same technique as was used in Problem 7-3 to solve it.\n\n\nWe start by solving part (d) of Problem 7-3: showing that\n\n\n$$\\sum_{k = 2}^{n - 1} k\\lg k \\le \\frac{1}{2}n^2\\lg n - \\frac{1}{8}n^2.$$\n\n\nFollowing the hint in Problem 7-3(d), we split the summation into two parts:\n\n\n$$\\sum_{k = 2}^{n - 1} k\\lg k = \\sum_{k = 2}^{\\lceil n / 2\\rceil - 1} k\\lg k + \\sum_{k = \\lceil n / 2\\rceil}^{n - 1} k\\lg k.$$\n\n\nThe $\\lg k$ in the first summation on the right is less than $\\lg(n / 2) = \\lg n - 1$, and the $\\lg k$ in the second summation is less than $\\lg n$. Thus,\n\n\n\\begin{align}\n\\sum_{k = 2}^{n - 1} k\\lg k \n    & <   (\\lg n - 1) \\sum_{k = 2}^{\\lceil n / 2\\rceil - 1} k + \\lg n \\sum_{k = \\lceil n / 2\\rceil}^{n - 1} k \\\\\n    & =   \\lg n \\sum_{k = 2}^{n - 1} k - \\sum_{k = 2}^{\\lceil n / 2 \\rceil - 1} k \\\\\n    & \\le \\frac{1}{2} n(n - 1)\\lg n - \\frac{1}{2}\\Big(\\frac{n}{1} - 1\\Big) \\frac{n}{2} \\\\\n    & \\le \\frac{1}{2} n^2\\lg n - \\frac{1}{8} n^2 \n\\end{align}\n\n\nif $n \\ge 2$.\n\n\nNow we show that the recurrence\n\n\n$$P(n) = \\frac{2}{n} \\sum_{k = 2}^{n - 1} P(k) + \\Theta(n)$$\n\n\nhas the solution $P(n) = O(n\\lg n)$. We use the substitution method. Assume inductively that $P(n) \\le an\\lg n + b$ for some positive constants $a$ and $b$ to be determined. We can pick $a$ and $b$ sufficiently large so that $an\\lg n + b \\ge P(1)$. Then, for $n > 1$, we have by substitution\n\n\n\\begin{align}\nP(n) & =   \\frac{2}{n} \\sum_{k = 2}^{n - 1} P(k) + \\Theta(n) \\\\\n     & \\le \\frac{2}{n} \\sum_{k = 2}^{n - 1} (ak\\lg k + b) + \\Theta(n) \\\\\n     & =   \\frac{2a}{n} \\sum_{k = 2}^{n - 1} k\\lg k + \\frac{2b}{n} (n - 2) + \\Theta(n) \\\\\n     & \\le \\frac{2a}{n} \\Big(\\frac{1}{2} n^2\\lg n - \\frac{1}{8}n^2\\Big) + \\frac{2b}{n}(n - 2) + \\Theta(n) \\\\\n     & \\le an\\lg n - \\frac{a}{4}n + 2b + \\Theta(n) \\\\\n     & =   an\\lg n + b + \\Big(\\Theta(n) + b - \\frac{a}{4}n\\Big) \\\\\n     & \\le an\\lg n + b,\n\\end{align}\n\n\nsince we can choose $a$ large enough so that $\\frac{a}{4}n$ dominates $\\Theta(n) + b$. Thus, $P(n) = O(n\\lg n)$.\n\n\nf.\n We draw an analogy between inserting an element into a subtree of a binary search tree and sorting a subarray in quicksort. Observe that once an element $x$ is chosen as the root of a subtree $T$, all elements that will be inserted after $x$ into $T$ will be compared to $x$. Similarly, observe that once an element $y$ is chosen as the pivot in a subarray $S$, all other elements in $S$ will be compared to $y$. Therefore, the quicksort implementation in which the comparisons are the same as those made when inserting into a binary search tree is simply to consider the pivots in the same order as the order in which the elements are inserted into the tree.",
            "title": "12-3 Average node depth in a randomly built binary search tree"
        },
        {
            "location": "/Chap12/Problems/12-4/",
            "text": "Let $b_n$ denote the number of different binary trees with $n$ nodes. In this problem, you will find a formula for $b_n$, as well as an asymptotic estimate.\n\n\na.\n Show that $b_0 = 1$ and that, for $n \\ge 1$,\n\n\n$$b_n = \\sum_{k = 0}^{n - 1} b_k b_{n - 1 - k}.$$\n\n\nb.\n Referring to Problem 4-4 for the definition of a generating function, let $B(x)$ be the generating function\n\n\n$$B(x) = \\sum_{n = 0}^\\infty b_n x^n.$$\n\n\nShow that $B(x) = xB(x)^2 + 1$, and hence one way to express $B(x)$ in closed form is\n\n\n$$B(x) = \\frac{1}{2x} (1 - \\sqrt{1 - 4x}).$$\n\n\nThe \nTaylor expansion\n of $f(x)$ around the point $x = a$ is given by\n\n\n$$f(x) = \\sum_{k = 0}^\\infty \\frac{f^{(k)}(a)}{k!} (x - a)^k,$$\n\n\nwhere $f^{(k)}(a)$ is the $k$th derivative of $f$ evaluated at $x$.\n\n\nc.\n Show that\n\n\n$$b_n = \\frac{1}{n + 1} \\binom{2n}{n}$$\n\n\n(the $n$th \nCatalan number\n) by using the Taylor expansion of $\\sqrt{1 - 4x}$ around $x = 0$.\n\n\nd.\n Show that\n\n\n$$b_n = \\frac{4^n}{\\sqrt{\\pi}n^{3 / 2}} (1 + O(1 / n)).$$\n\n\n\n\na.\n A root with two subtree.\n\n\nb.\n\n\n\\begin{align}\nB(x)^2 & = (b_0 x^0 + b_1 x^1 + b_2 x^2 + \\cdots) ^ 2 \\\\\n\n       & = b_0^2 x^0 + (b_0 b_1 + b_1 b_0) x^1 + (b_0 b_2 + b_1 b_1 + b_2 b_0) x^2 + \\cdots \\\\\n\n       & = \\sum_{k = 0}^0 b_k b_{0 - k} x^0 + \\sum_{k = 0}^1 b_k b_{1 - k} x^1 + \\sum_{k = 0}^2 b_k b_{2 - k} x^2 + \\cdots \\\\\n\n\\end{align}\n\n\n\\begin{align}\nxB(x)^2 + 1 & = 1 + \\sum_{k = 0}^0 b_k b_{1 - 1 - k} x^1 + \\sum_{k = 0}^2 b_k b_{2-1 - k} x^3 + \\sum_{k = 0}^2 b_k b_{3-1 - k} x^2 + \\cdots \\\\\n            & = 1 + b_1 x^1 + b_2 x^2 + b_3 x^3 + \\cdots \\\\\n            & = b_0 x^0 + b_1 x^1 + b_2 x^2 + b_3 x^3 + \\cdots \\\\\n            & = \\sum_{n = 0}^\\infty b_n x^n \\\\\n            & = B(x).\n\\end{align}\n\n\n\\begin{align}\nx B(x)^2 + 1 & = x \\cdot \\frac{1}{4x^2} (1 + 1 - 4x - 2\\sqrt{1 - 4x}) + 1 \\\\\n             & = \\frac{1}{4x} (2 - 2\\sqrt{1 - 4x}) - 1 + 1 \\\\\n             & = \\frac{1}{2x} (1 - \\sqrt{1 - 4x}) \\\\\n             & = B(x).\n\\end{align}\n\n\nc.\n Let $f(x) = \\sqrt{1 - 4x}$, the numerator of the derivative is\n\n\n\\begin{align}\n2 \\cdot (1 \\cdot 2) \\cdot (3 \\cdot 2) \\cdot (5 \\cdot 2) \\cdots \n    & = 2^k \\cdot \\prod_{i = 0}^{k - 2} (2k + 1) \\\\\n    & = 2^k \\cdot \\frac{(2(k - 1))!}{2^{k - 1}(k - 1)!} \\\\\n    & = \\frac{2(2(k - 1))!}{(k - 1)!}.\n\\end{align}\n\n\n$$f(x) = 1 - 2x - 2x^2 - 4 x^3 - 10x^4 - 28x^5 - \\cdots.$$\n\n\nThe coefficient is $\\frac{2(2(k - 1))!}{k!(k - 1)!}$.\n\n\n\\begin{align}\nB(x) & = \\frac{1}{2x}(1 - f(x)) \\\\\n     & = 1 + x + 2x^2 + 5x^3 + 14x^4 + \\cdots \\\\\n     & = \\sum_{n = 0}^\\infty \\frac{(2n)!}{(n + 1)!n!} x \\\\\n     & = \\sum_{n = 0}^\\infty \\frac{1}{n + 1} \\frac{(2n)!}{n!n!} x \\\\\n     & = \\sum_{n = 0}^\\infty \\frac{1}{n + 1} \\binom{2n}{n} x.\n\\end{align}\n\n\n$$b_n = \\frac{1}{n + 1} \\binom{2n}{n}.$$\n\n\nd.\n\n\n\\begin{align}\nb_n & =       \\frac{1}{n + 1} \\frac{(2n)!}{n!n!} \\\\\n    & \\approx \\frac{1}{n + 1} \\frac{\\sqrt{4 \\pi n}(2n / e)^{2n}}{2 \\pi n (n / e)^{2n}} \\\\\n    & =       \\frac{1}{n + 1} \\frac{4^n}{\\sqrt{\\pi n} } \\\\\n    & =       (\\frac{1}{n} + (\\frac{1}{n + 1} - \\frac{1}{n})) \\frac{4^n}{\\sqrt{\\pi n}} \\\\\n    & =       (\\frac{1}{n} - \\frac{1}{n^2 + n}) \\frac{4^n}{\\sqrt{\\pi n}} \\\\\n    & =       \\frac{1}{n} (1 - \\frac{1}{n + 1}) \\frac{4^n}{\\sqrt{\\pi n}} \\\\\n    & =       \\frac{4^n}{\\sqrt{\\pi}n^{3 / 2}} (1 + O(1 / n)).\n\\end{align}",
            "title": "12-4 Number of different binary trees"
        },
        {
            "location": "/Chap13/13.1/",
            "text": "13.1-1\n\n\n\n\nIn the style of Figure 13.1(a), draw the complete binary search tree of height $3$ on the keys $\\{1, 2, \\ldots, 15\\}$. Add the $\\text{NIL}$ leaves and color the nodes in three different ways such that the black-heights of the resulting red-black trees are $2$, $3$, and $4$.\n\n\n\n\n\n\n\n\nComplete binary tree of $height = 3$:\n\n\n\n\n\n\n\n\nRed-black tree of $black\\text-heights = 2$:\n\n\n\n\n\n\n\n\nRed-black tree of $black\\text-heights = 3$:\n\n\n\n\n\n\n\n\nRed-black tree of $black\\text-heights = 4$:\n\n\n\n\n\n\n\n\n13.1-2\n\n\n\n\nDraw the red-black tree that results after $\\text{TREE-INSERT}$ is called on the tree in Figure 13.1 with key $36$. If the inserted node is colored red, is the resulting tree a red-black tree? What if it is colored black?\n\n\n\n\n\n\nIf the inserted node is colored red, the tree doesn't satisfy property 4 because $35$ will be the parent of $36$, which is also colored red.\n\n\nIf the inserted node is colored black, the tree doesn't satisfy property 5 because there will be two paths from node $38$ to $T.nil$ which contain different numbers of black nodes. \n\n\n\n\nWe don't draw the \nwrong\n red-black tree; however, we draw the adjusted correct tree:\n\n\n\n\n13.1-3\n\n\n\n\nLet us define a \nrelaxed red-black tree\n as a binary search tree that satisfies red-black properties 1, 3, 4, and 5. In other words, the root may be either red or black. Consider a relaxed red-black tree $T$ whose root is red. If we color the root of $T$ black but make no other changes to $T$, is the resulting tree a red-black tree?\n\n\n\n\nIf we color the root of a relaxed red-black tree black but make no other changes, the resulting tree is a red-black tree. Not even any black-heights change.\n\n\n13.1-4\n\n\n\n\nSuppose that we \"absorb\" every red node in a red-black tree into its black parent, so that the children of the red node become children of the black parent. (Ignore what happens to the keys.) What are the possible degrees of a black node after all its red children are absorbed? What can you say about the depths of the leaves of the resulting tree?\n\n\n\n\nAfter absorbing each red node into its black parent, the degree of each node black node is\n\n\n\n\n$2$, if both children were already black,\n\n\n$3$, if one child was black and one was red, or\n\n\n$4$, if both children were red.\n\n\n\n\nAll leaves of the resulting tree have the same depth.\n\n\n13.1-5\n\n\n\n\nShow that the longest simple path from a node $x$ in a red-black tree to a descendant leaf has length at most twice that of the shortest simple path from node $x$ to a descendant leaf.\n\n\n\n\nIn the longest path, at least every other node is black. In the shortest path, at most every node is black. Since the two paths contain equal numbers of black nodes, the length of the longest path is at most twice the length of the shortest path.\n\n\nWe can say this more precisely, as follows:\n\n\nSince every path contains $\\text{bh}(x)$ black nodes, even the shortest path from $x$ to a descendant leaf has length at least $\\text{bh}(x)$. By definition, the longest path from $x$ to a descendant leaf has length $\\text{height}(x)$. Since the longest path has $\\text{bh}(x)$ black nodes and at least half the nodes on the longest path are black (by property 4), $\\text{bh}(x) \\ge \\text{height}(x) / 2$, so\n\n\nlength of longest path $= \\text{height}(x) \\le 2 \\cdot \\text{bh}(x) \\le$ twice length of shortest path.\n\n\n13.1-6\n\n\n\n\nWhat is the largest possible number of internal nodes in a red-black tree with black-height $k$? What is the smallest possible number?\n\n\n\n\n\n\nThe largest is the complete binary tree with height $2k$, which has $2^{2k} - 1$ internal nodes.\n\n\nThe smallest is a black chain with length $k$, which has $k$ internal nodes.\n\n\n\n\n13.1-7\n\n\n\n\nDescribe a red-black tree on $n$ keys that realizes the largest possible ratio of red internal nodes to black internal nodes. What is this ratio? What tree has the smallest possible ratio, and what is the ratio?\n\n\n\n\n\n\nThe largest ratio is $2$, each black node has two red children.\n\n\nThe smallest ratio is $0$.",
            "title": "13.1 Properties of red-black trees"
        },
        {
            "location": "/Chap13/13.1/#131-1",
            "text": "In the style of Figure 13.1(a), draw the complete binary search tree of height $3$ on the keys $\\{1, 2, \\ldots, 15\\}$. Add the $\\text{NIL}$ leaves and color the nodes in three different ways such that the black-heights of the resulting red-black trees are $2$, $3$, and $4$.     Complete binary tree of $height = 3$:     Red-black tree of $black\\text-heights = 2$:     Red-black tree of $black\\text-heights = 3$:     Red-black tree of $black\\text-heights = 4$:",
            "title": "13.1-1"
        },
        {
            "location": "/Chap13/13.1/#131-2",
            "text": "Draw the red-black tree that results after $\\text{TREE-INSERT}$ is called on the tree in Figure 13.1 with key $36$. If the inserted node is colored red, is the resulting tree a red-black tree? What if it is colored black?    If the inserted node is colored red, the tree doesn't satisfy property 4 because $35$ will be the parent of $36$, which is also colored red.  If the inserted node is colored black, the tree doesn't satisfy property 5 because there will be two paths from node $38$ to $T.nil$ which contain different numbers of black nodes.    We don't draw the  wrong  red-black tree; however, we draw the adjusted correct tree:",
            "title": "13.1-2"
        },
        {
            "location": "/Chap13/13.1/#131-3",
            "text": "Let us define a  relaxed red-black tree  as a binary search tree that satisfies red-black properties 1, 3, 4, and 5. In other words, the root may be either red or black. Consider a relaxed red-black tree $T$ whose root is red. If we color the root of $T$ black but make no other changes to $T$, is the resulting tree a red-black tree?   If we color the root of a relaxed red-black tree black but make no other changes, the resulting tree is a red-black tree. Not even any black-heights change.",
            "title": "13.1-3"
        },
        {
            "location": "/Chap13/13.1/#131-4",
            "text": "Suppose that we \"absorb\" every red node in a red-black tree into its black parent, so that the children of the red node become children of the black parent. (Ignore what happens to the keys.) What are the possible degrees of a black node after all its red children are absorbed? What can you say about the depths of the leaves of the resulting tree?   After absorbing each red node into its black parent, the degree of each node black node is   $2$, if both children were already black,  $3$, if one child was black and one was red, or  $4$, if both children were red.   All leaves of the resulting tree have the same depth.",
            "title": "13.1-4"
        },
        {
            "location": "/Chap13/13.1/#131-5",
            "text": "Show that the longest simple path from a node $x$ in a red-black tree to a descendant leaf has length at most twice that of the shortest simple path from node $x$ to a descendant leaf.   In the longest path, at least every other node is black. In the shortest path, at most every node is black. Since the two paths contain equal numbers of black nodes, the length of the longest path is at most twice the length of the shortest path.  We can say this more precisely, as follows:  Since every path contains $\\text{bh}(x)$ black nodes, even the shortest path from $x$ to a descendant leaf has length at least $\\text{bh}(x)$. By definition, the longest path from $x$ to a descendant leaf has length $\\text{height}(x)$. Since the longest path has $\\text{bh}(x)$ black nodes and at least half the nodes on the longest path are black (by property 4), $\\text{bh}(x) \\ge \\text{height}(x) / 2$, so  length of longest path $= \\text{height}(x) \\le 2 \\cdot \\text{bh}(x) \\le$ twice length of shortest path.",
            "title": "13.1-5"
        },
        {
            "location": "/Chap13/13.1/#131-6",
            "text": "What is the largest possible number of internal nodes in a red-black tree with black-height $k$? What is the smallest possible number?    The largest is the complete binary tree with height $2k$, which has $2^{2k} - 1$ internal nodes.  The smallest is a black chain with length $k$, which has $k$ internal nodes.",
            "title": "13.1-6"
        },
        {
            "location": "/Chap13/13.1/#131-7",
            "text": "Describe a red-black tree on $n$ keys that realizes the largest possible ratio of red internal nodes to black internal nodes. What is this ratio? What tree has the smallest possible ratio, and what is the ratio?    The largest ratio is $2$, each black node has two red children.  The smallest ratio is $0$.",
            "title": "13.1-7"
        },
        {
            "location": "/Chap13/13.2/",
            "text": "13.2-1\n\n\n\n\nWrite pseudocode for $\\text{RIGHT-ROTATE}$.\n\n\n\n\nRIGHT\n-\nROTATE\n(\nT\n,\n \ny\n)\n\n    \nx\n \n=\n \ny\n->\nleft\n\n    \ny\n->\nleft\n \n=\n \nx\n->\nright\n\n    \nif\n \nx\n->\nright\n \n!=\n \nT\n.\nnil\n\n        \nx\n->\nright\n.\np\n \n=\n \ny\n\n    \nx\n.\np\n \n=\n \ny\n.\np\n\n    \nif\n \ny\n.\np\n \n==\n \nT\n.\nnil\n\n        \nT\n.\nroot\n \n=\n \nx\n\n    \nelse\n \nif\n \ny\n \n==\n \ny\n.\np\n->\nright\n\n        \ny\n.\np\n->\nright\n \n=\n \nx\n\n    \nelse\n \ny\n.\np\n->\nleft\n \n=\n \nx\n\n    \nx\n->\nright\n \n=\n \ny\n\n    \ny\n.\np\n \n=\n \nx\n\n\n\n\n\n13.2-2\n\n\n\n\nArgue that in every $n$-node binary search tree, there are exactly $n - 1$ possible rotations.\n\n\n\n\nEvery node can rotate with its parent, only the root does not have a parent, therefore there are $n - 1$ possible rotations.\n\n\n13.2-3\n\n\n\n\nLet $a$, $b$, and $c$ be arbitrary nodes in subtrees $\\alpha$, $\\beta$, and $\\gamma$, respectively, in the left tree of Figure 13.2. How do the depths of $a$, $b$, and $c$ change when a left rotation is performed on node $x$ in the figure?\n\n\n\n\n\n\n$a$: increase by $1$.\n\n\n$b$: unchanged.\n\n\n$c$: decrease by $1$.\n\n\n\n\n13.2-4\n\n\n\n\nShow that any arbitrary $n$-node binary search tree can be transformed into any other arbitrary $n$-node binary search tree using $O(n)$ rotations. ($\\textit{Hint:}$ First show that at most $n - 1$ right rotations suffice to transform the tree into a right-going chain.)\n\n\n\n\nSince the exercise asks about binary search trees rather than the more specific redblack trees, we assume here that leaves are full-fledged nodes, and we ignore the sentinels.\n\n\nTaking the book's hint, we start by showing that with at most $n - 1$ right rotations, we can convert any binary search tree into one that is just a right-going chain. The idea is simple. Let us define the \nright spine\n as the root and all descendants of the root that are reachable by following only right pointers from the root. A binary search tree that is just a right-going chain has all n nodes in the right spine.\n\n\nAs long as the tree is not just a right spine, repeatedly find some node $y$ on the right spine that has a non-leaf left child $x$ and then perform a right rotation on $y$:\n\n\n\n\n(In the above figure, note that any of $\\alpha$, $\\beta$, and $\\gamma$ can be an empty subtree.) Observe that this right rotation adds $x$ to the right spine, and no other nodes leave the right spine. Thus, this right rotation increases the number of nodes in the right spine by $1$. Any binary search tree starts out with at least one node\u2014the root\u2014in the right spine. Moreover, if there are any nodes not on the right spine, then at least one such node has a parent on the right spine. Thus, at most $n - 1$ right rotations are needed to put all nodes in the right spine, so that the tree consists of a single right-going chain.\n\n\nIf we knew the sequence of right rotations that transforms an arbitrary binary search tree $T$ to a single right-going chain $T'$, then we could perform this sequence in reverse\u2014turning each right rotation into its inverse left rotation\u2014to transform $T'$ back into $T$.\n\n\nTherefore, here is how we can transform any binary search tree $T_1$ into any other binary search tree $T_2$. Let $T'$ be the unique right-going chain consisting of the nodes of $T_1$ (which is the same as the nodes of $T_2$). Let $r = \\langle r_1, r_2, \\ldots, r_k \\rangle$ be a sequence of right rotations that transforms $T_1$ to $T'$, and let $r' = \\langle r_1', r_2', \\ldots, r_{k'}' \\rangle$ be a sequence of right rotations that transforms $T_2$ to $T'$. We know that there exist sequences $r$ and $r'$ with $k$, $k' \\le n - 1$. For each right rotation $r_i'$, let $l_i'$ be the corresponding inverse left rotation. Then the sequence $\\langle r_1, r_2, \\ldots, r_k, l_{k'}', l_{k' - 1}', \\ldots, l_2', l_1' \\rangle$ transforms $T_1$ to $T_2$ in at most $2n - 2$ rotations.\n\n\n13.2-5 $\\star$\n\n\n\n\nWe say that a binary search tree $T_1$ can be \nright-converted\n to binary search tree $T_2$ if it is possible to obtain $T_2$ from $T_1$ via a series of calls to $\\text{RIGHT-ROTATE}$. Give an example of two trees $T_1$ and $T_2$ such that $T_1$ cannot be right-converted to $T_2$. Then, show that if a tree $T_1$ can be right-converted to $T_2$, it can be right-converted using $O(n^2)$ calls to $\\text{RIGHT-ROTATE}$.\n\n\n\n\nWe can use $O(n)$ calls to rotate the node which is the root in $T_2$ to $T_1$'s root, then use the same operation in the two subtrees. There are $n$ nodes, therefore the upper bound is $O(n^2)$.",
            "title": "13.2 Rotations"
        },
        {
            "location": "/Chap13/13.2/#132-1",
            "text": "Write pseudocode for $\\text{RIGHT-ROTATE}$.   RIGHT - ROTATE ( T ,   y ) \n     x   =   y -> left \n     y -> left   =   x -> right \n     if   x -> right   !=   T . nil \n         x -> right . p   =   y \n     x . p   =   y . p \n     if   y . p   ==   T . nil \n         T . root   =   x \n     else   if   y   ==   y . p -> right \n         y . p -> right   =   x \n     else   y . p -> left   =   x \n     x -> right   =   y \n     y . p   =   x",
            "title": "13.2-1"
        },
        {
            "location": "/Chap13/13.2/#132-2",
            "text": "Argue that in every $n$-node binary search tree, there are exactly $n - 1$ possible rotations.   Every node can rotate with its parent, only the root does not have a parent, therefore there are $n - 1$ possible rotations.",
            "title": "13.2-2"
        },
        {
            "location": "/Chap13/13.2/#132-3",
            "text": "Let $a$, $b$, and $c$ be arbitrary nodes in subtrees $\\alpha$, $\\beta$, and $\\gamma$, respectively, in the left tree of Figure 13.2. How do the depths of $a$, $b$, and $c$ change when a left rotation is performed on node $x$ in the figure?    $a$: increase by $1$.  $b$: unchanged.  $c$: decrease by $1$.",
            "title": "13.2-3"
        },
        {
            "location": "/Chap13/13.2/#132-4",
            "text": "Show that any arbitrary $n$-node binary search tree can be transformed into any other arbitrary $n$-node binary search tree using $O(n)$ rotations. ($\\textit{Hint:}$ First show that at most $n - 1$ right rotations suffice to transform the tree into a right-going chain.)   Since the exercise asks about binary search trees rather than the more specific redblack trees, we assume here that leaves are full-fledged nodes, and we ignore the sentinels.  Taking the book's hint, we start by showing that with at most $n - 1$ right rotations, we can convert any binary search tree into one that is just a right-going chain. The idea is simple. Let us define the  right spine  as the root and all descendants of the root that are reachable by following only right pointers from the root. A binary search tree that is just a right-going chain has all n nodes in the right spine.  As long as the tree is not just a right spine, repeatedly find some node $y$ on the right spine that has a non-leaf left child $x$ and then perform a right rotation on $y$:   (In the above figure, note that any of $\\alpha$, $\\beta$, and $\\gamma$ can be an empty subtree.) Observe that this right rotation adds $x$ to the right spine, and no other nodes leave the right spine. Thus, this right rotation increases the number of nodes in the right spine by $1$. Any binary search tree starts out with at least one node\u2014the root\u2014in the right spine. Moreover, if there are any nodes not on the right spine, then at least one such node has a parent on the right spine. Thus, at most $n - 1$ right rotations are needed to put all nodes in the right spine, so that the tree consists of a single right-going chain.  If we knew the sequence of right rotations that transforms an arbitrary binary search tree $T$ to a single right-going chain $T'$, then we could perform this sequence in reverse\u2014turning each right rotation into its inverse left rotation\u2014to transform $T'$ back into $T$.  Therefore, here is how we can transform any binary search tree $T_1$ into any other binary search tree $T_2$. Let $T'$ be the unique right-going chain consisting of the nodes of $T_1$ (which is the same as the nodes of $T_2$). Let $r = \\langle r_1, r_2, \\ldots, r_k \\rangle$ be a sequence of right rotations that transforms $T_1$ to $T'$, and let $r' = \\langle r_1', r_2', \\ldots, r_{k'}' \\rangle$ be a sequence of right rotations that transforms $T_2$ to $T'$. We know that there exist sequences $r$ and $r'$ with $k$, $k' \\le n - 1$. For each right rotation $r_i'$, let $l_i'$ be the corresponding inverse left rotation. Then the sequence $\\langle r_1, r_2, \\ldots, r_k, l_{k'}', l_{k' - 1}', \\ldots, l_2', l_1' \\rangle$ transforms $T_1$ to $T_2$ in at most $2n - 2$ rotations.",
            "title": "13.2-4"
        },
        {
            "location": "/Chap13/13.2/#132-5-star",
            "text": "We say that a binary search tree $T_1$ can be  right-converted  to binary search tree $T_2$ if it is possible to obtain $T_2$ from $T_1$ via a series of calls to $\\text{RIGHT-ROTATE}$. Give an example of two trees $T_1$ and $T_2$ such that $T_1$ cannot be right-converted to $T_2$. Then, show that if a tree $T_1$ can be right-converted to $T_2$, it can be right-converted using $O(n^2)$ calls to $\\text{RIGHT-ROTATE}$.   We can use $O(n)$ calls to rotate the node which is the root in $T_2$ to $T_1$'s root, then use the same operation in the two subtrees. There are $n$ nodes, therefore the upper bound is $O(n^2)$.",
            "title": "13.2-5 $\\star$"
        },
        {
            "location": "/Chap13/13.3/",
            "text": "13.3-1\n\n\n\n\nIn line 16 of $\\text{RB-INSERT}$, we set the color of the newly inserted node $z$ to red. Observe that if we had chosen to set $z$'s color to black, then property 4 of a red-black tree would not be violated. Why didn't we choose to set $z$'s color to black?\n\n\n\n\nIf we chose to set the color of $z$ to black then we would be violating property 5 of being a red-black tree. Because any path from the root to a leaf under $z$ would have one more black node than the paths to the other leaves.\n\n\n13.3-2\n\n\n\n\nShow the red-black trees that result after successively inserting the keys $41, 38, 31, 12, 19, 8$ into an initially empty red-black tree.\n\n\n\n\n\n\n\n\ninsert $41$:\n\n\n\n\n\n\n\n\ninsert $38$:\n\n\n\n\n\n\n\n\ninsert $31$:\n\n\n\n\n\n\n\n\ninsert $12$:\n\n\n\n\n\n\n\n\ninsert $19$:\n\n\n\n\n\n\n\n\ninsert $8$:\n\n\n\n\n\n\n\n\n13.3-3\n\n\n\n\nSuppose that the black-height of each of the subtrees $\\alpha, \\beta, \\gamma, \\delta, \\epsilon$ in Figures 13.5 and 13.6 is $k$. Label each node in each figure with its black-height to verify that the indicated transformation preserves property 5.\n\n\n\n\nIn Figure 13.5, nodes $A$, $B$, and $D$ have black-height $k + 1$ in all cases, because each of their subtrees has black-height $k$ and a black root. Node $C$ has black-height $k + 1$ on the left (because its red children have black-height $k + 1$) and black-height $k + 2$ on the right (because its black children have black-height $k + 1$).\n\n\n\n\nIn Figure 13.6, nodes $A$, $B$, and $C$ have black-height $k + 1$ in all cases. At left and in the middle, each of $A$'s and $B$'s subtrees has black-height $k$ and a black root, while $C$ has one such subtree and a red child with black-height $k + 1$. At the right, each of $A$'s and $C$'s subtrees has black-height $k$ and a black root, while $B$'s red children each have black-height $k + 1$.\n\n\n\n\nProperty 5 is preserved by the transformations. We have shown above that the black-height is well-defined within the subtrees pictured, so property 5 is preserved within those subtrees. Property 5 is preserved for the tree containing the subtrees pictured, because every path through these subtrees to a leaf contributes $k + 2$ black nodes.\n\n\n13.3-4\n\n\n\n\nProfessor Teach is concerned that $\\text{RB-INSERT-FIXUP}$ might set $T.nil.color$ to $\\text{RED}$, in which case the test in line 1 would not cause the loop to terminate when $z$ is the root. Show that the professor's concern is unfounded by arguing that $\\text{RB-INSERT-FIXUP}$ never sets $T.nil.color$ to $\\text{RED}$.\n\n\n\n\nColors are set to red only in cases 1 and 3, and in both situations, it is $z.p.p$ that is reddened. If $z.p.p$ is the sentinel, then $z.p$ is the root. By part (b) of the loop invariant and line 1 of $\\text{RB-INSERT-FIXUP}$, if $z.p$ is the root, then we have dropped out of the loop. The only subtlety is in case 2, where we set $z = z.p$ before coloring $z.p.p$ red. Because we rotate before the recoloring, the identity of $z.p.p$ is the same before and after case 2, so there's no problem.\n\n\n13.3-5\n\n\n\n\nConsider a red-black tree formed by inserting $n$ nodes with $\\text{RB-INSERT}$. Argue that if $n > 1$, the tree has at least one red node.\n\n\n\n\n\n\nCase 1:\n $z$ and $z.p.p$ are $\\text{RED}$, if the loop terminates, then $z$ could not be the root, thus $z$ is $\\text{RED}$ after the fix up.\n\n\nCase 2:\n $z$ and $z.p$ are $\\text{RED}$, and after the rotation $z.p$ could not be the root, thus $z.p$ is $\\text{RED}$ after the fix up.\n\n\nCase 3:\n $z$ is $\\text{RED}$ and $z$ could not be the root, thus $z$ is $\\text{RED}$ after the fix up.\n\n\n\n\nTherefore, there is always at least one red node.\n\n\n13.3-6\n\n\n\n\nSuggest how to implement $\\text{RB-INSERT}$ efficiently if the representation for red-black trees includes no storage for parent pointers.\n\n\n\n\nUse stack to record the path to the inserted node, then parent is the top element in the stack.\n\n\n\n\nCase 1:\n we pop $z.p$ and $z.p.p$.\n\n\nCase 2:\n we pop $z.p$ and $z.p.p$, then push $z.p.p$ and $z$.\n\n\nCase 3:\n we pop $z.p$, $z.p.p$ and $z.p.p.p$, then push $z.p$.",
            "title": "13.3 Insertion"
        },
        {
            "location": "/Chap13/13.3/#133-1",
            "text": "In line 16 of $\\text{RB-INSERT}$, we set the color of the newly inserted node $z$ to red. Observe that if we had chosen to set $z$'s color to black, then property 4 of a red-black tree would not be violated. Why didn't we choose to set $z$'s color to black?   If we chose to set the color of $z$ to black then we would be violating property 5 of being a red-black tree. Because any path from the root to a leaf under $z$ would have one more black node than the paths to the other leaves.",
            "title": "13.3-1"
        },
        {
            "location": "/Chap13/13.3/#133-2",
            "text": "Show the red-black trees that result after successively inserting the keys $41, 38, 31, 12, 19, 8$ into an initially empty red-black tree.     insert $41$:     insert $38$:     insert $31$:     insert $12$:     insert $19$:     insert $8$:",
            "title": "13.3-2"
        },
        {
            "location": "/Chap13/13.3/#133-3",
            "text": "Suppose that the black-height of each of the subtrees $\\alpha, \\beta, \\gamma, \\delta, \\epsilon$ in Figures 13.5 and 13.6 is $k$. Label each node in each figure with its black-height to verify that the indicated transformation preserves property 5.   In Figure 13.5, nodes $A$, $B$, and $D$ have black-height $k + 1$ in all cases, because each of their subtrees has black-height $k$ and a black root. Node $C$ has black-height $k + 1$ on the left (because its red children have black-height $k + 1$) and black-height $k + 2$ on the right (because its black children have black-height $k + 1$).   In Figure 13.6, nodes $A$, $B$, and $C$ have black-height $k + 1$ in all cases. At left and in the middle, each of $A$'s and $B$'s subtrees has black-height $k$ and a black root, while $C$ has one such subtree and a red child with black-height $k + 1$. At the right, each of $A$'s and $C$'s subtrees has black-height $k$ and a black root, while $B$'s red children each have black-height $k + 1$.   Property 5 is preserved by the transformations. We have shown above that the black-height is well-defined within the subtrees pictured, so property 5 is preserved within those subtrees. Property 5 is preserved for the tree containing the subtrees pictured, because every path through these subtrees to a leaf contributes $k + 2$ black nodes.",
            "title": "13.3-3"
        },
        {
            "location": "/Chap13/13.3/#133-4",
            "text": "Professor Teach is concerned that $\\text{RB-INSERT-FIXUP}$ might set $T.nil.color$ to $\\text{RED}$, in which case the test in line 1 would not cause the loop to terminate when $z$ is the root. Show that the professor's concern is unfounded by arguing that $\\text{RB-INSERT-FIXUP}$ never sets $T.nil.color$ to $\\text{RED}$.   Colors are set to red only in cases 1 and 3, and in both situations, it is $z.p.p$ that is reddened. If $z.p.p$ is the sentinel, then $z.p$ is the root. By part (b) of the loop invariant and line 1 of $\\text{RB-INSERT-FIXUP}$, if $z.p$ is the root, then we have dropped out of the loop. The only subtlety is in case 2, where we set $z = z.p$ before coloring $z.p.p$ red. Because we rotate before the recoloring, the identity of $z.p.p$ is the same before and after case 2, so there's no problem.",
            "title": "13.3-4"
        },
        {
            "location": "/Chap13/13.3/#133-5",
            "text": "Consider a red-black tree formed by inserting $n$ nodes with $\\text{RB-INSERT}$. Argue that if $n > 1$, the tree has at least one red node.    Case 1:  $z$ and $z.p.p$ are $\\text{RED}$, if the loop terminates, then $z$ could not be the root, thus $z$ is $\\text{RED}$ after the fix up.  Case 2:  $z$ and $z.p$ are $\\text{RED}$, and after the rotation $z.p$ could not be the root, thus $z.p$ is $\\text{RED}$ after the fix up.  Case 3:  $z$ is $\\text{RED}$ and $z$ could not be the root, thus $z$ is $\\text{RED}$ after the fix up.   Therefore, there is always at least one red node.",
            "title": "13.3-5"
        },
        {
            "location": "/Chap13/13.3/#133-6",
            "text": "Suggest how to implement $\\text{RB-INSERT}$ efficiently if the representation for red-black trees includes no storage for parent pointers.   Use stack to record the path to the inserted node, then parent is the top element in the stack.   Case 1:  we pop $z.p$ and $z.p.p$.  Case 2:  we pop $z.p$ and $z.p.p$, then push $z.p.p$ and $z$.  Case 3:  we pop $z.p$, $z.p.p$ and $z.p.p.p$, then push $z.p$.",
            "title": "13.3-6"
        },
        {
            "location": "/Chap13/13.4/",
            "text": "13.4-1\n\n\n\n\nArgue that after executing $\\text{RB-DELETE-FIXUP}$, the root of the tree must be black.\n\n\n\n\n\n\nCase 1:\n transform to 2, 3, 4.\n\n\nCase 2:\n if terminates, the root of the subtree (the new $x$) is set to black.\n\n\nCase 3:\n transform to 4.\n\n\nCase 4:\n the root (the new $x$) is set to black.\n\n\n\n\n13.4-2\n\n\n\n\nArgue that if in $\\text{RB-DELETE}$ both $x$ and $x.p$ are red, then property 4 is restored by the call to $\\text{RB-DELETE-FIXUP}(T, x)$.\n\n\n\n\nSuppose that both $x$ and $x.p$ are red in $\\text{RB-DELETE}$. This can only happen\nin the else-case of line 9. Since we are deleting from a red-black tree, the other child of y.p which becomes $x$'s sibling in the call to $\\text{RB-TRANSPLANT}$ on line 14 must be black, so $x$ is the only child of $x.p$ which is red. The while-loop condition of $\\text{RB-DELETE-FIXUP}(T, x)$ is immediately violated so we simply set $x.color = black$, restoring property 4.\n\n\n13.4-3\n\n\n\n\nIn Exercise 13.3-2, you found the red-black tree that results from successively inserting the keys $41, 38, 31, 12, 19, 8$ into an initially empty tree. Now show the red-black trees that result from the successive deletion of the keys in the order $8, 12, 19, 31, 38, 41$.\n\n\n\n\n\n\n\n\ninitial:\n\n\n\n\n\n\n\n\ndelete $8$:\n\n\n\n\n\n\n\n\ndelete $12$:\n\n\n\n\n\n\n\n\ndelete $19$:\n\n\n\n\n\n\n\n\ndelete $31$:\n\n\n\n\n\n\n\n\ndelete $38$:\n\n\n\n\n\n\n\n\ndelete $41$:\n\n\n\n\n\n\n\n\n13.4-4\n\n\n\n\nIn which lines of the code for $\\text{RB-DELETE-FIXUP}$ might we examine or modify the sentinel $T.nil$?\n\n\n\n\nSince it is possible that $w$ is $T.nil$, any line of $\\text{RB-DELETE-FIXUP}(T, x)$ which examines or modifies w must be included. However, as described on page 317, $x$ will never be $T.nil$, so we need not include those lines.\n\n\n13.4-5\n\n\n\n\nIn each of the cases of Figure 13.7, give the count of black nodes from the root of the subtree shown to each of the subtrees $\\alpha, \\beta, \\ldots, \\zeta$, and verify that each count remains the same after the transformation. When a node has a color attribute $c$ or $c'$, use the notation $\\text{count}(c)$ or $\\text{count}(c')$ symbolically in your count.\n\n\n\n\nOur count will include the root (if it is black).\n\n\n\n\nCase 1:\n For each subtree, it is $2$ both before and after.\n\n\nCase 2:\n \n\n\nFor $\\alpha$ and $\\beta$, it is $1 + \\text{count}(c)$ in both cases. \n\n\nFor the rest of the subtrees, it is from $2 + \\text{count}(c)$ to $1 + \\text{count}(c)$. \n\n\n\n\n\n\n\n\nThis decrease in the count for the other subtreese is handled by then having $x$ represent an additional black.\n\n\n\n\nCase 3:\n \n\n\nFor $\\epsilon$ and $\\zeta$, it is $2+\\text{count}(c)$ both before and after.\n\n\nFor all the other subtrees, it is $1+\\text{count}(c)$ both before and after.\n\n\n\n\n\n\nCase 4:\n \n\n\nFor $\\alpha$ and $\\beta$, it is from $1 + \\text{count}(c)$ to $2 + \\text{count}(c)$. \n\n\nFor $\\gamma$ and $\\delta$, it is $1 + \\text{count}(c) + \\text{count}(c')$ both before and after. \n\n\nFor $\\epsilon$ and $\\zeta$, it is $1 + \\text{count}(c)$ both before and after. \n\n\n\n\n\n\n\n\nThis increase in the count for $\\alpha$ and $\\beta$ is because $x$ before indicated an extra black.\n\n\n13.4-6\n\n\n\n\nProfessors Skelton and Baron are concerned that at the start of case 1 of $\\text{RB-DELETE-FIXUP}$, the node $x.p$ might not be black. If the professors are correct, then lines 5\u20136 are wrong. Show that $x.p$ must be black at the start of case 1, so that the professors have nothing to worry about.\n\n\n\n\nCase 1 occurs only if $x$'s sibling $w$ is red. If $x.p$ were red, then there would be two reds in a row, namely $x.p$ (which is also $w.p$) and $w$, and we would have had these two reds in a row even before calling $\\text{RB-DELETE}$.\n\n\n13.4-7\n\n\n\n\nSuppose that a node $x$ is inserted into a red-black tree with $\\text{RB-INSERT}$ and then is immediately deleted with $\\text{RB-DELETE}$. Is the resulting red-black tree the same as the initial red-black tree? Justify your answer.\n\n\n\n\nNo, the red-black tree will not necessarily be the same. Here are two examples: one in which the tree's shape changes, and one in which the shape remains the same but the node colors change.",
            "title": "13.4 Deletion"
        },
        {
            "location": "/Chap13/13.4/#134-1",
            "text": "Argue that after executing $\\text{RB-DELETE-FIXUP}$, the root of the tree must be black.    Case 1:  transform to 2, 3, 4.  Case 2:  if terminates, the root of the subtree (the new $x$) is set to black.  Case 3:  transform to 4.  Case 4:  the root (the new $x$) is set to black.",
            "title": "13.4-1"
        },
        {
            "location": "/Chap13/13.4/#134-2",
            "text": "Argue that if in $\\text{RB-DELETE}$ both $x$ and $x.p$ are red, then property 4 is restored by the call to $\\text{RB-DELETE-FIXUP}(T, x)$.   Suppose that both $x$ and $x.p$ are red in $\\text{RB-DELETE}$. This can only happen\nin the else-case of line 9. Since we are deleting from a red-black tree, the other child of y.p which becomes $x$'s sibling in the call to $\\text{RB-TRANSPLANT}$ on line 14 must be black, so $x$ is the only child of $x.p$ which is red. The while-loop condition of $\\text{RB-DELETE-FIXUP}(T, x)$ is immediately violated so we simply set $x.color = black$, restoring property 4.",
            "title": "13.4-2"
        },
        {
            "location": "/Chap13/13.4/#134-3",
            "text": "In Exercise 13.3-2, you found the red-black tree that results from successively inserting the keys $41, 38, 31, 12, 19, 8$ into an initially empty tree. Now show the red-black trees that result from the successive deletion of the keys in the order $8, 12, 19, 31, 38, 41$.     initial:     delete $8$:     delete $12$:     delete $19$:     delete $31$:     delete $38$:     delete $41$:",
            "title": "13.4-3"
        },
        {
            "location": "/Chap13/13.4/#134-4",
            "text": "In which lines of the code for $\\text{RB-DELETE-FIXUP}$ might we examine or modify the sentinel $T.nil$?   Since it is possible that $w$ is $T.nil$, any line of $\\text{RB-DELETE-FIXUP}(T, x)$ which examines or modifies w must be included. However, as described on page 317, $x$ will never be $T.nil$, so we need not include those lines.",
            "title": "13.4-4"
        },
        {
            "location": "/Chap13/13.4/#134-5",
            "text": "In each of the cases of Figure 13.7, give the count of black nodes from the root of the subtree shown to each of the subtrees $\\alpha, \\beta, \\ldots, \\zeta$, and verify that each count remains the same after the transformation. When a node has a color attribute $c$ or $c'$, use the notation $\\text{count}(c)$ or $\\text{count}(c')$ symbolically in your count.   Our count will include the root (if it is black).   Case 1:  For each subtree, it is $2$ both before and after.  Case 2:    For $\\alpha$ and $\\beta$, it is $1 + \\text{count}(c)$ in both cases.   For the rest of the subtrees, it is from $2 + \\text{count}(c)$ to $1 + \\text{count}(c)$.      This decrease in the count for the other subtreese is handled by then having $x$ represent an additional black.   Case 3:    For $\\epsilon$ and $\\zeta$, it is $2+\\text{count}(c)$ both before and after.  For all the other subtrees, it is $1+\\text{count}(c)$ both before and after.    Case 4:    For $\\alpha$ and $\\beta$, it is from $1 + \\text{count}(c)$ to $2 + \\text{count}(c)$.   For $\\gamma$ and $\\delta$, it is $1 + \\text{count}(c) + \\text{count}(c')$ both before and after.   For $\\epsilon$ and $\\zeta$, it is $1 + \\text{count}(c)$ both before and after.      This increase in the count for $\\alpha$ and $\\beta$ is because $x$ before indicated an extra black.",
            "title": "13.4-5"
        },
        {
            "location": "/Chap13/13.4/#134-6",
            "text": "Professors Skelton and Baron are concerned that at the start of case 1 of $\\text{RB-DELETE-FIXUP}$, the node $x.p$ might not be black. If the professors are correct, then lines 5\u20136 are wrong. Show that $x.p$ must be black at the start of case 1, so that the professors have nothing to worry about.   Case 1 occurs only if $x$'s sibling $w$ is red. If $x.p$ were red, then there would be two reds in a row, namely $x.p$ (which is also $w.p$) and $w$, and we would have had these two reds in a row even before calling $\\text{RB-DELETE}$.",
            "title": "13.4-6"
        },
        {
            "location": "/Chap13/13.4/#134-7",
            "text": "Suppose that a node $x$ is inserted into a red-black tree with $\\text{RB-INSERT}$ and then is immediately deleted with $\\text{RB-DELETE}$. Is the resulting red-black tree the same as the initial red-black tree? Justify your answer.   No, the red-black tree will not necessarily be the same. Here are two examples: one in which the tree's shape changes, and one in which the shape remains the same but the node colors change.",
            "title": "13.4-7"
        },
        {
            "location": "/Chap13/Problems/13-1/",
            "text": "During the course of an algorithm, we sometimes find that we need to maintain past versions of a dynamic set as it is updated. We call such a set \npersistent\n. One way to implement a persistent set is to copy the entire set whenever it is modified, but this approach can slow down a program and also consume much space. Sometimes, we can do much better.\n\n\nConsider a persistent set $S$ with the operations $\\text{INSERT}$, $\\text{DELETE}$, and $\\text{SEARCH}$, which we implement using binary search trees as shown in Figure 13.8(a). We maintain a separate root for every version of the set. In order to insert the key $5$ into the set, we create a new node with key $5$. This node becomes the left child of a new node with key $7$, since we cannot modify the existing node with key $7$. Similarly, the new node with key $7$ becomes the left child of a new node with key $8$ whose right child is the existing node with key $10$. The new node with key $8$ becomes, in turn, the right child of a new root $r'$ with key $4$ whose left child is the existing node with key $3$. We thus copy only part of the tree and share some of the nodes with the original tree, as shown in Figure 13.8(b).\n\n\nAssume that each tree node has the attributes $key$, $left$, and $right$ but no parent. (See also Exercise 13.3-6.)\n\n\na.\n For a general persistent binary search tree, identify the nodes that we need to change to insert a key $k$ or delete a node $y$.\n\n\nb.\n Write a procedure $\\text{PERSISTENT-TREE-INSERT}$ that, given a persistent tree $T$ and a key $k$ to insert, returns a new persistent tree $T'$ that is the result of inserting $k$ into $T$.\n\n\nc.\n If the height of the persistent binary search tree $T$ is $h$, what are the time and space requirements of your implementation of $\\text{PERSISTENT-TREE-INSERT}$? (The space requirement is proportional to the number of new nodes allocated.)\n\n\nd.\n Suppose that we had included the parent attribute in each node. In this case, $\\text{PERSISTENT-TREE-INSERT}$ would need to perform additional copying. Prove that $\\text{PERSISTENT-TREE-INSERT}$ would then require $\\Omega(n)$ time and space, where $n$ is the number of nodes in the tree.\n\n\ne.\n Show how to use red-black trees to guarantee that the worst-case running time and space are $O(\\lg n)$ per insertion or deletion.\n\n\n\n\na.\n When inserting key $k$, all nodes on the path from the root to the added node (a new leaf) must change, since the need for a new child pointer propagates up from the new node to all of its ancestors.\n\n\nWhen deleting a node, let $y$ be the node actually removed and $z$ be the node given to the delete procedure.\n\n\n\n\nIf $z$ has at most one child, it will be spliced out, so that all ancestors of $z$ swill be changed. (As with insertion, the need for a new child pointer propagates up from the removed node.)\n\n\nIf $z$ has two children, then its successor $y$ will be spliced out and moved to $z$'s position. Therefore all ancestors of both $z$and $y$ must be changed. Because $z$is an ancestor of $y$, we can just say that all ancestors of $y$ must be changed.\n\n\n\n\nIn either case, $y$'s children (if any) are unchanged, because we have assumed that there is no parent attribute.\n\n\nb.\n We assume that we can call two procedures:\n\n\n\n\n$\\text{MAKE-NEW-NODE}(k)$ creates a new node whose $key$ attribute has value $k$ and with $left$ and $right$ attributes $\\text{NIL}$, and it returns a pointer to the new node.\n\n\n$\\text{COPY-NODE}(x)$ creates a new node whose $key$, $left$, and $right$ attributes have the same values as those of node $x$, and it returns a pointer to the new node.\n\n\n\n\nHere are two ways to write $\\text{PERSISTENT-TREE-INSERT}$. The first is a version of $\\text{TREE-INSERT}$, modified to create new nodes along the path to where the new node will go, and to not use parent attributes. It returns the root of the new tree.\n\n\nPERSISTENT\n-\nTREE\n-\nINSERT\n(\nT\n,\n \nk\n)\n\n    \nz\n \n=\n \nMAKE\n-\nNEW\n-\nNODE\n(\nk\n)\n\n    \nnew\n-\nroot\n \n=\n \nCOPY\n-\nNODE\n(\nT\n.\nroot\n)\n\n    \ny\n \n=\n \nNIL\n\n    \nx\n \n=\n \nnew\n-\nroot\n\n    \nwhile\n \nx\n \n!=\n \nNIL\n\n        \ny\n \n=\n \nx\n\n        \nif\n \nz\n.\nkey\n \n<\n \nx\n.\nkey\n\n            \nx\n \n=\n \nCOPY\n-\nNODE\n(\nx\n.\nleft\n)\n\n            \ny\n.\nleft\n \n=\n \nx\n\n        \nelse\n \nx\n \n=\n \nCOPY\n-\nNODE\n(\nx\n.\nright\n)\n\n            \ny\n.\nright\n \n=\n \nx\n\n    \nif\n \ny\n \n==\n \nNIL\n\n        \nnew\n-\nroot\n \n=\n \nz\n\n    \nelse\n \nif\n \nz\n.\nkey\n \n<\n \ny\n.\nkey\n\n        \ny\n.\nleft\n \n=\n \nz\n\n    \nelse\n \ny\n.\nright\n \n=\n \nz\n\n    \nreturn\n \nnew\n-\nroot\n\n\n\n\n\nThe second is a rather elegant recursive procedure. The initial call should have $T.root$ as its first argument. It returns the root of the new tree.\n\n\nPERSISTENT\n-\nTREE\n-\nINSERT\n(\nr\n,\n \nk\n)\n\n    \nif\n \nr\n \n==\n \nNIL\n\n        \nx\n \n=\n \nMAKE\n-\nNEW\n-\nNODE\n(\nk\n)\n\n    \nelse\n \nx\n \n=\n \nCOPY\n-\nNODE\n(\nr\n)\n\n        \nif\n \nk\n \n<\n \nr\n.\nkey\n\n            \nx\n.\nleft\n \n=\n \nPERSISTENT\n-\nTREE\n-\nINSERT\n(\nr\n.\nleft\n,\n \nk\n)\n\n        \nelse\n \nx\n.\nright\n \n=\n \nPERSISTENT\n-\nTREE\n-\nINSERT\n(\nr\n.\nright\n,\n \nk\n)\n\n    \nreturn\n \nx\n\n\n\n\n\nc.\n Like $\\text{TREE-INSERT}$, $\\text{PERSISTENT-TREE-INSERT}$ does a constant amount of work at each node along the path from the root to the new node. Since the length of the path is at most $h$, it takes $O(h)$ time.\n\n\nSince it allocates a new node (a constant amount of space) for each ancestor of the inserted node, it also needs $O(h)$ space.\n\n\nd.\n If there were parent attributes, then because of the new root, every node of the tree would have to be copied when a new node is inserted. To see why, observe that the children of the root would change to point to the new root, then their children would change to point to them, and so on. Since there are n nodes, this change would cause insertion to create \u007f$\\Omega(n)$ new nodes and to take \u007f$\\Omega(n)$ time.\n\n\ne.\n From parts (a) and (c), we know that insertion into a persistent binary search tree of height $h$, like insertion into an ordinary binary search tree, takes worst-case time $O(h)$. A red-black tree has $h = O(\\lg n)$, so insertion into an ordinary red-black tree takes $O(\\lg n)$ time. We need to show that if the red-black tree is persistent, insertion can still be done in $O(\\lg n)$ time. To do this, we will need to show two things:\n\n\n\n\nHow to still find the parent pointers we need in $O(1)$ time without using a parent attribute. We cannot use a parent attribute because a persistent tree with parent attributes uses $\\Omega(n)$ time for insertion (by part (d)).\n\n\nThat the additional node changes made during red-black tree operations (by rotation and recoloring) don't cause more than $O(\\lg n)$ additional nodes to change.\n\n\n\n\nEach parent pointer needed during insertion can be found in $O(1)$ time without having a parent attribute as follows:\n\n\nTo insert into a red-black tree, we call $\\text{RB-INSERT}$, which in turn calls $\\text{RB-INSERT-FIXUP}$. Make the same changes to $\\text{RB-INSERT}$ as we made to $\\text{TREE-INSERT}$ for persistence. Additionally, as $\\text{RB-INSERT}$ walks down the tree to find the place to insert the new node, have it build a stack of the nodes it traverses and pass this stack to $\\text{RB-INSERT-FIXUP}$. $\\text{RB-INSERT-FIXUP}$ needs parent pointers to walk back up the same path, and at any given time it needs parent pointers only to find the parent and grandparent of the node it is working on. As $\\text{RB-INSERT-FIXUP}$ moves up the stack of parents, it needs only parent pointers that are at known locations a constant distance away in the stack. Thus, the parent information can be found in $O(1)$ time, just as if it were stored in a parent attribute.\n\n\nRotation and recoloring change nodes as follows:\n\n\n\n\n$\\text{RB-INSERT-FIXUP}$ performs at most $2$ rotations, and each rotation changes the child pointers in $3$ nodes (the node around which we rotate, that node's parent, and one of the children of the node around which we rotate). Thus, at most 6 nodes are directly modified by rotation during $\\text{RB-INSERT-FIXUP}$. In a persistent tree, all ancestors of a changed node are copied, so $\\text{RB-INSERT-FIXUP}$'s rotations take $O(\\lg n)$ time to change nodes due to rotation. (Actually, the changed nodes in this case share a single $O(\\lg n)$-length path of ancestors.)\n\n\n$\\text{RB-INSERT-FIXUP}$ recolors some of the inserted node's ancestors, which are being changed anyway in persistent insertion, and some children of ancestors (the \"uncles\" referred to in the algorithm description). There are at most $O(\\lg n)$ ancestors, hence at most $O(\\lg n)$ color changes of uncles. Recoloring uncles doesn't cause any additional node changes due to persistence, because the ancestors of the uncles are the same nodes (ancestors of the inserted node) that are being changed anyway due to persistence. Thus, recoloring does not affect the $O(\\lg n)$ running time, even with persistence.\n\n\n\n\nWe could show similarly that deletion in a persistent tree also takes worst-case time $O(h)$.\n\n\n\n\nWe already saw in part (a) that $O(h)$ nodes change.\n\n\nWe could write a persistent $\\text{RB-DELETE}$ procedure that runs in $O(h)$ time, analogous to the changes we made for persistence in insertion. But to do so without using parent pointers we need to walk down the tree to the node to be deleted, to build up a stack of parents as discussed above for insertion. This is a little tricky if the set's keys are not distinct, because in order to find the path to the node to delete\u2014a particular node with a given key\u2014we have to make some changes to how we store things in the tree, so that duplicate keys can be distinguished. The easiest way is to have each key take a second part that is unique, and to use this second part as a tiebreaker when comparing keys.\n\n\n\n\nThen the problem of showing that deletion needs only $O(\\lg n)$ time in a persistent red-black tree is the same as for insertion.\n\n\n\n\nAs for insertion, we can show that the parents needed by $\\text{RB-DELETE-FIXUP}$ can be found in $O(1)$ time (using the same technique as for insertion). \n\n\nAlso, $\\text{RB-DELETE-FIXUP}$ performs at most 3 rotations, which as discussed above for insertion requires $O(\\lg n)$ time to change nodes due to persistence. It also does $O(\\lg n)$ color changes, which (as for insertion) take only $O(\\lg n)$ time to change ancestors due to persistence, because the number of copied nodes is $O(\\lg n)$.",
            "title": "13-1 Persistent dynamic sets"
        },
        {
            "location": "/Chap13/Problems/13-2/",
            "text": "The \njoin\n operation takes two dynamic sets $S_1$ and $S_2$ and an element $x$ such that for any $x_1 \\in S_1$ and $x_2 \\in S_2$, we have $x_1.key \\le x.key \\le x_2.key$. It returns a set $S = S_1 \\cup {x} \\cup S_2$. In this problem, we investigate how to implement the join operation on red-black trees.\n\n\na.\n Given a red-black tree $T$, let us store its black-height as the new attribute $T.bh$. Argue that $\\text{RB-INSERT}$ and $\\text{RB-DELETE}$ can maintain the $bh$ attribute without requiring extra storage in the nodes of the tree and without increasing the asymptotic running times. Show that while descending through $T$, we can determine the black-height of each node we visit in $O(1)$ time per node visited.\n\n\nWe wish to implement the operation $\\text{RB-JOIN}(T_1, x, T_2)$, which destroys $T_1$ and $T_2$ and returns a red-black tree $T = T_1 \\cup {x} \\cup T_2$. Let $n$ be the total number of nodes in $T_1$ and $T_2$.\n\n\nb.\n Assume that $T_1.bh \\ge T_2.bh$. Describe an $O(\\lg n)$-time algorithm that finds a black node $y$ in $T_1$ with the largest key from among those nodes whose black-height is $T_2.bh$.\n\n\nc.\n Let $T_y$ be the subtree rooted at $y$. Describe how $T_y \\cup {x} \\cup T_2$ can replace $T_y$ in $O(1)$ time without destroying the binary-search-tree property.\n\n\nd.\n What color should we make $x$ so that red-black properties 1, 3, and 5 are maintained? Describe how to enforce properties 2 and 4 in $O(\\lg n)$ time.\n\n\ne.\n Argue that no generality is lost by making the assumption in part (b). Describe the symmetric situation that arises when $T_1.bh \\le T_2.bh$.\n\n\nf.\n Argue that the running time of $\\text{RB-JOIN}$ is $O(\\lg n)$.\n\n\n\n\na.\n \n\n\n\n\nInitialize: $bh = 0$.\n\n\n$\\text{RB-INSERT}$: if in the last step the root is red, we increase $bh$ by $1$.\n\n\n$\\text{RB-DELETE}$: if $x$ is root, we decrease $bh$ by $1$.\n\n\nEach node: in the simple path, decrease $bh$ by $1$ each time we find a black node.\n\n\n\n\nb.\n Move to the right child if the node has a right child, otherwise move to the left child. If the node is black, we decease $bh$ by $1$. Repeat the step until $bh = T_2.bh$.\n\n\nc.\n The time complexity is $O(1)$.\n\n\nRB\n-\nJOIN\n'\n(\nTy\n,\n \nx\n,\n \nT2\n)\n\n    \nz\n.\nleft\n \n=\n \nTy\n\n    \nz\n.\nright\n \n=\n \nT2\n\n    \nz\n.\nparent\n \n=\n \nTy\n.\nparent\n\n    \nz\n.\nkey\n \n=\n \nx\n\n    \nif\n \nTy\n.\nparent\n.\nleft\n \n=\n \nTy\n\n        \nTy\n.\nparent\n.\nleft\n \n=\n \nz\n\n    \nelse\n \nTy\n.\nparent\n.\nright\n \n=\n \nz\n\n\n\n\n\nd.\n Red, because if both the colors of the roots of $T_y$ and $T_2$ are black and the color of $x.parent$ is red, then the color of $x$ is black and it'll change both the colors of the roots of $T_y$ and $T_2$ and recursively adjust to ensure that $\\text{BLACK-HEIGHT}$ doesn't change.\n\n\nThe time complexity is $O(\\lg n)$.\n\n\ne.\n Same, if $T_1.bh\\le T_2.bh$, then we can use the above algorithm symmetrically.\n\n\nf.\n $O(1) + O(\\lg n) = O(\\lg n)$.",
            "title": "13-2 Join operation on red-black trees"
        },
        {
            "location": "/Chap13/Problems/13-3/",
            "text": "An \nAVL tree\n is a binary search tree that is \nheight balanced\n: for each node $x$, the heights of the left and right subtrees of $x$ differ by at most $1$. To implement an AVL tree, we maintain an extra attribute in each node: $x.h$ is the height of node $x$. As for any other binary search tree $T$, we assume that $T.root$ points to the root node.\n\n\na.\n Prove that an AVL tree with $n$ nodes has height $O(\\lg n)$.\n\n\nb.\n To insert into an AVL tree, we first place a node into the appropriate place in binary search tree order. Afterward, the tree might no longer be height balanced. Specifically, the heights of the left and right children of some node might differ by $2$. Describe a procedure $\\text{BALANCE}(x)$, which takes a subtree rooted at $x$ whose left and right children are height balanced and have heights that differ by at most $2$, i.e., $|x.right.h - x1.left.hj|   \\le 2$, and alters the subtree rooted at $x$ to be height balanced.\n\n\nc.\n Using part (b), describe a recursive procedure $\\text{AVL-INSERT}(x, z)$ that takes a node $x$ within an AVL tree and a newly created node $z$ (whose key has already been filled in), and adds $z$ to the subtree rooted at $x$, maintaining the property that $x$ is the root of an AVL tree. As in $\\text{TREE-INSERT}$ from Section 12.3, assume that $z.key$ has already been filled in and that $z.left = \\text{NIL}$ and $z.right = \\text{NIL}$; also assume that $z.h = 0$. Thus, to insert the node $z$ into the AVL tree $T$, we call $\\text{AVL-INSERT}(T.root, z)$.\n\n\nd.\n Show that $\\text{AVL-INSERT}$, run on an $n$-node AVL tree, takes $O(\\lg n)$ time and performs $O(1)$ rotations.\n\n\n\n\na.\n Let $T(h)$ denote the minimum size of an AVL tree of height $h$. Since it is height $h$, it must have the max of it's children's heights is equal to $h - 1$. Since we are trying to get as few notes total as possible, suppose that the other child has as small of a height as is allowed. Because of the restriction of AVL trees, we have that the smaller child must be at least one less than the larger one, so, we have that\n\n\n$$T(h) \\ge T(h - 1) + T(h - 2) + 1,$$\n\n\nwhere the $+1$ is coming from counting the root node. \n\n\nWe can get inequality in the opposite direction by simply taking a tree that achieves the minimum number of number of nodes on height $h - 1$ and on $h - 2$ and join them together under another node. \n\n\nSo, we have that \n\n\n$$T(h) = T(h - 1) + T(h - 2) + 1, \\text{ where } T(0) = 0, T(1) = 1.$$\n\n\nThis is both the same recurrence and initial conditions as the Fibonacci numbers. So, recalling equation $\\text{(3.25)}$, we have that\n\n\n$$T(h) = \\Big\\lfloor \\frac{\\phi^h}{\\sqrt 5} + \\frac{1}{2} \\Big\\rfloor \\le n.$$\n\n\nRearranging for $h$, we have \n\n\n\\begin{align}\n    \\frac{\\phi^h}{\\sqrt 5} - \\frac{1}{2} & \\le n \\\\\n                                  \\phi^h & \\le \\sqrt 5(n + \\frac{1}{2}) \\\\\n                                       h & \\le \\frac{\\lg \\sqrt 5 + \\lg(n + \\frac{1}{2})}{\\lg\\phi} \\in O(\\lg n).\n\\end{align}\n\n\nb.\n Let $\\text{UNBAL}(x)$ denote $x.left.h - x.right.h$. Then, the algorithm $\\text{BALANCE}$ does what is desired. Note that because we are only rotating a single element at a time, the value of $\\text{UNBAL}(x)$ can only change by at most $2$ in each step.\n\n\nAlso, it must eventually start to change as the tree that was shorter becomes saturated with elements. We also fix any breaking of the AVL property that rotating may of caused by our recursive calls to the children.\n\n\nBALANCE\n(\nx\n)\n\n    \nwhile\n \n|\nUNBAL\n(\nx\n)\n|\n \n>\n \n1\n\n        \nif\n \nUNBAL\n(\nx\n)\n \n>\n \n0\n\n            \nRIGHT\n-\nROTATE\n(\nT\n,\n \nx\n)\n\n        \nelse\n \n            \nLEFT\n-\nROTATE\n(\nT\n,\n \nx\n)\n\n            \nBALANCE\n(\nx\n.\nleft\n)\n\n            \nBALANCE\n(\nx\n.\nright\n)\n\n\n\n\n\nc.\n For the given algorithm $\\text{AVL-INSERT}(x, z)$, it correctly maintains the fact that it is a BST by the way we search for the correct spot to insert $z$. Also, we can see that it maintains the property of being AVL, because after inserting the element, it checks all of the parents for the AVL property, since those are the only places it could of broken. It then fixes it and also updates the height attribute for any of the nodes for which it may of changed.\n\n\nd.\n Both \nfor\n loops only run for $O(h) = O(\\lg(n))$ iterations. Also, only a single rotation will occur in the second while loop because when we do it, we will be decreasing the height of the subtree rooted there, which means that it's back down to what it was before, so all of it's ancestors will have unchanged heights, so, no further balancing will be required.\n\n\nAVL\n-\nINSERT\n(\nx\n,\n \nz\n)\n\n    \nw\n \n=\n \nx\n\n    \nwhile\n \nw\n \n!=\n \nNIL\n\n        \ny\n \n=\n \nw\n\n        \nif\n \nz\n.\nkey\n \n>\n \ny\n.\nkey\n\n            \nw\n \n=\n \nw\n.\nright\n\n        \nelse\n \nw\n \n=\n \nw\n.\nleft\n\n    \nif\n \nz\n.\nkey\n \n>\n \ny\n.\nkey\n\n        \ny\n.\nright\n \n=\n \nz\n\n            \nif\n \ny\n.\nleft\n \n=\n \nNIL\n\n                \ny\n.\nh\n \n=\n \n1\n\n    \nelse\n\n        \ny\n.\nleft\n \n=\n \nz\n\n        \nif\n \ny\n.\nright\n \n=\n \nNIL\n\n            \ny\n.\nh\n \n=\n \n1\n\n    \nwhile\n \ny\n \n!=\n \nx\n\n        \ny\n.\nh\n \n=\n \n1\n \n+\n \nmax\n{\ny\n.\nleft\n.\nh\n,\n \ny\n.\nright\n.\nh\n}\n\n        \nif\n \ny\n.\nleft\n.\nh\n \n>\n \ny\n.\nright\n.\nh\n \n+\n \n1\n\n            \nRIGHT\n-\nROTATE\n(\nT\n,\n \ny\n)\n\n        \nif\n \ny\n.\nright\n.\nh\n \n>\n \ny\n.\nleft\n.\nh\n \n+\n \n1\n\n            \nLEFT\n-\nROTATE\n(\nT\n,\n \ny\n)\n\n            \ny\n \n=\n \ny\n.\np",
            "title": "13-3 AVL trees"
        },
        {
            "location": "/Chap13/Problems/13-4/",
            "text": "If we insert a set of $n$ items into a binary search tree, the resulting tree may be horribly unbalanced, leading to long search times. As we saw in Section 12.4, however, randomly built binary search trees tend to be balanced. Therefore, one strategy that, on average, builds a balanced tree for a fixed set of items would be to randomly permute the items and then insert them in that order into the tree.\n\n\nWhat if we do not have all the items at once? If we receive the items one at a time, can we still randomly build a binary search tree out of them?\n\n\nWe will examine a data structure that answers this question in the affirmative. A \ntreap\n is a binary search tree with a modified way of ordering the nodes. Figure 13.9 shows an example. As usual, each node $x$ in the tree has a key value $x.key$. In addition, we assign $x.priority$, which is a random number chosen independently for each node. We assume that all priorities are distinct and also that all keys are distinct. The nodes of the treap are ordered so that the keys obey the binary-search-tree property and the priorities obey the min-heap order property:\n\n\n\n\nIf $v$ is a left child of $u$, then $v.key < u.key$.\n\n\nIf $v$ is a right child of $u$, then $v.key > u.key$.\n\n\nIf $v$ is a child of $u$, then $v.priority > u.priority$.\n\n\n\n\n(This combination of properties is why the tree is called a \"treap\": it has features of both a binary search tree and a heap.)\n\n\nIt helps to think of treaps in the following way. Suppose that we insert nodes $x_1, x_2, \\ldots,x_n$, with associated keys, into a treap. Then the resulting treap is the tree that would have been formed if the nodes had been inserted into a normal binary search tree in the order given by their (randomly chosen) priorities, i.e., $x_i.priority < x_j.priority$ means that we had inserted $x_i$ before $x_j$.\n\n\na.\n Show that given a set of nodes $x_1, x_2, \\ldots, x_n$, with associated keys and priorities, all distinct, the treap associated with these nodes is unique.\n\n\nb.\n Show that the expected height of a treap is $\\Theta(\\lg n)$, and hence the expected time to search for a value in the treap is $\\Theta(\\lg n)$.\n\n\nLet us see how to insert a new node into an existing treap. The first thing we do is assign to the new node a random priority. Then we call the insertion algorithm, which we call $\\text{TREAP-INSERT}$, whose operation is illustrated in Figure 13.10.\n\n\nc.\n Explain how $\\text{TREAP-INSERT}$ works. Explain the idea in English and give pseudocode. ($\\textit{Hint:}$ Execute the usual binary-search-tree insertion procedure and then perform rotations to restore the min-heap order property.)\n\n\nd.\n Show that the expected running time of $\\text{TREAP-INSERT}$ is $\\Theta(\\lg n)$.\n\n\n$\\text{TREAP-INSERT}$ performs a search and then a sequence of rotations. Although these two operations have the same expected running time, they have different costs in practice. A search reads information from the treap without modifying it. In contrast, a rotation changes parent and child pointers within the treap. On most computers, read operations are much faster than write operations. Thus we would like $\\text{TREAP-INSERT}$ to perform few rotations. We will show that the expected number of rotations performed is bounded by a constant.\n\n\nIn order to do so, we will need some definitions, which Figure 13.11 depicts. The \nleft spine\n of a binary search tree $T$ is the simple path from the root to the node with the smallest key. In other words, the left spine is the simple path from the root that consists of only left edges. Symmetrically, the \nright spine\n of $T$ is the simple path from the root consisting of only right edges. The \nlength\n of a spine is the number of nodes it contains.\n\n\ne.\n Consider the treap $T$ immediately after $\\text{TREAP-INSERT}$ has inserted node $x$. Let $C$ be the length of the right spine of the left subtree of $x$. Let $D$ be the length of the left spine of the right subtree of $x$. Prove that the total number of rotations that were performed during the insertion of $x$ is equal to $C + D$.\n\n\nWe will now calculate the expected values of $C$ and $D$. Without loss of generality, we assume that the keys are $1, 2, \\ldots, n$ since we are comparing them only to one another.\n\n\nFor nodes $x$ and $y$ in treap $T$, where $y \\ne x$, let $k = x.key$ and $i = y.key$. We define indicator random variables\n\n\n$$X_{ik} = \\text{I\\{$y$ is in the right spine of the left subtree of $x$\\}}.$$\n\n\nf.\n Show that $X_{ik} = 1$ if and only if $y.priority > x.priority$, $y.key < x.key$, and, for every $z$ such that $y.key < z.key < x.key$, we have $y.priority < z.priority$.\n\n\ng.\n Show that\n\n\n\\begin{align}\n\\Pr\\{X_{ik} = 1\\}\n    & = \\frac{(k - i - 1)!}{(k - i + 1)!} \\\\\n    & = \\frac{1}{(k - i + 1)(k - i)}. \\\\\n\\end{align}\n\n\nh.\n Show that\n\n\n\\begin{align}\n\\text E[C] & = \\sum_{j = 1}^{k - 1} \\frac{1}{j(j + 1)} \\\\\n           & = 1 - \\frac{1}{k}.\n\\end{align}\n\n\ni.\n Use a symmetry argument to show that\n\n\n$$\\text E[D] = 1 - \\frac{1}{n - k + 1}.$$\n\n\nj.\n Conclude that the expected number of rotations performed when inserting a node into a treap is less than $2$.\n\n\n\n\na.\n The root is the node with smallest priority, the root divides the sets into two subsets based on the key. In each subset, the node with smallest priority is selected as the root, thus we can uniquely determine a treap with a specific input.\n\n\nb.\n For the priority of all nodes, each permutation corresponds to exactly one treap, that is, all nodes forms a BST in priority, since the priority of all nodes is spontaneous, treap is, essentially, randomly built binary search tress. Therefore, the expected height of a treap is $\\Theta(\\lg n)$.\n\n\nc.\n First insert a node as usual using the binary-search-tree insertion procedure. Then perform left and right rotations until the parent of the inserted node no longer has larger priority.\n\n\nd.\n Rotation is $\\Theta(1)$, at most $h$ rotations, therefore the expected running time is $\\Theta(\\lg n)$.\n\n\ne.\n Left rotation increase $C$ by $1$, right rotation increase $D$ by $1$.\n\n\nf.\n The first two are obvious.\n\n\nThe min-heap property will not hold if $y.priority > z.priority$.\n\n\ng.\n \n\n\n$$\\Pr\\{X_{ik} = 1\\} = \\frac{(k - i - 1)!}{(k - i + 1)!} = \\frac{1}{(k - i + 1)(k - i)}.$$\n\n\nh.\n \n\n\n\\begin{align}\n\\text E[C] & = \\sum_{j = 1}^{k - 1} \\frac{1}{(k - i + 1)(k - i)} \\\\\n           & = \\sum_{j = 1}^{k - 1} (\\frac{1}{k - i} - \\frac{1}{k - i + 1}) \\\\\n           & = 1 - \\frac{1}{k}.\n\\end{align}\n\n\ni.\n \n\n\n\\begin{align}\n\\text E[D] & = \\sum_{j = 1}^{n - k} \\frac{1}{(k - i + 1)(k - i)} \\\\\n           & = 1 - \\frac{1}{n - k + 1}.\n\\end{align}\n\n\nj.\n By part (e), the number of rotations is $C + D$. By linearity of expectation, $\\text E[C + D] = 2 - \\frac{1}{k} - \\frac{1}{n - k + 1} \\le 2$ for any choice of $k$.",
            "title": "13-4 Treaps"
        },
        {
            "location": "/Chap14/14.1/",
            "text": "14.1-1\n\n\n\n\nShow how $\\text{OS-SELECT}(T.root, 10)$ operates on the red-black tree $T$ of Figure 14.1.\n\n\n\n\n\n\n$26: r = 13, i = 10$, go left.\n\n\n$17: r =  8, i = 10$, go right.\n\n\n$21: r =  3, i =  2$, go left.\n\n\n$19: r =  1, i =  2$, go right.\n\n\n$20: r =  1, i =  1$, choose $20$.\n\n\n\n\n14.1-2\n\n\n\n\nShow how $\\text{OS-RANK}(T, x)$ operates on the red-black tree $T$ of Figure 14.1 and the node $x$ with $x.key = 35$.\n\n\n\n\n\n\n$35: r = 1$.\n\n\n$38: r = 1$.\n\n\n$30: r = r + 2 = 3$.\n\n\n$41: r = 3$.\n\n\n$26: r = r + 13 = 16$.\n\n\n\n\n14.1-3\n\n\n\n\nWrite a nonrecursive version of $\\text{OS-SELECT}$.\n\n\n\n\nOS\n-\nSELECT\n(\nx\n,\n \ni\n)\n\n    \nr\n \n=\n \nleft\n[\nx\n]\n \n+\n \n1\n\n    \nwhile\n \nr\n \n!=\n \ni\n\n        \nif\n \ni\n \n<\n \nr\n\n            \nx\n \n=\n \nleft\n[\nx\n]\n\n        \nelse\n \nx\n \n=\n \nright\n[\nx\n]\n\n            \ni\n \n=\n \ni\n \n-\n \nr\n\n        \nr\n \n=\n \nleft\n[\nx\n]\n \n+\n \n1\n\n\n\n\n\n14.1-4\n\n\n\n\nWrite a recursive procedure $\\text{OS-KEY-RANK}(T, k)$ that takes as input an order-statistic tree $T$ and a key $k$ and returns the rank of $k$ in the dynamic set represented by $T$. Assume that the keys of $T$ are distinct.\n\n\n\n\nOS\n-\nKEY\n-\nRANK\n(\nT\n,\n \nk\n)\n\n    \nif\n \nk\n \n==\n \nkey\n[\nroot\n[\nT\n]]\n\n        \nreturn\n \nsize\n[\nleft\n[\nroot\n[\nT\n]]]\n \n+\n \n1\n\n    \nelse\n \nif\n \nkey\n[\nroot\n[\nT\n]]\n \n>\n \nk\n\n        \nreturn\n \nOS\n-\nKEY\n-\nRANK\n(\nleft\n[\nT\n],\n \nk\n)\n\n    \nelse\n \nreturn\n \nsize\n[\nleft\n[\nroot\n[\nT\n]]]\n \n+\n \n1\n \n+\n \nOS\n-\nKEY\n-\nRANK\n(\nright\n[\nT\n],\n \nk\n)\n\n\n\n\n\n14.1-5\n\n\n\n\nGiven an element $x$ in an $n$-node order-statistic tree and a natural number $i$, how can we determine the $i$th successor of $x$ in the linear order of the tree in $O(\\lg n)$ time?\n\n\n\n\nGiven an element $x$ in an $n$-node order-statistic tree $T$ and a natural number $i$, the following procedure retrieves the $i$th successor of $x$ in the linear order of $T$:\n\n\nOS\n-\nSUCCESSOR\n(\nT\n,\n \nx\n,\n \ni\n)\n\n    \nr\n \n=\n \nOS\n-\nRANK\n(\nT\n,\n \nx\n)\n\n    \ns\n \n=\n \nr\n \n+\n \ni\n\n    \nreturn\n \nOS\n-\nSELECT\n(\nT\n.\nroot\n,\n \ns\n)\n\n\n\n\n\nSince $\\text{OS-RANK}$ and $\\text{OS-SELECT}$ each take $O(\\lg n)$ time, so does the procedure $\\text{OS-SUCCESSOR}$.\n\n\n14.1-6\n\n\n\n\nObserve that whenever we reference the size attribute of a node in either $\\text{OS-SELECT}$ or $\\text{OS-RANK}$, we use it only to compute a rank. Accordingly, suppose we store in each node its rank in the subtree of which it is the root. Show how to maintain this information during insertion and deletion. (Remember that these two operations can cause rotations.)\n\n\n\n\nWhen inserting node $z$, we search down the tree for the proper place for $z$. For each node $x$ on this path, add $1$ to $x.rank$ if $z$ is inserted within $x$'s left subtree, and leave $x.rank$ unchanged if $z$ is inserted within $x$'s right subtree. Similarly when deleting, subtract $1$ from $x.rank$ whenever the spliced-out node had been in $x$'s left subtree.\n\n\nWe also need to handle the rotations that occur during the fixup procedures for insertion and deletion. Consider a left rotation on node $x$, where the pre-rotation right child of $x$ is $y$ (so that $x$ becomes $y$'s left child after the left rotation). We leave $x.rank$ unchanged, and letting $r = y.rank$ before the rotation, we set $y.rank = r + x.rank$. Right rotations are handled in an analogous manner.\n\n\n14.1-7\n\n\n\n\nShow how to use an order-statistic tree to count the number of inversions (see Problem 2-4) in an array of size $n$ in time $O(n\\lg n)$.\n\n\n\n\nLet $A[1..n]$\u008d be the array of $n$ distinct numbers.\n\n\nOne way to count the inversions is to add up, for each element, the number of larger elements that precede it in the array:\n\n\n$$\\text{# of inversions} = \\sum_{j = 1}^n |Inv(j)|,$$\n\n\nwhere $Inv(j) = {i: i < j \\text{ and } A[i] > A[j]}$.\n\n\nNote that $|Inv(j)|$ is related to $A[j]$'s rank in the subarray $A[1..j]$ because the elements in $Inv(j)$ are the reason that $A[j]$ is not positioned according to its rank. Let $r(j)$ be the rank of $A[j]$ in $A[1..j]$. Then $j = r(j) + |Inv(j)|$, so we can compute\n\n\n$$|Inv(j)| = j - r(j)$$\n\n\nby inserting $A[1], \\ldots, A[n]$ into an order-statistic tree and using $\\text{OS-RANK}$ to find the rank of each $A[j]$ in the tree immediately after it is inserted into the tree. (This $\\text{OS-RANK}$ value is $r(j)$.)\n\n\nInsertion and $\\text{OS-RANK}$ each take $O(\\lg n)$ time, and so the total time for $n$ elements is $O(n\\lg n)$.\n\n\n14.1-8 $\\star$\n\n\n\n\nConsider $n$ chords on a circle, each defined by its endpoints. Describe an $O(n\\lg n)$-time algorithm to determine the number of pairs of chords that intersect inside the circle. (For example, if the $n$ chords are all diameters that meet at the center, then the correct answer is $\\binom{n}{2}$.) Assume that no two chords share an endpoint.\n\n\n\n\nSort the vertices in clock-wise order, and assign a unique value to each vertex. For each chord its two vertices are $u_i$, $v_i$ and $u_i < v_i$. Add the vertices one by one in clock-wise order, if we meet a $u_i$, we add it to the order-statistic tree, if we meet a $v_i$, we calculate how many nodes are larger than $u_i$ (which is the number of intersects with chord $i$), and remove $u_i$.",
            "title": "14.1 Dynamic order statistics"
        },
        {
            "location": "/Chap14/14.1/#141-1",
            "text": "Show how $\\text{OS-SELECT}(T.root, 10)$ operates on the red-black tree $T$ of Figure 14.1.    $26: r = 13, i = 10$, go left.  $17: r =  8, i = 10$, go right.  $21: r =  3, i =  2$, go left.  $19: r =  1, i =  2$, go right.  $20: r =  1, i =  1$, choose $20$.",
            "title": "14.1-1"
        },
        {
            "location": "/Chap14/14.1/#141-2",
            "text": "Show how $\\text{OS-RANK}(T, x)$ operates on the red-black tree $T$ of Figure 14.1 and the node $x$ with $x.key = 35$.    $35: r = 1$.  $38: r = 1$.  $30: r = r + 2 = 3$.  $41: r = 3$.  $26: r = r + 13 = 16$.",
            "title": "14.1-2"
        },
        {
            "location": "/Chap14/14.1/#141-3",
            "text": "Write a nonrecursive version of $\\text{OS-SELECT}$.   OS - SELECT ( x ,   i ) \n     r   =   left [ x ]   +   1 \n     while   r   !=   i \n         if   i   <   r \n             x   =   left [ x ] \n         else   x   =   right [ x ] \n             i   =   i   -   r \n         r   =   left [ x ]   +   1",
            "title": "14.1-3"
        },
        {
            "location": "/Chap14/14.1/#141-4",
            "text": "Write a recursive procedure $\\text{OS-KEY-RANK}(T, k)$ that takes as input an order-statistic tree $T$ and a key $k$ and returns the rank of $k$ in the dynamic set represented by $T$. Assume that the keys of $T$ are distinct.   OS - KEY - RANK ( T ,   k ) \n     if   k   ==   key [ root [ T ]] \n         return   size [ left [ root [ T ]]]   +   1 \n     else   if   key [ root [ T ]]   >   k \n         return   OS - KEY - RANK ( left [ T ],   k ) \n     else   return   size [ left [ root [ T ]]]   +   1   +   OS - KEY - RANK ( right [ T ],   k )",
            "title": "14.1-4"
        },
        {
            "location": "/Chap14/14.1/#141-5",
            "text": "Given an element $x$ in an $n$-node order-statistic tree and a natural number $i$, how can we determine the $i$th successor of $x$ in the linear order of the tree in $O(\\lg n)$ time?   Given an element $x$ in an $n$-node order-statistic tree $T$ and a natural number $i$, the following procedure retrieves the $i$th successor of $x$ in the linear order of $T$:  OS - SUCCESSOR ( T ,   x ,   i ) \n     r   =   OS - RANK ( T ,   x ) \n     s   =   r   +   i \n     return   OS - SELECT ( T . root ,   s )   Since $\\text{OS-RANK}$ and $\\text{OS-SELECT}$ each take $O(\\lg n)$ time, so does the procedure $\\text{OS-SUCCESSOR}$.",
            "title": "14.1-5"
        },
        {
            "location": "/Chap14/14.1/#141-6",
            "text": "Observe that whenever we reference the size attribute of a node in either $\\text{OS-SELECT}$ or $\\text{OS-RANK}$, we use it only to compute a rank. Accordingly, suppose we store in each node its rank in the subtree of which it is the root. Show how to maintain this information during insertion and deletion. (Remember that these two operations can cause rotations.)   When inserting node $z$, we search down the tree for the proper place for $z$. For each node $x$ on this path, add $1$ to $x.rank$ if $z$ is inserted within $x$'s left subtree, and leave $x.rank$ unchanged if $z$ is inserted within $x$'s right subtree. Similarly when deleting, subtract $1$ from $x.rank$ whenever the spliced-out node had been in $x$'s left subtree.  We also need to handle the rotations that occur during the fixup procedures for insertion and deletion. Consider a left rotation on node $x$, where the pre-rotation right child of $x$ is $y$ (so that $x$ becomes $y$'s left child after the left rotation). We leave $x.rank$ unchanged, and letting $r = y.rank$ before the rotation, we set $y.rank = r + x.rank$. Right rotations are handled in an analogous manner.",
            "title": "14.1-6"
        },
        {
            "location": "/Chap14/14.1/#141-7",
            "text": "Show how to use an order-statistic tree to count the number of inversions (see Problem 2-4) in an array of size $n$ in time $O(n\\lg n)$.   Let $A[1..n]$\u008d be the array of $n$ distinct numbers.  One way to count the inversions is to add up, for each element, the number of larger elements that precede it in the array:  $$\\text{# of inversions} = \\sum_{j = 1}^n |Inv(j)|,$$  where $Inv(j) = {i: i < j \\text{ and } A[i] > A[j]}$.  Note that $|Inv(j)|$ is related to $A[j]$'s rank in the subarray $A[1..j]$ because the elements in $Inv(j)$ are the reason that $A[j]$ is not positioned according to its rank. Let $r(j)$ be the rank of $A[j]$ in $A[1..j]$. Then $j = r(j) + |Inv(j)|$, so we can compute  $$|Inv(j)| = j - r(j)$$  by inserting $A[1], \\ldots, A[n]$ into an order-statistic tree and using $\\text{OS-RANK}$ to find the rank of each $A[j]$ in the tree immediately after it is inserted into the tree. (This $\\text{OS-RANK}$ value is $r(j)$.)  Insertion and $\\text{OS-RANK}$ each take $O(\\lg n)$ time, and so the total time for $n$ elements is $O(n\\lg n)$.",
            "title": "14.1-7"
        },
        {
            "location": "/Chap14/14.1/#141-8-star",
            "text": "Consider $n$ chords on a circle, each defined by its endpoints. Describe an $O(n\\lg n)$-time algorithm to determine the number of pairs of chords that intersect inside the circle. (For example, if the $n$ chords are all diameters that meet at the center, then the correct answer is $\\binom{n}{2}$.) Assume that no two chords share an endpoint.   Sort the vertices in clock-wise order, and assign a unique value to each vertex. For each chord its two vertices are $u_i$, $v_i$ and $u_i < v_i$. Add the vertices one by one in clock-wise order, if we meet a $u_i$, we add it to the order-statistic tree, if we meet a $v_i$, we calculate how many nodes are larger than $u_i$ (which is the number of intersects with chord $i$), and remove $u_i$.",
            "title": "14.1-8 $\\star$"
        },
        {
            "location": "/Chap14/14.2/",
            "text": "14.2-1\n\n\n\n\nShow, by adding pointers to the nodes, how to support each of the dynamic-set queries $\\text{MINIMUM}$, $\\text{MAXIMUM}$, $\\text{SUCCESSOR}$, and $\\text{PREDECESSOR}$ in $O(1)$worstcase time on an augmented order-statistic tree. The asymptotic performance of other operations on order-statistic trees should not be affected.\n\n\n\n\n\n\nMINIMUM:\n A pointer points to the minimum node, if the node is being deleted, move the pointer to its successor.\n\n\nMAXIMUM:\n Similar to $\\text{MINIMUM}$.\n\n\nSUCCESSOR:\n Every node records its successor, the insertion and deletion is similar to that in linked list.\n\n\nPREDECESSOR:\n Similar to $\\text{MAXIMUM}$.\n\n\n\n\n14.2-2\n\n\n\n\nCan we maintain the black-heights of nodes in a red-black tree as attributes in the nodes of the tree without affecting the asymptotic performance of any of the redblack tree operations? Show how, or argue why not. How about maintaining the depths of nodes?\n\n\n\n\nYes, we can maintain black-heights as attributes in the nodes of a red-black tree without affecting the asymptotic performance of the red-black tree operations. We appeal to Theorem 14.1, because the black-height of a node can be computed from the information at the node and its two children. Actually, the black-height can be computed from just one child's information: the black-height of a node is the black-height of a red child, or the black height of a black child plus one. The second child does not need to be checked because of property 5 of red-black trees.\n\n\nWithin the $\\text{RB-INSERT-FIXUP}$ and $\\text{RB-DELETE-FIXUP}$ procedures are color changes, each of which potentially cause $O(\\lg n)$ black-height changes. Let us show that the color changes of the fixup procedures cause only local black-height changes and thus are constant-time operations. Assume that the black-height of each node $x$ is kept in the attribute $x.bh$.\n\n\nFor $\\text{RB-INSERT-FIXUP}$, there are 3 cases to examine.\n\n\nCase 1:\n $z$'s uncle is red.\n\n\n\n\n\n\nBefore color changes, suppose that all subtrees $\\alpha$, $beta$, $\\gamma$, $\\delta$, $\\epsilon$ have the same black-height $k$ with a black root, so that nodes $A$, $B$, $C$, and $D$ have blackheights of $k + 1$.\n\n\nAfter color changes, the only node whose black-height changed is node $C$. To fix that, add $z.p.p.bh = z.p.p.bh + 1$ after line 7 in $\\text{RB-INSERT-FIXUP}$. \n\n\nSince the number of black nodes between $z.p.p$ and $z$ remains the same, nodes above $z.p.p$ are not affected by the color change.\n\n\n\n\nCase 2:\n $z$'s uncle $y$ is black, and $z$ is a right child.\n\n\nCase 3:\n $z$'s uncle $y$ is black, and $z$ is a left child.\n\n\n\n\n\n\nWith subtrees $\\alpha$, $beta$, $\\gamma$, $\\delta$, $\\epsilon$ of black-height $k$, we see that even with color changes and rotations, the black-heights of nodes $A$, $B$, and $C$ remain the same $(k + 1)$.\n\n\n\n\nThus, $\\text{RB-INSERT-FIXUP}$ maintains its original $O(\\lg n)$ time.\n\nFor $\\text{RB-DELETE-FIXUP}$, there are 4 cases to examine.\n\n\nCase 1:\n $x$'s sibling $w$ is red.\n\n\n\n\n\n\nEven though case 1 changes colors of nodes and does a rotation, blackheights are not changed.\n\n\nCase 1 changes the structure of the tree, but waits for cases 2, 3, and 4 to deal with the \"extra black\" on x.\n\n\n\n\nCase 2:\n $x$'s sibling $w$ is black, and both of $w$'s children are black.\n\n\n\n\n\n\n$w$ is colored red, and $x$'s \"extra\" black is moved up to $x.p$.\n\n\nNow we can add $x.p.bh = x.bh$ after line 10 in $\\text{RB-DELETE-FIXUP}$.\n\n\nThis is a constant-time update. Then, keep looping to deal with the extra black on $x.p$.\n\n\n\n\nCase 3:\n $x$'s sibling w is black, $w$'s left child is red, and $w$'s right child is black.\n\n\n\n\n\n\nRegardless of the color changes and rotation of this case, the black-heights don't change.\n\n\nCase 3 just sets up the structure of the tree, so it can fall correctly into case 4.\n\n\n\n\nCase 4:\n $x$'s sibling $w$ is black, and $w$'s right child is red.\n\n\n\n\n\n\nNodes $A$, $C$, and $E$ keep the same subtrees, so their black-heights don't change.\n\n\nAdd these two constant-time assignments in $\\text{RB-DELETE-FIXUP}$ after line 20:\n\n\n\n\n\n$$\n\\begin{align}\n  x.p.bh & = x.bh + 1 \\\\\nx.p.p.bh & = x.p.bh + 1\n\\end{align}\n$$\n\n\n\n\n\n\n\nThe extra black is taken care of. Loop terminates.\n\n\n\n\n\n\nThus, $\\text{RB-DELETE-FIXUP}$ maintains its original $O(\\lg n)$ time.\n\n\nTherefore, we conclude that black-heights of nodes can be maintained as attributes in red-black trees without affecting the asymptotic performance of red-black tree operations.\n\n\nFor the second part of the question, no, we cannot maintain node depths without affecting the asymptotic performance of red-black tree operations. The depth of a node depends on the depth of its parent. When the depth of a node changes, the depths of all nodes below it in the tree must be updated. Updating the root node causes $n - 1$ other nodes to be updated, which would mean that operations on the tree that change node depths might not run in $O(n\\lg n)$ time.\n\n\n14.2-3 $\\star$\n\n\n\n\nLet $\\otimes$ be an associative binary operator, and let $a$ be an attribute maintained in each node of a red-black tree. Suppose that we want to include in each node $x$ an additional attribute $f$ such that $x.f = x_1.a \\otimes x_2.a \\otimes \\cdots \\otimes x_m.a$, where $x_1, x_2, \\ldots ,x_m$ is the inorder listing of nodes in the subtree rooted at $x$. Show how to update the $f$ attributes in $O(1)$ time after a rotation. Modify your argument slightly to apply it to the $size$ attributes in order-statistic trees.\n\n\n\n\n$x.f = x.left.f \\otimes x.a \\otimes x.right.f$.\n\n\n14.2-4 $\\star$\n\n\n\n\nWe wish to augment red-black trees with an operation $\\text{RB-ENUMERATE}(x, a, b)$ that outputs all the keys $k$ such that $a \\le k \\le b$ in a red-black tree rooted at $x$. Describe how to implement $\\text{RB-ENUMERATE}$ in $\\Theta(m+\\lg n)$ time, where $m$ is the number of keys that are output and $n$ is the number of internal nodes in the tree. ($\\textit{Hint:}$ You do not need to add new attributes to the red-black tree.)\n\n\n\n\n\n\n$\\Theta(\\lg n)$: Find the smallest key that larger than or equal to $a$.\n\n\n$\\Theta(m)$: Based on Exercise 14.2-1, find the $m$ successor.",
            "title": "14.2 How to augment a data structure"
        },
        {
            "location": "/Chap14/14.2/#142-1",
            "text": "Show, by adding pointers to the nodes, how to support each of the dynamic-set queries $\\text{MINIMUM}$, $\\text{MAXIMUM}$, $\\text{SUCCESSOR}$, and $\\text{PREDECESSOR}$ in $O(1)$worstcase time on an augmented order-statistic tree. The asymptotic performance of other operations on order-statistic trees should not be affected.    MINIMUM:  A pointer points to the minimum node, if the node is being deleted, move the pointer to its successor.  MAXIMUM:  Similar to $\\text{MINIMUM}$.  SUCCESSOR:  Every node records its successor, the insertion and deletion is similar to that in linked list.  PREDECESSOR:  Similar to $\\text{MAXIMUM}$.",
            "title": "14.2-1"
        },
        {
            "location": "/Chap14/14.2/#142-2",
            "text": "Can we maintain the black-heights of nodes in a red-black tree as attributes in the nodes of the tree without affecting the asymptotic performance of any of the redblack tree operations? Show how, or argue why not. How about maintaining the depths of nodes?   Yes, we can maintain black-heights as attributes in the nodes of a red-black tree without affecting the asymptotic performance of the red-black tree operations. We appeal to Theorem 14.1, because the black-height of a node can be computed from the information at the node and its two children. Actually, the black-height can be computed from just one child's information: the black-height of a node is the black-height of a red child, or the black height of a black child plus one. The second child does not need to be checked because of property 5 of red-black trees.  Within the $\\text{RB-INSERT-FIXUP}$ and $\\text{RB-DELETE-FIXUP}$ procedures are color changes, each of which potentially cause $O(\\lg n)$ black-height changes. Let us show that the color changes of the fixup procedures cause only local black-height changes and thus are constant-time operations. Assume that the black-height of each node $x$ is kept in the attribute $x.bh$.  For $\\text{RB-INSERT-FIXUP}$, there are 3 cases to examine.  Case 1:  $z$'s uncle is red.    Before color changes, suppose that all subtrees $\\alpha$, $beta$, $\\gamma$, $\\delta$, $\\epsilon$ have the same black-height $k$ with a black root, so that nodes $A$, $B$, $C$, and $D$ have blackheights of $k + 1$.  After color changes, the only node whose black-height changed is node $C$. To fix that, add $z.p.p.bh = z.p.p.bh + 1$ after line 7 in $\\text{RB-INSERT-FIXUP}$.   Since the number of black nodes between $z.p.p$ and $z$ remains the same, nodes above $z.p.p$ are not affected by the color change.   Case 2:  $z$'s uncle $y$ is black, and $z$ is a right child.  Case 3:  $z$'s uncle $y$ is black, and $z$ is a left child.    With subtrees $\\alpha$, $beta$, $\\gamma$, $\\delta$, $\\epsilon$ of black-height $k$, we see that even with color changes and rotations, the black-heights of nodes $A$, $B$, and $C$ remain the same $(k + 1)$.   Thus, $\\text{RB-INSERT-FIXUP}$ maintains its original $O(\\lg n)$ time. \nFor $\\text{RB-DELETE-FIXUP}$, there are 4 cases to examine.  Case 1:  $x$'s sibling $w$ is red.    Even though case 1 changes colors of nodes and does a rotation, blackheights are not changed.  Case 1 changes the structure of the tree, but waits for cases 2, 3, and 4 to deal with the \"extra black\" on x.   Case 2:  $x$'s sibling $w$ is black, and both of $w$'s children are black.    $w$ is colored red, and $x$'s \"extra\" black is moved up to $x.p$.  Now we can add $x.p.bh = x.bh$ after line 10 in $\\text{RB-DELETE-FIXUP}$.  This is a constant-time update. Then, keep looping to deal with the extra black on $x.p$.   Case 3:  $x$'s sibling w is black, $w$'s left child is red, and $w$'s right child is black.    Regardless of the color changes and rotation of this case, the black-heights don't change.  Case 3 just sets up the structure of the tree, so it can fall correctly into case 4.   Case 4:  $x$'s sibling $w$ is black, and $w$'s right child is red.    Nodes $A$, $C$, and $E$ keep the same subtrees, so their black-heights don't change.  Add these two constant-time assignments in $\\text{RB-DELETE-FIXUP}$ after line 20:   \n$$\n\\begin{align}\n  x.p.bh & = x.bh + 1 \\\\\nx.p.p.bh & = x.p.bh + 1\n\\end{align}\n$$    The extra black is taken care of. Loop terminates.    Thus, $\\text{RB-DELETE-FIXUP}$ maintains its original $O(\\lg n)$ time.  Therefore, we conclude that black-heights of nodes can be maintained as attributes in red-black trees without affecting the asymptotic performance of red-black tree operations.  For the second part of the question, no, we cannot maintain node depths without affecting the asymptotic performance of red-black tree operations. The depth of a node depends on the depth of its parent. When the depth of a node changes, the depths of all nodes below it in the tree must be updated. Updating the root node causes $n - 1$ other nodes to be updated, which would mean that operations on the tree that change node depths might not run in $O(n\\lg n)$ time.",
            "title": "14.2-2"
        },
        {
            "location": "/Chap14/14.2/#142-3-star",
            "text": "Let $\\otimes$ be an associative binary operator, and let $a$ be an attribute maintained in each node of a red-black tree. Suppose that we want to include in each node $x$ an additional attribute $f$ such that $x.f = x_1.a \\otimes x_2.a \\otimes \\cdots \\otimes x_m.a$, where $x_1, x_2, \\ldots ,x_m$ is the inorder listing of nodes in the subtree rooted at $x$. Show how to update the $f$ attributes in $O(1)$ time after a rotation. Modify your argument slightly to apply it to the $size$ attributes in order-statistic trees.   $x.f = x.left.f \\otimes x.a \\otimes x.right.f$.",
            "title": "14.2-3 $\\star$"
        },
        {
            "location": "/Chap14/14.2/#142-4-star",
            "text": "We wish to augment red-black trees with an operation $\\text{RB-ENUMERATE}(x, a, b)$ that outputs all the keys $k$ such that $a \\le k \\le b$ in a red-black tree rooted at $x$. Describe how to implement $\\text{RB-ENUMERATE}$ in $\\Theta(m+\\lg n)$ time, where $m$ is the number of keys that are output and $n$ is the number of internal nodes in the tree. ($\\textit{Hint:}$ You do not need to add new attributes to the red-black tree.)    $\\Theta(\\lg n)$: Find the smallest key that larger than or equal to $a$.  $\\Theta(m)$: Based on Exercise 14.2-1, find the $m$ successor.",
            "title": "14.2-4 $\\star$"
        },
        {
            "location": "/Chap14/14.3/",
            "text": "14.3-1\n\n\n\n\nWrite pseudocode for $\\text{LEFT-ROTATE}$ that operates on nodes in an interval tree and updates the $max$ attributes in $O(1)$ time.\n\n\n\n\nAdd 2 lines in $\\text{LEFT-ROTATE}$ in 13.2\n\n\n    \nmax\n[\ny\n]\n \n=\n \nmax\n[\nx\n]\n\n    \nmax\n[\nx\n]\n \n=\n \nmax\n(\nhigh\n[\nx\n],\n \nmax\n(\nleft\n[\nx\n]),\n \nmax\n(\nright\n[\nx\n]))\n\n\n\n\n\n14.3-2\n\n\n\n\nRewrite the code for $\\text{INTERVAL-SEARCH}$ so that it works properly when all intervals are open.\n\n\n\n\nINTERVAL\n-\nSEARCH\n(\nT\n,\n \ni\n)\n\n    \nx\n \n=\n \nT\n.\nroot\n\n    \nwhile\n \nx\n \n!=\n \nT\n.\nnil\n \nand\n \n(\ni\n.\nhigh\n \n\u2264\n \nx\n.\nint\n.\nleft\n \nor\n \nx\n.\nint\n.\nright\n \n\u2264\n \ni\n.\nlow\n)\n\n        \nif\n \nx\n.\nleft\n \n!=\n \nT\n.\nnil\n \nand\n \nx\n.\nleft\n.\nmax\n \n>\n \ni\n.\nlow\n\n            \nx\n \n=\n \nx\n.\nleft\n\n        \nelse\n \nx\n \n=\n \nx\n.\nright\n\n    \nreturn\n \nx\n\n\n\n\n\n14.3-3\n\n\n\n\nDescribe an efficient algorithm that, given an interval $i$ , returns an interval overlapping $i$ that has the minimum low endpoint, or $T.nil$ if no such interval exists.\n\n\n\n\nAs it travels down the tree, $\\text{INTERVAL-SEARCH}$ first checks whether current node $x$ overlaps the query interval $i$ and, if it does not, goes down to either the left or right child. If node $x$ overlaps $i$, and some node in the right subtree overlaps $i$, but no node in the left subtree overlaps $i$, then because the keys are low endpoints, this order of checking (first  $x$, then one child) will return the overlapping interval with the minimum low endpoint. On the other hand, if there is an interval that overlaps $i$ in the left subtree of $x$, then checking $x$ before the left subtree might cause the procedure to return an interval whose low endpoint is not the minimum of those that overlap $i$. Therefore, if there is a possibility that the left subtree might contain an interval that overlaps $i$, we need to check the left subtree first. If there is no overlap in the left subtree but node $x$ overlaps $i$, then we return $x$. We check the right subtree under the same conditions as in $\\text{INTERVAL-SEARCH}$: the left subtree cannot contain an interval that overlaps $i$, and node $x$ does not overlap $i$, either.\n\n\nBecause we might search the left subtree first, it is easier to write the pseudocode to use a recursive procedure $\\text{MIN-INTERVAL-SEARCH-FROM}(T, x, i)$, which returns the node overlapping $i$ with the minimum low endpoint in the subtree rooted at $x$, or $T.nil$ if there is no such node.\n\n\nMIN\n-\nINTERVAL\n-\nSEARCH\n(\nT\n,\n \ni\n)\n\n    \nreturn\n \nMIN\n-\nINTERVAL\n-\nSEARCH\n-\nFROM\n(\nT\n,\n \nT\n.\nroot\n,\n \ni\n)\n\n\n\n\n\nMIN\n-\nINTERVAL\n-\nSEARCH\n-\nFROM\n(\nT\n,\n \nx\n,\n \ni\n)\n\n    \nif\n \nx\n.\nleft\n \n!=\n \nT\n.\nnil\n \nand\n \nx\n.\nleft\n.\nmax\n \n\u2265\n \ni\n.\nlow\n\n        \ny\n \n=\n \nMIN\n-\nINTERVAL\n-\nSEARCH\n-\nFROM\n(\nT\n,\n \nx\n.\nleft\n,\n \ni\n)\n\n        \nif\n \ny\n \n!=\n \nT\n.\nnil\n\n            \nreturn\n \ny\n\n        \nelse\n \nif\n \ni\n \noverlaps\n \nx\n.\nint\n\n            \nreturn\n \nx\n\n        \nelse\n \nreturn\n \nT\n.\nnil\n\n    \nelse\n \nif\n \ni\n \noverlaps\n \nx\n.\nint\n\n        \nreturn\n \nx\n\n    \nelse\n \nreturn\n \nMIN\n-\nINTERVAL\n-\nSEARCH\n-\nFROM\n(\nT\n,\n \nx\n.\nright\n,\n \ni\n)\n\n\n\n\n\nThe call $\\text{MIN-INTERVAL-SEARCH}(T, i)$ takes $O\\lg n)$ time, since each recursive call of $\\text{MIN-INTERVAL-SEARCH-FROM}$ goes one node lower in the tree, and the height of the tree is $O(\\lg n)$.\n\n\n14.3-4\n\n\n\n\nGiven an interval tree $T$ and an interval $i$, describe how to list all intervals in $T$ that overlap $i$ in $O(\\min(n, k \\lg n))$ time, where $k$ is the number of intervals in the output list. ($\\textit{Hint:}$ One simple method makes several queries, modifying the tree between queries. A slightly more complicated method does not modify the tree.)\n\n\n\n\nINTERVALS\n-\nSEARCH\n(\nT\n,\n \nx\n,\n \ni\n)\n\n    \nlist\n \n=\n \n[]\n\n    \nif\n \ni\n \noverlaps\n \nx\n.\nint\n\n        \nlist\n.\nappend\n(\nx\n)\n\n    \nif\n \nx\n.\nleft\n \n!=\n \nT\n.\nnil\n \nand\n \nx\n.\nleft\n.\nmax\n \n>\n \ni\n.\nlow\n\n        \nlist\n \n=\n \nlist\n \n+\n \nINTERVALS\n-\nSEARCH\n(\nT\n,\n \nx\n.\nleft\n,\n \ni\n)\n\n    \nif\n \nx\n.\nright\n \n!=\n \nT\n.\nnil\n \nand\n \nx\n.\nint\n.\nlow\n \n\u2264\n \ni\n.\nhigh\n \nand\n \nx\n.\nright\n.\nmax\n \n\u2265\n \ni\n.\nlow\n\n        \nlist\n \n=\n \nlist\n \n+\n \nINTERVALS\n-\nSEARCH\n(\nT\n,\n \nx\n.\nright\n,\n \ni\n)\n\n    \nreturn\n \nlist\n\n\n\n\n\n14.3-5\n\n\n\n\nSuggest modifications to the interval-tree procedures to support the new operation $\\text{INTERVAL-SEARCH-EXACTLY}(T, i)$, where $T$ is an interval tree and $i$ is an interval. The operation should return a pointer to a node $x$ in $T$ such that $x.int.low = i.low$ and $x.int.high = i.high$, or $T.nil$ if $T$ contains no such node. All operations, including $\\text{INTERVAL-SEARCH-EXACTLY}$, should run in $O(\\lg n)$ time on an $n$-node interval tree.\n\n\n\n\nSearch for nodes which has exactly the same low value.\n\n\nINTERVAL\n-\nSEARCH\n-\nEXACTLY\n(\nT\n,\n \ni\n)\n\n    \nx\n \n=\n \nroot\n[\nT\n]\n\n    \nwhile\n \nx\n \n!=\n \nnil\n[\nT\n]\n \nand\n \ni\n \nnot\n \nexactly\n \noverlap\n \nx\n\n        \nif\n \nhigh\n[\ni\n]\n \n>\n \nmax\n[\nx\n]\n\n            \nx\n \n=\n \nnil\n[\nT\n]\n\n        \nelse\n \nif\n \nlow\n[\ni\n]\n \n<\n \nlow\n[\nx\n]\n\n            \nx\n \n=\n \nleft\n[\nx\n]\n\n        \nelse\n \nif\n \nlow\n[\ni\n]\n \n>\n \nlow\n[\nx\n]\n\n            \nx\n \n=\n \nright\n[\nx\n]\n\n        \nelse\n \nx\n \n=\n \nnil\n[\nT\n]\n\n    \nreturn\n \nx\n\n\n\n\n\n14.3-6\n\n\n\n\nShow how to maintain a dynamic set $Q$ of numbers that supports the operation $\\text{MIN-GAP}$, which gives the magnitude of the difference of the two closest numbers in $Q$. For example, if $Q = {1, 5, 9, 15, 18, 22}$, then $\\text{MIN-GAP}(Q)$ returns $18 - 15 = 3$, since $15$ and $18$ are the two closest numbers in $Q$. Make the operations $\\text{INSERT}$, $\\text{DELETE}$, $\\text{SEARCH}$, and $\\text{MIN-GAP}$ as efficient as possible, and analyze their running times.\n\n\n\n\n\n\n\n\nUnderlying data structure:\n\n    A red-black tree in which the numbers in the set are stored simply as the keys of the nodes.\n\n    $\\text{SEARCH}$ is then just the ordinary $\\text{TREE-SEARCH}$ for binary search trees, which runs in $O(\\lg n)$ time on red-black trees.\n\n\n\n\n\n\nAdditional information:\n\n    The red-black tree is augmented by the following attributes in each node $x$:  \n\n\n\n\n$x.min\\text-gap$ contains the minimum gap in the subtree rooted at $x$. It has the magnitude of the difference of the two closest numbers in the subtree rooted at $x$. If $x$ is a leaf (its children are all $T.nil$), let $x.min\\text-gap = \\infty$. \n\n\n$x.min\\text-val$ contains the minimum value ($key$) in the subtree rooted at $x$. \n\n\n$x.max\\text-val$ contains the maximum value ($key$) in the subtree rooted at $x$.\n\n\n\n\n\n\n\n\nMaintaining the information:\n\n    The three attributes added to the tree can each be computed from information in the node and its children. Hence by Theorem 14.1, they can be maintained during insertion and deletion without affecting the $O(\\lg n)$ running time:\n\n\n$$\nx.min\\text-val =\n\\begin{cases}\nx.left.min\\text-val & \\text{if there is a left subtree}, \\\\\n              x.key & \\text{otherwise},\n\\end{cases}\n$$\n\n\n$$\nx.max\\text-val =\n\\begin{cases}\nx.right.max\\text-val & \\text{if there is a right subtree}, \\\\\n               x.key & \\text{otherwise},\n\\end{cases}\n$$\n\n\n$$\nx.min\\text-gap = \\min\n\\begin{cases}\n         x.left.min\\text-gap & \\text{($\\infty$ if no left subtree)}, \\\\\n        x.right.min\\text-gap & \\text{($\\infty$ if no right subtree)}, \\\\\n x.key - x.left.max\\text-val & \\text{($\\infty$ if no left subtree)}, \\\\\nx.right.min\\text-val - x.key & \\text{($\\infty$ if no right subtree)}.\n\\end{cases}\n$$\n\n\nIn fact, the reason for defining the $min\\text-val$ and $min\\text-val$ attributes is to make it possible to compute $min\\text-gap$ from information at the node and its children.\n\n\n\n\n\n\nNew operation:\n\n    $\\text{MIN-GAP}$ simply returns the $min\\text-gap$ stored at the tree root. Thus, its running time is $O(1)$.\n\n    Note that in addition (not asked for in the exercise), it is possible to find the two closest numbers in $O(\\lg n)$ time. Starting from the root, look for where the minimum gap (the one stored at the root) came from. At each node $x$, simulate the computation of $x.min\\text-gap$ to figure out where $x.min\\text-gap$ came from. If it came from a subtree's $min\\text-gap$ attribute, continue the search in that subtree. If it came from a computation with $x$'s key, then $x$ and that other number are the closest numbers.\n\n\n\n\n\n\n14.3-7 $\\star$\n\n\n\n\nVLSI databases commonly represent an integrated circuit as a list of rectangles. Assume that each rectangle is rectilinearly oriented (sides parallel to the $x$- and $y$-axes), so that we represent a rectangle by its minimum and maximum $x$ and $y$-coordinates. Give an $O(n\\lg n)$-time algorithm to decide whether or not a set of $n$ rectangles so represented contains two rectangles that overlap. Your algorithm need not report all intersecting pairs, but it must report that an overlap exists if one rectangle entirely covers another, even if the boundary lines do not intersect. ($\\textit{Hint:}$ Move a \"sweep\" line across the set of rectangles.)\n\n\n\n\nGeneral idea: Move a sweep line from left to right, while maintaining the set of rectangles currently intersected by the line in an interval tree. The interval tree will organize all rectangles whose $x$ interval includes the current position of the sweep line, and it will be based on the $y$ intervals of the rectangles, so that any overlapping $y$ intervals in the interval tree correspond to overlapping rectangles. Details:\n\n\n\n\n\n\nSort the rectangles by their $x$-coordinates. (Actually, each rectangle must appear twice in the sorted list\u2014once for its left $x$-coordinate and once for its right $x$-coordinate.)\n\n\n\n\n\n\nScan the sorted list (from lowest to highest $x$-coordinate).\n\n\n\n\nWhen an $x$-coordinate of a left edge is found, check whether the rectangle's $y$-coordinate interval overlaps an interval in the tree, and insert the rectangle (keyed on its $y$-coordinate interval) into the tree.\n\n\nWhen an $x$-coordinate of a right edge is found, delete the rectangle from the interval tree.\n\n\n\n\n\n\n\n\nThe interval tree always contains the set of \"open\" rectangles intersected by the sweep line. If an overlap is ever found in the interval tree, there are overlapping rectangles.\n\n\nTime: $O(n\\lg n)$.\n\n\n\n\n$O(n\\lg n)$ to sort the rectangles (we can use merge sort or heap sort).\n\n\n$O(n\\lg n)$ for interval-tree operations (insert, delete, and check for overlap).",
            "title": "14.3 Interval trees"
        },
        {
            "location": "/Chap14/14.3/#143-1",
            "text": "Write pseudocode for $\\text{LEFT-ROTATE}$ that operates on nodes in an interval tree and updates the $max$ attributes in $O(1)$ time.   Add 2 lines in $\\text{LEFT-ROTATE}$ in 13.2       max [ y ]   =   max [ x ] \n     max [ x ]   =   max ( high [ x ],   max ( left [ x ]),   max ( right [ x ]))",
            "title": "14.3-1"
        },
        {
            "location": "/Chap14/14.3/#143-2",
            "text": "Rewrite the code for $\\text{INTERVAL-SEARCH}$ so that it works properly when all intervals are open.   INTERVAL - SEARCH ( T ,   i ) \n     x   =   T . root \n     while   x   !=   T . nil   and   ( i . high   \u2264   x . int . left   or   x . int . right   \u2264   i . low ) \n         if   x . left   !=   T . nil   and   x . left . max   >   i . low \n             x   =   x . left \n         else   x   =   x . right \n     return   x",
            "title": "14.3-2"
        },
        {
            "location": "/Chap14/14.3/#143-3",
            "text": "Describe an efficient algorithm that, given an interval $i$ , returns an interval overlapping $i$ that has the minimum low endpoint, or $T.nil$ if no such interval exists.   As it travels down the tree, $\\text{INTERVAL-SEARCH}$ first checks whether current node $x$ overlaps the query interval $i$ and, if it does not, goes down to either the left or right child. If node $x$ overlaps $i$, and some node in the right subtree overlaps $i$, but no node in the left subtree overlaps $i$, then because the keys are low endpoints, this order of checking (first  $x$, then one child) will return the overlapping interval with the minimum low endpoint. On the other hand, if there is an interval that overlaps $i$ in the left subtree of $x$, then checking $x$ before the left subtree might cause the procedure to return an interval whose low endpoint is not the minimum of those that overlap $i$. Therefore, if there is a possibility that the left subtree might contain an interval that overlaps $i$, we need to check the left subtree first. If there is no overlap in the left subtree but node $x$ overlaps $i$, then we return $x$. We check the right subtree under the same conditions as in $\\text{INTERVAL-SEARCH}$: the left subtree cannot contain an interval that overlaps $i$, and node $x$ does not overlap $i$, either.  Because we might search the left subtree first, it is easier to write the pseudocode to use a recursive procedure $\\text{MIN-INTERVAL-SEARCH-FROM}(T, x, i)$, which returns the node overlapping $i$ with the minimum low endpoint in the subtree rooted at $x$, or $T.nil$ if there is no such node.  MIN - INTERVAL - SEARCH ( T ,   i ) \n     return   MIN - INTERVAL - SEARCH - FROM ( T ,   T . root ,   i )   MIN - INTERVAL - SEARCH - FROM ( T ,   x ,   i ) \n     if   x . left   !=   T . nil   and   x . left . max   \u2265   i . low \n         y   =   MIN - INTERVAL - SEARCH - FROM ( T ,   x . left ,   i ) \n         if   y   !=   T . nil \n             return   y \n         else   if   i   overlaps   x . int \n             return   x \n         else   return   T . nil \n     else   if   i   overlaps   x . int \n         return   x \n     else   return   MIN - INTERVAL - SEARCH - FROM ( T ,   x . right ,   i )   The call $\\text{MIN-INTERVAL-SEARCH}(T, i)$ takes $O\\lg n)$ time, since each recursive call of $\\text{MIN-INTERVAL-SEARCH-FROM}$ goes one node lower in the tree, and the height of the tree is $O(\\lg n)$.",
            "title": "14.3-3"
        },
        {
            "location": "/Chap14/14.3/#143-4",
            "text": "Given an interval tree $T$ and an interval $i$, describe how to list all intervals in $T$ that overlap $i$ in $O(\\min(n, k \\lg n))$ time, where $k$ is the number of intervals in the output list. ($\\textit{Hint:}$ One simple method makes several queries, modifying the tree between queries. A slightly more complicated method does not modify the tree.)   INTERVALS - SEARCH ( T ,   x ,   i ) \n     list   =   [] \n     if   i   overlaps   x . int \n         list . append ( x ) \n     if   x . left   !=   T . nil   and   x . left . max   >   i . low \n         list   =   list   +   INTERVALS - SEARCH ( T ,   x . left ,   i ) \n     if   x . right   !=   T . nil   and   x . int . low   \u2264   i . high   and   x . right . max   \u2265   i . low \n         list   =   list   +   INTERVALS - SEARCH ( T ,   x . right ,   i ) \n     return   list",
            "title": "14.3-4"
        },
        {
            "location": "/Chap14/14.3/#143-5",
            "text": "Suggest modifications to the interval-tree procedures to support the new operation $\\text{INTERVAL-SEARCH-EXACTLY}(T, i)$, where $T$ is an interval tree and $i$ is an interval. The operation should return a pointer to a node $x$ in $T$ such that $x.int.low = i.low$ and $x.int.high = i.high$, or $T.nil$ if $T$ contains no such node. All operations, including $\\text{INTERVAL-SEARCH-EXACTLY}$, should run in $O(\\lg n)$ time on an $n$-node interval tree.   Search for nodes which has exactly the same low value.  INTERVAL - SEARCH - EXACTLY ( T ,   i ) \n     x   =   root [ T ] \n     while   x   !=   nil [ T ]   and   i   not   exactly   overlap   x \n         if   high [ i ]   >   max [ x ] \n             x   =   nil [ T ] \n         else   if   low [ i ]   <   low [ x ] \n             x   =   left [ x ] \n         else   if   low [ i ]   >   low [ x ] \n             x   =   right [ x ] \n         else   x   =   nil [ T ] \n     return   x",
            "title": "14.3-5"
        },
        {
            "location": "/Chap14/14.3/#143-6",
            "text": "Show how to maintain a dynamic set $Q$ of numbers that supports the operation $\\text{MIN-GAP}$, which gives the magnitude of the difference of the two closest numbers in $Q$. For example, if $Q = {1, 5, 9, 15, 18, 22}$, then $\\text{MIN-GAP}(Q)$ returns $18 - 15 = 3$, since $15$ and $18$ are the two closest numbers in $Q$. Make the operations $\\text{INSERT}$, $\\text{DELETE}$, $\\text{SEARCH}$, and $\\text{MIN-GAP}$ as efficient as possible, and analyze their running times.     Underlying data structure: \n    A red-black tree in which the numbers in the set are stored simply as the keys of the nodes. \n    $\\text{SEARCH}$ is then just the ordinary $\\text{TREE-SEARCH}$ for binary search trees, which runs in $O(\\lg n)$ time on red-black trees.    Additional information: \n    The red-black tree is augmented by the following attributes in each node $x$:     $x.min\\text-gap$ contains the minimum gap in the subtree rooted at $x$. It has the magnitude of the difference of the two closest numbers in the subtree rooted at $x$. If $x$ is a leaf (its children are all $T.nil$), let $x.min\\text-gap = \\infty$.   $x.min\\text-val$ contains the minimum value ($key$) in the subtree rooted at $x$.   $x.max\\text-val$ contains the maximum value ($key$) in the subtree rooted at $x$.     Maintaining the information: \n    The three attributes added to the tree can each be computed from information in the node and its children. Hence by Theorem 14.1, they can be maintained during insertion and deletion without affecting the $O(\\lg n)$ running time:  $$\nx.min\\text-val =\n\\begin{cases}\nx.left.min\\text-val & \\text{if there is a left subtree}, \\\\\n              x.key & \\text{otherwise},\n\\end{cases}\n$$  $$\nx.max\\text-val =\n\\begin{cases}\nx.right.max\\text-val & \\text{if there is a right subtree}, \\\\\n               x.key & \\text{otherwise},\n\\end{cases}\n$$  $$\nx.min\\text-gap = \\min\n\\begin{cases}\n         x.left.min\\text-gap & \\text{($\\infty$ if no left subtree)}, \\\\\n        x.right.min\\text-gap & \\text{($\\infty$ if no right subtree)}, \\\\\n x.key - x.left.max\\text-val & \\text{($\\infty$ if no left subtree)}, \\\\\nx.right.min\\text-val - x.key & \\text{($\\infty$ if no right subtree)}.\n\\end{cases}\n$$  In fact, the reason for defining the $min\\text-val$ and $min\\text-val$ attributes is to make it possible to compute $min\\text-gap$ from information at the node and its children.    New operation: \n    $\\text{MIN-GAP}$ simply returns the $min\\text-gap$ stored at the tree root. Thus, its running time is $O(1)$. \n    Note that in addition (not asked for in the exercise), it is possible to find the two closest numbers in $O(\\lg n)$ time. Starting from the root, look for where the minimum gap (the one stored at the root) came from. At each node $x$, simulate the computation of $x.min\\text-gap$ to figure out where $x.min\\text-gap$ came from. If it came from a subtree's $min\\text-gap$ attribute, continue the search in that subtree. If it came from a computation with $x$'s key, then $x$ and that other number are the closest numbers.",
            "title": "14.3-6"
        },
        {
            "location": "/Chap14/14.3/#143-7-star",
            "text": "VLSI databases commonly represent an integrated circuit as a list of rectangles. Assume that each rectangle is rectilinearly oriented (sides parallel to the $x$- and $y$-axes), so that we represent a rectangle by its minimum and maximum $x$ and $y$-coordinates. Give an $O(n\\lg n)$-time algorithm to decide whether or not a set of $n$ rectangles so represented contains two rectangles that overlap. Your algorithm need not report all intersecting pairs, but it must report that an overlap exists if one rectangle entirely covers another, even if the boundary lines do not intersect. ($\\textit{Hint:}$ Move a \"sweep\" line across the set of rectangles.)   General idea: Move a sweep line from left to right, while maintaining the set of rectangles currently intersected by the line in an interval tree. The interval tree will organize all rectangles whose $x$ interval includes the current position of the sweep line, and it will be based on the $y$ intervals of the rectangles, so that any overlapping $y$ intervals in the interval tree correspond to overlapping rectangles. Details:    Sort the rectangles by their $x$-coordinates. (Actually, each rectangle must appear twice in the sorted list\u2014once for its left $x$-coordinate and once for its right $x$-coordinate.)    Scan the sorted list (from lowest to highest $x$-coordinate).   When an $x$-coordinate of a left edge is found, check whether the rectangle's $y$-coordinate interval overlaps an interval in the tree, and insert the rectangle (keyed on its $y$-coordinate interval) into the tree.  When an $x$-coordinate of a right edge is found, delete the rectangle from the interval tree.     The interval tree always contains the set of \"open\" rectangles intersected by the sweep line. If an overlap is ever found in the interval tree, there are overlapping rectangles.  Time: $O(n\\lg n)$.   $O(n\\lg n)$ to sort the rectangles (we can use merge sort or heap sort).  $O(n\\lg n)$ for interval-tree operations (insert, delete, and check for overlap).",
            "title": "14.3-7 $\\star$"
        },
        {
            "location": "/Chap14/Problems/14-1/",
            "text": "Suppose that we wish to  keep track of a \npoint of maximum overlap\n in a set of intervals\u2014a point with the largest number of intervals in the set that overlap it.\n\n\na.\n Show that there will always be a point of maximum overlap that is an endpoint of one of the segments.\n\n\nb.\n Design a data structure that efficiently supports the operations $\\text{INTERVAL-INSERT}$, $\\text{INTERVAL-DELETE}$, and $\\text{FIND-POM}$, which returns a point of maximum overlap. ($\\textit{Hint:}$ Keep a red-black tree of all the endpoints. Associate a value of $+1$ with each left endpoint, and associate a value of $-1$ with each right endpoint. Augment each node of the tree with some extra information to maintain the point of maximum overlap.)\n\n\n\n\na.\n Assume for the purpose of contradiction that there is no point of maximum overlap in an endpoint of a segment. The maximum overlap point $p$ is in the interior of $m$ segments. Actually, $p$ is in the interior of the intersection of those $m$ segments. Now look at one of the endpoints $p'$ of the intersection of the $m$ segments. Point $p'$ has the same overlap as $p$ because it is in the same intersection of $m$ segments, and so $p'$ is also a point of maximum overlap. Moreover, $p'$ is in the endpoint of a segment (otherwise the intersection would not end there), which contradicts our assumption that there is no point of maximum overlap in an endpoint of a segment. Thus, there is always a point of maximum overlap which is an endpoint of one of the segments.\n\n\nb.\n Keep a balanced binary search tree of the endpoints. That is, to insert an interval, we insert its endpoints separately. With each left endpoint $e$, associate a value $p(e) = +1$ (increasing the overlap by $1$). With each right endpoint $e$ associate a value $p(e) = -1$ (decreasing the overlap by $1$). When multiple endpoints have the same value, insert all the left endpoints with that value before inserting any of the right endpoints with that value.\n\n\nHere's some intuition. Let $e_1, e_2, \\ldots, e_n$ be the sorted sequence of endpoints corresponding to our intervals. Let $s(i, j)$ denote the sum $p(e_i) + p(e_{i + 1}) + \\cdots + p(e_j)$ for $1 \\le i \\le j \\le n$. We wish to find an $i$ maximizing $s(1, i)$.\n\n\nFor each node $x$ in the tree, let $l(x)$ and $r(x)$ be the indices in the sorted order of the leftmost and rightmost endpoints, respectively, in the subtree rooted at $x$. Then the subtree rooted at $x$ contains the endpoints $e_{l(x)}, e_{l(x) + 1}, \\ldots, e_{r(x)}$.\n\n\nEach node $x$ stores three new attributes. We store $x.v = s(l(x), r(x))$, the sum of the values of all nodes in the subtree rooted at $x$. We also store $x.m$, the maximum value obtained by the expression $s(l(x), i)$ for any $i$ in ${l(x), l(x) + 1, \\ldots, r(x)}$. Finally, we store $x.o$ as the value of $i$ for which $x.m$ achieves its maximum. For the sentinel, we define $T.nil.v = T.nil.m = 0$.\n\n\nWe can compute these attributes in a bottom-up fashion to satisfy the requirements of Theorem 14.1:\n\n\n$$x.v = x.left.v + p(x) + x.right.v,$$\n\n\n$$\nx.m = \\max\n\\begin{cases}\n                   x.left.m & \\text{(max is in $x$'s left subtree)}, \\\\\n            x.left.v + p(x) & \\text{(max is at $x$)}, \\\\\nx.left.v + p(x) + x.right.m & \\text{(max is in $x$'s right subtree)}.\n\\end{cases}\n$$\n\n\nComputing $x.v$ is straightforward. Computing $x.m$ bears further explanation. Recall that it is the maximum value of the sum of the $p$ values for the nodes in the subtree rooted at $x$, starting at the node for $e_{l(x)}$, which is the leftmost endpoint in $x$'s subtree, and ending at any node for $e_i$ in $x$'s subtree. The endpoint $e_i$ that maximizes this sum\u2014let's call it $e_{i^*}$\u2014corresponds to either a node in $x$'s left subtree, $x$ itself, or a node in $x$'s right subtree. If $e_{i^*}$  corresponds to a node in $x$'s left subtree, then $x.left.m$ represents a sum starting at the node for $e_{l(x)}$ and ending at a node in $x$'s left subtree, and hence $x.m = x.left.m$. If $e_i$ corresponds to $x$ itself, then $x.m$ represents the sum of all $p$ values in $x$'s left subtree, plus $p(x)$, so that $x.m = x.left.v + p(x)$. Finally, if $e_{i^*}$ corresponds to a node in $x$'s right subtree, then $x.m$ represents the sum of all $p$ values in $x$'s left subtree, plus $p(x)$, plus the sum of some subset of $p$ values in $x$'s right subtree. Moreover, the values taken from $x$'s right subtree must start from the leftmost endpoint stored in the right subtree. To maximize this sum, we need to maximize the sum from the right subtree, and that value is precisely $x.right.m$. Hence, in this case, $x.m = x.left.v + p(x) + x.right.m$.\n\n\nOnce we understand how to compute $x.m$, it is straightforward to compute $x.o$ from the information in $x$ and its two children. Thus, we can implement the operations as follows:\n\n\n\n\n$\\text{INTERVAL-INSERT}$: insert two nodes, one for each endpoint of the interval.\n\n\n$\\text{FIND-POM}$: return the interval whose endpoint is represented by $T.root.o$.\n\n\n\n\n(Note that because we are building a binary search tree of all the endpoints and then determining $T.root.o$, we have no need to delete any nodes from the tree.)\n\n\nBecause of how we have defined the new attributes, Theorem 14.1 says that each operation runs in $O(\\lg n)$ time. In fact, $\\text{FIND-POM}$ takes only $O(1)$ time.",
            "title": "14-1 Point of maximum overlap"
        },
        {
            "location": "/Chap14/Problems/14-2/",
            "text": "We define the \nJosephus problem\n as follows. Suppose that $n$ people form a circle and that we are given a positive integer $m \\ge n$. Beginning with a designated first person, we proceed around the circle, removing every $m$th person. After each person is removed, counting continues around the circle that remains. This process continues until we have removed all $n$ people. The order in which the people are removed from the circle defines the \n$(n, m)$-Josephus permutation\n of the integers $1, 2, \\ldots, n$. For example, the $(7, 3)$-Josephus permutation is $\\langle 3, 6, 2, 7, 5, 1, 4 \\rangle$.\n\n\na.\n Suppose that $m$ is a constant. Describe an $O(n)$-time algorithm that, given an integer $n$, outputs the $(n, m)$-Josephus permutation.\n\n\nb.\n Suppose that $m$ is not a constant. Describe an $O(n\\lg n)$-time algorithm that, given integers $n$ and $m$, outputs the $(n, m)$-Josephus permutation.\n\n\n\n\na.\n We use a circular list in which each element has two attributes, $key$ and $next$. At the beginning, we initialize the list to contain the keys $1, 2, \\ldots, n$ in that order. This initialization takes $O(n)$ time, since there is only a constant amount of work per element (i.e., setting its $key$ and its $next$ attributes). We make the list circular by letting the $next$ attribute of the last element point to the first element.\n\n\nWe then start scanning the list from the beginning. We output and then delete every $m$th element, until the list becomes empty. The output sequence is the $(n, m)$-Josephus permutation. This process takes $O(m)$ time per element, for a total time of $O(mn)$. Since m is a constant, we get $O(mn) = O(n)$ time, as required.\n\n\nb.\n We can use an order-statistic tree, straight out of Section 14.1. Why? Suppose that we are at a particular spot in the permutation, and let's say that it's the $j$th largest remaining person. Suppose that there are $k \\le n$ people remaining. Then we will remove person $j$, decrement $k$ to reflect having removed this person, and then go on to the $(j + m - 1)$ largest remaining person (subtract $1$ because we have just removed the $j$th largest). But that assumes that $j + m \\le k$. If not, then we use a little modular arithmetic, as shown below.\n\n\nIn detail, we use an order-statistic tree $T$, and we call the procedures $\\text{OS-INSERT}$, $\\text{OS-DELETE}$, $\\text{OS-RANK}$, and $\\text{OS-SELECT}$:\n\n\nJOSEPHUS\n(\nn\n,\n \nm\n)\n\n    \ninitialize\n \nT\n \nto\n \nbe\n \nempty\n\n    \nfor\n \nj\n \n=\n \n1\n \nto\n \nn\n\n        \ncreate\n \na\n \nnode\n \nx\n \nwith\n \nx\n.\nkey\n \n==\n \nj\n\n        \nOS\n-\nINSERT\n(\nT\n,\n \nx\n)\n\n    \nk\n \n=\n \nn\n\n    \nj\n \n=\n \nm\n\n    \nwhile\n \nk\n \n>\n \n2\n\n        \nx\n \n=\n \nOS\n-\nSELECT\n(\nT\n.\nroot\n,\n \nj\n)\n\n        \nprint\n \nx\n.\nkey\n\n        \nOS\n-\nDELETE\n(\nT\n,\n \nx\n)\n\n        \nk\n \n=\n \nk\n \n-\n \n1\n\n        \nj\n \n=\n \n((\nj\n \n+\n \nm\n \n-\n \n2\n)\n \nmod\n \nk\n)\n \n+\n \n1\n\n    \nprint\n \nOS\n-\nSELECT\n(\nT\n.\nroot\n,\n \n1\n).\nkey\n\n\n\n\n\nThe above procedure is easier to understand. Here's a streamlined version:\n\n\nJOSEPHUS\n(\nn\n,\n \nm\n)\n\n    \ninitialize\n \nT\n \nto\n \nbe\n \nempty\n\n    \nfor\n \nj\n \n=\n \n1\n \nto\n \nn\n\n        \ncreate\n \na\n \nnode\n \nx\n \nwith\n \nx\n.\nkey\n \n==\n \nj\n\n        \nOS\n-\nINSERT\n(\nT\n,\n \nx\n)\n\n    \nj\n \n=\n \n1\n\n    \nfor\n \nk\n \n=\n \nn\n \ndownto\n \n1\n\n        \nj\n \n=\n \n((\nj\n \n+\n \nm\n \n-\n \n2\n)\n \nmod\n \nk\n)\n \n+\n \n1\n\n        \nx\n \n=\n \nOS\n-\nSELECT\n(\nT\n.\nroot\n,\n \nj\n)\n\n        \nprint\n \nx\n.\nkey\n\n        \nOS\n-\nDELETE\n(\nT\n,\n \nx\n)\n\n\n\n\n\nEither way, it takes $O(n\\lg n)$ time to build up the order-statistic tree $T$, and then we make $O(n)$ calls to the order-statistic-tree procedures, each of which takes $O(\\lg n)$ time. Thus, the total time is $O(n\\lg n)$.",
            "title": "14-2 Josephus permutation"
        },
        {
            "location": "/Chap15/15.1/",
            "text": "15.1-1\n\n\n\n\nShow that equation $\\text{(15.4)}$ follows from equation $\\text{(15.3)}$ and the initial condition $T(0) = 1$.\n\n\n\n\nWe can verify that $T(n) = 2^n$ is a solution to the given recurrence by the substitution method. We note that for $n = 0$, the formula is true since $2^0 = 1$. For $n > 0$, substituting into the recurrence and using the formula for summing a geometric series yields\n\n\n\\begin{align}\nT(n) & = 1 + \\sum_{j = 0}^{n - 1} 2^j \\\\\n     & = 1 + (2^n - 1) \\\\\n     & = 2^n.\n\\end{align}\n\n\n15.1-2\n\n\n\n\nShow, by means of a counterexample, that the following ''greedy'' strategy does not always determine an optimal way to cut rods. Define the \ndensity\n of a rod of length $i$ to be $p_i / i$, that is, its value per inch. The greedy strategy for a rod of length $n$ cuts off a first piece of length $i$, where $1 \\le i \\le n$, having maximum density. It then continues by applying the greedy strategy to the remaining piece of length $n - i$.\n\n\n\n\nHere is a counterexample for the ''greedy'' strategy:\n\\begin{array}{c|cccc}\n\\text{length $i$}  &  1 &  2 &  3 &  4 \\\\\n\\text{price $p_i$} &  1 & 20 & 33 & 36 \\\\\np_i / i            &  1 & 10 & 11 &  1 \n\\end{array}\n\n\nLet the given rod length be $4$. According to a greedy strategy, we first cut out a rod of length $3$ for a price of $33$, which leaves us with a rod of length $1$ of price $1$. The total price for the rod is $34$. The optimal way is to cut it into two rods of length $2$ each fetching us $40$ dollars.\n\n\n15.1-3\n\n\n\n\nConsider a modification of the rod-cutting problem in which, in addition to a price $p_i$ for each rod, each cut incurs a fixed cost of $c$. The revenue associated with a solution is now the sum of the prices of the pieces minus the costs of making the cuts. Give a dynamic-programming algorithm to solve this modified problem.\n\n\n\n\nMODIFIED\n-\nCUT\n-\nROD\n(\np\n,\n \nn\n,\n \nc\n)\n\n    \nlet\n \nr\n[\n0.\n.\nn\n]\n \nbe\n \na\n \nnew\n \narray\n\n    \nr\n[\n0\n]\n \n=\n \n0\n\n    \nfor\n \nj\n \n=\n \n1\n \nto\n \nn\n\n        \nq\n \n=\n \np\n[\nj\n]\n\n        \nfor\n \ni\n \n=\n \n1\n \nto\n \nj\n \n-\n \n1\n\n            \nq\n \n=\n \nmax\n(\nq\n,\n \np\n[\ni\n]\n \n+\n \nr\n[\nj\n \n-\n \ni\n]\n \n-\n \nc\n)\n\n        \nr\n[\nj\n]\n \n=\n \nq\n\n    \nreturn\n \nr\n[\nn\n]\n\n\n\n\n\nThe major modification required is in the body of the inner \nfor\n loop, which now reads $q = \\max(q, p[i] + r[j - i] - c)$. This change re\ufb02ects the fixed cost of making the cut, which is deducted from the revenue. We also have to handle the case in which we make no cuts (when $i$ equals $j$); the total revenue in this case is simply $p[j]$\u008d. Thus, we modify the inner \nfor\n loop to run from $i$ to $j - 1$ instead of to $j$. The assignment $q = p[j]$\u008d takes care of the case of no cuts. If we did not make these modifications, then even in the case of no cuts, we would be deducting $c$ from the total revenue.\n\n\n15.1-4\n\n\n\n\nModify $\\text{MEMOIZED-CUT-ROD}$ to return not only the value but the actual solution, too.\n\n\n\n\nMEMOIZED\n-\nCUT\n-\nROD\n(\np\n,\n \nn\n)\n\n    \nlet\n \nr\n[\n0.\n.\nn\n]\n \nand\n \ns\n[\n0.\n.\nn\n]\n \nbe\n \nnew\n \narrays\n\n    \nfor\n \ni\n \n=\n \n0\n \nto\n \nn\n\n        \nr\n[\ni\n]\n \n=\n \n-\n\u221e\n\n    \n\uff08\nval\n,\n \ns\n)\n \n=\n \nMEMOIZED\n-\nCUT\n-\nROD\n-\nAUX\n(\np\n,\n \nn\n,\n \nr\n,\n \ns\n)\n\n    \nprint\n \n\"The optimal value is \"\nval\n\" and the cuts are at\"\n\n    \nj\n \n=\n \nn\n\n    \nwhile\n \nj\n \n>\n \n0\n\n        \nprint\n \ns\n[\nj\n]\n\n        \nj\n \n=\n \nj\n \n-\n \ns\n[\nj\n]\n\n\n\n\n\nMEMOIZED\n-\nCUT\n-\nROD\n-\nAUX\n(\np\n,\n \nn\n,\n \nr\n,\n \ns\n)\n\n    \nif\n \nr\n[\nn\n]\n \n\u2265\n \n0\n\n        \nreturn\n \nr\n[\nn\n]\n\n    \nif\n \nn\n \n==\n \n0\n\n        \nq\n \n=\n \n0\n\n    \nelse\n \nq\n \n=\n \n-\n\u221e\n\n        \nfor\n \ni\n \n=\n \n1\n \nto\n \nn\n\n            \n(\nval\n,\n \ns\n)\n \n=\n \nMEMOIZED\n-\nCUT\n-\nROD\n-\nAUX\n(\np\n,\n \nn\n \n-\n \ni\n,\n \nr\n,\n \ns\n)\n\n            \nif\n \nq\n \n<\n \np\n[\ni\n]\n \n+\n \nval\n\n                \nq\n \n=\n \np\n[\ni\n]\n \n+\n \nval\n\n                \ns\n[\nn\n]\n \n=\n \ni\n\n    \nr\n[\nn\n]\n \n=\n \nq\n\n    \nreturn\n \n(\nq\n,\n \ns\n)\n\n\n\n\n\n$\\text{PRINT-CUT-ROD-SOLUTION}$ constructs the actual lengths where a cut should happen. Array entry $s[i]$\u008d contains the value $j$ indicating that an optimal cut for a rod of length $i$ is $j$ inches. The next cut is given by $s[i - j]$, and so on.\n\n\n15.1-5\n\n\n\n\nThe Fibonacci numbers are defined by recurrence $\\text{(3.22)}$. Give an $O(n)$-time dynamic-programming algorithm to compute the nth Fibonacci number. Draw the subproblem graph. How many vertices and edges are in the graph?\n\n\n\n\nFIBONACCI\n(\nn\n)\n\n    \nlet\n \nfib\n[\n0.\n.\nn\n]\n \nbe\n \na\n \nnew\n \narray\n\n    \nfib\n[\n0\n]\n \n=\n \nfib\n[\n1\n]\n \n=\n \n1\n\n    \nfor\n \ni\n \n=\n \n2\n \nto\n \nn\n\n        \nfib\n[\ni\n]\n \n=\n \nfib\n[\ni\n \n-\n \n1\n]\n \n+\n \nfib\n[\ni\n \n-\n \n2\n]\n\n    \nreturn\n \nfib\n[\nn\n]\n\n\n\n\n\n$\\text{FIBONACCI}$ directly implements the recurrence relation of the Fibonacci sequence. Each number in the sequence is the sum of the two previous numbers in the sequence. The running time is clearly $O(n)$.\n\n\nThe subproblem graph consists of $n + 1$ vertices, $v_0, v_1, \\ldots, v_n$. For $i = 2, 3, \\ldots, n$, vertex $v_i$ has two leaving edges: to vertex $v_{i - 1}$ and to vertex $v_{i - 2}$. No edges leave vertices $v_0$ or $v_1$. Thus, the subproblem graph has $2n - 2$ edges.",
            "title": "15.1 Rod cutting"
        },
        {
            "location": "/Chap15/15.1/#151-1",
            "text": "Show that equation $\\text{(15.4)}$ follows from equation $\\text{(15.3)}$ and the initial condition $T(0) = 1$.   We can verify that $T(n) = 2^n$ is a solution to the given recurrence by the substitution method. We note that for $n = 0$, the formula is true since $2^0 = 1$. For $n > 0$, substituting into the recurrence and using the formula for summing a geometric series yields  \\begin{align}\nT(n) & = 1 + \\sum_{j = 0}^{n - 1} 2^j \\\\\n     & = 1 + (2^n - 1) \\\\\n     & = 2^n.\n\\end{align}",
            "title": "15.1-1"
        },
        {
            "location": "/Chap15/15.1/#151-2",
            "text": "Show, by means of a counterexample, that the following ''greedy'' strategy does not always determine an optimal way to cut rods. Define the  density  of a rod of length $i$ to be $p_i / i$, that is, its value per inch. The greedy strategy for a rod of length $n$ cuts off a first piece of length $i$, where $1 \\le i \\le n$, having maximum density. It then continues by applying the greedy strategy to the remaining piece of length $n - i$.   Here is a counterexample for the ''greedy'' strategy:\n\\begin{array}{c|cccc}\n\\text{length $i$}  &  1 &  2 &  3 &  4 \\\\\n\\text{price $p_i$} &  1 & 20 & 33 & 36 \\\\\np_i / i            &  1 & 10 & 11 &  1 \n\\end{array}  Let the given rod length be $4$. According to a greedy strategy, we first cut out a rod of length $3$ for a price of $33$, which leaves us with a rod of length $1$ of price $1$. The total price for the rod is $34$. The optimal way is to cut it into two rods of length $2$ each fetching us $40$ dollars.",
            "title": "15.1-2"
        },
        {
            "location": "/Chap15/15.1/#151-3",
            "text": "Consider a modification of the rod-cutting problem in which, in addition to a price $p_i$ for each rod, each cut incurs a fixed cost of $c$. The revenue associated with a solution is now the sum of the prices of the pieces minus the costs of making the cuts. Give a dynamic-programming algorithm to solve this modified problem.   MODIFIED - CUT - ROD ( p ,   n ,   c ) \n     let   r [ 0. . n ]   be   a   new   array \n     r [ 0 ]   =   0 \n     for   j   =   1   to   n \n         q   =   p [ j ] \n         for   i   =   1   to   j   -   1 \n             q   =   max ( q ,   p [ i ]   +   r [ j   -   i ]   -   c ) \n         r [ j ]   =   q \n     return   r [ n ]   The major modification required is in the body of the inner  for  loop, which now reads $q = \\max(q, p[i] + r[j - i] - c)$. This change re\ufb02ects the fixed cost of making the cut, which is deducted from the revenue. We also have to handle the case in which we make no cuts (when $i$ equals $j$); the total revenue in this case is simply $p[j]$\u008d. Thus, we modify the inner  for  loop to run from $i$ to $j - 1$ instead of to $j$. The assignment $q = p[j]$\u008d takes care of the case of no cuts. If we did not make these modifications, then even in the case of no cuts, we would be deducting $c$ from the total revenue.",
            "title": "15.1-3"
        },
        {
            "location": "/Chap15/15.1/#151-4",
            "text": "Modify $\\text{MEMOIZED-CUT-ROD}$ to return not only the value but the actual solution, too.   MEMOIZED - CUT - ROD ( p ,   n ) \n     let   r [ 0. . n ]   and   s [ 0. . n ]   be   new   arrays \n     for   i   =   0   to   n \n         r [ i ]   =   - \u221e \n     \uff08 val ,   s )   =   MEMOIZED - CUT - ROD - AUX ( p ,   n ,   r ,   s ) \n     print   \"The optimal value is \" val \" and the cuts are at\" \n     j   =   n \n     while   j   >   0 \n         print   s [ j ] \n         j   =   j   -   s [ j ]   MEMOIZED - CUT - ROD - AUX ( p ,   n ,   r ,   s ) \n     if   r [ n ]   \u2265   0 \n         return   r [ n ] \n     if   n   ==   0 \n         q   =   0 \n     else   q   =   - \u221e \n         for   i   =   1   to   n \n             ( val ,   s )   =   MEMOIZED - CUT - ROD - AUX ( p ,   n   -   i ,   r ,   s ) \n             if   q   <   p [ i ]   +   val \n                 q   =   p [ i ]   +   val \n                 s [ n ]   =   i \n     r [ n ]   =   q \n     return   ( q ,   s )   $\\text{PRINT-CUT-ROD-SOLUTION}$ constructs the actual lengths where a cut should happen. Array entry $s[i]$\u008d contains the value $j$ indicating that an optimal cut for a rod of length $i$ is $j$ inches. The next cut is given by $s[i - j]$, and so on.",
            "title": "15.1-4"
        },
        {
            "location": "/Chap15/15.1/#151-5",
            "text": "The Fibonacci numbers are defined by recurrence $\\text{(3.22)}$. Give an $O(n)$-time dynamic-programming algorithm to compute the nth Fibonacci number. Draw the subproblem graph. How many vertices and edges are in the graph?   FIBONACCI ( n ) \n     let   fib [ 0. . n ]   be   a   new   array \n     fib [ 0 ]   =   fib [ 1 ]   =   1 \n     for   i   =   2   to   n \n         fib [ i ]   =   fib [ i   -   1 ]   +   fib [ i   -   2 ] \n     return   fib [ n ]   $\\text{FIBONACCI}$ directly implements the recurrence relation of the Fibonacci sequence. Each number in the sequence is the sum of the two previous numbers in the sequence. The running time is clearly $O(n)$.  The subproblem graph consists of $n + 1$ vertices, $v_0, v_1, \\ldots, v_n$. For $i = 2, 3, \\ldots, n$, vertex $v_i$ has two leaving edges: to vertex $v_{i - 1}$ and to vertex $v_{i - 2}$. No edges leave vertices $v_0$ or $v_1$. Thus, the subproblem graph has $2n - 2$ edges.",
            "title": "15.1-5"
        },
        {
            "location": "/Chap15/15.2/",
            "text": "15.2-1\n\n\n\n\nFind an optimal parenthesization of a matrix-chain product whose sequence of dimensions is $\\langle 5, 10, 3, 12, 5, 50, 6 \\rangle$.\n\n\n\n\n$$((5 \\times 10)(10 \\times 3))(((3 \\times 12)(12 \\times 5))((5 \\times 50)(50 \\times 6))).$$\n\n\n15.2-2\n\n\n\n\nGive a recursive algorithm $\\text{MATRIX-CHAIN-MULTIPLY}(A, s, i, j)$ that actually performs the optimal matrix-chain multiplication, given the sequence of matrices $\\langle A_1, A_2, \\ldots ,A_{n_i} \\rangle$, the $s$ table computed by $\\text{MATRIX-CHAIN-ORDER}$, and the indices $i$ and $j$. (The initial call would be $\\text{MATRIX-CHAIN-MULTIPLY}(A, s, 1, n)$.)\n\n\n\n\nMATRIX\n-\nCHAIN\n-\nMULTIPLY\n(\nA\n,\n \ns\n,\n \ni\n,\n \nj\n)\n\n    \nif\n \ni\n \n==\n \nj\n\n        \nreturn\n \nA\n[\ni\n]\n\n    \nif\n \ni\n \n+\n \n1\n \n==\n \nj\n\n        \nreturn\n \nA\n[\ni\n]\n \n*\n \nA\n[\nj\n]\n\n    \nb\n \n=\n \nMATRIX\n-\nCHAIN\n-\nMULTIPLY\n(\nA\n,\n \ns\n,\n \ni\n,\n \ns\n[\ni\n,\n \nj\n])\n\n    \nc\n \n=\n \nMATRIX\n-\nCHAIN\n-\nMULTIPLY\n(\nA\n,\n \ns\n,\n \ns\n[\ni\n,\n \nj\n]\n \n+\n \n1\n,\n \nj\n)\n\n    \nreturn\n \nb\n \n*\n \nc\n\n\n\n\n\n15.2-3\n\n\n\n\nUse the substitution method to show that the solution to the recurrence $\\text{(15.6)}$ is $\\Omega(2^n)$.\n\n\n\n\nSuppose $P(n) \\ge c2^n$,\n\n\n\\begin{align}\nP(n) & \\ge   \\sum_{k = 1}^{n - 1} c2^k \\cdot c2^{n - k} \\\\\n     & =     \\sum_{k = 1}^{n - 1} c^2 2^n \\\\\n     & =     c^2 (n - 1) 2^n \\\\\n     & \\ge   c^2 2^n & (n > 1) \\\\\n     & \\ge   c 2^n.  & (0 < c \\le 1)\n\\end{align}\n\n\n15.2-4\n\n\n\n\nDescribe the subproblem graph for matrix-chain multiplication with an input chain of length $n$. How many vertices does it have? How many edges does it have, and which edges are they?\n\n\n\n\nThe vertices of the subproblem graph are the ordered pairs $v_{ij}$, where $i \\le j$. If $i = j$, then there are no edges out of $v_{ij}$. If $i < j$, then for every $k$ such that $i \\le k < j$, the subproblem graph contains edges $(v_{ij}, v_{jk})$ and $(v_{ij}, v_{k + 1, j})$. These edges indicate that to solve the subproblem of optimally parenthesizing the product $A_i \\cdots A_j$, we need to solve subproblems of optimally parenthesizing the products $A_i \\cdots A_k$ and $A_{k + 1} \\cdots A_j$. The number of vertices is\n\n\n$$\\sum_{i = 1}^n\\sum_{j = 1}^n 1 = \\frac{n(n + 1)}{2},$$\n\n\nand the number of edges is \n\n\n\\begin{align}\n\\sum_{i = 1}^n\\sum_{j = 1}^n \n    & = \\sum_{i = 1}^n\\sum_{t = 0}^{n - i} & \\text{(substituting $t = j - i$)} \\\\\n    & = \\sum_{i = 1}^n \\frac{(n - i)(n - i + 1)}{2}.\n\\end{align}\n\n\nSubstituting $r = n - i$ and reversing the order of summation, we obtain\n\n\n\\begin{align}\n\\sum_{i = 1}^n \\frac{(n - i)(n - i + 1)}{2} \n    & = \\frac{1}{2} \\sum_{r = 0}^{n - 1} (r^2 + r) \\\\\n    & = \\frac{1}{2} \\Big(\\frac{(n - 1)n(2n - 1)}{6} + \\frac{(n - 1)n}{2}\\Big) & \\text{(by equations (A.3) and (A.1))} \\\\\n    & = \\frac{(n - 1)n(n + 1)}{6}.\n\\end{align}\n\n\nThus, the subproblem graph has $\\Theta(n^2)$ vertices and $\\Theta(n^3)$ edges.\n\n\n15.2-5\n\n\n\n\nLet $R(i, j)$ be the number of times that table entry $m[i, j]$ is referenced while computing other table entries in a call of $\\text{MATRIX-CHAIN-ORDER}$. Show that the total number of references for the entire table is\n\n\n$$\\sum_{i = 1}^n \\sum_{j = i}^n R(i, j) = \\frac{n^3 - n}{3}.$$\n\n\n($\\textit{Hint:}$ You may find equation $\\text{(A.3)}$ useful.)\n\n\n\n\nEach time the $l$-loop executes, the $i$-loop executes $n - l + 1$ times. Each time the $i$-loop executes, the $k$-loop executes $j - i = l - 1$ times, each time referencing $m$ twice. Thus the total number of times that an entry of $m$ is referenced while computing other entries is $\\sum_{l = 2}^n (n - l + 1)(l - 1)2$. Thus,\n\n\n\\begin{align}\n\\sum_{i = 1}^n\\sum_{j = 1}^n R(i, j)\n    & = \\sum_{l = 2}^n (n - l + 1)(l - 1)2 \\\\\n    & = 2 \\sum_{l = 1}^{n - 1} (n - l)l \\\\\n    & = 2 \\sum_{l = 1}^{n - 1} nl - 2 \\sum_{l = 1}^{n - 1} l^2 \\\\\n    & = 2 \\frac{n(n - 1)n}{2} - 2\\frac{(n - 1)n(2n - 1)}{6} \\\\\n    & = n^3 - n^2 - \\frac{2n^3 - 3n^2 + n}{3} \\\\\n    & = \\frac{n^3 - n}{3}.\n\\end{align}\n\n\n15.2-6\n\n\n\n\nShow that a full parenthesization of an $n$-element expression has exactly $n - 1$ pairs of parentheses.\n\n\n\n\n$n - 1$ multiplications.",
            "title": "15.2 Matrix-chain multiplication"
        },
        {
            "location": "/Chap15/15.2/#152-1",
            "text": "Find an optimal parenthesization of a matrix-chain product whose sequence of dimensions is $\\langle 5, 10, 3, 12, 5, 50, 6 \\rangle$.   $$((5 \\times 10)(10 \\times 3))(((3 \\times 12)(12 \\times 5))((5 \\times 50)(50 \\times 6))).$$",
            "title": "15.2-1"
        },
        {
            "location": "/Chap15/15.2/#152-2",
            "text": "Give a recursive algorithm $\\text{MATRIX-CHAIN-MULTIPLY}(A, s, i, j)$ that actually performs the optimal matrix-chain multiplication, given the sequence of matrices $\\langle A_1, A_2, \\ldots ,A_{n_i} \\rangle$, the $s$ table computed by $\\text{MATRIX-CHAIN-ORDER}$, and the indices $i$ and $j$. (The initial call would be $\\text{MATRIX-CHAIN-MULTIPLY}(A, s, 1, n)$.)   MATRIX - CHAIN - MULTIPLY ( A ,   s ,   i ,   j ) \n     if   i   ==   j \n         return   A [ i ] \n     if   i   +   1   ==   j \n         return   A [ i ]   *   A [ j ] \n     b   =   MATRIX - CHAIN - MULTIPLY ( A ,   s ,   i ,   s [ i ,   j ]) \n     c   =   MATRIX - CHAIN - MULTIPLY ( A ,   s ,   s [ i ,   j ]   +   1 ,   j ) \n     return   b   *   c",
            "title": "15.2-2"
        },
        {
            "location": "/Chap15/15.2/#152-3",
            "text": "Use the substitution method to show that the solution to the recurrence $\\text{(15.6)}$ is $\\Omega(2^n)$.   Suppose $P(n) \\ge c2^n$,  \\begin{align}\nP(n) & \\ge   \\sum_{k = 1}^{n - 1} c2^k \\cdot c2^{n - k} \\\\\n     & =     \\sum_{k = 1}^{n - 1} c^2 2^n \\\\\n     & =     c^2 (n - 1) 2^n \\\\\n     & \\ge   c^2 2^n & (n > 1) \\\\\n     & \\ge   c 2^n.  & (0 < c \\le 1)\n\\end{align}",
            "title": "15.2-3"
        },
        {
            "location": "/Chap15/15.2/#152-4",
            "text": "Describe the subproblem graph for matrix-chain multiplication with an input chain of length $n$. How many vertices does it have? How many edges does it have, and which edges are they?   The vertices of the subproblem graph are the ordered pairs $v_{ij}$, where $i \\le j$. If $i = j$, then there are no edges out of $v_{ij}$. If $i < j$, then for every $k$ such that $i \\le k < j$, the subproblem graph contains edges $(v_{ij}, v_{jk})$ and $(v_{ij}, v_{k + 1, j})$. These edges indicate that to solve the subproblem of optimally parenthesizing the product $A_i \\cdots A_j$, we need to solve subproblems of optimally parenthesizing the products $A_i \\cdots A_k$ and $A_{k + 1} \\cdots A_j$. The number of vertices is  $$\\sum_{i = 1}^n\\sum_{j = 1}^n 1 = \\frac{n(n + 1)}{2},$$  and the number of edges is   \\begin{align}\n\\sum_{i = 1}^n\\sum_{j = 1}^n \n    & = \\sum_{i = 1}^n\\sum_{t = 0}^{n - i} & \\text{(substituting $t = j - i$)} \\\\\n    & = \\sum_{i = 1}^n \\frac{(n - i)(n - i + 1)}{2}.\n\\end{align}  Substituting $r = n - i$ and reversing the order of summation, we obtain  \\begin{align}\n\\sum_{i = 1}^n \\frac{(n - i)(n - i + 1)}{2} \n    & = \\frac{1}{2} \\sum_{r = 0}^{n - 1} (r^2 + r) \\\\\n    & = \\frac{1}{2} \\Big(\\frac{(n - 1)n(2n - 1)}{6} + \\frac{(n - 1)n}{2}\\Big) & \\text{(by equations (A.3) and (A.1))} \\\\\n    & = \\frac{(n - 1)n(n + 1)}{6}.\n\\end{align}  Thus, the subproblem graph has $\\Theta(n^2)$ vertices and $\\Theta(n^3)$ edges.",
            "title": "15.2-4"
        },
        {
            "location": "/Chap15/15.2/#152-5",
            "text": "Let $R(i, j)$ be the number of times that table entry $m[i, j]$ is referenced while computing other table entries in a call of $\\text{MATRIX-CHAIN-ORDER}$. Show that the total number of references for the entire table is  $$\\sum_{i = 1}^n \\sum_{j = i}^n R(i, j) = \\frac{n^3 - n}{3}.$$  ($\\textit{Hint:}$ You may find equation $\\text{(A.3)}$ useful.)   Each time the $l$-loop executes, the $i$-loop executes $n - l + 1$ times. Each time the $i$-loop executes, the $k$-loop executes $j - i = l - 1$ times, each time referencing $m$ twice. Thus the total number of times that an entry of $m$ is referenced while computing other entries is $\\sum_{l = 2}^n (n - l + 1)(l - 1)2$. Thus,  \\begin{align}\n\\sum_{i = 1}^n\\sum_{j = 1}^n R(i, j)\n    & = \\sum_{l = 2}^n (n - l + 1)(l - 1)2 \\\\\n    & = 2 \\sum_{l = 1}^{n - 1} (n - l)l \\\\\n    & = 2 \\sum_{l = 1}^{n - 1} nl - 2 \\sum_{l = 1}^{n - 1} l^2 \\\\\n    & = 2 \\frac{n(n - 1)n}{2} - 2\\frac{(n - 1)n(2n - 1)}{6} \\\\\n    & = n^3 - n^2 - \\frac{2n^3 - 3n^2 + n}{3} \\\\\n    & = \\frac{n^3 - n}{3}.\n\\end{align}",
            "title": "15.2-5"
        },
        {
            "location": "/Chap15/15.2/#152-6",
            "text": "Show that a full parenthesization of an $n$-element expression has exactly $n - 1$ pairs of parentheses.   $n - 1$ multiplications.",
            "title": "15.2-6"
        },
        {
            "location": "/Chap15/15.3/",
            "text": "15.3-1\n\n\n\n\nWhich is a more efficient way to determine the optimal number of multiplications in a matrix-chain multiplication problem: enumerating all the ways of parenthesizing the product and computing the number of multiplications for each, or running $\\text{RECURSIVE-MATRIX-CHAIN}$? Justify your answer.\n\n\n\n\nRunning $\\text{RECURSIVE-MATRIX-CHAIN}$ is asymptotically more efficient than enumerating all the ways of parenthesizing the product and computing the number of multiplications for each.\n\n\nConsider the treatment of subproblems by the two approaches.\n\n\n\n\nFor each possible place to split the matrix chain, the enumeration approach \u00dends all ways to parenthesize the left half, finds all ways to parenthesize the right half, and looks at all possible combinations of the left half with the right half. The amount of work to look at each combination of left- and right-half subproblem results is thus the product of the number of ways to do the left half and the number of ways to do the right half.\n\n\nFor each possible place to split the matrix chain, $\\text{RECURSIVE-MATRIX-CHAIN}$ finds the best way to parenthesize the left half, finds the best way to parenthesize the right half, and combines just those two results. Thus the amount of work to combine the left- and right-half subproblem results is $O(1)$.\n\n\n\n\nSection 15.2 argued that the running time for enumeration is $\\Omega(4^n / n^{3 / 2})$. We will show that the running time for $\\text{RECURSIVE-MATRIX-CHAIN}$ is $O(n3^{n - 1})$.\n\n\nTo get an upper bound on the running time of $\\text{RECURSIVE-MATRIX-CHAIN}$, we'll use the same approach used in Section 15.2 to get a lower bound: Derive a recurrence of the form $T(n) \\le \\ldots$ and solve it by substitution. For the lower-bound recurrence, the book assumed that the execution of lines 1\u20132 and 6\u20137 each take at least unit time. For the upper-bound recurrence, we'll assume those pairs of lines each take at most constant time $c$. Thus, we have the recurrence\n\n\n$$\nT(n) \\le\n\\begin{cases}\n                                             c & \\text{if $n = 1$}, \\\\\nc + \\sum_{k = 1}^{n - 1} (T(k) + T(n - k) + c) & \\text{if $n \\ge 2$}. \\\\\n\\end{cases}\n$$\n\n\nThis is just like the book's $\\ge$ recurrence except that it has $c$ instead of $1$, and so we can be rewrite it as\n\n\n$$T(n) \\le 2 \\sum_{i = 1}^{n - 1} T(i) + cn.$$\n\n\nWe shall prove that $T(n) = O(n3^{n - 1})$ using the substitution method. (Note: Any upper bound on $T(n)$ that is $o(4^n / n^{3 / 2})$ will suffice. You might prefer to prove one that is easier to think up, such as $T(n) = O(3.5^n)$.) Specifically, we shall show that $T(n) \\le cn3^{n - 1}$ for all $n \\ge 1$. The basis is easy, since $T(1) \\le c = c \\cdot 1 \\cdot 3^{1 - 1}$ .\n\n\nInductively, for $n \\ge 2$ we have\n\n\n\\begin{align}\nT(n) & \\le 2\\sum_{i = 1}^{n - 1} T(i) + cn \\\\\n     & \\le 2\\sum_{i = 1}^{n - 1} ci 3^{i - 1} + cn \\\\\n     & \\le c \\cdot \\bigg(2\\sum_{i = 1}^{n - 1}i 3^{i - 1} + n\\bigg) \\\\\n     & =   c \\cdot \\bigg(2\\cdot\\bigg(\\frac{n 3^{n - 1}}{3 - 1} + \\frac{1 - 3^n}{(3 - 1)^2}\\bigg) + n\\bigg) & \\text{(see below)} \\\\\n     & =   cn 3^{n - 1} + c\\cdot\\bigg(\\frac{1 - 3^n}{2} + n\\bigg) \\\\\n     & =   cn 3^{n - 1} + \\frac{c}{2}(2n + 1 - 3^n) \\\\\n     & \\le cn 3^{n - 1} & \\text{for all $c > 0, n \\ge 1$}.\n\\end{align}\n\n\nRunning $\\text{RECURSIVE-MATRIX-CHAIN}$ takes $O(n3^{n - 1})$ time, and enumerating all parenthesizations takes $(4^n / n^{3 / 2})$ time, and so $\\text{RECURSIVE-MATRIX-CHAIN}$ is more efficient than enumeration.\n\n\nNote: The above substitution uses the fact that\n\n\n$$\\sum_{i = 1}^{n - 1} ix^{i - 1} = \\frac{nx^{n - 1}}{x - 1} + \\frac{1 - x^n}{(x - 1)^2}.$$\n\n\nThis equation can be derived from equation $\\text{(A.5)}$ by taking the derivative. Let\n\n\n$$f(x) = \\sum_{i = 1}^{n - 1} x^i = \\frac{x^n - 1}{x - 1} - 1.$$\n\n\nThen\n\n\n$$\\sum_{i = 1}^{n - 1} ix^{i - 1} = f'(x) = \\frac{nx^{n - 1}}{x - 1} + \\frac{1 - x^n}{(x - 1)^2}.$$\n\n\n15.3-2\n\n\n\n\nDraw the recursion tree for the $\\text{MERGE-SORT}$ procedure from Section 2.3.1 on an array of 16 elements. Explain why memoization fails to speed up a good divide-and-conquer algorithm such as $\\text{MERGE-SORT}$.\n\n\n\n\nDraw a recursion tree. The $\\text{MERGE-SORT}$ procedure performs at most a single call to any pair of indices of the array that is being sorted. In other words, the subproblems do not overlap and therefore memoization will not improve the running time.\n\n\n15.3-3\n\n\n\n\nConsider a variant of the matrix-chain multiplication problem in which the goal is to parenthesize the sequence of matrices so as to maximize, rather than minimize, the number of scalar multiplications. Does this problem exhibit optimal substructure?\n\n\n\n\nYes, this problem also exhibits optimal substructure. If we know that we need the subproduct $(A_l \\cdot A_r)$, then we should still find the most expensive way to compute it \u2014 otherwise, we could do better by substituting in the most expensive way.\n\n\n15.3-4\n\n\n\n\nAs stated, in dynamic programming we first solve the subproblems and then choose which of them to use in an optimal solution to the problem. Professor Capulet claims that we do not always need to solve all the subproblems in order to find an optimal solution. She suggests that we can find an optimal solution to the matrix-chain multiplication problem by always choosing the matrix $A_k$ at which to split the subproduct $A_i A_{i + 1} \\cdots A_j$ (by selecting $k$ to minimize the quantity $p_{i - 1} p_k p_j$) \nbefore\n solving the subproblems. Find an instance of the matrix-chain multiplication problem for which this greedy approach yields a suboptimal solution.\n\n\n\n\nSuppose that we are given matrices $A_1$, $A_2$, $A_3$, and $A_4$ with dimensions such that\n\n\n$$p_0, p_1, p_2, p_3, p_4 = 1000, 100, 20, 10, 1000.$$\n\n\nThen $p_0 p_k p_4$ is minimized when $k = 3$, so we need to solve the subproblem of multiplying $A_1 A_2 A_3$, and also $A_4$ which is solved automatically. By her algorithm, this is solved by splitting at $k = 2$. Thus, the full parenthesization is $(((A_1A_2)A_3)A_4)$.\nThis requires \n\n\n$$1000 \\cdot 100 \\cdot 20 + 1000 \\cdot 20 \\cdot 10 + 1000 \\cdot 10 \\cdot 1000 = 12200000$$\n\n\nscalar multiplications.\n\n\nOn the other hand, suppose we had fully parenthesized the matrices to multiply as $((A_1(A_2A_3))A_4)$. Then we would only require \n\n\n$$100 \\cdot 20 \\cdot 10 + 1000 \\cdot 100 \\cdot 10 + 1000 \\cdot 10 \\cdot 1000 = 11020000$$\n\n\nscalar multiplications, which is fewer than Professor Capulet's method.\n\n\nTherefore her greedy approach yields a suboptimal solution.\n\n\n15.3-5\n\n\n\n\nSuppose that in the rod-cutting problem of Section 15.1, we also had limit $l_i$ on the number of pieces of length $i$ that we are allowed to produce, for $i = 1, 2, \\ldots, n$. Show that the optimal-substructure property described in Section 15.1 no longer holds.\n\n\n\n\nWe say that a problem exhibits the optimal substructure property when optimal solutions to a problem incorporate optimal solutions to related subproblems, \nwhich we may solve independently\n (i.e., they do not share resources). When we impose a limit $l_i$ on the number of pieces of size $i$ that we are permitted to produce, the subproblems can no longer be solved \nindependently\n. For example, consider a rod of length $4$ with the following prices and limits:\n\n\n\\begin{array}{c|cccc}\n\\text{length $i$}  &  1 &  2 &  3 &  4 \\\\\n\\text{price $p_i$} & 15 & 20 & 33 & 36 \\\\\n\\text{limit $l_i$} &  2 &  1 &  1 &  1 \n\\end{array}\n\n\nThis instance has only three solutions that do not violate the limits: length $4$ with price $36$; lengths $1$ and $3$ with price $48$; and lengths $1$, $1$, and $2$ with price $50$. The optimal solution, therefore is to cut into lengths $1$, $1$, and $2$. When we look at the subproblem for length $2$, it has two solutions that do not violate the limits: length $2$ with price $20$, and lengths $1$ and $1$ with price $30$. The optimal solution for length $2$, therefore, is to cut into lengths $1$ and $1$. But we cannot use this optimal solution for the subproblem in the optimal solution for the original problem, because it would result in using four rods of length $1$ to solve the original problem, violating the limit of two length-$1$ rods.\n\n\n15.3-6\n\n\n\n\nImagine that you wish to exchange one currency for another. You realize that instead of directly exchanging one currency for another, you might be better off making a series of trades through other currencies, winding up with the currency you want. Suppose that you can trade $n$ different currencies, numbered $1, 2, \\ldots, n$, where you start with currency $1$ and wish to wind up with currency $n$. You are given, for each pair of currencies $i$ and $j$ , an exchange rate $r_{ij}$, meaning that if you start with $d$ units of currency $i$ , you can trade for $dr_{ij}$ units of currency $j$. A sequence of trades may entail a commission, which depends on the number of trades you make. Let $c_k$ be the commission that you are charged when you make $k$ trades. Show that, if $c_k = 0$ for all $k = 1, 2, \\ldots, n$, then the problem of finding the best sequence of exchanges from currency $1$ to currency $n$ exhibits optimal substructure. Then show that if commissions $c_k$ are arbitrary values, then the problem of finding the best sequence of exchanges from currency $1$ to currency $n$ does not necessarily exhibit optimal substructure.\n\n\n\n\nAny solution must add the additional assumption that no currency can be repeated in a sequence of trades. Without this assumption, if $r_{ij} > 1 / r_{ji}$ for some currencies $i$ and $j$, we could repeatedly exchange $i \\to j \\to i \\to j \\to \\cdot$ and make an unbounded profit.\n\n\nTo see that this problem has optimal substructure when $c_k = 0$ for all $k$, observe that the problem of exchanging currency $a$ for currency $b$ is equivalent to finding a sequence of currencies $k_1, k_2, \\ldots, k_m$ such that $k_1 = a$, $k_m = b$ and the product $r_{k_1k_2}r_{k_2k_3}$ is maximized.\n\n\nWe use the usual cut-and-paste argument. Suppose that an optimal solution contains a sequence $\\langle k_i, k_{i + 1}, \\ldots, k_j \\rangle$ of currencies, and suppose that there exists a sequence $\\langle k_i', k_{i + 1}', \\ldots, k_j' \\rangle$, such that $k_i' = k_i$, $k_j' = k_j$, and $r_{k_i' k_{i + 1}'} \\cdots r_{k_{j - 1}' k_j'} > r_{k_i k_{i + 1}} \\cdots r_{k_{j - 1}k_j}$. Then we could substitute the sequence $\\langle k_i', k_{i + 1}', \\ldots, k_j' \\rangle$ for the sequence $\\langle k_i, k_{i + 1}, \\ldots, k_j \\rangle$ in the optimal solution to create an even better solution.\n\n\nWe show that optimal substructure does not hold when the $c_k$ are arbitrary values by means of an example. Suppose we have four currencies, with the following exchange rates:\n\n\n\\begin{array}{c|cccc}\nr_{ij} &   1   &   2   &   3   & 4 \\\\\n\\hline\n  1    &   1   &   2   & 5 / 2 & 6 \\\\\n  2    & 1 / 2 &   1   & 3 / 2 & 3 \\\\\n  3    & 2 / 5 & 2 / 3 &   1   & 3 \\\\\n  4    & 1 / 6 & 1 / 3 & 1 / 3 & 1\n\\end{array}\n\n\nLet $c_1 = 2$ and $c_2 = c_3 = 3$. Note that this example is not too badly contrived, in that $r_{ji} = 1 / r_{ij}$ for all $i$ and $j$.\n\n\nTo see how this example does not exhibit optimal substructure, let's examine an optimal solution for exchanging currency $1$ for currency $4$. There are five possible exchange sequences, with the following costs:\n\\begin{array}{lll}\n\\langle 1, 4       \\rangle & : 6 - 2                         & = 4, \\\\\n\\langle 1, 2, 4    \\rangle & : 2 \\cdot 3 - 3                 & = 3, \\\\\n\\langle 1, 3, 4    \\rangle & : 5 / 2 \\cdot 3 - 3             & = 9 / 2, \\\\\n\\langle 1, 2, 3, 4 \\rangle & : 2 \\cdot 3 / 2 \\cdot 3 - 3     & = 6, \\\\\n\\langle 1, 3, 2, 4 \\rangle & : 5 / 2 \\cdot 2 / 3 \\cdot 3 - 3 & = 2.\n\\end{array}\n\n\nThe optimal exchange sequence, $\\langle 1, 2, 3, 4 \\rangle$, appears in boldface.\n\n\nLet's examine the subproblem of exchanging currency $1$ for currency $3$. Allowing currency $4$ to be part of the exchange sequence, there are again five possible exchange sequences with the following costs and the optimal one in boldface:\n\n\n\\begin{array}{lll}\n\\langle 1, 3       \\rangle & : 5 / 2 - 2                 & = 1 / 2, \\\\\n\\langle 1, 2, 3    \\rangle & : 2 \\cdot 3 / 2 - 3         & = 0, \\\\\n\\langle 1, 4, 3    \\rangle & : 6 \\cdot 1 / 3 - 3         & = -1, \\\\\n\\langle 1, 2, 4, 3 \\rangle & : 2 \\cdot 3 \\cdot 1 / 3 - 3 & = -1, \\\\\n\\langle 1, 4, 2, 3 \\rangle & : 6 \\cdot 1 / 3 \\cdot 3 / 2 & = 0.\n\\end{array}\n\n\nWe see that the solution to the original problem includes the subproblem of exchanging currency $1$ for currency $3$, yet the solution $\\langle 1, 2, 3 \\rangle$ to the subproblem used in the optimal solution to the original problem is not the optimal solution $\\langle 1, 3 \\rangle$ to the subproblem on its own.",
            "title": "15.3 Elements of dynamic programming"
        },
        {
            "location": "/Chap15/15.3/#153-1",
            "text": "Which is a more efficient way to determine the optimal number of multiplications in a matrix-chain multiplication problem: enumerating all the ways of parenthesizing the product and computing the number of multiplications for each, or running $\\text{RECURSIVE-MATRIX-CHAIN}$? Justify your answer.   Running $\\text{RECURSIVE-MATRIX-CHAIN}$ is asymptotically more efficient than enumerating all the ways of parenthesizing the product and computing the number of multiplications for each.  Consider the treatment of subproblems by the two approaches.   For each possible place to split the matrix chain, the enumeration approach \u00dends all ways to parenthesize the left half, finds all ways to parenthesize the right half, and looks at all possible combinations of the left half with the right half. The amount of work to look at each combination of left- and right-half subproblem results is thus the product of the number of ways to do the left half and the number of ways to do the right half.  For each possible place to split the matrix chain, $\\text{RECURSIVE-MATRIX-CHAIN}$ finds the best way to parenthesize the left half, finds the best way to parenthesize the right half, and combines just those two results. Thus the amount of work to combine the left- and right-half subproblem results is $O(1)$.   Section 15.2 argued that the running time for enumeration is $\\Omega(4^n / n^{3 / 2})$. We will show that the running time for $\\text{RECURSIVE-MATRIX-CHAIN}$ is $O(n3^{n - 1})$.  To get an upper bound on the running time of $\\text{RECURSIVE-MATRIX-CHAIN}$, we'll use the same approach used in Section 15.2 to get a lower bound: Derive a recurrence of the form $T(n) \\le \\ldots$ and solve it by substitution. For the lower-bound recurrence, the book assumed that the execution of lines 1\u20132 and 6\u20137 each take at least unit time. For the upper-bound recurrence, we'll assume those pairs of lines each take at most constant time $c$. Thus, we have the recurrence  $$\nT(n) \\le\n\\begin{cases}\n                                             c & \\text{if $n = 1$}, \\\\\nc + \\sum_{k = 1}^{n - 1} (T(k) + T(n - k) + c) & \\text{if $n \\ge 2$}. \\\\\n\\end{cases}\n$$  This is just like the book's $\\ge$ recurrence except that it has $c$ instead of $1$, and so we can be rewrite it as  $$T(n) \\le 2 \\sum_{i = 1}^{n - 1} T(i) + cn.$$  We shall prove that $T(n) = O(n3^{n - 1})$ using the substitution method. (Note: Any upper bound on $T(n)$ that is $o(4^n / n^{3 / 2})$ will suffice. You might prefer to prove one that is easier to think up, such as $T(n) = O(3.5^n)$.) Specifically, we shall show that $T(n) \\le cn3^{n - 1}$ for all $n \\ge 1$. The basis is easy, since $T(1) \\le c = c \\cdot 1 \\cdot 3^{1 - 1}$ .  Inductively, for $n \\ge 2$ we have  \\begin{align}\nT(n) & \\le 2\\sum_{i = 1}^{n - 1} T(i) + cn \\\\\n     & \\le 2\\sum_{i = 1}^{n - 1} ci 3^{i - 1} + cn \\\\\n     & \\le c \\cdot \\bigg(2\\sum_{i = 1}^{n - 1}i 3^{i - 1} + n\\bigg) \\\\\n     & =   c \\cdot \\bigg(2\\cdot\\bigg(\\frac{n 3^{n - 1}}{3 - 1} + \\frac{1 - 3^n}{(3 - 1)^2}\\bigg) + n\\bigg) & \\text{(see below)} \\\\\n     & =   cn 3^{n - 1} + c\\cdot\\bigg(\\frac{1 - 3^n}{2} + n\\bigg) \\\\\n     & =   cn 3^{n - 1} + \\frac{c}{2}(2n + 1 - 3^n) \\\\\n     & \\le cn 3^{n - 1} & \\text{for all $c > 0, n \\ge 1$}.\n\\end{align}  Running $\\text{RECURSIVE-MATRIX-CHAIN}$ takes $O(n3^{n - 1})$ time, and enumerating all parenthesizations takes $(4^n / n^{3 / 2})$ time, and so $\\text{RECURSIVE-MATRIX-CHAIN}$ is more efficient than enumeration.  Note: The above substitution uses the fact that  $$\\sum_{i = 1}^{n - 1} ix^{i - 1} = \\frac{nx^{n - 1}}{x - 1} + \\frac{1 - x^n}{(x - 1)^2}.$$  This equation can be derived from equation $\\text{(A.5)}$ by taking the derivative. Let  $$f(x) = \\sum_{i = 1}^{n - 1} x^i = \\frac{x^n - 1}{x - 1} - 1.$$  Then  $$\\sum_{i = 1}^{n - 1} ix^{i - 1} = f'(x) = \\frac{nx^{n - 1}}{x - 1} + \\frac{1 - x^n}{(x - 1)^2}.$$",
            "title": "15.3-1"
        },
        {
            "location": "/Chap15/15.3/#153-2",
            "text": "Draw the recursion tree for the $\\text{MERGE-SORT}$ procedure from Section 2.3.1 on an array of 16 elements. Explain why memoization fails to speed up a good divide-and-conquer algorithm such as $\\text{MERGE-SORT}$.   Draw a recursion tree. The $\\text{MERGE-SORT}$ procedure performs at most a single call to any pair of indices of the array that is being sorted. In other words, the subproblems do not overlap and therefore memoization will not improve the running time.",
            "title": "15.3-2"
        },
        {
            "location": "/Chap15/15.3/#153-3",
            "text": "Consider a variant of the matrix-chain multiplication problem in which the goal is to parenthesize the sequence of matrices so as to maximize, rather than minimize, the number of scalar multiplications. Does this problem exhibit optimal substructure?   Yes, this problem also exhibits optimal substructure. If we know that we need the subproduct $(A_l \\cdot A_r)$, then we should still find the most expensive way to compute it \u2014 otherwise, we could do better by substituting in the most expensive way.",
            "title": "15.3-3"
        },
        {
            "location": "/Chap15/15.3/#153-4",
            "text": "As stated, in dynamic programming we first solve the subproblems and then choose which of them to use in an optimal solution to the problem. Professor Capulet claims that we do not always need to solve all the subproblems in order to find an optimal solution. She suggests that we can find an optimal solution to the matrix-chain multiplication problem by always choosing the matrix $A_k$ at which to split the subproduct $A_i A_{i + 1} \\cdots A_j$ (by selecting $k$ to minimize the quantity $p_{i - 1} p_k p_j$)  before  solving the subproblems. Find an instance of the matrix-chain multiplication problem for which this greedy approach yields a suboptimal solution.   Suppose that we are given matrices $A_1$, $A_2$, $A_3$, and $A_4$ with dimensions such that  $$p_0, p_1, p_2, p_3, p_4 = 1000, 100, 20, 10, 1000.$$  Then $p_0 p_k p_4$ is minimized when $k = 3$, so we need to solve the subproblem of multiplying $A_1 A_2 A_3$, and also $A_4$ which is solved automatically. By her algorithm, this is solved by splitting at $k = 2$. Thus, the full parenthesization is $(((A_1A_2)A_3)A_4)$.\nThis requires   $$1000 \\cdot 100 \\cdot 20 + 1000 \\cdot 20 \\cdot 10 + 1000 \\cdot 10 \\cdot 1000 = 12200000$$  scalar multiplications.  On the other hand, suppose we had fully parenthesized the matrices to multiply as $((A_1(A_2A_3))A_4)$. Then we would only require   $$100 \\cdot 20 \\cdot 10 + 1000 \\cdot 100 \\cdot 10 + 1000 \\cdot 10 \\cdot 1000 = 11020000$$  scalar multiplications, which is fewer than Professor Capulet's method.  Therefore her greedy approach yields a suboptimal solution.",
            "title": "15.3-4"
        },
        {
            "location": "/Chap15/15.3/#153-5",
            "text": "Suppose that in the rod-cutting problem of Section 15.1, we also had limit $l_i$ on the number of pieces of length $i$ that we are allowed to produce, for $i = 1, 2, \\ldots, n$. Show that the optimal-substructure property described in Section 15.1 no longer holds.   We say that a problem exhibits the optimal substructure property when optimal solutions to a problem incorporate optimal solutions to related subproblems,  which we may solve independently  (i.e., they do not share resources). When we impose a limit $l_i$ on the number of pieces of size $i$ that we are permitted to produce, the subproblems can no longer be solved  independently . For example, consider a rod of length $4$ with the following prices and limits:  \\begin{array}{c|cccc}\n\\text{length $i$}  &  1 &  2 &  3 &  4 \\\\\n\\text{price $p_i$} & 15 & 20 & 33 & 36 \\\\\n\\text{limit $l_i$} &  2 &  1 &  1 &  1 \n\\end{array}  This instance has only three solutions that do not violate the limits: length $4$ with price $36$; lengths $1$ and $3$ with price $48$; and lengths $1$, $1$, and $2$ with price $50$. The optimal solution, therefore is to cut into lengths $1$, $1$, and $2$. When we look at the subproblem for length $2$, it has two solutions that do not violate the limits: length $2$ with price $20$, and lengths $1$ and $1$ with price $30$. The optimal solution for length $2$, therefore, is to cut into lengths $1$ and $1$. But we cannot use this optimal solution for the subproblem in the optimal solution for the original problem, because it would result in using four rods of length $1$ to solve the original problem, violating the limit of two length-$1$ rods.",
            "title": "15.3-5"
        },
        {
            "location": "/Chap15/15.3/#153-6",
            "text": "Imagine that you wish to exchange one currency for another. You realize that instead of directly exchanging one currency for another, you might be better off making a series of trades through other currencies, winding up with the currency you want. Suppose that you can trade $n$ different currencies, numbered $1, 2, \\ldots, n$, where you start with currency $1$ and wish to wind up with currency $n$. You are given, for each pair of currencies $i$ and $j$ , an exchange rate $r_{ij}$, meaning that if you start with $d$ units of currency $i$ , you can trade for $dr_{ij}$ units of currency $j$. A sequence of trades may entail a commission, which depends on the number of trades you make. Let $c_k$ be the commission that you are charged when you make $k$ trades. Show that, if $c_k = 0$ for all $k = 1, 2, \\ldots, n$, then the problem of finding the best sequence of exchanges from currency $1$ to currency $n$ exhibits optimal substructure. Then show that if commissions $c_k$ are arbitrary values, then the problem of finding the best sequence of exchanges from currency $1$ to currency $n$ does not necessarily exhibit optimal substructure.   Any solution must add the additional assumption that no currency can be repeated in a sequence of trades. Without this assumption, if $r_{ij} > 1 / r_{ji}$ for some currencies $i$ and $j$, we could repeatedly exchange $i \\to j \\to i \\to j \\to \\cdot$ and make an unbounded profit.  To see that this problem has optimal substructure when $c_k = 0$ for all $k$, observe that the problem of exchanging currency $a$ for currency $b$ is equivalent to finding a sequence of currencies $k_1, k_2, \\ldots, k_m$ such that $k_1 = a$, $k_m = b$ and the product $r_{k_1k_2}r_{k_2k_3}$ is maximized.  We use the usual cut-and-paste argument. Suppose that an optimal solution contains a sequence $\\langle k_i, k_{i + 1}, \\ldots, k_j \\rangle$ of currencies, and suppose that there exists a sequence $\\langle k_i', k_{i + 1}', \\ldots, k_j' \\rangle$, such that $k_i' = k_i$, $k_j' = k_j$, and $r_{k_i' k_{i + 1}'} \\cdots r_{k_{j - 1}' k_j'} > r_{k_i k_{i + 1}} \\cdots r_{k_{j - 1}k_j}$. Then we could substitute the sequence $\\langle k_i', k_{i + 1}', \\ldots, k_j' \\rangle$ for the sequence $\\langle k_i, k_{i + 1}, \\ldots, k_j \\rangle$ in the optimal solution to create an even better solution.  We show that optimal substructure does not hold when the $c_k$ are arbitrary values by means of an example. Suppose we have four currencies, with the following exchange rates:  \\begin{array}{c|cccc}\nr_{ij} &   1   &   2   &   3   & 4 \\\\\n\\hline\n  1    &   1   &   2   & 5 / 2 & 6 \\\\\n  2    & 1 / 2 &   1   & 3 / 2 & 3 \\\\\n  3    & 2 / 5 & 2 / 3 &   1   & 3 \\\\\n  4    & 1 / 6 & 1 / 3 & 1 / 3 & 1\n\\end{array}  Let $c_1 = 2$ and $c_2 = c_3 = 3$. Note that this example is not too badly contrived, in that $r_{ji} = 1 / r_{ij}$ for all $i$ and $j$.  To see how this example does not exhibit optimal substructure, let's examine an optimal solution for exchanging currency $1$ for currency $4$. There are five possible exchange sequences, with the following costs:\n\\begin{array}{lll}\n\\langle 1, 4       \\rangle & : 6 - 2                         & = 4, \\\\\n\\langle 1, 2, 4    \\rangle & : 2 \\cdot 3 - 3                 & = 3, \\\\\n\\langle 1, 3, 4    \\rangle & : 5 / 2 \\cdot 3 - 3             & = 9 / 2, \\\\\n\\langle 1, 2, 3, 4 \\rangle & : 2 \\cdot 3 / 2 \\cdot 3 - 3     & = 6, \\\\\n\\langle 1, 3, 2, 4 \\rangle & : 5 / 2 \\cdot 2 / 3 \\cdot 3 - 3 & = 2.\n\\end{array}  The optimal exchange sequence, $\\langle 1, 2, 3, 4 \\rangle$, appears in boldface.  Let's examine the subproblem of exchanging currency $1$ for currency $3$. Allowing currency $4$ to be part of the exchange sequence, there are again five possible exchange sequences with the following costs and the optimal one in boldface:  \\begin{array}{lll}\n\\langle 1, 3       \\rangle & : 5 / 2 - 2                 & = 1 / 2, \\\\\n\\langle 1, 2, 3    \\rangle & : 2 \\cdot 3 / 2 - 3         & = 0, \\\\\n\\langle 1, 4, 3    \\rangle & : 6 \\cdot 1 / 3 - 3         & = -1, \\\\\n\\langle 1, 2, 4, 3 \\rangle & : 2 \\cdot 3 \\cdot 1 / 3 - 3 & = -1, \\\\\n\\langle 1, 4, 2, 3 \\rangle & : 6 \\cdot 1 / 3 \\cdot 3 / 2 & = 0.\n\\end{array}  We see that the solution to the original problem includes the subproblem of exchanging currency $1$ for currency $3$, yet the solution $\\langle 1, 2, 3 \\rangle$ to the subproblem used in the optimal solution to the original problem is not the optimal solution $\\langle 1, 3 \\rangle$ to the subproblem on its own.",
            "title": "15.3-6"
        },
        {
            "location": "/Chap15/15.4/",
            "text": "15.4-1\n\n\n\n\nDetermine an $\\text{LCS}$ of $\\langle 1, 0, 0, 1, 0, 1, 0, 1 \\rangle$ and $\\langle 0, 1, 0, 1, 1, 0, 1, 1, 0 \\rangle$.\n\n\n\n\n$\\langle 1, 0, 0, 1, 1, 0 \\rangle$.\n\n\n15.4-2\n\n\n\n\nGive pseudocode to reconstruct an $\\text{LCS}$ from the completed $c$ table and the original sequences $X = \\langle x_1, x_2, \\ldots, x_m \\rangle$ and $Y = \\langle y_1, y_2, \\ldots, y_n \\rangle$ in $O(m + n)$ time, without using the $b$ table.\n\n\n\n\nPRINT\n-\nLCS\n(\nc\n,\n \nX\n,\n \nY\n,\n \ni\n,\n \nj\n)\n\n    \nif\n \nc\n[\ni\n][\nj\n]\n \n==\n \n0\n\n        \nreturn\n\n    \nif\n \nX\n[\ni\n]\n \n==\n \nY\n[\nj\n]\n\n        \nPRINT\n-\nLCS\n(\nc\n,\n \nX\n,\n \nY\n,\n \ni\n \n-\n \n1\n,\n \nj\n \n-\n \n1\n)\n\n        \nprint\n \nX\n[\ni\n]\n\n    \nelse\n \nif\n \nc\n[\ni\n \n-\n \n1\n][\nj\n]\n \n>\n \nc\n[\ni\n][\nj\n \n-\n \n1\n]\n\n        \nPRINT\n-\nLCS\n(\nc\n,\n \nX\n,\n \nY\n,\n \ni\n \n-\n \n1\n,\n \nj\n)\n\n    \nelse\n\n        \nPRINT\n-\nLCS\n(\nc\n,\n \nX\n,\n \nY\n,\n \ni\n,\n \nj\n \n-\n \n1\n)\n\n\n\n\n\n15.4-3\n\n\n\n\nGive a memoized version of $\\text{LCS-LENGTH}$ that runs in $O(mn)$ time.\n\n\n\n\nMEMOIZED\n-\nLCS\n-\nLENGTH\n(\nX\n,\n \nY\n,\n \ni\n,\n \nj\n)\n\n    \nif\n \nc\n[\ni\n][\nj\n]\n \n>\n \n-\n1\n\n        \nreturn\n \nc\n[\ni\n][\nj\n]\n\n    \nif\n \ni\n \n==\n \n0\n \nor\n \nj\n \n==\n \n0\n\n        \nreturn\n \nc\n[\ni\n][\nj\n]\n \n=\n \n0\n\n    \nif\n \nx\n[\ni\n]\n \n=\n \ny\n[\nj\n\n        \nreturn\n \nc\n[\ni\n,\n \nj\n]\n \n=\n \nLCS\n-\nLENGTH\n(\nX\n,\n \nY\n,\n \ni\n \n-\n \n1\n,\n \nj\n \n-\n \n1\n)\n \n+\n \n1\n\n    \nreturn\n \nc\n[\ni\n][\nj\n]\n \n=\n \nmax\n(\nLCS\n-\nLENGTH\n(\nX\n,\n \nY\n,\n \ni\n \n-\n \n1\n,\n \nj\n),\n \nLCS\n-\nLENGTH\n(\nX\n,\n \nY\n,\n \ni\n,\n \nj\n \n-\n \n1\n))\n\n\n\n\n\n15.4-4\n\n\n\n\nShow how to compute the length of an $\\text{LCS}$ using only $2 \\cdot \\min(m, n)$ entries in the $c$ table plus $O(1)$ additional space. Then show how to do the same thing, but using $\\min(m, n)$ entries plus $O(1)$ additional space.\n\n\n\n\nWhen computing a particular row of the $c$ table, no rows before the previous row are needed. Thus only two rows\u2014$2\u00b7length[Y]$ entries\u2014need to be kept in memory at a time. (Note: Each row of $c$ actually has $length[Y] + 1$ entries, but we don't need to store the column of $0$'s\u2014instead we can make the program ''know'' that those entries are $0$.) With this idea, we need only $2 \\cdot \\min(m, n)$ entries if we always call $\\text{LCS-LENGTH}$ with the shorter sequence as the $Y$ argument.\n\n\nWe can thus do away with the $c$ table as follows:\n\n\n\n\nUse two arrays of length $\\min(m, n)$, $previous\\text-row$ and $current\\text-row$, to hold the appropriate rows of $c$.\n\n\nInitialize $previous\\text-row$ to all $0$ and compute $current\\text-row$ from left to right.\n\n\nWhen $current\\text-row$ is filled, if there are still more rows to compute, copy $current\\text-row$ into $previous\\text-row$ and compute the new $current\\text-row$.\n\n\n\n\nActually only a little more than one row's worth of $c$ entries\u2014$\\min(m, n) + 1$ entries\u2014are needed during the computation. The only entries needed in the table when it is time to compute $c[i, j]$ are $c[i, k]$ for $k \\le j - 1$ (i.e., earlier entries in the current row, which will be needed to compute the next row); and $c[i - 1, k]$ for $k \\ge j - 1$ (i.e., entries in the previous row that are still needed to compute the rest of the current row). This is one entry for each $k$ from $1$ to $\\min(m, n)$ except that there are two entries with $k = j - 1$, hence the additional entry needed besides the one row's worth of entries.\n\n\nWe can thus do away with the $c$ table as follows:\n\n\n\n\n\n\nUse an array a of length $\\min(m, n) + 1$ to hold the appropriate entries of $c$. At the time $c[i, j]$ is to be computed, $a$ will hold the following entries:\n\n\n\n\n$a[k] = c[i, k]$ for $1 \\le k < j - 1$ (i.e., earlier entries in the current ''row''), \n\n\n$a[k] = c[i - 1, k]$ for $k \\ge j - 1$ (i.e., entries in the previous ''row''), \n\n\n$a[0] = c[i, j - 1]$ (i.e., the previous entry computed, which couldn't be put into the ''right'' place in a without erasing the still-needed $c[i - 1, j - 1]$).\n\n\n\n\n\n\n\n\nInitialize a to all $0$ and compute the entries from left to right.\n\n\n\n\nNote that the 3 values needed to compute $c[i, j]$ for $j > 1$ are in $a[0] = c[i, j - 1], a[ j - 1] = c[i - 1, j - 1]$, and $a[ j] = c[i - 1, j]$.\n\n\nWhen $c[i, j]$ has been computed, move $a[0](c[i, j - 1])$ to its ''correct'' place, $a[j - 1]$, and put $c[i, j]$ in $a[0]$.\n\n\n\n\n\n\n\n\n15.4-5\n\n\n\n\nGive an $O(n^2)$-time algorithm to find the longest monotonically increasing subsequence of a sequence of $n$ numbers.\n\n\n\n\nGiven a list of numbers $L$, make a copy of $L$ called $L'$ and then sort $L'$.\n\n\nPRINT\n-\nLCS\n(\nc\n,\n \nX\n,\n \nY\n)\n\n    \nn\n \n=\n \nc\n[\nX\n.\nlength\n,\n \nY\n.\nlength\n]\n\n    \ninitialize\n \nan\n \narray\n \ns\n \nof\n \nlength\n \nn\n\n    \ni\n \n=\n \nX\n.\nlength\n\n    \nj\n \n=\n \nY\n.\nlength\n\n    \nwhile\n \ni\n \n>\n \n0\n \nand\n \nj\n \n>\n \n0\n\n        \nif\n \nx\n[\ni\n]\n \n==\n \ny\n[\nj\n]\n\n            \ns\n[\nn\n]\n \n=\n \nx\n[\ni\n]\n\n            \nn\n \n=\n \nn\n \n-\n \n1\n\n            \ni\n \n=\n \ni\n \n-\n \n1\n\n            \nj\n \n=\n \nj\n \n-\n \n1\n\n        \nelse\n \nif\n \nc\n[\ni\n \n-\n \n1\n,\n \nj\n]\n \n\u2265\n \nc\n[\ni\n,\n \nj\n \n-\n \n1\n]\n\n        \nelse\n \nj\n \n=\n \nj\n \n-\n \n1\n\n    \nfor\n \ni\n \n=\n \n1\n \nto\n \ns\n.\nlength\n\n        \nprint\n \ns\n[\ni\n]\n \n\n\n\n\nMEMO\n-\nLCS\n-\nLENGTH\n-\nAUX\n(\nX\n,\n \nY\n,\n \nc\n,\n \nb\n)\n\n    \nm\n \n=\n \n|\nX\n|\n\n    \nn\n \n=\n \n|\nY\n|\n\n    \nif\n \nc\n[\nm\n,\n \nn\n]\n \n!=\n \n0\n \nor\n \nm\n \n==\n \n0\n \nor\n \nn\n \n==\n \n0\n\n        \nreturn\n\n    \nif\n \nx\n[\nm\n]\n \n==\n \ny\n[\nn\n]\n\n        \nb\n[\nm\n,\n \nn\n]\n \n=\n \n\u2196\n\n        \nc\n[\nm\n,\n \nn\n]\n \n=\n \nMEMO\n-\nLCS\n-\nLENGTH\n-\nAUX\n(\nX\n[\n1.\n.\nm\n \n-\n \n1\n],\n \nY\n[\n1.\n.\nn\n \n-\n \n1\n],\n \nc\n,\n \nb\n)\n \n+\n \n1\n\n    \nelse\n \nif\n \nMEMO\n-\nLCS\n-\nLENGTH\n-\nAUX\n(\nX\n[\n1.\n.\nm\n \n-\n \n1\n],\n \nY\n,\n \nc\n,\n \nb\n)\n \n\u2265\n \nMEMO\n-\nLCS\n-\nLENGTH\n-\nAUX\n(\nX\n,\n \nY\n[\n1.\n.\nn\n \n-\n \n1\n],\n \nc\n,\n \nb\n)\n\n        \nb\n[\nm\n,\n \nn\n]\n \n=\n \n\u2191\n\n        \nc\n[\nm\n,\n \nn\n]\n \n=\n \nMEMO\n-\nLCS\n-\nLENGTH\n-\nAUX\n(\nX\n[\n1.\n.\nm\n \n-\n \n1\n],\n \nY\n,\n \nc\n,\n \nb\n)\n\n    \nelse\n\n        \nb\n[\nm\n,\n \nn\n]\n \n=\n \n\u2190\n\n        \nc\n[\nm\n,\n \nn\n]\n \n=\n \nMEMO\n-\nLCS\n-\nLENGTH\n-\nAUX\n(\nX\n,\n \nY\n[\n1.\n.\nn\n \n-\n \n1\n],\n \nc\n,\n \nb\n)\n\n\n\n\n\nMEMO\n-\nLCS\n-\nLENGTH\n(\nX\n,\n \nY\n)\n\n    \nlet\n \nc\n \nbe\n \na\n \n|\nX\n|\n \nby\n \n|\nY\n|\n \narray\n \ninitiallized\n \nto\n \n0\n\n    \nlet\n \nb\n \nbe\n \na\n \n|\nX\n|\n \nby\n \n|\nY\n|\n \narray\n\n    \nMEMO\n-\nLCS\n-\nLENGTH\n-\nAUX\n(\nX\n,\n \nY\n,\n \nc\n,\n \nb\n)\n\n    \nreturn\n \nc\n \nand\n \nb\n\n\n\n\n\nThen, just run the $\\text{LCS}$ algorithm on these two lists. The longest common subsequence must be monotone increasing because it is a subsequence of $L'$ which is sorted. It is also the longest monotone increasing subsequence because being a subsequence of $L'$ only adds the restriction that the subsequence must be monotone increasing. Since $|L| = |L'| = n$, and sorting $L$ can be done in $o(n^2)$ time, the final running time will be $O(|L||L'|) = O(n^2)$.\n\n\n15.4-6 $\\star$\n\n\n\n\nGive an $O(n\\lg n)$-time algorithm to find the longest monotonically increasing subsequence of a sequence of $n$ numbers. ($\\textit{Hint:}$ Observe that the last element of a candidate subsequence of length $i$ is at least as large as the last element of a candidate subsequence of length $i - 1$. Maintain candidate subsequences by linking them through the input sequence.)\n\n\n\n\nThe algorithm $\\text{LONG-MONOTONIC}(S)$ returns the longest monotonically increasing subsequence of $S$, where $S$ has length $n$. \n\n\nThe algorithm works as follows: a new array B will be created such that $B[i]$ contains the last value of a longest monotonically increasing subsequence of length $i$. A new array $C$ will be such that $C[i]$ contains the monotonically increasing subsequence of length $i$ with smallest last element seen so far. \n\n\nTo analyze the runtime, observe that the entries of $B$ are in sorted order, so we can execute line 9 in $O(\\lg n)$ time. Since every other line in the for-loop takes constant time, the total run-time is $O(n\\lg n)$.\n\n\nLONG\n-\nMONOTONIC\n(\nS\n)\n\n    \ninitialize\n \nan\n \narray\n \nB\n \nof\n \nintegers\n \nlength\n \nof\n \nn\n,\n \nwhere\n \nevery\n \nvalue\n \nis\n \nset\n \nequal\n \nto\n \n\u221e\n.\n\n    \ninitialize\n \nan\n \narray\n \nC\n \nof\n \nempty\n \nlists\n \nlength\n \nn\n.\n\n    \nL\n \n=\n \n1\n\n    \nfor\n \ni\n \n=\n \n1\n \nto\n \nn\n\n        \nif\n \nA\n[\ni\n]\n \n<\n \nB\n[\n1\n]\n\n            \nB\n[\n1\n]\n \n=\n \nA\n[\ni\n]\n\n            \nC\n[\n1\n].\nhead\n.\nkey\n \n=\n \nA\n[\ni\n]\n\n        \nelse\n\n            \nlet\n \nj\n \nbe\n \nthe\n \nlargest\n \nindex\n \nof\n \nB\n \nsuch\n \nthat\n \nB\n[\nj\n]\n \n<\n \nA\n[\ni\n]\n\n            \nB\n[\nj\n \n+\n \n1\n]\n \n=\n \nA\n[\ni\n]\n\n            \nC\n[\nj\n \n+\n \n1\n]\n \n=\n \nC\n[\nj\n]\n\n            \nC\n[\nj\n \n+\n \n1\n].\ninsert\n(\nA\n[\ni\n])\n\n            \nif\n \nj\n \n+\n \n1\n \n>\n \nL\n\n                \nL\n \n=\n \nL\n \n+\n \n1\n\n    \nprint\n \nC\n[\nL\n]",
            "title": "15.4 Longest common subsequence"
        },
        {
            "location": "/Chap15/15.4/#154-1",
            "text": "Determine an $\\text{LCS}$ of $\\langle 1, 0, 0, 1, 0, 1, 0, 1 \\rangle$ and $\\langle 0, 1, 0, 1, 1, 0, 1, 1, 0 \\rangle$.   $\\langle 1, 0, 0, 1, 1, 0 \\rangle$.",
            "title": "15.4-1"
        },
        {
            "location": "/Chap15/15.4/#154-2",
            "text": "Give pseudocode to reconstruct an $\\text{LCS}$ from the completed $c$ table and the original sequences $X = \\langle x_1, x_2, \\ldots, x_m \\rangle$ and $Y = \\langle y_1, y_2, \\ldots, y_n \\rangle$ in $O(m + n)$ time, without using the $b$ table.   PRINT - LCS ( c ,   X ,   Y ,   i ,   j ) \n     if   c [ i ][ j ]   ==   0 \n         return \n     if   X [ i ]   ==   Y [ j ] \n         PRINT - LCS ( c ,   X ,   Y ,   i   -   1 ,   j   -   1 ) \n         print   X [ i ] \n     else   if   c [ i   -   1 ][ j ]   >   c [ i ][ j   -   1 ] \n         PRINT - LCS ( c ,   X ,   Y ,   i   -   1 ,   j ) \n     else \n         PRINT - LCS ( c ,   X ,   Y ,   i ,   j   -   1 )",
            "title": "15.4-2"
        },
        {
            "location": "/Chap15/15.4/#154-3",
            "text": "Give a memoized version of $\\text{LCS-LENGTH}$ that runs in $O(mn)$ time.   MEMOIZED - LCS - LENGTH ( X ,   Y ,   i ,   j ) \n     if   c [ i ][ j ]   >   - 1 \n         return   c [ i ][ j ] \n     if   i   ==   0   or   j   ==   0 \n         return   c [ i ][ j ]   =   0 \n     if   x [ i ]   =   y [ j \n         return   c [ i ,   j ]   =   LCS - LENGTH ( X ,   Y ,   i   -   1 ,   j   -   1 )   +   1 \n     return   c [ i ][ j ]   =   max ( LCS - LENGTH ( X ,   Y ,   i   -   1 ,   j ),   LCS - LENGTH ( X ,   Y ,   i ,   j   -   1 ))",
            "title": "15.4-3"
        },
        {
            "location": "/Chap15/15.4/#154-4",
            "text": "Show how to compute the length of an $\\text{LCS}$ using only $2 \\cdot \\min(m, n)$ entries in the $c$ table plus $O(1)$ additional space. Then show how to do the same thing, but using $\\min(m, n)$ entries plus $O(1)$ additional space.   When computing a particular row of the $c$ table, no rows before the previous row are needed. Thus only two rows\u2014$2\u00b7length[Y]$ entries\u2014need to be kept in memory at a time. (Note: Each row of $c$ actually has $length[Y] + 1$ entries, but we don't need to store the column of $0$'s\u2014instead we can make the program ''know'' that those entries are $0$.) With this idea, we need only $2 \\cdot \\min(m, n)$ entries if we always call $\\text{LCS-LENGTH}$ with the shorter sequence as the $Y$ argument.  We can thus do away with the $c$ table as follows:   Use two arrays of length $\\min(m, n)$, $previous\\text-row$ and $current\\text-row$, to hold the appropriate rows of $c$.  Initialize $previous\\text-row$ to all $0$ and compute $current\\text-row$ from left to right.  When $current\\text-row$ is filled, if there are still more rows to compute, copy $current\\text-row$ into $previous\\text-row$ and compute the new $current\\text-row$.   Actually only a little more than one row's worth of $c$ entries\u2014$\\min(m, n) + 1$ entries\u2014are needed during the computation. The only entries needed in the table when it is time to compute $c[i, j]$ are $c[i, k]$ for $k \\le j - 1$ (i.e., earlier entries in the current row, which will be needed to compute the next row); and $c[i - 1, k]$ for $k \\ge j - 1$ (i.e., entries in the previous row that are still needed to compute the rest of the current row). This is one entry for each $k$ from $1$ to $\\min(m, n)$ except that there are two entries with $k = j - 1$, hence the additional entry needed besides the one row's worth of entries.  We can thus do away with the $c$ table as follows:    Use an array a of length $\\min(m, n) + 1$ to hold the appropriate entries of $c$. At the time $c[i, j]$ is to be computed, $a$ will hold the following entries:   $a[k] = c[i, k]$ for $1 \\le k < j - 1$ (i.e., earlier entries in the current ''row''),   $a[k] = c[i - 1, k]$ for $k \\ge j - 1$ (i.e., entries in the previous ''row''),   $a[0] = c[i, j - 1]$ (i.e., the previous entry computed, which couldn't be put into the ''right'' place in a without erasing the still-needed $c[i - 1, j - 1]$).     Initialize a to all $0$ and compute the entries from left to right.   Note that the 3 values needed to compute $c[i, j]$ for $j > 1$ are in $a[0] = c[i, j - 1], a[ j - 1] = c[i - 1, j - 1]$, and $a[ j] = c[i - 1, j]$.  When $c[i, j]$ has been computed, move $a[0](c[i, j - 1])$ to its ''correct'' place, $a[j - 1]$, and put $c[i, j]$ in $a[0]$.",
            "title": "15.4-4"
        },
        {
            "location": "/Chap15/15.4/#154-5",
            "text": "Give an $O(n^2)$-time algorithm to find the longest monotonically increasing subsequence of a sequence of $n$ numbers.   Given a list of numbers $L$, make a copy of $L$ called $L'$ and then sort $L'$.  PRINT - LCS ( c ,   X ,   Y ) \n     n   =   c [ X . length ,   Y . length ] \n     initialize   an   array   s   of   length   n \n     i   =   X . length \n     j   =   Y . length \n     while   i   >   0   and   j   >   0 \n         if   x [ i ]   ==   y [ j ] \n             s [ n ]   =   x [ i ] \n             n   =   n   -   1 \n             i   =   i   -   1 \n             j   =   j   -   1 \n         else   if   c [ i   -   1 ,   j ]   \u2265   c [ i ,   j   -   1 ] \n         else   j   =   j   -   1 \n     for   i   =   1   to   s . length \n         print   s [ i ]    MEMO - LCS - LENGTH - AUX ( X ,   Y ,   c ,   b ) \n     m   =   | X | \n     n   =   | Y | \n     if   c [ m ,   n ]   !=   0   or   m   ==   0   or   n   ==   0 \n         return \n     if   x [ m ]   ==   y [ n ] \n         b [ m ,   n ]   =   \u2196 \n         c [ m ,   n ]   =   MEMO - LCS - LENGTH - AUX ( X [ 1. . m   -   1 ],   Y [ 1. . n   -   1 ],   c ,   b )   +   1 \n     else   if   MEMO - LCS - LENGTH - AUX ( X [ 1. . m   -   1 ],   Y ,   c ,   b )   \u2265   MEMO - LCS - LENGTH - AUX ( X ,   Y [ 1. . n   -   1 ],   c ,   b ) \n         b [ m ,   n ]   =   \u2191 \n         c [ m ,   n ]   =   MEMO - LCS - LENGTH - AUX ( X [ 1. . m   -   1 ],   Y ,   c ,   b ) \n     else \n         b [ m ,   n ]   =   \u2190 \n         c [ m ,   n ]   =   MEMO - LCS - LENGTH - AUX ( X ,   Y [ 1. . n   -   1 ],   c ,   b )   MEMO - LCS - LENGTH ( X ,   Y ) \n     let   c   be   a   | X |   by   | Y |   array   initiallized   to   0 \n     let   b   be   a   | X |   by   | Y |   array \n     MEMO - LCS - LENGTH - AUX ( X ,   Y ,   c ,   b ) \n     return   c   and   b   Then, just run the $\\text{LCS}$ algorithm on these two lists. The longest common subsequence must be monotone increasing because it is a subsequence of $L'$ which is sorted. It is also the longest monotone increasing subsequence because being a subsequence of $L'$ only adds the restriction that the subsequence must be monotone increasing. Since $|L| = |L'| = n$, and sorting $L$ can be done in $o(n^2)$ time, the final running time will be $O(|L||L'|) = O(n^2)$.",
            "title": "15.4-5"
        },
        {
            "location": "/Chap15/15.4/#154-6-star",
            "text": "Give an $O(n\\lg n)$-time algorithm to find the longest monotonically increasing subsequence of a sequence of $n$ numbers. ($\\textit{Hint:}$ Observe that the last element of a candidate subsequence of length $i$ is at least as large as the last element of a candidate subsequence of length $i - 1$. Maintain candidate subsequences by linking them through the input sequence.)   The algorithm $\\text{LONG-MONOTONIC}(S)$ returns the longest monotonically increasing subsequence of $S$, where $S$ has length $n$.   The algorithm works as follows: a new array B will be created such that $B[i]$ contains the last value of a longest monotonically increasing subsequence of length $i$. A new array $C$ will be such that $C[i]$ contains the monotonically increasing subsequence of length $i$ with smallest last element seen so far.   To analyze the runtime, observe that the entries of $B$ are in sorted order, so we can execute line 9 in $O(\\lg n)$ time. Since every other line in the for-loop takes constant time, the total run-time is $O(n\\lg n)$.  LONG - MONOTONIC ( S ) \n     initialize   an   array   B   of   integers   length   of   n ,   where   every   value   is   set   equal   to   \u221e . \n     initialize   an   array   C   of   empty   lists   length   n . \n     L   =   1 \n     for   i   =   1   to   n \n         if   A [ i ]   <   B [ 1 ] \n             B [ 1 ]   =   A [ i ] \n             C [ 1 ]. head . key   =   A [ i ] \n         else \n             let   j   be   the   largest   index   of   B   such   that   B [ j ]   <   A [ i ] \n             B [ j   +   1 ]   =   A [ i ] \n             C [ j   +   1 ]   =   C [ j ] \n             C [ j   +   1 ]. insert ( A [ i ]) \n             if   j   +   1   >   L \n                 L   =   L   +   1 \n     print   C [ L ]",
            "title": "15.4-6 $\\star$"
        },
        {
            "location": "/Chap15/15.5/",
            "text": "15.5-1\n\n\n\n\nWrite pseudocode for the procedure $\\text{CONSTRUCT-OPTIMAL-BST}(root)$ which, given the table root, outputs the structure of an optimal binary search tree. For the example in Figure 15.10, your procedure should print out the structure \n\n\n\\begin{align}\n& \\text{$k_4$ is the root} \\\\\n& \\text{$k_2$ is the left  child of $k_4$} \\\\\n& \\text{$k_1$ is the left  child of $k_2$} \\\\\n& \\text{$d_0$ is the right child of $k_1$} \\\\\n& \\text{$d_1$ is the right child of $k_1$} \\\\\n& \\text{$k_3$ is the right child of $k_2$} \\\\\n& \\text{$d_2$ is the left  child of $k_3$} \\\\\n& \\text{$d_3$ is the right child of $k_3$} \\\\\n& \\text{$k_5$ is the right child of $k_4$} \\\\\n& \\text{$d_4$ is the left  child of $k_5$} \\\\\n& \\text{$d_5$ is the right child of $k_5$}\n\\end{align}\n\n\ncorresponding to the optimal binary search tree shown in Figure 15.9(b).\n\n\n\n\nCONSTRUCT\n-\nOPTIMAL\n-\nBST\n(\nroot\n,\n \ni\n,\n \nj\n,\n \nlast\n)\n\n    \nif\n \ni\n \n==\n \nj\n\n        \nreturn\n\n    \nif\n \nlast\n \n==\n \n0\n\n        \nprint\n \nroot\n[\ni\n,\n \nj\n]\n \n+\n \n\"is the root\"\n\n    \nelse\n \nif\n \nj\n \n<\n \nlast\n:\n\n        \nprint\n \nroot\n[\ni\n,\n \nj\n]\n \n+\n \n\"is the left child of\"\n \n+\n \nlast\n\n    \nelse\n\n        \nprint\n \nroot\n[\ni\n,\n \nj\n]\n \n+\n \n\"is the right child of\"\n \n+\n \nlast\n\n    \nCONSTRUCT\n-\nOPTIMAL\n-\nBST\n(\nroot\n,\n \ni\n,\n \nroot\n[\ni\n,\n \nj\n]\n \n-\n \n1\n,\n \nroot\n[\ni\n,\n \nj\n])\n\n    \nCONSTRUCT\n-\nOPTIMAL\n-\nBST\n(\nroot\n,\n \nroot\n[\ni\n,\n \nj\n]\n \n+\n \n1\n,\n \nj\n,\n \nroot\n[\ni\n,\n \nj\n])\n\n\n\n\n\n15.5-2\n\n\n\n\nDetermine the cost and structure of an optimal binary search tree for a set of $n = 7$ keys with the following probabilities\n\n\n\\begin{array}{c|cccccccc}\ni   & 0    & 1    & 2    & 3    & 4    & 5    & 6    & 7 \\\\\n\\hline\np_i &      & 0.04 & 0.06 & 0.08 & 0.02 & 0.10 & 0.12 & 0.14 \\\\\nq_i & 0.06 & 0.06 & 0.06 & 0.06 & 0.05 & 0.05 & 0.05 & 0.05\n\\end{array}\n\n\n\n\n15.5-3\n\n\n\n\nSuppose that instead of maintaining the table $w[i, j]$, we computed the value of $w(i, j)$ directly from equation $\\text{(15.12)}$ in line 9 of $\\text{OPTIMAL-BST}$ and used this computed value in line 11. How would this change affect the asymptotic running time of $\\text{OPTIMAL-BST}$?\n\n\n\n\nEach of the $\\Theta(n^2)$ values of $w[i, j]$ would require computing those two sums, both of which can be of size $O(n)$, so, the asymptotic runtime would increase to $O(n^3)$.\n\n\n15.5-4 $\\star$\n\n\n\n\nKnuth [212] has shown that there are always roots of optimal subtrees such that $root[i, j - 1] \\le root[i, j] \\le root[i + 1, j]$ for all $1 \\le i < j \\le n$. Use this fact to modify the $\\text{OPTIMAL-BST}$ procedure to run in $\\Theta(n^2)$ time.\n\n\n\n\nChange the \nfor\n loop of line 10 in $\\text{OPTIMAL-BST}$ to\n\n\n    \nfor\n \nr\n \n=\n \nr\n[\ni\n,\n \nj\n \n-\n \n1\n]\n \nto\n \nr\n[\ni\n \n+\n \n1\n,\n \nj\n]\n\n\n\n\n\nKnuth's result implies that it is sufficient to only check these values because optimal root found in this range is in fact the optimal root of some binary search tree. The time spent within the \nfor\n loop of line 6 is now $\\Theta(n)$. This is because the bounds on $r$ in the new \nfor\n loop of line 10 are nonoverlapping.\n\n\nTo see this, suppose we have fixed $l$ and $i$. On one iteration of the \nfor\n loop of line 6, the upper bound on $r$ is\n\n\n$$r[i + 1, j] = r[i + 1, i + l - 1].$$\n\n\nWhen we increment $i$ by $1$ we increase $j$ by $1$. However, the lower bound on $r$ for the next iteration subtracts this, so the lower bound on the next iteration is \n\n\n$$r[i + 1, j + 1 - 1] = r[i + 1, j].$$\n\n\nThus, the total time spent in the \nfor\n loop of line 6 is $\\Theta(n)$. Since we iterate the outer \nfor\n loop of line 5 $n$ times, the total runtime is $\\Theta(n^2)$.",
            "title": "15.5 Optimal binary search trees"
        },
        {
            "location": "/Chap15/15.5/#155-1",
            "text": "Write pseudocode for the procedure $\\text{CONSTRUCT-OPTIMAL-BST}(root)$ which, given the table root, outputs the structure of an optimal binary search tree. For the example in Figure 15.10, your procedure should print out the structure   \\begin{align}\n& \\text{$k_4$ is the root} \\\\\n& \\text{$k_2$ is the left  child of $k_4$} \\\\\n& \\text{$k_1$ is the left  child of $k_2$} \\\\\n& \\text{$d_0$ is the right child of $k_1$} \\\\\n& \\text{$d_1$ is the right child of $k_1$} \\\\\n& \\text{$k_3$ is the right child of $k_2$} \\\\\n& \\text{$d_2$ is the left  child of $k_3$} \\\\\n& \\text{$d_3$ is the right child of $k_3$} \\\\\n& \\text{$k_5$ is the right child of $k_4$} \\\\\n& \\text{$d_4$ is the left  child of $k_5$} \\\\\n& \\text{$d_5$ is the right child of $k_5$}\n\\end{align}  corresponding to the optimal binary search tree shown in Figure 15.9(b).   CONSTRUCT - OPTIMAL - BST ( root ,   i ,   j ,   last ) \n     if   i   ==   j \n         return \n     if   last   ==   0 \n         print   root [ i ,   j ]   +   \"is the root\" \n     else   if   j   <   last : \n         print   root [ i ,   j ]   +   \"is the left child of\"   +   last \n     else \n         print   root [ i ,   j ]   +   \"is the right child of\"   +   last \n     CONSTRUCT - OPTIMAL - BST ( root ,   i ,   root [ i ,   j ]   -   1 ,   root [ i ,   j ]) \n     CONSTRUCT - OPTIMAL - BST ( root ,   root [ i ,   j ]   +   1 ,   j ,   root [ i ,   j ])",
            "title": "15.5-1"
        },
        {
            "location": "/Chap15/15.5/#155-2",
            "text": "Determine the cost and structure of an optimal binary search tree for a set of $n = 7$ keys with the following probabilities  \\begin{array}{c|cccccccc}\ni   & 0    & 1    & 2    & 3    & 4    & 5    & 6    & 7 \\\\\n\\hline\np_i &      & 0.04 & 0.06 & 0.08 & 0.02 & 0.10 & 0.12 & 0.14 \\\\\nq_i & 0.06 & 0.06 & 0.06 & 0.06 & 0.05 & 0.05 & 0.05 & 0.05\n\\end{array}",
            "title": "15.5-2"
        },
        {
            "location": "/Chap15/15.5/#155-3",
            "text": "Suppose that instead of maintaining the table $w[i, j]$, we computed the value of $w(i, j)$ directly from equation $\\text{(15.12)}$ in line 9 of $\\text{OPTIMAL-BST}$ and used this computed value in line 11. How would this change affect the asymptotic running time of $\\text{OPTIMAL-BST}$?   Each of the $\\Theta(n^2)$ values of $w[i, j]$ would require computing those two sums, both of which can be of size $O(n)$, so, the asymptotic runtime would increase to $O(n^3)$.",
            "title": "15.5-3"
        },
        {
            "location": "/Chap15/15.5/#155-4-star",
            "text": "Knuth [212] has shown that there are always roots of optimal subtrees such that $root[i, j - 1] \\le root[i, j] \\le root[i + 1, j]$ for all $1 \\le i < j \\le n$. Use this fact to modify the $\\text{OPTIMAL-BST}$ procedure to run in $\\Theta(n^2)$ time.   Change the  for  loop of line 10 in $\\text{OPTIMAL-BST}$ to       for   r   =   r [ i ,   j   -   1 ]   to   r [ i   +   1 ,   j ]   Knuth's result implies that it is sufficient to only check these values because optimal root found in this range is in fact the optimal root of some binary search tree. The time spent within the  for  loop of line 6 is now $\\Theta(n)$. This is because the bounds on $r$ in the new  for  loop of line 10 are nonoverlapping.  To see this, suppose we have fixed $l$ and $i$. On one iteration of the  for  loop of line 6, the upper bound on $r$ is  $$r[i + 1, j] = r[i + 1, i + l - 1].$$  When we increment $i$ by $1$ we increase $j$ by $1$. However, the lower bound on $r$ for the next iteration subtracts this, so the lower bound on the next iteration is   $$r[i + 1, j + 1 - 1] = r[i + 1, j].$$  Thus, the total time spent in the  for  loop of line 6 is $\\Theta(n)$. Since we iterate the outer  for  loop of line 5 $n$ times, the total runtime is $\\Theta(n^2)$.",
            "title": "15.5-4 $\\star$"
        },
        {
            "location": "/Chap15/Problems/15-1/",
            "text": "Suppose that we are given a directed acyclic graph $G = (V, E)$ with real-valued edge weights and two distinguished vertices $s$ and $t$ . Describe a dynamic-programming approach for finding a longest weighted simple path from $s$ to $t$ . What does the subproblem graph look like? What is the efficiency of your algorithm?\n\n\n\n\nWe will make use of the optimal substructure property of longest paths in acyclic graphs. Let $u$ be some vertex of the graph. If $u = t$, then the longest path from $u$ to $t$ has zero weight. If $u \\ne t$, let $p$ be a longest path from $u$ to $t$. Path $p$ has at least two vertices. Let $v$ be the second vertex on the path. Let $p'$ be the subpath of $p$ from $v$ to $t$ ($p'$ might be a zero-length path). That is, the path $p$ looks like\n\n\n$$u \\to v \\overset{p'}{\\leadsto} t.$$\n\n\nWe claim that $p'$ is a longest path from $v$ to $t$.\n\n\nTo prove the claim, we use a cut-and-paste argument. If $p'$ were not a longest path, then there exists a longer path $p''$ from $v$ to $t$. We could cut out $p'$ and paste in $p''$ to produce a path $u \\to v \\overset{p''}{\\leadsto} t$ which is longer than $p$, thus contradicting the assumption that $p$ is a longest path from $u$ to $t$.\n\n\nIt is important to note that the graph is \nacyclic\n. Because the graph is acyclic, path $p''$ cannot include the vertex u, for otherwise there would be a cycle of the form $u \\to v \\leadsto u$ in the graph. Thus, we can indeed use $p''$ to construct a longer path. The acyclicity requirement ensures that by pasting in path $p''$ , the overall path is still a \nsimple\n path (there is no cycle in the path). This difference between the cyclic and the acyclic case allows us to use dynamic programming to solve the acyclic case.\n\n\nLet $dist[u]$\u008d denote the weight of a longest path from $u$ to $t$. The optimal substructure property allows us to write a recurrence for $dist[u]$\u008d as\n\n\ndist[u] =\n\\begin{cases}\n                                           0 & \\text{if $u = t$}, \\\\\n\\max\\limits_{(u, v)\\in E}{w(u, v) + dist[v]} & \\text{otherwise}.\n\\end{cases}\n\n\nThis recurrence allows us to construct the following procedure:\n\n\nLONGEST\n-\nPATH\n-\nAUS\n(\nG\n,\n \nu\n,\n \nt\n,\n \ndist\n,\n \nnext\n)\n\n    \nif\n \nu\n \n==\n \nt\n\n        \ndist\n[\nu\n]\n \n=\n \n0\n\n        \nreturn\n \n(\ndist\n,\n \nnext\n)\n\n    \nelse\n \nif\n \nnext\n[\nu\n]\n \n\u2265\n \n0\n\n        \nreturn\n \n(\ndist\n,\n \nnext\n)\n\n    \nelse\n \nnext\n[\nu\n]\n \n=\n \n0\n\n        \nfor\n \neach\n \nvertex\n \nv\n \n\u2208\n \nG\n.\nAdj\n[\nu\n]\n\n            \n(\ndist\n,\n \nnext\n)\n \n=\n \nLONGEST\n-\nPATH\n-\nAUX\n(\nG\n,\n \nv\n,\n \nt\n,\n \ndist\n,\n \nnext\n)\n\n            \nif\n \nw\n(\nu\n,\n \nv\n)\n \n+\n \ndist\n[\nv\n]\n \n>\n \ndist\n[\nu\n]\n\n                \ndist\n[\nu\n]\n \n=\n \nw\n(\nu\n,\n \nv\n)\n \n+\n \ndist\n[\nv\n]\n\n                \nnext\n[\nu\n]\n \n=\n \nv\n\n    \nreturn\n \n(\ndist\n,\n \nnext\n)\n\n\n\n\n\n(See Section 22.1 for an explanation of the notation $G.Adj[u]$.)\n\n\n$\\text{LONGEST-PATH-AUX}$ is a memoized, recursive procedure, which returns the tuple $(dist, next)$. The array $dist$ is the memoized array that holds the solution to subproblems. That is, after the procedure returns, $dist[u]$\u008d will hold the weight of a longest path from $u$ to $t$. The array $next$ serves two purposes:\n\n\n\n\nIt holds information necessary for printing out an actual path. Specifically, if $u$ is a vertex on the longest path that the procedure found, then $next[u]$\u008d is the next vertex on the path.\n\n\nThe value in $next[u]$\u008d is used to check whether the current subproblem has been solved earlier. A value of at least zero indicates that this subproblem has been solved earlier.\n\n\n\n\nThe first \nif\n condition checks for the base case $u = t$. The second \nif\n condition checks whether the current subproblem has already been solved. The \nfor\n loop iterates over each adjacent edge($u, v)$ and updates the longest distance in $dist[u]$\u008d.\n\n\nWhat is the running time of $\\text{LONGEST-PATH-AUX}$? Each subproblem represented by a vertex $u$ is solved at most once due to the memoization. For each vertex, we examine its adjacent edges. Thus, each edge is examined at most once, and the overall running time is $O(E)$. (Section 22.1 discusses how we achieve $O(E)$ time by representing the graph with adjacency lists.)\n\n\nThe $\\text{PRINT-PATH}$ procedure prints out the path using information stored in the next array:\n\n\nPRINT\n-\nPATH\n(\ns\n,\n \nt\n,\n \nnext\n)\n\n    \nu\n \n=\n \ns\n\n    \nprint\n \nu\n\n    \nwhile\n \nu\n \n!=\n \nt\n\n        \nprint\n \n\"\u2192\"\n \nnext\n[\nu\n]\n\n        \nu\n \n=\n \nnext\n[\ni\n]\n\n\n\n\n\nThe $\\text{LONGEST-PATH-MAIN}$ procedure is the main driver. It creates and initializes the $dist$ and the $next$ arrays. It then calls $\\text{LONGEST-PATH-AUX}$ to find a path and $\\text{PRINT-PATH}$ to print out the actual path.\n\n\nLONGEST\n-\nPATH\n-\nMAIN\n(\nG\n,\n \ns\n,\n \nt\n)\n\n    \nn\n \n=\n \n|\nG\n.\nV\n|\n\n    \nlet\n \ndist\n[\n1.\n.\nn\n]\n \nand\n \nnext\n[\n1.\n.\nn\n]\n \nbe\n \nnew\n \narrays\n\n    \nfor\n \ni\n \n=\n \n1\n \nto\n \nn\n\n        \ndist\n[\ni\n]\n \n=\n \n-\n\u221e\n\n        \nnext\n[\ni\n]\n \n=\n \n-\n1\n\n    \n(\ndist\n,\n \nnext\n)\n \n=\n \nLONGEST\n-\nPATH\n-\nAUX\n(\nG\n,\n \ns\n,\n \nt\n,\n \ndist\n,\n \nnext\n)\n\n    \nif\n \ndist\n[\ns\n]\n \n==\n \n-\n\u221e\n\n        \nprint\n \n\"No path exists\"\n\n    \nelse\n \nprint\n \n\"The weight of the longest path is\"\n \ndist\n[\ns\n]\n\n        \nPRINT\n-\nPATH\n(\ns\n,\n \nt\n,\n \nnext\n)\n\n\n\n\n\nInitializating the dist and next arrays takes $O(V)$ time. Thus the overall running time of $\\text{LONGEST-PATH-MAIN}$ is $O(V + E)$.\n\n\nAlternative solution\n \n\n\nWe can also solve the problem using a bottom-up aproach. To do so, we need to ensure that we solve ''smaller'' subproblems before we solve ''larger'' ones. In our case, we can use a \ntopological sort\n (see Section 22.4) to obtain a bottom-up procedure, imposing the required ordering on the vertices in $\\Theta(V + E)$ time.\n\n\nLONGEST\n-\nPATH2\n(\nG\n,\n \ns\n,\n \nt\n)\n\n    \nlet\n \ndist\n[\n1.\n.\nn\n]\n \nand\n \nnext\n[\n1.\n.\nn\n]\n \nbe\n \nnew\n \narrays\n\n    \ntopologically\n \nsort\n \nthe\n \nvertices\n \nof\n \nG\n\n    \nfor\n \ni\n \n=\n \n1\n \nto\n \n|\nG\n.\nV\n|\n\n        \ndist\n[\ni\n]\n \n=\n \n-\n\u221e\n\n    \ndist\n[\ns\n]\n \n=\n \n0\n\n    \nfor\n \neach\n \nu\n \nin\n \ntopological\n \norder\n,\n \nstarting\n \nfrom\n \ns\n\n        \nfor\n \neach\n \nedge\n \n(\nu\n,\n \nv\n)\n \n\u2208\n \nG\n.\nAdj\n[\nu\n]\n\n            \nif\n \ndist\n[\nu\n]\n \n+\n \nw\n(\nu\n,\n \nv\n)\n \n>\n \ndist\n[\nv\n]\n\n                \nnext\n[\nv\n]\n \n=\n \ndist\n[\nu\n]\n \n+\n \nw\n(\nu\n,\n \nv\n)\n\n                \nnext\n[\nu\n]\n \n=\n \nv\n\n    \nprint\n \n\"The longest distance is\"\n \ndist\n[\nt\n]\n\n    \nPRINT\n-\nPATH\n(\ns\n,\n \nt\n,\n \nnext\n)\n\n\n\n\n\nThe running time of $\\text{LONGEST-PATH2}$ is $\\Theta(V + E)$.",
            "title": "15-1 Longest simple path in a directed acyclic graph"
        },
        {
            "location": "/Chap15/Problems/15-2/",
            "text": "A \npalindrome\n is a nonempty string over some alphabet that reads the same forward and backward. Examples of palindromes are all strings of length $1$, $\\text{civic}$, $\\text{racecar}$, and $\\text{aibohphobia}$ (fear of palindromes). \n\n\nGive an efficient algorithm to find the longest palindrome that is a subsequence of a given input string. For example, given the input $\\text{character}$, your algorithm should return $\\text{carac}$. What is the running time of your algorithm?\n\n\n\n\nWe solve the longest palindrome subsequence ($\\text{LPS}$) problem in a manner similar to how we compute the longest common subsequence in Section 15.4.\n\n\nStep 1: Characterizing a longest palindrome subsequence\n\n\nThe $\\text{LPS}$ problem has an optimal-substructure property, where the subproblems correspond to pairs of indices, starting and ending, of the input sequence.\n\n\nFor a sequence $X = \\langle x_1, x_2, \\ldots, x_n\\rangle$, we denote the subsequence starting at $x_i$ and ending at $x_j$ by $X_{ij} = \\langle x_i, x_{i + 1}, \\ldots, x_j \\rangle$.\n\n\nTheorem (Optimal substructure of an LPS)\n\n\nLet $X = \\langle x_1, x_2, \\ldots, x_n \\rangle$ be the input sequence, and let $Z = \\langle z_1, z_2, \\ldots, z_m \\rangle$ be any $\\text{LPS}$ of $X$.\n\n\n\n\nIf $n = 1$, then $m = 1$ and $z_1 = x_1$.\n\n\nIf $n = 2$ and $x_1 = x_2$, then $m = 2$ and $z_1 = z_2 = x_1 = x_2$.\n\n\nIf $n = 2$ and $x_1 \\ne x_2$, then $m = 1$ and $z_1$ is equal to either $x_1$ or $x_n$.\n\n\nIf $n > 2$ and $x_1 = x_n$, then $m > 2$, $z_1 = z_m = x_1 = x_n$, and $Z_{2, m - 1}$ is an $\\text{LPS}$ of $X_{2, n - 1}$.\n\n\nIf $n > 2$ and $x_1\\ne x_n$, then $z_1 \\ne x_1$ implies that $Z_{1, m}$ is an $\\text{LPS}$ of $X_{2, n}$.\n\n\nIf $n > 2$ and $x_1\\ne x_n$, then $z_m \\ne x_n$ implies that $Z_{1, m}$ is an $\\text{LPS}$ of $X_{1, n - 1}$.\n\n\n\n\nProof\n \n\n\nProperties 1., 2., and 3. follow trivially from the definition of $\\text{LPS}$.\n\n\n\n\nIf $n > 2$ and $x_1 = x_n$, then we can choose $x_1$ and $x_n$ as the ends of $Z$ and at least one more element of $X$ as part of $Z$. Thus, it follows that $m > 2$. If $z_1 \\ne x_1$, then we could append $x_1 = x_n$ to the ends of $Z$ to obtain a palindrome subsequence of $X$ with length $m + 2$, contradicting the supposition that $Z$ is a longest palindrome subsequence of $X$. Thus, we must have $z_1 = x_1 (= x_n = zm)$. Now, $Z_{2, m - 1}$ is a length-$(m - 2)$ palindrome subsequence of $X_{2, n - 1}$. We wish to show that it is an $\\text{LPS}$. Suppose for the purpose of contradiction that there exists a palindrome subsequence $W$ of $X_{2, n - 1}$ with length greater than $m - 2$. Then, appending $x_1 = x_n$ to the ends of $W$ produces a palindrome subsequence of $X$ whose length is greater than $m$, which is a contradiction.\n\n\nIf $z_1 \\ne x_1$, then $Z$ is a palindrome subsequence of $X_{2, n}$. If there were a palindrome subsequence $W$ of $X_{2, n}$ with length greater than $m$, then $W$ would also be a palindrome subsequence of $X$, contradicting the assumption that $Z$ is an $\\text{LPS}$ of $X$.\n\n\nThe proof is symmetric to (2).\n\n\n\n\nThe way that the theorem characterizes longest palindrome subsequences tells us that an $\\text{LPS}$ of a sequence contains within it an $\\text{LPS}$ of a subsequence of the sequence. Thus, the $\\text{LPS}$ problem has an optimal-substructure property.\n\n\nStep 2: A recursive solution\n\n\nThe theorem implies that we should examine either one or two subproblems when finding an $\\text{LPS}$ of $X = \\langle x_1, x_2, \\ldots, x_n \\rangle$, depending on whether $x_1 = x_n$.\n\n\nLet us define $p[i, j]$ \u008d to be the length of an $\\text{LPS}$ of the subsequence $X_{ij}$. If $i = j$, the $\\text{LPS}$ has length $1$. If $j = i + 1$, then the $\\text{LPS}$ has length either $1$ or $2$, depending on whether $x_i = x_j$. The optimal substructure of the $\\text{LPS}$ problem gives the following recursive formula:\n\n\n$$\np[i, j] =\n\\begin{cases}\n1                   & \\text{if $i = j$}, \\\\\n2                   & \\text{if $j = i + 1$ and $x_i = x_j$}, \\\\\n1                   & \\text{if $j = i + 1$ and $x_i \\ne x_j$}, \\\\\np[i + 1, j - 1] + 2 & \\text{if $j > i + 1$ and $x_i = x_j$}, \\\\\n\\max(p[i, j - 1], p[i + 1, j]) & \\text{if $j > i + 1$ and $x_i \\ne x_j$}.\n\\end{cases}\n$$\n\n\nStep 3: Computing the length of an LPS\n\n\nProcedure $\\text{LONGEST-PALINDROME}$ takes a sequence $X = \\langle x_1, x_2, \\ldots, x_n \\rangle$ as input. The procedure fills cells $p[i, i]$\u008d, where $1 \\le i \\le n$, and $p[i, i + 1]$\u008d, where $1 \\le i \\le n - 1$, as the base cases. It then starts filling cells $p[i, j]$\u008d, where $j > i + 1$. The procedure fills the $p$ table row by row, starting with row $n - 2$ and moving toward row $1$. (Rows $n - 1$ and $n$ are already filled as part of the base cases.) Within each row, the procedure fills the entries from left to right. The procedure also maintains the table $b[1..n, 1..n]$ to help us construct an optimal solution. Intuitively, $b[i, j]$ points to the table entry corresponding to the optimal subproblem solution chosen when computing $p[i, j]$\u008d. The procedure returns the $b$ and $p$ tables, $p[1, n]$ contains the length of an $\\text{LPS}$ of $X$. The running time of $\\text{LONGEST-PALINDROME}$ is clearly $\\Theta(n^2)$.\n\n\nLONGEST\n-\nPALINDROME\n(\nX\n)\n\n    \nn\n \n=\n \nX\n.\nlength\n\n    \nlet\n \nb\n[\n1.\n.\nn\n,\n \n1.\n.\nn\n]\n \nand\n \np\n[\n0.\n.\nn\n,\n \n0.\n.\nn\n]\n \nbe\n \nnew\n \ntables\n\n    \nfor\n \ni\n \n=\n \n1\n \nto\n \nn\n \n-\n \n1\n\n        \np\n[\ni\n,\n \ni\n]\n \n=\n \n1\n\n        \nj\n \n=\n \ni\n \n+\n \n1\n\n        \nif\n \nxi\n \n==\n \nxj\n\n            \np\n[\ni\n,\n \nj\n]\n \n=\n \n2\n\n            \nb\n[\ni\n,\n \nj\n]\n \n=\n \n\"\u2199\"\n\n        \nelse\n \np\n[\ni\n,\n \nj\n]\n \n=\n \n1\n\n            \nb\n[\ni\n,\n \nj\n]\n \n=\n \n\"\u2193\"\n\n    \np\n[\nn\n,\n \nn\n]\n \n=\n \n1\n\n    \nfor\n \ni\n \n=\n \nn\n \n-\n \n2\n \ndownto\n \n1\n\n        \nfor\n \nj\n \n=\n \ni\n \n+\n \n2\n \nto\n \nn\n\n            \nif\n \nxi\n \n==\n \nxj\n\n                \np\n[\ni\n,\n \nj\n]\n \n=\n \np\n[\ni\n \n+\n \n1\n,\n \nj\n \n-\n \n1\n]\n \n+\n \n2\n\n                \nb\n[\ni\n,\n \nj\n]\n \n=\n \n\"\u2199\"\n\n            \nelse\n \nif\n \np\n[\ni\n \n+\n \n1\n,\n \nj\n]\n \n\u2265\n \np\n[\ni\n,\n \nj\n \n-\n \n1\n]\n\n                \np\n[\ni\n,\n \nj\n]\n \n=\n \np\n[\ni\n \n+\n \n1\n,\n \nj\n]\n\n                \nb\n[\ni\n,\n \nj\n]\n \n=\n \n\"\u2193\"\n\n            \nelse\n \np\n[\ni\n,\n \nj\n]\n \n=\n \np\n[\ni\n,\n \nj\n \n-\n \n1\n]\n\n                \nb\n[\ni\n,\n \nj\n]\n \n=\n \n\"\u2190\"\n\n    \nreturn\n \np\n \nand\n \nb\n\n\n\n\n\nStep 4: Constructing an LPS\n\n\nThe $b$ table returned by $\\text{LONGEST-PALINDROME}$ enables us to quickly construct an $\\text{LPS}$ of $X = \\langle x_1, x_2, \\ldots, x_m\\rangle$. We simply begin at $b[1, n]$\u008d and trace through the table by following the arrows. Whenever we encounter a \"$\\swarrow$\" in entry $b[i, j]$\u008d, it implies that $x_i = y_j$ are the first and last elements of the $\\text{LPS}$ that $\\text{LONGEST-PALINDROME}$ found. The following recursive procedure returns a sequence $S$ that contains an $\\text{LPS}$ of $X$. The initial call is $\\text{GENERATE-LPS}(b, X, 1, X.length, \\langle \\rangle)$, where $\\langle\\rangle$ denotes an empty sequence. Within the procedure, the symbol $||$ denotes concatenation of a symbol and a sequence.\n\n\nGENERATE\n-\nLPS\n(\nb\n,\n \nX\n,\n \ni\n,\n \nj\n,\n \nS\n)\n\n    \nif\n \ni\n \n>\n \nj\n\n        \nreturn\n \nS\n\n    \nelse\n \nif\n \ni\n \n==\n \nj\n\n        \nreturn\n \nS\n \n||\n \nxi\n\n    \nelse\n \nif\n \nb\n[\ni\n,\n \nj\n]\n \n==\n \n\"\u2199\"\n\n        \nreturn\n \nxi\n \n||\n \nGENERATE\n-\nLPS\n(\nb\n,\n \nX\n,\n \ni\n \n+\n \n1\n,\n \nj\n \n-\n \n1\n,\n \nS\n)\n \n||\n \nxi\n\n    \nelse\n \nif\n \nb\n[\ni\n,\n \nj\n]\n \n==\n \n\"\u2193\"\n\n        \nreturn\n \nGENERATE\n-\nLPS\n(\nb\n,\n \nX\n,\n \ni\n \n+\n \n1\n,\n \nj\n,\n \nS\n)\n\n    \nelse\n \nreturn\n \nGENERATE\n-\nLPS\n(\nb\n,\n \nX\n,\n \ni\n,\n \nj\n \n-\n \n1\n,\n \nS\n)",
            "title": "15-2 Longest palindrome subsequence"
        },
        {
            "location": "/Chap15/Problems/15-3/",
            "text": "In the \neuclidean traveling-salesman problem\n, we are given a set of $n$ points in the plane, and we wish to find the shortest closed tour that connects all n points. Figure 15.11(a) shows the solution to a 7-point problem. The general problem is NP-hard, and its solution is therefore believed to require more than polynomial time (see Chapter 34).\n\n\nJ. L. Bentley has suggested that we simplify the problem by restricting our attention to \nbitonic tours\n, that is, tours that start at the leftmost point, go strictly rightward to the rightmost point, and then go strictly leftward back to the starting point. Figure 15.11(b) shows the shortest bitonic tour of the same 7 points. In this case, a polynomial-time algorithm is possible.\n\n\nDescribe an $O(n^2)$-time algorithm for determining an optimal bitonic tour. You may assume that no two points have the same $x$-coordinate and that all operations on real numbers take unit time. ($\\textit{Hint:}$ Scan left to right, maintaining optimal possibilities for the two parts of the tour.)\n\n\n\n\nTaking the book's hint, we sort the points by $x$-coordinate, left to right, in $O(n\\lg n)$ time. Let the sorted points be, left to right, $\\langle p_1, p_2, p_3, \\ldots, p_n \\rangle$. Therefore, $p_1$ is the leftmost point, and $p_n$ is the rightmost.\n\n\nWe define as our subproblems paths of the following form, which we call bitonic paths. A \nbitonic path\n $P_{i, j}$, where $i \\le j$, includes all points $p_1, p_2, \\ldots, p_j$; it starts at some point $p_i$, goes strictly left to point $p_1$, and then goes strictly right to point $p_j$. By \"going strictly left,\" we mean that each point in the path has a lower $x$-coordinate than the previous point. Looked at another way, the indices of the sorted points form a strictly decreasing sequence. Likewise, \"going strictly right\" means that the indices of the sorted points form a strictly increasing sequence. Moreover, $P_{i, j}$ contains all the points $p_1, p_2, p_3, \\ldots, p_j$ Note that $p_j$ is the rightmost point in $P_{i, j}$ and is on the rightgoing subpath. The leftgoing subpath may be degenerate, consisting of just $p_1$.\n\n\nLet us denote the euclidean distance between any two points $p_i$ and $p_j$ by $|p_i p_j|$. And let us denote by $b[i, j]$\u008d, for $1 \\le i \\le j \\le n$, the length of the shortest bitonic path $P_{i, j}$. Since the leftgoing subpath may be degenerate, we can easily compute all values $b[1, j]$\u008d. The only value of $b[i, i]$ that we will need is $b[n, n]$, which is the length of the shortest bitonic tour. We have the following formulation of $b[i, j]$ for $1 \\le i \\le j \\le n$:\n\n\n\\begin{align}\nb[1, 2] & = |p_1 p_2|, \\\\\nb[i, j] & = b[i, j - 1] + |p_{j - 1} p_j| & \\text{for $i < j - 1$}, \\\\\nb[j - 1, j] & = \\min_{1\\le k < j - 1} {b[k, j - 1] + |p_k p_j|}.\n\\end{align}\n\n\nWhy are these formulas correct? Any bitonic path ending at $p_2$ has $p_2$ as its rightmost point, so it consists only of $p_1$ and $p_2$. Its length, therefore, is $|p_1 p_2|$.\n\n\nNow consider a shortest bitonic path $P_{i, j}$. The point $p_{j - 1}$ is somewhere on this path. If it is on the rightgoing subpath, then it immediately preceeds $p_j$ on this subpath. Otherwise, it is on the leftgoing subpath, and it must be the rightmost point on this subpath, so $i = j - 1$. In the first case, the subpath from $p_i$ to $p_{j - 1}$ must be a shortest bitonic path $P_{i, j - 1}$, for otherwise we could use a cut-and-paste argument to come up with a shorter bitonic path than $P_{i, j}$. (This is part of our optimal substructure.) The length of $P_{i, j}$, therefore, is given by $b[i, j - 1] + |p_{j - 1} p_j|$. In the second case, $p_j$ has an immediate predecessor $p_k$, where $k < j - 1$, on the rightgoing subpath. Optimal substructure again applies: the subpath from $p_k$ to $p_{j - 1}$ must be a shortest bitonic path $P_{k, j - 1}$, for otherwise we could use cut-and-paste to come up with a shorter bitonic path than $P_{i, j}$. (We have implicitly relied on paths having the same length regardless of which direction we traverse them.) The length of $P_{i, j}$, therefore, is given by $\\min_{1 \\le k \\le j - 1} {b[k, j - 1] + |p_k p_j|}$.\n\n\nWe need to compute $b[n, n]$. In an optimal bitonic tour, one of the points adjacent to $p_n$ must be $p_{n - 1}$, and so we have\n\n\n$$b[n, n] = b[n - 1, n] + |p_{n - 1} p_n|.$$\n\n\nTo reconstruct the points on the shortest bitonic tour, we define $r[i, j]$ to be the index of the immediate predecessor of $p_j$ on the shortest bitonic path $P_{i, j}$. Because the immediate predecessor of $p_2$ on $P_{1, 2}$ is $p_1$, we know that $r[1, 2]$ must be $1$. The pseudocode below shows how we compute $b[i, j]$ and $r[i, j]$\u008d. It fills in only entries $b[i, j]$ where $1 \\le i \\le n - 1$ and $i + 1 \\le j \\le n$, or where $i = j = n$, and only entries $r[i, j]$ where $1 \\le i \\le n - 2$ and $i + 2 \\le j \\le n$.\n\n\nEUCLIDEAN\n-\nTSP\n(\np\n)\n\n    \nsort\n \nthe\n \npoints\n \nso\n \nthat\n \n\u27e8\np1\n,\n \np2\n,\n \np3\n,...,\n \npn\n\u27e9\n \nare\n \nin\n \norder\n \nof\n \nincreasing\n \nx\n-\ncoordinate\n\n    \nlet\n \nb\n[\n1.\n.\nn\n,\n \n2.\n.\nn\n]\n \nand\n \nr\n[\n1.\n.\nn\n \n-\n \n2\n,\n \n3.\n.\nn\n]\n \nbe\n \nnew\n \narrays\n\n    \nb\n[\n1\n,\n \n2\n]\n \n=\n \n|\np1p2\n|\n\n    \nfor\n \nj\n \n=\n \n3\n \nto\n \nn\n\n        \nfor\n \ni\n \n=\n \n1\n \nto\n \nj\n \n-\n \n2\n\n            \nb\n[\ni\n,\n \nj\n]\n \n=\n \nb\n[\ni\n,\n \nj\n \n-\n \n1\n]\n \n+\n \n|\np\n(\nj\n \n-\n \n1\n)\npj\n|\n\n            \nr\n[\ni\n,\n \nj\n]\n \n=\n \nj\n \n-\n \n1\n\n        \nb\n[\nj\n \n-\n \n1\n,\n \nj\n]\n \n=\n \n\u221e\n\n        \nfor\n \nk\n \n=\n \n1\n \nto\n \nj\n \n-\n \n2\n\n            \nq\n \n=\n \nb\n[\nk\n,\n \nj\n \n-\n \n1\n]\n \n+\n \n|\npkpj\n|\n\n            \nif\n \nq\n \n<\n \nb\n[\nj\n \n-\n \n1\n,\n \nj\n]\n\n                \nb\n[\nj\n \n-\n \n1\n,\n \nj\n]\n \n=\n \nq\n\n                \nr\n[\nj\n \n-\n \n1\n,\n \nj\n]\n \n=\n \nk\n\n    \nb\n[\nn\n,\n \nn\n]\n \n=\n \nb\n[\nn\n \n-\n \n1\n,\n \nn\n]\n \n+\n \n|\np\n(\nn\n \n-\n \n1\n)\npn\n|\n\n    \nreturn\n \nb\n \nand\n \nr\n\n\n\n\n\nWe print out the tour we found by starting at $p_n$, then a leftgoing subpath that includes $p_{n - 1}$, from right to left, until we hit $p_1$. Then we print right-to-left the remaining subpath, which does not include $p_{n - 1}$. For the example in Figure 15.11(b) on page 405, we wish to print the sequence $p_7, p_6, p_4, p_3, p_1, p_2, p_5$. Our code is recursive. The right-to-left subpath is printed as we go deeper into the recursion, and the left-to-right subpath is printed as we back out.\n\n\nPRINT\n-\nTOUR\n(\nr\n,\n \nn\n)\n\n    \nprint\n \npn\n\n    \nprint\n \np\n(\nn\n \n-\n \n1\n)\n\n    \nk\n \n=\n \nr\n[\nn\n \n-\n \n1\n,\n \nn\n]\n\n    \nPRINT\n-\nPATH\n(\nr\n,\n \nk\n,\n \nn\n \n-\n \n1\n)\n\n    \nprint\n \npk\n\n\n\n\n\nPRINT\n-\nPATH\n(\nr\n,\n \ni\n,\n \nj\n)\n\n    \nif\n \ni\n \n<\n \nj\n\n        \nk\n \n=\n \nr\n[\ni\n,\n \nj\n]\n\n        \nif\n \nk\n \n!=\n \ni\n\n            \nprint\n \npk\n\n        \nif\n \nk\n \n>\n \n1\n\n            \nPRINT\n-\nPATH\n(\nr\n,\n \ni\n,\n \nk\n)\n\n    \nelse\n \nk\n \n=\n \nr\n[\nj\n,\n \ni\n]\n\n        \nif\n \nk\n \n>\n \n1\n\n            \nPRINT\n-\nPATH\n(\nr\n,\n \nk\n,\n \nj\n)\n\n            \nprint\n \npk\n\n\n\n\n\nThe relative values of the parameters $i$ and $j$ in each call of $\\text{PRINT-PATH}$ indicate which subpath we're working on. If $i < j$, we're on the right-to-left subpath, and if $i > j$, we're on the left-to-right subpath. The test for $k \\ne i$ prevents us from printing $p_1$ an extra time, which could occur when we call $\\text{PRINT-PATH}(r, 1, 2)$.\n\n\nThe time to run $\\text{EUCLIDEAN-TSP}$ is $O(n^2)$ since the outer loop on $j$ iterates $n - 2$ times and the inner loops on $i$ and $k$ each run at most $n - 2$ times. The sorting step at the beginning takes $O(n\\lg n)$ time, which the loop times dominate. The time to run $\\text{PRINT-TOUR}$ is $O(n)$, since each point is printed just once.",
            "title": "15-3 Bitonic euclidean"
        },
        {
            "location": "/Chap15/Problems/15-4/",
            "text": "Consider the problem of neatly printing a paragraph with a monospaced font (all characters having the same width) on a printer. The input text is a sequence of $n$ words of lengths $l_1, l_2, \\ldots, l_n$, measured in characters. We want to print this paragraph neatly on a number of lines that hold a maximum of $M$ characters each. Our criterion of \"neatness\" is as follows. If a given line contains words $i$ through $j$, where $i \\le j$ , and we leave exactly one space between words, the number of extra space characters at the end of the line is $M - j + i - \\sum_{k = i}^j l_k$, which must be nonnegative so that the words fit on the line. We wish to minimize the sum, over all lines except the last, of the cubes of the numbers of extra space characters at the ends of lines. Give a dynamic-programming algorithm to print a paragraph of $n$ words neatly on a printer. Analyze the running time and space requirements of your algorithm.\n\n\n\n\nNote: We assume that no word is longer than will fit into a line, i.e., $l_i \\le M$ for all $i$.\n\n\nFirst, we'll make some definitions so that we can state the problem more uniformly. Special cases about the last line and worries about whether a sequence of words fits in a line will be handled in these definitions, so that we can forget about them when framing our overall strategy.\n\n\n\n\nDefine $extras[i, j] = M - j + i - \\sum_{k = i}^j l_k$ to be the number of extra spaces at the end of a line containing words $i$ through $j$. Note that $extras$ may be negative.\n\n\n\n\nNow define the cost of including a line containing words $i$ through $j$ in the sum we want to minimize:\n\n\n$$\nlc[i, j] =\n\\begin{cases}\n          \\infty & \\text{if $extras[i, j] < 0$ (i.e., words $i, \\ldots, j$ don't fit)}, \\\\\n               0 & \\text{if $j = n$ and $extras[i, j] \\ge 0$ (last line costs $0$)}, \\\\\n(extras[i, j])^3 & \\text{otherwise}.\n\\end{cases}\n$$\n\n\n\n\n\n\nBy making the line cost infinite when the words don't fit on it, we prevent such an arrangement from being part of a minimal sum, and by making the cost $0$ for the last line (if the words fit), we prevent the arrangement of the last line from influencing the sum being minimized.\n\n\nWe want to minimize the sum of $lc$ over all lines of the paragraph.\n\n\nOur subproblems are how to optimally arrange words $1, \\ldots, j$, where $j = 1, \\ldots, n$.\n\n\nConsider an optimal arrangement of words $1, \\ldots, j$. Suppose we know that the last line, which ends in word $j$, begins with word $i$. The preceding lines, therefore, contain words $1, \\ldots, i - 1$. In fact, they must contain an optimal arrangement of words $1, \\ldots, i - 1$. (The usual type of cut-and-paste argument applies.)\n\n\nLet $c[j]$ \u008d be the cost of an optimal arrangement of words $1, \\ldots, j$. If we know that the last line contains words $i, \\ldots, j$, then $c[j] = c[i - 1] + lc[i, j]$. As a base case, when we're computing $c[1]$\u008d, we need $c[0]$\u008d. If we set $c[0] = 0$, then $c[1] = lc[1, 1]$, which is what we want.\n\n\nBut of course we have to figure out which word begins the last line for the subproblem of words $1, \\ldots, j$. So we try all possibilities for word $i$, and we pick the one that gives the lowest cost. Here, $i$ ranges from $1$ to $j$. Thus, we can define $c[j]$ recursively by\n\n\n$$\nc[j] =\n\\begin{cases}\n                                                0 & \\text{if $j = 0$}, \\\\\n\\min\\limits_{1 \\le i \\le j} (c[i - 1] + lc[i, j]) & \\text{if $j > 0$}.\n\\end{cases}\n$$\n\n\nNote that the way we defined $lc$ ensures that\n\n\n\n\nall choices made will fit on the line (since an arrangement with $lc = \\infty$ cannot be chosen as the minimum), and\n\n\nthe cost of putting words $i, \\ldots, j$ on the last line will not be $0$ unless this really is the last line of the paragraph ($j = n$) or words $i, \\ldots, j$ fill the entire line.\n\n\n\n\nWe can compute a table of $c$ values from left to right, since each value depends only on earlier values.\n\n\nTo keep track of what words go on what lines, we can keep a parallel $p$ table that points to where each $c$ value came from. When $c[j]$ is computed, if $c[j]$ is based on the value of $c[k - 1]$, set $p[j] = k$. Then after $c[n]$ is computed, we can trace the pointers to see where to break the lines. The last line starts at word $p[n]$ and goes through word $n$. The previous line starts at word $p[p[n]]$ and goes through word $p[n] - 1$, et.\n\n\nIn pseudocode, here's how we construct the tables:\n\n\nPRINT\n-\nNEATLY\n(\nl\n,\n \nn\n,\n \nM\n)\n\n    \nlet\n \nextras\n[\n1.\n.\nn\n,\n \n1.\n.\nn\n],\n \nlc\n[\n1.\n.\nn\n,\n \n1.\n.\nn\n],\n \nand\n \nc\n[\n0.\n.\nn\n]\n \nbe\n \nnew\n \narrays\n   \n    \n// Compute extras[i, j] for 1 \u2264 i \u2264 j \u2264 n.\n\n    \nfor\n \ni\n \n=\n \n1\n \nto\n \nn\n\n        \nextras\n[\ni\n,\n \ni\n]\n \n=\n \nM\n \n-\n \nli\n\n        \nfor\n \nj\n \n=\n \ni\n \n+\n \n1\n \nto\n \nn\n\n            \nextras\n[\ni\n,\n \nj\n]\n \n=\n \nextras\n[\ni\n,\n \nj\n \n-\n \n1\n]\n \n-\n \nlj\n \n-\n \n1\n\n    \n// Compute lc[i, j] for 1 \u2264 i \u2264 j \u2264 n.\n\n    \nfor\n \ni\n \n=\n \n1\n \nto\n \nn\n\n        \nfor\n \nj\n \n=\n \ni\n \nto\n \nn\n\n            \nif\n \nextras\n[\ni\n,\n \nj\n]\n \n<\n \n0\n\n                \nlc\n[\ni\n,\n \nj\n]\n \n=\n \n\u221e\n\n            \nelse\n \nif\n \nj\n \n==\n \nn\n \nand\n \nextras\n[\ni\n,\n \nj\n]\n \n\u2265\n \n0\n\n                \nlc\n[\ni\n,\n \nj\n]\n \n=\n \n0\n\n            \nelse\n \nlc\n[\ni\n,\n \nj\n]\n \n=\n \npow\n((\nextras\n[\ni\n,\n \nj\n]),\n \n3\n)\n\n    \n// Compute c[j] and p[j] for 1 \u2264 j \u2264 n.\n\n    \nc\n[\n0\n]\n \n=\n \n0\n\n    \nfor\n \nj\n \n=\n \n1\n \nto\n \nn\n\n        \nc\n[\nj\n]\n \n=\n \n\u221e\n\n        \nfor\n \ni\n \n=\n \n1\n \nto\n \nj\n\n            \nif\n \nc\n[\ni\n \n-\n \n1\n]\n \n+\n \nlc\n[\ni\n,\n \nj\n]\n \n<\n \nc\n[\nj\n]\n\n                \nc\n[\nj\n]\n \n=\n \nc\n[\ni\n \n-\n \n1\n]\n \n+\n \nlc\n[\ni\n,\n \nj\n]\n\n                \np\n[\nj\n]\n \n=\n \ni\n\n    \nreturn\n \nc\n \nand\n \np\n\n\n\n\n\nQuite clearly, both the time and space are $\\Theta(n^2)$.\n\n\nIn fact, we can do a bit better: we can get both the time and space down to $\\Theta(nM)$. The key observation is that at most $\\lceil M / 2 \\rceil$ words can fit on a line. (Each word is at least one character long, and there's a space between words.) Since a line with words $i, \\ldots, j$ contains $j - i + 1$ words, if $j - i + 1 > \\lceil M / 2 \\rceil$ then we know that $lc[i, j] = \\infty$. We need only compute and store $extras[i, j]$ and $lc[i, j]$ for $j - i + 1 \\le \\lceil M / 2 \\rceil$. And the inner \nfor\n loop header in the computation of $c[j]$ and $p[j]$ can run from $\\max(1, j - \\lceil M / 2 \\rceil + 1)$ to $j$.\n\n\nWe can reduce the space even further to $\\Theta(n)$. We do so by not storing the $lc$ and $extras$ tables, and instead computing the value of $lc[i, j]$ as needed in the last loop. The idea is that we could compute $lc[i, j]$ in $O(1)$ time if we knew the value of $extras[i, j]$\u008d. And if we scan for the minimum value in \ndescending\n order of $i$, we can compute that as $extras[i, j] = extras[i + 1, j] - l_i - 1$. (Initially, $extras[j, j] = M - l_j$.) This improvement reduces the space to $\\Theta(n)$, since now the only tables we store are $c$ and $p$.\n\n\nHere's how we print which words are on which line. The printed output of $\\text{GIVE-LINES}(p, j)$ is a sequence of triples $(k, i, j)$, indicating that words $i, \\ldots, j$ are printed on line $k$. The return value is the line number $k$.\n\n\nGIVE\n-\nLINES\n(\np\n,\n \nj\n)\n\n    \ni\n \n=\n \np\n[\nj\n]\n\n    \nif\n \ni\n \n==\n \n1\n\n        \nk\n \n=\n \n1\n\n    \nelse\n \nk\n \n=\n \nGIVE\n-\nLINES\n(\np\n,\n \ni\n \n-\n \n1\n)\n \n+\n \n1\n\n    \nprint\n(\nk\n,\n \ni\n,\n \nj\n)\n\n    \nreturn\n \nk\n\n\n\n\n\nThe initial call is $\\text{GIVE-LINES}(p, n)$. Since the value of $j$ decreases in each recursive call, $\\text{GIVE-LINES}$ takes a total of $O(n)$ time.",
            "title": "15-4 Printing neatly"
        },
        {
            "location": "/Chap15/Problems/15-5/",
            "text": "In order to transform one source string of text $x[1..m]$ to a target string $y[1..n]$, we can perform various transformation operations. Our goal is, given $x$ and $y$, to produce a series of transformations that change $x$ to $y$. We use an array $z$\u2014assumed to be large enough to hold all the characters it will need\u2014to hold the intermediate results. Initially, $z$ is empty, and at termination, we should have $z[j] = y[j]$ for $j = 1, 2, \\ldots, n$. We maintain current indices $i$ into $x$ and $j$ into $z$, and the operations are allowed to alter $z$ and these indices. Initially, $i = j = 1$. We are required to examine every character in $x$ during the transformation, which means that at the end of the sequence of transformation operations, we must have $i = m + 1$.\n\n\nWe may choose from among six transformation operations:\n\n\nCopy\n a character from $x$ to $z$ by setting $z[j] = x[i]$ and then incrementing both $i$ and $j$. This operation examines $x[i]$.\n\n\nReplace\n a character from $x$ by another character $c$, by setting $z[j] = c$, and then incrementing both $i$ and $j$. This operation examines $x[i]$.\n\n\nDelete\n a character from $x$ by incrementing $i$ but leaving $j$ alone. This operation examines $x[i]$.\n\n\nInsert\n the character $c$ into $z$ by setting $z[j] = c$ and then incrementing $j$, but leaving $i$ alone. This operation examines no characters of $x$.\n\n\nTwiddle\n (i.e., exchange) the next two characters by copying them from $x$ to $z$ but in the opposite order; we do so by setting $z[j] = x[i + 1]$ and $z[j + 1] = x[i]$ and then setting $i = i + 2$ and $j = j + 2$. This operation examines $x[i]$ and $x[i + 1]$.\n\n\nKill\n the remainder of $x$ by setting $i = m + 1$. This operation examines all characters in $x$ that have not yet been examined. This operation, if performed, must be the final operation.\n\n\nAs an example, one way to transform the source string $\\text{algorithm}$ to the target string altruistic is to use the following sequence of operations, where the underlined characters are $x[i]$\u008d and $z[j]$ \u008d after the operation:\n\n\n\\begin{array}{lll}\n\\text{Operation}         & x           & z \\\\\n\\hline\n\\textit{initial strings} & \\text{_}algorithm & \\text{_} \\\\\n\\text{copy}              & a\\text{_}lgorithm & a\\text{_} \\\\\n\\text{copy}              & al\\text{_}gorithm & al\\text{_} \\\\\n\\text{replace by $t$}    & alg\\text{_}orithm & alt\\text{_} \\\\\n\\text{delete}            & algo\\text{_}rithm & alt\\text{_} \\\\\n\\text{copy}              & algor\\text{_}ithm & altr\\text{_} \\\\\n\\text{insert $u$}        & algor\\text{_}ithm & altru\\text{_} \\\\\n\\text{insert $i$}        & algor\\text{_}ithm & altrui\\text{_}\\\\\n\\text{insert $s$}        & algor\\text{_}ithm & altruis\\text{_}\\\\\n\\text{twiddle}           & algorit\\text{_}hm & altruisti\\text{_}\\\\\n\\text{insert $c$}        & algorit\\text{_}hm & altruistic\\text{_}\\\\\n\\text{kill}              & algorithm\\text{_} & altruistic\\text{_}\n\\end{array}\n\n\nNote that there are several other sequences of transformation operations that transform $\\text{algorithm}$ to $\\text{altruistic}$.\n\n\nEach of the transformation operations has an associated cost. The cost of an operation depends on the specific application, but we assume that each operation's cost is a constant that is known to us. We also assume that the individual costs of the copy and replace operations are less than the combined costs of the delete and insert operations; otherwise, the copy and replace operations would not be used. The cost of a given sequence of transformation operations is the sum of the costs of the individual operations in the sequence. For the sequence above, the cost of transforming $\\text{algorithm}$ to $\\text{altruistic}$ is\n\n\n$$\\text{($3 \\cdot$ cost(copy)) + cost(replace) + cost(delete) + ($4 \\cdot$ cost(insert)) + cost(twiddle) + cost(kill)}.$$\n\n\na.\n Given two sequences $x[1..m]$ and $y[1..n]$ and set of transformation-operation costs, the \nedit distance\n from $x$ to $y$ is the cost of the least expensive operatoin sequence that transforms $x$ to $y$. Describe a dynamic-programming algorithm that finds the edit distance from $x[1..m]$ to $y[1..n]$ and prints an optimal opeartion sequence. Analyze the running time and space requirements of your algorithm.\n\n\nThe edit-distance problem generalizes the problem of aligning two DNA sequences (see, for example, Setubal and Meidanis [310, Section 3.2]). There are several methods for measuring the similarity of two DNA sequences by aligning them. One such method to align two sequences $x$ and $y$ consists of inserting spaces at arbitrary locations in the two sequences (including at either end) so that the resulting sequences $x'$ and $y'$ have the same length but do not have a space in the same position (i.e., for no position $j$ are both $x'[j]$ and $y'[j]$ a space). Then we assign a ''score'' to each position. Position $j$ receives a score as follows:\n\n\n\n\n$+1$ if $x'[j] = y'[j]$ and neither is a space,\n\n\n$-1$ if $x'[j] \\ne y'[j]$ and neither is a space,\n\n\n$-2$ if either $x'[j]$ or $y'[j]$ is a space.\n\n\n\n\nThe score for the alignment is the sum of the scores of the individual positions. For example, given the sequences $x = \\text{GATCGGCAT}$ and $y = \\text{CAATGTGAATC}$, one alignment is\n\n\n\\begin{array}{cccccccccccc}\n\\text G &         & \\text A & \\text T & \\text C & \\text G &         & \\text G & \\text C & \\text A & \\text T & \\\\\n\\text C & \\text A & \\text A & \\text T &         & \\text G & \\text T & \\text G & \\text A & \\text A & \\text T & \\text C \\\\\n-       & *       & +       & +       & *       & +       & *       & +       & -       & +       & +       & * \n\\end{array}\n\n\nA $+$ under a position indicates a score of $+1$ for that position, a $-$ indicates a score of $-1$, and a $*$ indicates a score of $-2$, so that this alignment has a total score of $6 \\cdot -2 \\cdot 1 - 4 \\cdot 2 = -4$.\n\n\nb.\n Explain how to cast the problem of finding an optimal alignment as an edit distance problem using a subset of the transformation operations copy, replace, delete, insert, twiddle, and kill.\n\n\n\n\na.\n Dynamic programming is the ticket. This problem is slightly similar to the longest-common-subsequence problem. In fact, we'll define the notational conveniences $X_i$ and $Y_j$ in the similar manner as we did for the LCS problem: $X_i = x[1..i]$ and $Y_j = y[1..j]$\u008d.\n\n\nOur subproblems will be determining an optimal sequence of operations that converts $X_i$ to $Y_j$, for $0 \\le i \\le m$ and $0 \\le j \\le n$. We'll call this the ''$X_i \\to Y_j$ problem.'' The original problem is the $X_m \\to Y_n$ problem.\n\n\nLet's suppose for the moment that we know what was the last operation used to convert $X_i$ to $Y_j$. There are six possibilities. We denote by $c[i, j]$\u008d the cost of an optimal solution to the $X_i \\to Y_j$ problem.\n\n\n\n\n\n\nIf the last operation was a \ncopy\n, then we must have had $x[i] = y[j]$\u008d. The subproblem that remains is converting $X_{i - 1}$ to $Y_{j - 1}$. And an optimal solution to the $X_i \\to Y_j$ problem must include an optimal solution to the $X_{i - 1} \\to Y_{j - 1}$ problem. The cut-and-paste argument applies. Thus, assuming that the last operation was a copy, we have\n\n\n$$c[i, j] = c[i - 1, j - 1] + \\text{cost(copy)}.$$\n\n\n\n\n\n\nIf it was a \nreplace\n, then we must have had $x[i] \\ne y[j]$. (Here, we assume that we cannot replace a character with itself. It is a straightforward modification if we allow replacement of a character with itself.) We have the same optimal substructure argument as for copy, and assuming that the last operation was a replace, we have\n\n\n$$c[i, j] = c[i - 1, j - 1] + \\text{cost(replace)}.$$\n\n\n\n\n\n\nIf it was a \ntwiddle\n, then we must have had both $x[i] = y[j - 1]$ and $x[i - 1] = y[j]$, along with the implicit assumption that $i, j \\ge 2$. Now our subproblem is $X_{i - 2} \\to Y_{j - 2}$ and, assuming that the last operation was a twiddle, we have\n\n\n$$c[i, j] = c[i - 2, j - 2] + \\text{cost(twiddle)}.$$\n\n\n\n\n\n\nIf it was a \ndelete\n, then we have no restrictions on $x$ or $y$. Since we can view delete as removing a character from $X_i$ and leaving $Y_j$ alone, our subproblem is $X_{i - 1} \\to Y_j$. Assuming that the last operation was a delete, we have\n\n\n$$c[i, j] = c[i - 1, j] + \\text{cost(delete)}.$$\n\n\n\n\n\n\nIf it was an \ninsert\n, then we have no restrictions on $x$ or $y$. Our subproblem is $X_ i \\to Y_{j - 1}$. Assuming that the last operation was an insert, we have\n\n\n$$c[i, j] = c[i, j - 1] + \\text{cost(insert)}.$$\n\n\n\n\n\n\nIf it was a \nkill\n, then we had to have completed converting $X_m$ to $Y_n$, so that the current problem must be the $X_m \\to Y_n$ problem. In other words, we must have $i = m$ and $j = n$. If we think of a kill as a multiple delete, we can get any $X_i \\to Y_n$, where $0 \\le i < m$, as a subproblem. We pick the best one, and so assuming that the last operation was a kill, we have\n\n\n$$c[m, n] = \\min_{0 \\le i < m}{c[i, n]} + \\text{cost(kill)}.$$\n\n\n\n\n\n\nWe have not handled the base cases, in which $i = 0$ or $j = 0$. These are easy. $X_0$ and $Y_0$ are the empty strings. We convert an empty string into $Y_j$ by a sequence of $j$ inserts, so that $c[0, j] = j \\cdot \\text{cost(insert)}$. Similarly, we convert $X_i$ into $Y_0$ by a sequence of $i$ deletes, so that $c[i, 0] = i \\cdot \\text{cost(delete)}$. When $i = j = 0$, either formula gives us $c[0, 0] = 0$, which makes sense, since there's no cost to convert the empty string to the empty string.\n\n\nFor $i, j > 0$, our recursive formulation for $c[i, j]$\u008d applies the above formulas in the situations in which they hold:\n\n\n$$\nc[i, j] = \\min\n\\begin{cases}\nc[i - 1, j - 1] + \\text{cost(copy)}                     & \\text{if $x[i] = y[j]$}, \\\\\nc[i - 1, j - 1] + \\text{cost(replace)}                  & \\text{if $x[i] \\ne y[j]$}, \\\\\nc[i - 2, j - 2] + \\text{cost(twiddle)}                  & \\text{if $i, j \\ge 2$}, \\\\\n                                                        & x[i] = y[j - 1], \\\\\n                                                        & \\text{and $x[i - 1] = y[j]$}, \\\\\nc[i - 1, j] + \\text{cost(delete)}                       & \\text{always}, \\\\\nc[i, j] = c[i, j - 1] + \\text{cost(insert)}             & \\text{always}, \\\\\n\\min\\limits_{0 \\le i < m} {c[i, n]} + \\text{cost(kill)} & \\text{if $i = m$ and $j = n$}.\n\\end{cases}\n$$\n\n\nLike we did for LCS, our pseudocode fills in the table in row-major order, i.e., row-by-row from top to bottom, and left to right within each row. Columnmajor order (column-by-column from left to right, and top to bottom within each column) would also work. Along with the $c[i, j]$\u008d table, we fill in the table $op[i, j]$\u008d, holding which operation was used.\n\n\nEDIT\n-\nDISTANCE\n(\nx\n,\n \ny\n,\n \nm\n,\n \nn\n)\n\n    \nlet\n \nc\n[\n0.\n.\nm\n,\n \n0.\n.\nn\n]\n \nand\n \nop\n[\n0.\n.\nm\n,\n \n0.\n.\nn\n]\n \nbe\n \nnew\n \narrays\n\n    \nfor\n \ni\n \n=\n \n0\n \nto\n \nm\n\n        \nc\n[\ni\n,\n \n0\n]\n \n=\n \ni\n \n*\n \ncost\n(\ndelete\n)\n\n        \nop\n[\ni\n,\n \n0\n]\n \n=\n \nDELETE\n\n    \nfor\n \nj\n \n=\n \n0\n \nto\n \nn\n\n        \nc\n[\n0\n,\n \nj\n]\n \n=\n \nj\n \n*\n \ncost\n(\ninsert\n)\n\n        \nop\n[\n0\n,\n \nj\n]\n \n=\n \nINSERT\n\n    \nfor\n \ni\n \n=\n \n1\n \nto\n \nm\n\n        \nfor\n \nj\n \n=\n \n1\n \nto\n \nn\n\n            \nc\n[\ni\n,\n \nj\n]\n \n=\n \n\u221e\n\n            \nif\n \nx\n[\ni\n]\n \n==\n \ny\n[\nj\n]\n\n                \nc\n[\ni\n,\n \nj\n]\n \n=\n \nc\n[\ni\n \n-\n \n1\n,\n \nj\n \n-\n \n1\n]\n \n+\n \ncost\n(\ncopy\n)\n\n                \nop\n[\ni\n,\n \nj\n]\n \n=\n \nCOPY\n\n            \nif\n \nx\n[\ni\n]\n \n!=\n \ny\n[\nj\n]\n \nand\n \nc\n[\ni\n \n-\n \n1\n,\n \nj\n \n-\n \n1\n]\n \n+\n \ncost\n(\nreplace\n)\n \n<\n \nc\n[\ni\n,\n \nj\n]\n\n                \nc\n[\ni\n,\n \nj\n]\n \n=\n \nc\n[\ni\n \n-\n \n1\n,\n \nj\n \n-\n \n1\n]\n \n+\n \ncost\n(\nreplace\n)\n\n                \nop\n[\ni\n,\n \nj\n]\n \n=\n \nREPLACE\n(\nby\n \ny\n[\nj\n])\n\n            \nif\n \ni\n \n\u2265\n \n2\n \nand\n \nj\n \n\u2265\n \n2\n \nand\n \nx\n[\ni\n]\n \n==\n \ny\n[\nj\n \n-\n \n1\n]\n \nand\n \nx\n[\ni\n \n-\n \n1\n]\n \n==\n \ny\n[\nj\n]\n \nand\n \nc\n[\ni\n \n-\n \n2\n,\n \nj\n \n-\n \n2\n]\n \n+\n \ncost\n(\ntwiddle\n)\n \n<\n \nc\n[\ni\n,\n \nj\n]\n\n                \nc\n[\ni\n,\n \nj\n]\n \n=\n \nc\n[\ni\n \n-\n \n2\n,\n \nj\n \n-\n \n2\n]\n \n+\n \ncost\n(\ntwiddle\n)\n\n                \nop\n[\ni\n,\n \nj\n]\n \n=\n \nTWIDDLE\n\n            \nif\n \nc\n[\ni\n \n-\n \n1\n,\n \nj\n]\n \n+\n \ncost\n(\ndelete\n)\n \n<\n \nc\n[\ni\n,\n \nj\n]\n\n                \nc\n[\ni\n,\n \nj\n]\n \n=\n \nc\n[\ni\n \n-\n \n1\n,\n \nj\n]\n \n+\n \ncost\n(\ndelete\n)\n\n                \nop\n[\ni\n,\n \nj\n]\n \n=\n \nDELETE\n\n            \nif\n \nc\n[\ni\n,\n \nj\n \n-\n \n1\n]\n \n+\n \ncost\n(\ninsert\n)\n \n<\n \nc\n[\ni\n,\n \nj\n]\n\n                \nc\n[\ni\n,\n \nj\n]\n \n=\n \nc\n[\ni\n,\n \nj\n \n-\n \n1\n]\n \n+\n \ncost\n(\ninsert\n)\n\n                \nop\n[\ni\n,\n \nj\n]\n \n=\n \nINSERT\n(\ny\n[\nj\n])\n\n    \nfor\n \ni\n \n=\n \n0\n \nto\n \nm\n \n-\n \n1\n\n        \nif\n \nc\n[\ni\n,\n \nn\n]\n \n+\n \ncost\n(\nkill\n)\n \n<\n \nc\n[\nm\n,\n \nn\n]\n\n            \nc\n[\nm\n,\n \nn\n]\n \n=\n \nc\n[\ni\n,\n \nn\n]\n \n+\n \ncost\n(\nkill\n)\n\n            \nop\n[\nm\n,\n \nn\n]\n \n=\n \nKILL\n \ni\n\n    \nreturn\n \nc\n \nand\n \nop\n\n\n\n\n\nThe time and space are both $\\Theta(mn)$. If we store a $\\text{KILL}$ operation in $op[m, n]$\u008d, we also include the index $i$ after which we killed, to help us reconstruct the optimal sequence of operations. (We don't need to store $y[i]$ in the $op$ table for replace or insert operations.)\n\n\nTo reconstruct this sequence, we use the $op$ table returned by $\\text{EDIT-DISTANCE}$. \nThe procedure $\\text{OP-SEQUENCE}(op, i, j)$ reconstructs the optimal operation sequence that we found to transform $X_i$ into $Y_j$. The base case is when $i = j = 0$. The first call is $\\text{OP-SEQUENCE}(op, m, n)$.\n\n\nOP\n-\nSEQUENCE\n(\nop\n,\n \ni\n,\n \nj\n)\n\n    \nif\n \ni\n \n==\n \n0\n \nand\n \nj\n \n=\n \n0\n\n        \nreturn\n\n    \nif\n \nop\n[\ni\n,\n \nj\n]\n \n==\n \nCOPY\n \nor\n \nop\n[\ni\n,\n \nj\n]\n \n=\n \nREPLACE\n\n        \ni\n'\n \n=\n \ni\n \n-\n \n1\n\n        \nj\n'\n \n=\n \nj\n \n-\n \n1\n\n    \nelse\n \nif\n \nop\n[\ni\n,\n \nj\n]\n \n==\n \nTWIDDLE\n\n        \ni\n'\n \n=\n \ni\n \n-\n \n2\n\n        \nj\n'\n \n=\n \nj\n \n-\n \n2\n\n    \nelse\n \nif\n \nop\n[\ni\n,\n \nj\n]\n \n==\n \nDELETE\n\n        \ni\n'\n \n=\n \ni\n \n-\n \n1\n\n        \nj\n'\n \n=\n \nj\n\n    \nelse\n \nif\n \nop\n[\ni\n,\n \nj\n]\n \n==\n \nINSERT\n      \n// don't care yet what character is inserted\n\n        \ni\n'\n \n=\n \ni\n\n        \nj\n'\n \n=\n \nj\n \n-\n \n1\n\n    \nelse\n                            \n// must be KILL, and must have i = m, and j = n\n\n        \nlet\n \nop\n[\ni\n,\n \nj\n]\n \n==\n \nKILL\n \nk\n\n        \ni\n'\n \n=\n \nk\n\n        \nj\n'\n \n=\n \nj\n\n    \nOP\n-\nSEQUENCE\n(\nop\n,\n \ni\n'\n,\n \nj\n'\n)\n\n    \nprint\n \nop\n[\ni\n,\n \nj\n]\n\n\n\n\n\nThis procedure determines which subproblem we used, recurses on it, and then prints its own last operation.\n\n\nb.\n The DNA-alignment problem is just the edit-distance problem, with\n\\begin{array}{rcl}\n\\text{cost(copy)}    & = & -1, \\\\\n\\text{cost(replace)} & = & +1, \\\\\n\\text{cost(delete)}  & = & +2, \\\\\n\\text{cost(insert)}  & = & +2,\n\\end{array}\n\n\nand the twiddle and kill operations are not permitted.\n\n\nThe score that we are trying to maximize in the DNA-alignment problem is precisely the negative of the cost we are trying to minimize in the edit-distance problem. The negative cost of copy is not an impediment, since we can only apply the copy operation when the characters are equal.",
            "title": "15-5 Edit distance"
        },
        {
            "location": "/Chap15/Problems/15-6/",
            "text": "Professor Stewart is consulting for the president of a corporation that is planning a company party. The company has a hierarchical structure; that is, the supervisor relation forms a tree rooted at the president. The personnel office has ranked each employee with a conviviality rating, which is a real number. In order to make the party fun for all attendees, the president does not want both an employee and his or her immediate supervisor to attend. \n\n\nProfessor Stewart is given the tree that describes the structure of the corporation, using the left-child, right-sibling representation described in Section 10.4. Each node of the tree holds, in addition to the pointers, the name of an employee and that employee's conviviality ranking. Describe an algorithm to make up a guest list that maximizes the sum of the conviviality ratings of the guests. Analyze the running time of your algorithm.\n\n\n\n\nThe problem exhibits optimal substructure in the following way: If the root $r$ is included in an optimal solution, then we must solve the optimal subproblems rooted at the grandchildren of $r$. If $r$ is not included, then we must solve the optimal subproblems on trees rooted at the children of $r$. The dynamic programming algorithm to solve this problem works as follows: We make a table $C$ indexed by vertices which tells us the optimal conviviality ranking of a guest list obtained from the subtree with root at that vertex. We also make a table $G$ such that $G[i]$ tells us the guest list we would use when vertex $i$ is at the root. Let $T$ be the tree of guests. To solve the problem, we need to examine the guest list stored at $G[T.root]$. First solve the problem at each leaf $L$. If the conviviality ranking at $L$ is positive, $G[L] = {L}$ and $C[L] = L.conviv$. Otherwise $G[L] = \\emptyset$ and $C[L] = 0$. Iteratively solve the subproblems located at parents of nodes at which the subproblem has been solved. In general for a node $x$,\n\n\n$$C[x] = \\min(\\sum_{y\\text{ is a child of } x} C[y], \\sum_{y\\text{ is a grandchild of } x} C[y]).$$\n\n\nThe runtime of the algorithm is $O(n^2)$ where $n$ is the number of vertices, because we solve $n$ subproblems, each in constant time, but the tree traversals required to find the appropriate next node to solve could take linear time.",
            "title": "15-6 Planning a company party"
        },
        {
            "location": "/Chap15/Problems/15-7/",
            "text": "We can use dynamic programming on a directed graph $G = (V, E)$ for speech recognition. Each edge $(u, v) \\in E$ is labeled with a sound $\\sigma(u, v)$ from a finite set $\\Sigma$ of sounds. The labeled graph is a formal model of a person speaking a restricted language. Each path in the graph starting from a distinguished vertex $v_0 \\in V$ corresponds to a possible sequence of sounds producted by the model. We define the label of a directed path to be the concatenation of the labels of the edges on that path.\n\n\na.\n Describe an efficient algorithm that, given an edge-labeled graph $G$ with distinguished vertex $v_0$ and a sequence $s = \\langle \\sigma_1, \\sigma_2, \\ldots, \\sigma_k \\rangle$ of sounds from $\\Sigma$, returns a path in $G$ that begins at $v_0$ and has $s$ as its label, if any such path exists. Otherwise, the algorithm should return $\\text{NO-SUCH-PATH}$. Analyze the running time of your algorithm. ($\\textit{Hint:}$ You may find concepts from Chapter 22 useful.)\n\n\nNow, suppose that every edge $(u, v) \\in E$ has an associated nonnegatve probability $p(u, v)$ of traversing the edge $(u, v)$ from vertex $u$ and thus producing the corresponding sound. The sum of the probabilities of the edges leaving any vertex equals $1$. The probability of a path is defined to the product of the probabilities of its edges. We can view the probability of a path beginning at $v_0$ as the probability that a ''random walk'' beginning at $v_0$ will follow the specified path, where we randomly choose which edge to take leaving a vertex $u$ according to the probabilities of the available edges leaving $u$.\n\n\nb.\n Extend your answer to part (a) so that if a path is returned, it is a \nmost probable path\n starting at $v_0$ and having label $s$. Analyze the running time of your algorithm.\n\n\n\n\na.\n Our substructure will consist of trying to find suffixes of s of length one less starting at all the edges leaving $v_0$ with label $\\sigma_0$. if any of them have a solution, then, there is a solution. If none do, then there is none. See the algorithm $\\text{VITERBI}$ for details.\n\n\nVITERBI(G, s, v[0])\n    if s.length = 0\n        return v[0]\n    for edges(v[0], v[1]) in V for some v[1]\n        if sigma(v[0], v[1]) = sigma[1]\n            res = VITERBI(G, (sigma[2],...,sigma[k]), v[1])\n            if res != NO-SUCH-PATH\n                return v[0], res\n    return NO-SUCH-PATH\n\n\n\n\nSince the subproblems are indexed by a suffix of $s$ (of which there are only $k$) and a vertex in the graph, there are at most $O(k|V|)$ different possible arguments. Since each run may require testing a edge going to every other vertex, and each iteration of the \nfor\n loop takes at most a constant amount of time other than the call to $\\text{PROB-VITERBI}$, the final runtime is $O(k|V|^2)$.\n\n\nb.\n For this modification, we will need to try all the possible edges leaving from $v_0$ instead of stopping as soon as we find one that works. The substructure is very similar. We'll make it so that instead of just returning the sequence, we'll have the algorithm also return the probability of that maximum probability sequence, calling the fields seq and prob respectively. See the algorithm $\\text{PROB-VITERBI}$.\n\n\nSince the runtime is indexed by the same things, we have that we will call it with at most $O(k|V|)$ different possible arguments. Since each run may require testing a edge going to every other vertex, and each iteration of the \nfor\n loop takes at most a constant amount of time other than the call to $\\text{PROB-VITERBI}$, the final runtime is $O(k|V|^2)$.\n\n\nPROB\n-\nVITERBI\n(\nG\n,\n \ns\n,\n \nv\n[\n0\n])\n\n    \nif\n \ns\n.\nlength\n \n=\n \n0\n\n        \nreturn\n \nv\n[\n0\n]\n\n    \nsols\n.\nseq\n \n=\n \nNO\n-\nSUCH\n-\nPATH\n\n    \nsols\n.\nprob\n \n=\n \n0\n\n    \nfor\n \nedges\n(\nv\n[\n0\n],\n \nv\n[\n1\n])\n \nin\n \nV\n \nfor\n \nsome\n \nv\n[\n1\n]\n\n        \nif\n \nsigma\n(\nv\n[\n0\n],\n \nv\n[\n1\n])\n \n=\n \nsigma\n[\n1\n]\n\n            \nres\n \n=\n \nPROB\n-\nVITERBI\n(\nG\n,\n \n(\nsigma\n[\n2\n],...,\nsigma\n[\nk\n]),\n \nv\n[\n1\n])\n\n            \nif\n \np\n(\nv\n[\n0\n],\n \nv\n[\n1\n])\n \n*\n \nres\n.\nprob\n \n\u2265\n \nsols\n.\nprob\n\n                \nsols\n.\nprob\n \n=\n \np\n(\nv\n[\n0\n],\n \nv\n[\n1\n])\n \n*\n \nres\n.\nprob\n \nand\n \nsols\n.\nseq\n \n=\n \nv\n[\n0\n],\n \nres\n.\nseq\n\n    \nreturn\n \nsols",
            "title": "15-7 Viterbi algorithm"
        },
        {
            "location": "/Chap15/Problems/15-8/",
            "text": "We are given a color picture consisting of an $m \\times n$ array $A[1..m, 1..n]$ of pixels, where each pixel specifies a triple of red, green, and blue (RGB) intensities. Suppose that we wish to compress this picture slightly. Specifically, we wish to remove one pixel from each of the $m$ rows, so that the whole picture becomes one pixel narrower. To avoid disturbing visual effects, however, we require that the pixels removed in two adjacent rows be in the same or adjacent columns; the pixels removed form a ''seam'' from the top row to the bottom row where successive pixels in the seam are adjacent vertically or diagonally.\n\n\na.\n Show that the number of such possible seams grows at least exponentially in $m$, assuming that $n > 1$.\n\n\nb.\n Suppose now that along with each pixel $A[i, j]$, we have calculated a real-valued disruption measure $d[i, j]$, indicating how disruptive it would be to remove pixel $A[i, j]$. Intuitively, the lower a pixel's disruption measure, the more similar the pixel is to its neighbors. Suppose further that we define the disruption measure of a seam to be the sum of the disruption measures of its pixels.\n\n\nGive an algorithm to find a seam with the lowest disruption measure. How efficient is your algorithm?\n\n\n\n\na.\n  Let us set up a recurrence for the number of valid seams as a function of $m$. Suppose we are in the process of carving out a seam row by row, starting from the first row. Let the last pixel carved out be $A[i, j]$. How many choices do we have for the pixel in row $i + 1$ such that the pixel continues the seam? If the last pixel $A[i, j]$\u008d were on the column boundary ($i = 1$ or $i = n$), then there would be two choices for the next pixel. For example, when $i = 1$, the two choices for the next pixel are $A[i + 1, j]$ and $A[i + 1, j + 1]$. Otherwise, there would be three choices for the next pixel: $A[i + 1, j - 1], A[i + 1, j], A[i + 1, j + 1]$. Thus, for a general pixel $A[i, j]$, there are at least two possible choices for a pixel $p$ in the next row such that $p$ continues a seam ending in $A[i, j]$. Let $T(i)$ denote the number of possible seams from row $1$ to row $i$. Then, for $i = 1$, we have $T(i) = n$, and for $i > 1$,\n\n\n$$T(i) \\ge 2T(i - 1).$$\n\n\nIt is easy to guess that $T(i) \\ge n2^{n - 1}$, which we verify by direct substitution. For $i = 1$, we have $T(i) = n \\ge n \\cdot 2^0$. For $i > 1$, we have\n\n\n\\begin{align}\nT(i) & \\ge 2T(i - 1) \\\\\n     & \\ge 2 \\cdot n 2^{i - 1} \\\\\n     & =   n 2^{i - 1}.\n\\end{align}\n\n\nThus, the total number $T(m)$ of seams is at least $n2^{m - 1}$. We conclude that the number of seams grows at least exponentially in $m$.\n\n\nb.\n As proved in the previous part, it is infeasible to systematically check every seam, since the number of possible seams grows exponentially.\n\n\nThe structure of the problem allows us to build the solution row by row. Consider a pixel $A[i, j]$. We ask the question: 'If $i$ were the first row of the picture, what is the minimum disruptive measure of seams that start with the pixel $A[i, j]$?'\n\n\nLet $S^*$ be a seam of minimum disruptive measure among all seams that start with pixel $A[i, j]$. Let $A[i + 1, p]$\u008d, where $p \\in {j - 1, j, j + 1}$, be the pixel of $S^*$ in the next row. Let $S'$ be the sub-seam of $S^*$ that starts with $A[i + 1, p]$\u008d. We claim that $S'$ has the minimum disruptive measure among seams that start with $A[i + 1, p]$. Why? Suppose there exists another seam $S''$ that starts with $A[i + 1, p]$\u008d and has disruptive measure less than that of $S'$. By using $S''$ as the sub-seam instead of $S'$, we can obtain another seam that starts with $A[i, j]$ and has a disruptive measure which is less than that of $S^*$. Thus, we obtain a contradiction to our assumption that $S^*$ is a seam of minimum disruptive measure.\n\n\nLet $disr[i, j]$\u008d be the value of the minimum disruptive measure among all seams that start with pixel $A[i, j]$. For row $m$, the seam with the minimum disruptive measure consists of just one point. We can now state a recurrence for $disr[i, j]$ \u008d as follows. In the base case, $disr[m, j] = d[m, j]$ for $j = 1, 2, \\ldots, n$. In the recursive case, for $j = 1, 2, \\ldots, n$,\n\n\n$$disr[i, j] = d[i, j] + \\min_{k \\in K}{dist[i + i, j + k]},$$\n\n\nwhere the set $K$ of index offsets is\n\n\n$$\nK =\n\\begin{cases}\n{0, 1}     & \\text{if $j = 1$}, \\\\\n{-1, 0, 1} & \\text{if $1 < j < m$}, \\\\\n{-1, 0}    & \\text{if $j = n$}.\n\\end{cases}\n$$\n\n\nSince every seam has to start with a pixel of the first row, we simply find the minimum $disr[1, j]$ for pixels in the first row to obtain the minimum disruptive measure.\n\n\nCOMPRESS\n-\nIMAGE\n(\nd\n)\n\n    \nm\n \n=\n \nd\n.\nrows\n\n    \nn\n \n=\n \nd\n.\ncolumns\n\n    \nlet\n \ndisr\n[\n1.\n.\nm\n,\n \n1.\n.\nn\n]\n \nand\n \nnext\n[\n1.\n.\nm\n,\n \n1.\n.\nn\n]\n \nbe\n \nnew\n \ntables\n\n    \nfor\n \nj\n \n=\n \n1\n \nto\n \nn\n\n        \ndisr\n[\nm\n,\n \nj\n]\n \n=\n \nd\n[\nm\n,\n \nj\n]\n\n    \nfor\n \ni\n \n=\n \nm\n \n-\n \n1\n \ndownto\n \n1\n\n        \nfor\n \nj\n \n=\n \n1\n \nto\n \nn\n\n            \nlow\n \n=\n \nmax\n(\n-\n1\n,\n \n1\n \n-\n \nj\n)\n\n            \nhigh\n \n=\n \nmin\n(\n1\n,\n \nn\n \n-\n \nj\n)\n\n            \ndisr\n[\ni\n,\n \nj\n]\n \n=\n \n\u221e\n\n            \nfor\n \nk\n \n=\n \nlow\n \nto\n \nhigh\n\n                \nif\n \ndisr\n[\ni\n \n+\n \n1\n,\n \nj\n \n+\n \nk\n]\n \n<\n \ndisr\n[\ni\n,\n \nj\n]\n\n                    \ndisr\n[\ni\n,\n \nj\n]\n \n=\n \ndisr\n[\ni\n \n+\n \n1\n,\n \nj\n \n+\n \nk\n]\n\n                    \nnext\n[\ni\n,\n \nj\n]\n \n=\n \nj\n \n+\n \nk\n\n            \ndisr\n[\ni\n,\n \nj\n]\n \n=\n \ndisr\n[\ni\n,\n \nj\n]\n \n+\n \nd\n[\ni\n,\n \nj\n]\n\n    \nval\n \n=\n \n\u221e\n\n    \nstart\n \n=\n \n1\n\n    \nfor\n \nj\n \n=\n \n1\n \nto\n \nn\n\n        \nif\n \ndisr\n[\n1\n,\n \nj\n]\n \n<\n \nval\n\n            \nval\n \n=\n \ndisr\n[\n1\n,\n \nj\n]\n\n            \nstart\n \n=\n \nj\n\n    \nprint\n \n\"The minimum value of the disruptive measure is\"\n \nval\n\n    \nfor\n \ni\n \n=\n \n1\n \nto\n \nm\n\n        \nprint\n \n\"cup point at\"\n \n(\ni\n,\n \nstart\n)\n\n        \nstart\n \n=\n \nnext\n[\ni\n,\n \nstart\n]\n\n\n\n\n\nThe procedure $\\text{COMPRESS-IMAGE}$ is simply an implementation of this recurrence in a bottom-up fashion.\n\n\nWe first carry out the initialization of the base cases, which are the cases when row $i = m$. The minimum disruptive measure for the base cases is simply $d[m, j]$.\n\n\nThe next \nfor\n loop runs down from $m - 1$ to $1$. Thus, $disr[i + 1, j]$ is already available before computing $dist[i, j]$ for pixels of row $i$.\n\n\nThe assignments to $low$ and $high$ allow the index offset $k$ to range over the correct set $K$ from above. We set $low$ to $0$ when $j = 1$ and to $-1$ when $j > 1$, and we set $high$ to $0$ when $j = n$ and to $1$ when $j < n$. The innermost \nfor\n loop sets $dist[i, j]$ to the minimum value of $disr[i + 1, j + k]$ for all $k \\in K$, and the line that follows this loop adds in $d[i, j]$\u008d.\n\n\nWe use the $next$ table to reconstruct the actual seam. For a given pixel, it records which pixel was used as the next pixel. Specifically, for a pixel $A[i, j]$\u008d, if $next[i, j] = p$, where $p \\in {j - 1, j, j + 1}$, then the next pixel of the seam is $A[i + 1, p]$\u008d.\n\n\nThe last line of the \nfor\n loop adds the disruptive measure of the current pixel to the disruptive measure of the seam.\n\n\nThe next \nfor\n loop finds the minimum disruptive measure of pixels in the first row. We print the minimum disruptive measure as the answer.\n\n\nThe rest of the code reconstructs the actual seam, using the information stored in the $next$ array.\n\n\nNoting that the innermost \nfor\n loop runs over at most three values of $k$, we see that the running time of $\\text{COMPRESS-IMAGE}$ is $O(mn)$. The space requirement is also $O(mn)$. We can improve upon the space requirement by observing that row $i$ of the $disr$ table depends on only row $i + 1$. Therefore, we can store just two rows at any time. Thus, we can improve the space requirement of $\\text{COMPRESS-IMAGE}$ to $O(n)$.",
            "title": "15-8 Image compression by seam carving"
        },
        {
            "location": "/Chap15/Problems/15-9/",
            "text": "A certain string-processing language allows a programmer to break a string into two pieces. Because this operation copies the string, it costs $n$ time units to break a string of $n$ characters into two pieces. Suppose a programmer wants to break a string into many pieces. The order in which the breaks occur can affect the total amount of time used. For example, suppose that the programmer wants to break a $20$-character string after characters $2$, $8$, and $10$ (numbering the characters in ascending order from the left-hand end, starting from $1$). If she programs the breaks to occur in left-to-right order, then the first break costs $20$ time units, the second break costs $18$ time units (breaking the string from characters $3$ to $20$ at character $8$), and the third break costs $12$ time units, totaling $50$ time units. If she programs the breaks to occur in right-to-left order, however, then the first break costs $20$ time units, the second break costs $10$ time units, and the third break costs $8$ time units, totaling $38$ time units. In yet another order, she could break first at $8$ (costing $20$), then break the left piece at $2$ (costing $8$), and finally the right piece at $10$ (costing $12$), for a total cost of $40$.\n\n\nDesign an algorithm that, given the numbers of characters after which to break, determines a least-cost way to sequence those breaks. More formally, given a string $S$ with $n$ characters and an array $L[1..m]$\u008d containing the break points, com- pute the lowest cost for a sequence of breaks, along with a sequence of breaks that achieves this cost.\n\n\n\n\nOur first step will be to identify the subproblems that satisfy the optimalsubstructure property. Before we frame the subproblem, we make two simplifying modifications to the input:\n\n\n\n\nWe sort $L$ so that the indices in $L$ are in ascending order.\n\n\nWe prepend the index $0$ to the beginning of $L$ and append n to the end of $L$.\n\n\n\n\nLet $L[i..j]$ denote a subarray of $L$ that starts from index $i$ and ends at index $j$. Define the subproblem denoted by $(i, j)$ as ''What is the cheapest sequence of breaks to break the substring $S[L[i] + 1..L[j]]$?'' Note that the first and last elements of the subarray $L[i..j]$ define the ends of the substring, and we have to worry about only the indices of the subarray $L[i + 1..j - 1]$.\n\n\nFor example, let $L = \\langle 20, 17, 14, 11, 25 \\rangle$ and $n = 30$. First, we sort $L$. Then, we prepend $0$ and append $n$ as explained to get $L = \\langle 0, 11, 14, 17, 20, 25, 30 \\rangle$. Now, what is the subproblem $(2, 6)$? We obtain a substring by breaking $S$ after character $L[2] = 11$ and character $L[6] = 25$. We ask ''What is the cheapest sequence of breaks to break the substring $S[12..25]$?'' We have to worry about only indices in the subarray $L[3..5] = \\langle 14, 17, 20 \\rangle$, since the other indices are not present in the substring.\n\n\nAt this point, the problem looks similar to matrix-chain multiplication (see Section 15.2). We can make the first break at any element of $L[i + 1..j - 1]$.\n\n\nSuppose that an optimal sequence of breaks $\\sigma$ for subproblem $(i, j)$ makes the first break at $L[k]$, where $i < k < j$. This break gives rise to two subproblems:\n\n\n\n\nThe ''prefix'' subproblem $(i, k)$, covering the subarray $L[i + 1..k - 1]$,\n\n\nThe ''suffix'' subproblem $(k, j)$, covering the subarray $L[k + 1..j - 1]$.\n\n\n\n\nThe overall cost can be expressed as the sum of the length of the substring, the prefix cost, and the suffix cost.\n\n\nWe show optimal substructure by claiming that the sequence of breaks in  for the prefix subproblem $(i, k)$ must be an optimal one. Why? If there were a less costly way to break the substring $S[L[i] + 1..L[k]]$ represented by the subproblem $(i, k)$, then substituting that sequence of breaks in $\\sigma$ would produce another sequence of breaks whose cost is lower than that of $\\sigma$, which would be a contradiction. A similar observation holds for the sequence of breaks for the suffix subproblem $(k, j)$: it must be an optimal sequence of breaks.\n\n\nLet $cost[i, j]$ denote the cost of the cheapest solution to subproblem $(i, j)$. We write the recurrence relation for cost as\n\n\ncost[i, j] =\n\\begin{cases}\n0                                                                 & \\text{if $j - i \\le 1$}, \\\\\n\\min\\limits_{i < k < j} {cost[i, k] + cost[k, j] + (L[j] - L[i])} & \\text{if $j - i > 1$}.\n\\end{cases}\n\n\nThus, our approach to solving the subproblem $(i, j)$ will be to try to split the respective substring at all possible values of $k$ and then choosing a break that results in the minimum cost. We need to be careful to solve smaller subproblems before we solve larger subproblems. In particular, we solve subproblems in increasing order of the length $j - 1$.\n\n\nBREAK\n-\nSTRING\n(\nn\n,\n \nL\n)\n\n    \nprepend\n \n0\n \nto\n \nthe\n \nstart\n \nof\n \nL\n \nand\n \nappend\n \nn\n \nto\n \nthe\n \nend\n \nof\n \nL\n\n    \nm\n \n=\n \nL\n.\nlength\n\n    \nsort\n \nL\n \ninto\n \nincreasing\n \norder\n\n    \nlet\n \ncost\n[\n1.\n.\nm\n,\n \n1.\n.\nm\n]\n \nand\n \nbreak\n[\n1.\n.\nm\n,\n \n1.\n.\nm\n]\n \nbe\n \nnew\n \ntables\n\n    \nfor\n \ni\n \n=\n \n1\n \nto\n \nm\n \n-\n \n1\n\n        \ncost\n[\ni\n,\n \ni\n]\n \n=\n \ncost\n[\ni\n,\n \ni\n \n+\n \n1\n]\n \n=\n \n0\n\n    \ncost\n[\nm\n,\n \nm\n]\n \n=\n \n0\n\n    \nfor\n \nlen\n \n=\n \n3\n \nto\n \nm\n\n        \nfor\n \ni\n \n=\n \n1\n \nto\n \nm\n \n-\n \nlen\n \n+\n \n1\n\n            \nj\n \n=\n \ni\n \n+\n \nlen\n \n-\n \n1\n\n            \ncost\n[\ni\n,\n \nj\n]\n \n=\n \n\u221e\n\n            \nfor\n \nk\n \n=\n \ni\n \n+\n \n1\n \nto\n \nj\n \n-\n \n1\n\n                \nif\n \ncost\n[\ni\n,\n \nk\n]\n \n+\n \ncost\n[\nk\n,\n \nj\n]\n \n<\n \ncost\n[\ni\n,\n \nj\n]\n\n                    \ncost\n[\ni\n,\n \nj\n]\n \n=\n \ncost\n[\ni\n,\n \nk\n]\n \n+\n \ncost\n[\nk\n,\n \nj\n]\n\n                    \nbreak\n[\ni\n,\n \nj\n]\n \n=\n \nk\n\n            \ncost\n[\ni\n,\n \nj\n]\n \n=\n \ncost\n[\ni\n,\n \nj\n]\n \n+\n \nL\n[\nj\n]\n \n-\n \nL\n[\ni\n]\n\n    \nprint\n \n\"The minimum cost of breaking the string is\"\n \ncost\n[\n1\n,\n \nm\n]\n\n    \nPRINT\n-\nBREAKS\n(\nL\n,\n \nbreak\n,\n \n1\n,\n \nm\n)\n\n\n\n\n\nAfter sorting $L$, we initialize the base cases, in which $i = j$ or $j = i + 1$.\n\n\nThe nested \nfor\n loops represent the main computation. The outermost \nfor\n loop runs for $len = 3$ to $m$, which means that we need to consider subarrays of $L$ with length at least $3$, since the first and the last element define the substring, and we need at least one more element to specify a break. The increasing values of $len$ also ensures that we solve subproblems with smaller length before we solve subproblems with greater length.\n\n\nThe inner \nfor\n loop on $i$ runs from $1$ to $m - len + 1$. The upper bound of $m - len + 1$ is the largest value that the start index $i$ can take such that $i + len - 1 \\le m$.\n\n\nIn the innermost \nfor\n loop, we try each possible location k as the place to make the first break for subproblem $(i, j)$. The first such place is $L[i + 1]$, and not $L[i]$, since $L[i]$ represents the start of the substring (and thus not a valid place for a break). Similarly, the last valid place is $L[j - 1]$, because $L[j]$ represents the end of the substring.\n\n\nThe \nif\n condition tests whether $k$ is the best place for a break found so far, and it updates the best value in $cost[i, j]$ if so. We use $break[i, j]$\u008d to record that the best place for the first break is $k$. Specifically, if $break[i, j] = k$, then an optimal sequence of breaks for $(i, j)$ makes the first break at $L[k]$.\n\n\nFinally, we add the length of the substring $L[j] - L[i]$ to $cost[i, j]$\u008d because, irrespective of what we choose as the first break, it costs us a price equal to the length of the substring to make a break.\n\n\nThe lowest cost for the original problem ends up in $cost[1, m]$\u008d. By our initialization, $L[1] = 0$ and $L[m] = n$. Thus, $cost[1, m]$ will hold the optimum price of cutting the substring from $L[1] + 1 = 1$ to $L[m] = n$, which is the entire string.\n\n\nThe running time is $\\Theta(m^3)$, and it is dictated by the three nested \nfor\n loops. They fill in the entries above the main diagonal of the two tables, except for entries in which $j = i + 1$. That is, they fill in rows $i = 1, 2, \\ldots, m - 2$, entries $j = i + 2, i + 3, \\ldots, m$. When filling in entry $[i, j]$, we check values of $k$ running from $i + 1$ to $j - 1$, or $j - i - 1$ entries. Thus, the total number of iterations of the innermost \nfor\n loop is\n\n\n\\begin{align}\n\\sum{i = 1}^{m - 2} \\sum{j = i + 2}^m (j - i - 1) \n    & = \\sum_{i = 1}^{m - 2} \\sum{d = 1}^{m - i - 1} d & \\text{($d = j - i - 1$)} \\\\\n    & = \\sum_{i = 1}^{m - 2} \\Theta((m - i)^2)         & \\text{(equation (A.2))} \\\\\n    & = \\sum_{h = 2}^{m - 1} \\Theta(h^2)               & (h = m - i) \\\\\n    & = \\Theta(m^3).                                   & \\text{(equation (A.3))}\n\\end{align}\n\n\nSince each iteration of the innermost \nfor\n loop takes constant time, the total running time is $\\Theta(m^3)$. Note in particular that the running time is independent of the length of the string $n$.\n\n\nPRINT\n-\nBREAKS\n(\nL\n,\n \nbreak\n,\n \ni\n,\n \nj\n)\n\n    \nif\n \nj\n \n-\n \ni\n \n\u2265\n \n2\n\n        \nprint\n \n\"Break at\"\n \nL\n[\nk\n]\n\n        \nPRINT\n-\nBREAKS\n(\nL\n,\n \nbreak\n,\n \ni\n,\n \nk\n)\n\n        \nPRINT\n-\nBREAKS\n(\nL\n,\n \nbreak\n,\n \nk\n,\n \nj\n)\n\n\n\n\n\n$\\text{PRINT-BREAKS}$ uses the information stored in $break$ to print out the actual sequence of breaks.",
            "title": "15-9 Breaking a string"
        },
        {
            "location": "/Chap15/Problems/15-10/",
            "text": "Your knowledge of algorithms helps you obtain an exciting job with the Acme Computer Company, along with a $\\$10,000$ signing bonus. You decide to invest this money with the goal of maximizing your return at the end of 10 years. You decide to use the Amalgamated Investment Company to manage your investments. Amalgamated Investments requires you to observe the following rules. It offers $n$ different investments, numbered $1$ through $n$. In each year $j$, investment $i$ provides a return rate of $r_{ij}$ . In other words, if you invest $d$ dollars in investment $i$ in year $j$, then at the end of year $j$ , you have $dr_{ij}$ dollars. The return rates are guaranteed, that is, you are given all the return rates for the next 10 years for each investment. You make investment decisions only once per year. At the end of each year, you can leave the money made in the previous year in the same investments, or you can shift money to other investments, by either shifting money between existing investments or moving money to a new investement. If you do not move your money between two consecutive years, you pay a fee of $f_1$ dollars, whereas if you switch your money, you pay a fee of $f_2$ dollars, where $f_2 > f_1$.\n\n\na.\n The problem, as stated, allows you to invest your money inmultiple investments in each year. Prove that there exists an optimal investment strategy that, in each year, puts all the money into a single investment. (Recall that an optimal investment strategy maximizes the amount of money after 10 years and is not concerned with any other objectives, such as minimizing risk.)\n\n\nb.\n Prove that the problem of planning your optimal investment strategy exhibits optimal substructure.\n\n\nc.\n Design an algorithm that plans your optimal investment strategy. What is the running time of your algorithm?\n\n\nd.\n Suppose that Amalgamated Investments imposed the additional restriction that, at any point, you can have no more than $\\$15,000$ in any one investment. Show that the problem of maximizing your income at the end of 10 years no longer exhibits optimal substructure.\n\n\n\n\na.\n Without loss of generality, suppose that there exists an optimal solution $S$ which involves investing $d_1$ dollars into investment $k$ and $d_2$ dollars into investement $m$ in year $1$. Further, suppose in this optimal solution, you don't move your money for the first $j$ years. If $r_{k1} + r_{k2} + \\ldots + r_{kj} > r_{m1} +r_{m2} + \\ldots + r_{mj}$ then we can perform the usual cut-and-paste maneuver and instead invest $d_1 + d_2$ dollars into investment $k$ for $j$ years. Keeping all other investments the same, this results in a strategy which is at least as profitable as $S$, but has reduced the number of different investments in a given span of years by $1$. Continuing in this way, we can reduce the optimal strategy to consist of only a single investment each year.\n\n\nb.\n If a particular investment strategy is the year-one-plan for a optimal investment strategy, then we must solve two kinds of optimal suproblem: either we maintain the strategy for an additional year, not incurring the moneymoving fee, or we move the money, which amounts to solving the problem where we ignore all information from year $1$. Thus, the problem exhibits optimal substructure.\n\n\nc.\n The algorithm works as follows: We build tables $I$ and $R$ of size $10$ such that $I[i]$ tells which investment should be made (with all money) in year $i$, and $R[i]$ gives the total return on the investment strategy in years $i$ through $10$.\n\n\nINVEST\n(\nd\n,\n \nn\n)\n\n    \ninitialize\n \ntables\n \nI\n \nand\n \nR\n \nof\n \nsize\n \n11\n,\n \nall\n \nfilled\n \nwith\n \n0\ns\n\n    \nfor\n \nk\n \n=\n \n10\n \ndownto\n \n1\n\n        \nq\n \n=\n \n1\n\n        \nfor\n \ni\n \n=\n \n1\n \nto\n \nn\n\n            \nif\n \nr\n[\ni\n,\n \nk\n]\n \n>\n \nr\n[\nq\n,\n \nk\n]\n   \n// i now holds the investment which looks best for a given year\n\n                \nq\n \n=\n \ni\n\n        \nif\n \nR\n[\nk\n \n+\n \n1\n]\n \n+\n \ndrI\n[\nk\n \n+\n \n1\n]\nk\n \n-\n \nf\n[\n1\n]\n \n>\n \nR\n[\nk\n \n+\n \n1\n]\n \n+\n  \ndr\n[\nq\n,\n \nk\n]\n \n-\n \nf\n[\n2\n]\n  \n// If revenue is greater when money is not moved\n\n            \nR\n[\nk\n]\n \n=\n \nR\n[\nk\n \n+\n \n1\n]\n \n+\n \ndrI\n[\nk\n \n+\n \n1\n]\nk\n \n-\n \nf\n[\n1\n]\n\n            \nI\n[\nk\n]\n \n=\n \nI\n[\nk\n \n+\n \n1\n]\n\n        \nelse\n\n            \nR\n[\nk\n]\n \n=\n \nR\n[\nk\n \n+\n \n1\n]\n \n+\n \ndr\n[\nq\n,\n \nk\n]\n \n-\n \nf\n[\n2\n]\n\n            \nI\n[\nk\n]\n \n=\n \nq\n\n    \nreturn\n \nI\n \nas\n \nan\n \noptimal\n \nstategy\n \nwith\n \nreturn\n \nR\n[\n1\n].\n\n\n\n\n\nd.\n The previous investment strategy was independent of the amount of money you started with. When there is a cap on the amount you can invest, the amount you have to invest in the next year becomes relevant. If we know the year-one-strategy of an optimal investment, and we know that we need to move money after the first year, we're left with the problem of investing a different initial amount of money, so we'd have to solve a subproblem for every possible initial amount of money. Since there is no bound on the returns, there's also no bound on the number of subproblems we need to solve.",
            "title": "15-10 Planning an investment strategy"
        },
        {
            "location": "/Chap15/Problems/15-11/",
            "text": "The Rinky Dink Company makes machines that resurface ice rinks. The demand for such products varies from month to month, and so the company needs to develop a strategy to plan its manufacturing given the fluctuating, but predictable, demand. The company wishes to design a plan for the next $n$ months. For each month $i$, the company knows the demand $d_i$, that is, the number of machines that it will sell. Let $D = \\sum_{i = 1}^n d_i$ be the total demand over the next $n$ months. The company keeps a full-time staff who provide labor to manufacture up to $m$ machines per month. If the company needs to make more than $m$ machines in a given month, it can hire additional, part-time labor, at a cost that works out to $c$ dollars per machine. Furthermore, if, at the end of a month, the company is holding any unsold machines, it must pay inventory costs. The cost for holding $j$ machines is given as a function $h(j)$ for $j = 1, 2, \\ldots, D$, where $h(j) \\ge 0$ for $1 \\le j \\le D$ and $h(j) \\le h(j + 1)$ for $1 \\le j \\le D - 1$. \n\n\nGive an algorithm that calculates a plan for the company that minimizes its costs while fulfilling all the demand. The running time should be polyomial in $n$ and $D$.\n\n\n\n\nWe state the subproblem $(k, s)$ as ''What is the cheapest way to satisfy all the demands of months $k, \\ldots, n$ when we start with a surplus of s before the $k$th month?'' A plan for the subproblem $(k, s)$ would specify the number of machines to manufacture for each month $k, \\ldots, n$ such that demands are satisfied.\n\n\nIn some optimal plan $P$ to $(k, s)$, let $f^*$  machines be maufactured in month $k$. Thus, the surplus $s'$ in month $k + 1$ is $s + f^* - d_k$. Let $P'$ be the part of the plan $P$ for months $k + 1, \\ldots, n$. We claim that $P'$ is an optimal plan for the subproblem $(k + 1, s')$. Why? Suppose $P'$ were not an optimal plan and let $P''$ be an optimal plan for $(k + 1, s')$. If we modify plan $P$ by cutting out $P'$ and pasting in $P''$ (i.e., by using plan $P''$ for months $k + 1, \\ldots, n$), we obtain another plan for $(k, s)$ which is cheaper than plan $P$ . Thus, we obtain a contradiction to the assumption that plan $P$ was optimal.\n\n\nLet $cost[k, s]$ denote the cost of an optimal plan for $(k, s)$, and let $f$ denote the number of machines that can be manufactured in month $k$. The bounds for $f$ are as follows:\n\n\n\n\n\n\nAt least the number of machines so that (along with surplus $s$) there are enough machines to satisfy the current month's demand. Let us denote this lower bound by $L(k, s)$. We have\n\n\n$$\nL(k, s) = \\max(d_k - s, 0).\n$$\n\n\n\n\n\n\nAt most the number of machines such that there are enough machines to satisfy the demands of all the following months. Let us denote this upper bound by $U(k, s)$. We have\n\n\n$$\nU(k, s) = \\Bigg(\\sum_{i = k}^n d_i \\Bigg) - s.\n$$\n\n\n\n\n\n\nFor the last month, we need only manufacture the minimum required number of machines, given by $L(n, s)$. For other months, we examine the costs of manufacturing all feasible numbers of machines and see which choice gives us the cheapest plan. We can now write the recurrence for cost as the following:\n\n\n$$\ncost[k, s] =\n\\begin{cases}\nc \\cdot \\max(L(n, s) - m, 0) + h(s + L(n, s) - d_n) & \\text{if $k = n$}, \\\\\n\\min\\limits_{L(k, s) \\le f \\le U(k, s)} \\Big\\{cost[k + 1, s + f - d_k] + c \\cdot \\max(f - m, 0) + h(s + f - d_k)\\Big\\} & \\text{if $0 < k < n$}.\n\\end{cases}\n$$\n\n\nThe recurrence suggests how to build an optimal plan in a bottom-up fashion. We now present the algorithm for constructing an optimal plan.\n\n\nINVERTORY\n-\nPLANNING\n(\nn\n,\n \nm\n,\n \nc\n,\n \nD\n,\n \nd\n,\n \nh\n)\n\n    \nlet\n \ncost\n[\n1.\n.\nn\n,\n \n0.\n.\nD\n]\n \nand\n \nmake\n[\n1.\n.\nn\n,\n \n0.\n.\nD\n]\n \nbe\n \nnew\n \ntables\n\n    \n// Compute cost[n, 0..D] and make[n, 0..D]\n\n    \nfor\n \ns\n \n=\n \n0\n \nto\n \nD\n\n        \nf\n \n=\n \nmax\n(\ndn\n \n-\n \ns\n,\n \n0\n)\n\n        \ncost\n[\nn\n,\n \ns\n]\n \n=\n \nc\n \n*\n \nmax\n(\nf\n \n-\n \nm\n,\n \n0\n)\n \n+\n \nh\n(\ns\n \n+\n \nf\n \n-\n \ndn\n)\n\n        \nmake\n[\nn\n,\n \ns\n]\n \n=\n \nf\n\n    \n// Compute cost[1..n - 1, 0..D] and make[1..n - 1, 0..D].\n\n    \nU\n \n=\n \ndn\n\n    \nfor\n \nk\n \n=\n \nn\n \n-\n \n1\n \ndownto\n \n1\n\n        \nU\n \n=\n \nU\n \n+\n \ndk\n\n        \nfor\n \ns\n \n=\n \n0\n \nto\n \nD\n\n            \ncost\n[\nk\n,\n \ns\n]\n \n=\n \n\u221e\n\n            \nfor\n \nf\n \n=\n \nmax\n(\ndk\n \n-\n \ns\n,\n \n0\n)\n \nto\n \nU\n \n-\n \ns\n\n                \nval\n \n=\n \ncost\n[\nk\n \n+\n \n1\n,\n \ns\n \n+\n \nf\n \n-\n \ndk\n]\n \n+\n \nc\n \n*\n \nmax\n(\nf\n \n-\n \nm\n,\n \n0\n)\n \n+\n \nh\n(\ns\n \n+\n \nf\n \n-\n \ndk\n)\n\n                \nif\n \nval\n \n<\n \ncost\n[\nk\n,\n \ns\n]\n\n                    \ncost\n[\nk\n,\n \ns\n]\n \n=\n \nval\n\n                    \nmake\n[\nk\n,\n \ns\n]\n \n=\n \nf\n\n    \nprint\n \ncost\n[\n1\n,\n \n0\n]\n\n    \nPRINT\n-\nPLAN\n(\nmake\n,\n \nn\n,\n \nd\n)\n\n\n\n\n\nPRINT\n-\nPLAN\n(\nmake\n,\n \nn\n,\n \nd\n)\n\n    \ns\n \n=\n \n0\n\n    \nfor\n \nk\n \n=\n \n1\n \nto\n \nn\n\n        \nprint\n \n\"For month \"\n \nk\n \n\"manufacture \"\n \nmake\n[\nk\n,\n \ns\n]\n \n\"machines\"\n\n        \ns\n \n=\n \ns\n \n+\n \nmake\n[\nk\n,\n \ns\n]\n \n-\n \ndk\n\n\n\n\n\nIn $\\text{INVENTORY-PLANNING}$, we build the solution month by month, starting from month $n$, moving backward toward month $1$. First, we solve the subproblem for the last month, for all surpluses. Then, for each month and for each surplus entering that month, we calculate the cheapest way to satisfy demand for that month based on the solved subproblems of the next month.\n\n\n\n\n$f$ is the number of machines that we try to manufacture in month $k$.\n\n\n$cost[k, s]$ holds the cheapest way to satisfy demands of months $k, \\ldots, n$, with a net surplus of s left over at the beginning of month $k$.\n\n\n$make[k, s]$ holds the number of machines to manufacture in month $k$ and the surplus $s$ of an optimal plan. We will use this table to reconstruct the optimal plan.\n\n\n\n\nWe first initialize the base cases, which are the cases for month $n$ starting with surplus $s$, for $s = 0, \\ldots, D$. If $d_n > s$, it suffices to manufacture $d_n - s$ machines, since we need not keep any surplus after month $n$. If $d_n \\le s$, we need not manufacture any machines at all.\n\n\nWe then calculate the total cost for month $n$ as the sum of hiring extra labor $c \\cdot \\max(f - m, 0)$ and the inventory costs for leftover surplus $h(s + f - d_n)$, which can be nonzero if we had started out with a large surplus.\n\n\nThe outer \nfor\n loop of the next block of code runs down from month $n - 1$ to $1$, thus ensuring that when we consider month $k$, we have already solved the subproblems of month $k + 1$.\n\n\nThe next inner \nfor\n loop iterates through all possible values of $f$ as described.\n\n\nFor every choice of $f$ for a given month $k$, the total cost of $(k, s)$ is given by the cost of extra labor (if any) plus the cost of inventory (if there is a surplus) plus the cost of the subproblem $(k + 1, s + f - d_k)$. This value is checked and updated. Finally, the required answer is the answer to the subproblem $(1, 0)$, which appears in $cost[1, 0]$. That is, it is the cheapest way to satisfy all the demands of months $1, \\ldots, n$ when we start with a surplus of $0$.\n\n\nThe running time of $\\text{INVENTORY-PLANNING}$ is clearly $O(nD^2)$. The space requirement is $O(nD)$. We can improve upon the space requirement by noting that we need only store the solution to subproblems of the next month. With this observation, we can construct an algorithm that uses $O(n + D)$ space.",
            "title": "15-11 Inventory planning"
        },
        {
            "location": "/Chap15/Problems/15-12/",
            "text": "Suppose that you are the general manager for a major-league baseball team. During the off-season, you need to sign some free-agent players for your team. The team owner has given you a budget of $\\$X$ to spend on free agents. You are allowed to spend less than $\\$X$ altogether, but the owner will fire you if you spend any more than $\\$X$.\n\n\nYou are considering $N$ different positions, and for each position, $P$ free-agent players who play that position are available. Because you do not want to overload your roster with too many players at any position, for each position you may sign at most one free agent who plays that position. (If you do not sign any players at a particular position, then you plan to stick with the players you already have at that position.)\n\n\nTo determine how valuable a player is going to be, you decide to use a sabermetric statistic known as ''$\\text{VORP}$'', or ''value over replacement player''. A player with a higher $\\text{VORP}$ is more valuable than a player with a lower $\\text{VORP}$. A player with a higher $\\text{VORP}$ is not necessarily more expensive to sign than a player with a lower $\\text{VORP}$, because factors other than a player's value determine how much it costs to sign him.\n\n\nFor each available free-agent player, you have three pieces of information:\n\n\n\n\nthe player's position,\n\n\nthe amount of money it will cost to sign the player, and\n\n\nthe player's $\\text{VORP}$.\n\n\n\n\nDevise an algorithm that maximizes the total $\\text{VORP}$ of the players you sign while spending no more than $\\$X$ altogether. You may assume that each player signs for a multiple of $100,000$. Your algorithm should output the total $\\text{VORP}$ of the players you sign, the total amount of money you spend, and a list of which players you sign. Analyze the running time and space requirement of your algorithm.\n\n\n\n\nLet $p.cost$ denote the cost and $p.vorp$ denote the $\\text{VORP}$ of player $p$. We shall assume that all dollar amounts are expressed in units of $\\$100,000$.\n\n\nSince the order of choosing players for the positions does not matter, we may assume that we make our decisions starting from position $1$, moving toward position $N$. For each position, we decide to either sign one player or sign no players. Suppose we decide to sign player $p$, who plays position $1$. Then, we are left with an amount of $X - p.cost$ dollars to sign players at positions $2, \\ldots, N$. This observation guides us in how to frame the subproblems.\n\n\nWe define the cost and $\\text{VORP}$ of a \nset\n of players as the sum of costs and the sum of $\\text{VORP}$s of all players in that set. Let ($(i, x)$ denote the following subproblem: ''Suppose we consider only positions $i, i + 1, \\ldots, N$ and we can spend at most $x$ dollars. What set of players (with at most one player for each position under consideration) has the maximum $\\text{VORP}$?'' A \nvalid\n set of players for ($(i, x)$ is one in which each player in the set plays one of the positions $i, i + 1, \\ldots, n$, each position has at most one player, and the cost of the players in the set is at most $x$ dollars. An \noptimal\n set of players for ($(i, x)$ is a valid set with the maximum $\\text{VORP}$. We now show that the problem exhibits optimal substructure.\n\n\nTheorem (Optimal substructure of the VORP maximization problem)\n\n\nLet $L = \\{p_1, p_2, \\ldots, p_k\\}$ be a set of players, possibly empty, with maximum $\\text{VORP}$ for the subproblem $(i, x)$.\n\n\n\n\nIf $i = N$, then $L$ has at most one player. If all players in position $N$ have cost more than $x$, then $L$ has no players. Otherwise, $L = \\{p_1\\}$, where $p_1$ has the maximum $\\text{VORP}$ among players for position $N$ with cost at most $x$.\n\n\nIf $i < N$ and $L$ includes player $p$ for position i, then $L' = L - \\{p\\}$ is an optimal set for the subproblem $(i + 1, x - p.cost)$.\n\n\nIf $i < N$ and $L$ does not include a player for position $i$, then $L$ is an optimal set for the subproblem $(i + 1, x)$.\n\n\n\n\nProof\n\n\nProperty 1. follows trivially from the problem statement.\n\n2. Suppose that $L'$ is not an optimal set for the subproblem $(i + 1, x - p.cost)$. Then, there exists another valid set $L''$ for $(i + 1, x - p.cost)$ that has $\\text{VORP}$ more than $L'$. Let $L^{\\prime\\prime\\prime} = L'' \\cup \\{p\\}$. The cost of $L^{\\prime\\prime\\prime}$ is at most $x$, since $L''$ has a cost at most $x - p.cost$. Moreover, $L^{\\prime\\prime\\prime}$ has at most one player for each position $i, i + 1, \\ldots, N$. Thus, $L^{\\prime\\prime\\prime}$ is a valid set for $(i, x)$. But $L^{\\prime\\prime\\prime}$ has $\\text{VORP}$ more than $L$, thus contradicting the assumption that $L$ had the maximum $\\text{VORP}$ for $(i, x)$.\n3. Clearly, any valid set for $(i + 1, x)$ is also a valid set for $(i, x)$. If $L$ were not an optimal set for $(i + 1, x)$, then there exists another valid set $L'$ for $(i + 1, x)$ with $\\text{VORP}$ more than $L$. The set $L'$ would also be a valid set for $(i, x)$, which contradicts the assumption that $L$ had the maximum $\\text{VORP}$ for $(i, x)$.\n\n\nThe theorem suggests that when $i < N$, we examine two subproblems and choose the better of the two. Let $v[i, x]$\u008d denote the maximum $\\text{VORP}$ for $(i, x)$. Let $S(i, x)$ be the set of players who play position $i$ and cost at most $x$. In the following recurrence for $v[i, x]$ we assume that the max function returns $-\\infty$ when invoked over an empty set:\n\n\n$$\nv[i, x] =\n\\begin{cases}\n\\max\\limits_{p \\in S(N, x)} {p.vorp} & \\text{if $i = N$}, \\\\\n\\max \\Big\\{v[i + 1, x], \\max\\limits_{p \\in S(i, x)}{p.vorp + v[i + 1, x - p.cost]} \\Big\\} & \\text{if $i < N$}.\n\\end{cases}\n$$\n\n\nThis recurrence lends itself to implementation in a straightforward way. Let $p_{ij}$ denote the $j$th player who plays position $i$.\n\n\nFREE\n-\nAGENT\n-\nVROP\n(\np\n,\n \nN\n,\n \nP\n,\n \nX\n)\n\n    \nlet\n \nv\n[\n1.\n.\nN\n][\n0.\n.\nX\n]\n \nand\n \nwho\n[\n1.\n.\nN\n][\n0.\n.\nX\n]\n \nbe\n \nnew\n \ntables\n\n    \nfor\n \nx\n \n=\n \n0\n \nto\n \nX\n\n        \nv\n[\nN\n,\n \nx\n]\n \n=\n \n-\n\u221e\n\n        \nwho\n[\nN\n,\n \nx\n]\n \n=\n \n0\n\n        \nfor\n \nk\n \n=\n \n1\n \nto\n \nP\n\n            \nif\n \np_\n{\nNk\n}.\ncost\n \n\u2264\n \nx\n \nand\n \np_\n{\nNk\n}.\nvrop\n \n>\n \nv\n[\nN\n,\n \nx\n]\n\n                \nv\n[\nN\n,\n \nx\n]\n \n=\n \npNk\n.\nvrop\n\n                \nwho\n[\nN\n,\n \nx\n]\n \n=\n \nk\n\n    \nfor\n \ni\n \n=\n \nN\n \n-\n \n1\n \ndownto\n \n1\n\n        \nfor\n \nx\n \n=\n \n0\n \nto\n \nX\n\n            \nv\n[\ni\n,\n \nx\n]\n \n=\n \nv\n[\ni\n \n+\n \n1\n,\n \nx\n]\n\n            \nwho\n[\ni\n,\n \nx\n]\n \n=\n \n0\n\n            \nfor\n \nk\n \n=\n \n1\n \nto\n \nP\n\n                \nif\n \np_\n{\nik\n}.\ncost\n \n\u2264\n \nx\n \nand\n \nv\n[\ni\n \n+\n \n1\n,\n \nx\n \n-\n \np_\n{\nik\n}.\ncost\n]\n \n+\n \np_\n{\nik\n}.\nvrop\n \n>\n \nv\n[\ni\n,\n \nx\n]\n\n                \nv\n[\ni\n,\n \nx\n]\n \n=\n \nv\n[\ni\n \n+\n \n1\n,\n \nx\n \n-\n \np_\n{\nik\n}.\ncost\n]\n \n+\n \np_\n{\nik\n}.\nvrop\n\n                \nwho\n[\ni\n,\n \nx\n]\n \n=\n \nk\n\n    \nprint\n \n\"The maximum value of VORP is \"\n \nv\n[\n1\n,\n \nX\n]\n\n    \namt\n \n=\n \nX\n\n    \nfor\n \ni\n \n=\n \n1\n \nto\n \nN\n\n        \nk\n \n=\n \nwho\n[\ni\n,\n \namt\n]\n\n        \nif\n \nk\n \n!=\n \n0\n\n            \nprint\n \n\"sign player \"\n \np_\n{\nik\n}\n\n            \namt\n \n=\n \namt\n \n-\n \np_\n{\nik\n}.\ncost\n\n    \nprint\n \n\"The total money spent is \"\n \nX\n \n-\n \namt\n\n\n\n\n\nThe input to $\\text{FREE-AGENT-VORP}$ is the list of players $p$ and $N$, $P$, and $X$, as given in the problem. The table $v[i, x]$\u008d holds the maximum $\\text{VORP}$ for the subproblem $(i, x)$. The table $who[i, x]$\u008d holds information necessary to reconstruct the actual solution. Specifically, $who[i, x]$\u008d holds the index of player to sign for position $i$, or $0$ if no player should be signed for position $i$. The first set of nested \nfor\n loops initializes the base cases, in which $i = N$. For every amount $x$, the inner loop simply picks the player with the highest $\\text{VORP}$ who plays position $N$ and whose cost is at most $x$.\n\n\nThe next set of three nested \nfor\n loops represents the main computation. The outermost \nfor\n loop runs down from position $N - 1$ to $1$. This order ensures that smaller subproblems are solved before larger ones. We initialize $v[i, x]$\u008d as $v[i + 1, x]$. This way, we already take care of the case in which we decide not to sign any player who plays position $i$. The innermost \nfor\n loop tries to sign each player (if we have enough money) in turn, and it keeps track of the maximum $\\text{VORP}$ possible.\n\n\nThe maximum $\\text{VORP}$ for the entire problem ends up in $v[1, X]$\u008d. The final \nfor\n loop uses the information in who table to print out which players to sign. The running time of $\\text{FREE-AGENT-VORP}$ is clearly $\\Theta(NPX)$, and it uses $\\Theta(NX)$ space.",
            "title": "15-12 Signing free-agent baseball players"
        },
        {
            "location": "/Chap16/16.1/",
            "text": "16.1-1\n\n\n\n\nGive a dynamic-programming algorithm for the activity-selection problem, based on recurrence $\\text{(16.2)}$. Have your algorithm compute the sizes $c[i, j]$ as defined above and also produce the maximum-size subset of mutually compatible activities.\n\n\nAssume that the inputs have been sorted as in equation $\\text{(16.1)}$. Compare the running time of your solution to the running time of $\\text{GREEDY-ACTIVITY-SELECTOR}$.\n\n\n\n\nThe tricky part is determining which activities are in the set $S_{ij}$. If activity $k$ is in $S_{ij}$, then we must have $i < k < j$, which means that $j - 1 \\ge 2$, but we must also have that $f_i \\le s_k$ and $f_k \\le s_j$. If we start $k$ at $j - 1$ and decrement $k$, we can stop once $k$ reaches $i$, but we can also stop once we find that $f_k \\le f_i$, since then activities $i + 1$ through $k$ cannot be compatible with activity $i$.\n\n\nWe create two fictitious activities, $a_0$ with $f_0 = 0$ and $a_{n + 1}$ with $s_{n + 1} = \\infty$. We are interested in a maximum-size set $A_{0, n + 1}$ of mutually compatible activities in $S_{0, n + 1}$. We'll use tables $c[0..n + 1, 0..n + 1]$\u008d, as in recurrence $\\text{(16.2)}$ (so that $c[i, j] = |A_{ij}|$), and $act[0..n + 1, 0..n + 1]$\u008d, where $act[i, j]$ \u008dis the activity $k$ that we choose to put into $A_{ij}$.\n\n\nWe fill the tables in according to increasing difference $j - 1$, which we denote by $l$ in the pseudocode. Since $S_{ij} = \\emptyset$; if $j - i < 2$, we initialize $c[i, i] = 0$ for all $i$ and $c[i, i + 1] = 0$ for $0 \\le i \\le n$. As in $\\text{RECURSIVE-ACTIVITY-SELECTOR}$ and $\\text{GREEDY-ACTIVITY-SELECTOR}$, the start and finish times are given as arrays $s$ and $f$, where we assume that the arrays already include the two fictitious activities and that the activities are sorted by monotonically increasing finish time.\n\n\nDYNAMIC\n-\nACTIVITY\n-\nSELECTOR\n(\ns\n,\n \nf\n,\n \nn\n)\n\n    \nlet\n \nc\n[\n0.\n.\nn\n \n+\n \n1\n,\n \n0.\n.\nn\n \n+\n \n1\n]\n \nand\n \nact\n[\n0.\n.\nn\n \n+\n \n1\n,\n \n0.\n.\nn\n \n+\n \n1\n]\n \nbe\n \nnew\n \ntables\n\n    \nfor\n \ni\n \n=\n \n0\n \nto\n \nn\n\n        \nc\n[\ni\n,\n \ni\n]\n \n=\n \n0\n\n        \nc\n[\ni\n,\n \ni\n \n+\n \n1\n]\n \n=\n \n0\n\n    \nc\n[\nn\n \n+\n \n1\n,\n \nn\n \n+\n \n1\n]\n \n=\n \n0\n\n    \nfor\n \nl\n \n=\n \n2\n \nto\n \nn\n \n+\n \n1\n\n        \nfor\n \ni\n \n=\n \n0\n \nto\n \nn\n \n-\n \nl\n \n+\n \n1\n\n            \nj\n \n=\n \ni\n \n+\n \nl\n\n            \nc\n[\ni\n,\n \nj\n]\n \n=\n \n0\n\n            \nk\n \n=\n \nj\n \n-\n \n1\n\n            \nwhile\n \nf\n[\ni\n]\n \n<\n \nf\n[\nk\n]\n\n                \nif\n \nf\n[\ni\n]\n \n\u2264\n \ns\n[\nk\n]\n \nand\n \nf\n[\nk\n]\n \n\u2264\n \ns\n[\nj\n]\n \nand\n \nc\n[\ni\n,\n \nk\n]\n \n+\n \nc\n[\nk\n,\n \nj\n]\n \n+\n \n1\n \n>\n \nc\n[\ni\n,\n \nj\n]\n\n                    \nc\n[\ni\n,\n \nj\n]\n \n=\n \nc\n[\ni\n,\n \nk\n]\n \n+\n \nc\n[\nk\n,\n \nj\n]\n \n+\n \n1\n\n                    \nact\n[\ni\n,\n \nj\n]\n \n=\n \nk\n\n                \nk\n \n=\n \nk\n \n-\n \n1\n\n    \nprint\n \n\"A maximum size set of mutually compatible activities has size\"\n \nc\n[\n0\n,\n \nn\n \n+\n \n1\n]\n\n    \nprint\n \n\"The set contains\"\n\n    \nPRINT\n-\nACTIVITIES\n(\nc\n,\n \nact\n,\n \n0\n,\n \nn\n \n+\n \n1\n)\n\n\n\n\n\nPRINT\n-\nACTIVITIES\n(\nc\n,\n \nact\n,\n \ni\n,\n \nj\n)\n\n    \nif\n \nc\n[\ni\n,\n \nj\n]\n \n>\n \n0\n\n        \nk\n \n=\n \nact\n[\ni\n,\n \nj\n]\n\n        \nprint\n \nk\n\n        \nPRINT\n-\nACTIVITIES\n(\nc\n,\n \nact\n,\n \ni\n,\n \nk\n)\n\n        \nPRINT\n-\nACTIVITIES\n(\nc\n,\n \nact\n,\n \nk\n,\n \nj\n)\n\n\n\n\n\nThe $\\text{PRINT-ACTIVITIES}$ procedure recursively prints the set of activities placed into the optimal solution $A_{ij}$. It first prints the activity $k$ that achieved the maximum value of $c[i, j]$\u008d, and then it recurses to print the activities in $A_{ik}$ and $A_{kj}$. The recursion bottoms out when $c[i, j] = 0$, so that $A_{ij} = \\emptyset$.\n\n\nWhereas $\\text{GREEDY-ACTIVITY-SELECTOR}$ runs in $\\Theta(n)$ time, the $\\text{DYNAMIC-ACTIVITY-SELECTOR}$ procedure runs in $O(n^3)$ time.\n\n\n16.1-2\n\n\n\n\nSuppose that instead of always selecting the first activity to finish, we instead select the last activity to start that is compatible with all previously selected activities. Describe how this approach is a greedy algorithm, and prove that it yields an optimal solution.\n\n\n\n\nThe proposed approach\u2014selecting the last activity to start that is compatible with all previously selected activities\u2014is really the greedy algorithm but starting from the end rather than the beginning.\n\n\nAnother way to look at it is as follows. We are given a set $S = \\{a_1, a_2, \\ldots, a_n\\}$ of activities, where $a_i = [s_i, f_i)$, and we propose to find an optimal solution by selecting the last activity to start that is compatible with all previously selected activities. Instead, let us create a set $S = \\{a_1', a_2', \\ldots, a_n'\\}$, where $a_i' = [f_i, s_i)$. That is, $a_i'$ is $a_i$ in reverse. Clearly, a subset of $\\{a_{i_1}, a_{i_2}, \\ldots, a_{i_k}\\} \\subseteq S$ is mutually compatible if and only if the corresponding subset $\\{a_{i_1}', a_{i_2}', \\ldots, a_{i_k}'\\} \\subseteq S'$  is also mutually compatible. Thus, an optimal solution for $S$ maps directly to an optimal solution for $S'$ and vice versa.\n\n\nThe proposed approach of selecting the last activity to start that is compatible with all previously selected activities, when run on $S$, gives the same answer as the greedy algorithm from the text\u2014selecting the first activity to finish that is compatible with all previously selected activities\u2014when run on $S'$. The solution that the proposed approach finds for $S$ corresponds to the solution that the text's greedy algorithm finds for $S'$, and so it is optimal.\n\n\n16.1-3\n\n\n\n\nNot just any greedy approach to the activity-selection problem produces a maximum-size set of mutually compatible activities. Give an example to show that the approach of selecting the activity of least duration from among those that are compatible with previously selected activities does not work. Do the same for the approaches of always selecting the compatible activity that overlaps the fewest other remaining activities and always selecting the compatible remaining activity with the earliest start time.\n\n\n\n\n\n\n\n\nFor the approach of selecting the activity of least duration from those that are compatible with previously selected activities:\n\n\n\\begin{array}{l|ccc}\n  i             & 1 & 2 & 3 \\\\\n\\hline\ns_i             & 0 & 2 & 3 \\\\\nf_i             & 3 & 4 & 6 \\\\\n\\text{duration} & 3 & 2 & 3\n\\end{array}\n\n\nThis approach selects just $\\{a_2\\}$, but the optimal solution selects $\\{a_1, a_3\\}$.\n\n\n\n\n\n\nFor the approach of always selecting the compatible activity that overlaps the fewest other remaining activities:\n\n\n\\begin{array}{l|ccc}\n  i             & 1 & 2 & 3 & 4 & 5 & 6 & 7 & 8 & 9 & 10 & 11 \\\\\n\\hline\ns_i             & 0 & 1 & 1 & 1 & 2 & 3 & 4 & 5 & 5 &  5 &  6 \\\\\nf_i             & 2 & 3 & 3 & 3 & 4 & 5 & 6 & 7 & 7 &  7 &  8 \\\\\n\\text{# of overlapping activities} & 3 & 4 & 4 & 4 & 4 & 2 & 4 & 4 & 4 &  4 &  3\n\\end{array}\n\n\nThis approach frst selects $a_6$, and after that choice it can select only two other activities (one of $a_1$, $a_2$, $a_3$, $a_4$ and one of $a_8$, $a_9$, $a_{10}$, $a_{11}$). An optimal solution is $\\{a_1, a_5, a_7, a_{11}\\}$.\n\n\n\n\n\n\nFor the approach of always selecting the compatible remaining activity with the earliest start time, just add one more activity with the interval $[0, 14)$ to the example in Section 16.1. It will be the first activity selected, and no other activities are compatible with it.\n\n\n\n\n\n\n16.1-4\n\n\n\n\nSuppose that we have a set of activities to schedule among a large number of lecture halls, where any activity can take place in any lecture hall. We wish to schedule all the activities using as few lecture halls as possible. Give an efficient greedy algorithm to determine which activity should use which lecture hall.\n\n\n(This problem is also known as the \ninterval-graph coloring problem\n. We can create an interval graph whose vertices are the given activities and whose edges connect incompatible activities. The smallest number of colors required to color every vertex so that no two adjacent vertices have the same color corresponds to finding the fewest lecture halls needed to schedule all of the given activities.)\n\n\n\n\nLet $S$ be the set of $n$ activities.\n\n\nThe ''obvious'' solution of using $\\text{GREEDY-ACTIVITY-SELECTOR}$ to find a maximum-size set $S_1$ of compatible activities from $S$ for the first lecture hall, then using it again to find a maximum-size set $S_2$ of compatible activities from $S - S_1$ for the second hall, (and so on until all the activities are assigned), requires $\\Theta(n^2)$ time in the worst case.\n\n\nThere is a better algorithm, however, whose asymptotic time is just the time needed to sort the activities by time\u2014$O(n\\lg n)$ time for arbitrary times, or possibly as fast as $O(n)$ if the times are small integers.\n\n\nThe general idea is to go through the activities in order of start time, assigning each to any hall that is available at that time. To do this, move through the set of events consisting of activities starting and activities finishing, in order of event time. Maintain two lists of lecture halls: Halls that are busy at the current event time $t$ (because they have been assigned an activity $i$ that started at $s_i \\le t$ but won't finish until $f_i > t$) and halls that are free at time $t$. (As in the activity- selection problem in Section 16.1, we are assuming that activity time intervals are half open\u2014i.e., that if $s_i \\ge f_j$, then activities $i$ and $j$ are compatible.) When $t$ is the start time of some activity, assign that activity to a free hall and move the hall from the free list to the busy list. When $t$ is the finish time of some activity, move the activity's hall from the busy list to the free list. (The activity is certainly in some hall, because the event times are processed in order and the activity must have started before its finish time $t$, hence must have been assigned to a hall.)\n\n\nTo avoid using more halls than necessary, always pick a hall that has already had an activity assigned to it, if possible, before picking a never-used hall. (This can be done by always working at the front of the free-halls list\u2014putting freed halls onto the front of the list and taking halls from the front of the list\u2014so that a new hall doesn't come to the front and get chosen if there are previously-used halls.)\n\n\nThis guarantees that the algorithm uses as few lecture halls as possible: The algorithm will terminate with a schedule requiring $m \\le n$ lecture halls. Let activity $i$ be the first activity scheduled in lecture hall $m$. The reason that $i$ was put in the $m$th lecture hall is that the first $m - 1$ lecture halls were busy at time $s_i$ . So at this time there are $m$ activities occurring simultaneously. Therefore any schedule must use at least $m$ lecture halls, so the schedule returned by the algorithm is optimal.\n\n\nRun time:\n\n\n\n\nSort the $2n$ activity-starts/activity-ends events. (In the sorted order, an activity-ending event should precede an activity-starting event that is at the same time.) $O(n\\lg n)$ time for arbitrary times, possibly $O(n)$ if the times are restricted (e.g., to small integers).\n\n\nProcess the events in $O(n)$ time: Scan the $2n$ events, doing $O(1)$ work for each (moving a hall from one list to the other and possibly associating an activity with it).\n\n\n\n\nTotal: $O(n + \\text{time to sort)}$\n\n[The idea of this algorithm is related to the rectangle-overlap algorithm in Exercise 14.3-7.]\n\n\n16.1-5\n\n\n\n\nConsider a modification to the activity-selection problem in which each activity $a_i$ has, in addition to a start and finish time, a value $v_i$. The objective is no longer to maximize the number of activities scheduled, but instead to maximize the total value of the activities scheduled. That is, we wish to choose a set $A$ of compatible activities such that $\\sum_{a_k \\in A} v_k$ is maximized. Give a polynomial-time algorithm for this problem.\n\n\n\n\nWe can no longer use the greedy algorithm to solve this problem. However, as we show, the problem still has an optimal substructure which allows us to formulate a dynamic programming solution. The analysis here follows closely the analysis of Section 16.1 in the book. We define the value of a set of compatible events as the sum of values of events in that set. Let $S_{ij}$ be defined as in Section 16.1. An \noptimal solution\n to $S_{ij}$ is a subset of mutually compatible events of $S_{ij}$ that has maximum value. Let $A_{ij}$ be an optimal solution to $S_{ij}$. Suppose $A_{ij}$ includes an event $a_k$. Let $A_{ik}$ and $A_{kj}$ be defined as in Section 16.1. Thus, we have $A_{ij} = A_{ik} \\cup {a_k} \\cup A_{kj}$, and so the value of maximum-value set $A_{ij}$ is equal to the value of $A_{ik}$ plus the value of $A_{kj}$ plus $v_k$.\n\n\nThe usual cut-and-paste argument shows that the optimal solution $A_{ij}$ must also include optimal solutions to the two subproblems for $S_{ik}$ and $S_{kj}$. If we could find a set $A_{kj}'$ of mutually compatible activities in $S_{kj}$ where the value of $A_{kj}'$ is greater than the value of $A_{kj}$, then we could use $A_{kj}'$, rather than $A_{kj}$, in a solution to the subproblem for $S_{ij}$. We would have constructed a set of mutually compatible activities with greater value than that of $A_{ij}$, which contradicts the assumption that $A_{ij}$ is an optimal solution. A symmetric argument applies to the activities in $S_{ik}$.\n\n\nLet us denote the value of an optimal solution for the set $S_{ij}$ by $val[i, j]$. Then, we would have the recurrence\n\n\n$$val[i, j] = val[i, k] + val[k, j] + v_k.$$\n\n\nOf course, since we do not know that an optimal solution for the set $S_{ij}$ includes activity $a_k$ , we would have to examine all activities in $S_{ij}$ to find which one to choose, so that\n\n\n$$\nval[i, j] =\n\\begin{cases}\n0 & \\text{if $S_{ij} = \\emptyset$}, \\\\\n\\max\\limits_{a_k\\in S_{ij}} {val[i, k] + val[k, j] + v_k} & \\text{if $S_{ij} \\ne \\emptyset$}.\n\\end{cases}\n$$\n\n\nWhile implementing the recurrence, the tricky part is determining which activities are in the set $S_{ij}$ . If activity $k$ is in $S_{ij}$ , then we must have $i < k < j$, which means that $j - i \\ge 2$, but we must also have that $f_i \\le s_k$ and $f_k \\le s_j$. If we start $k$ at $j - 1$ and decrement $k$, we can stop once $k$ reaches $i$, but we can also stop once we find that $f_k \\le f_i$, since then activities $i + 1$ through $k$ cannot be compatible with activity $i$.\n\n\nWe create two fictitious activities, $a_0$ with $f_0 = 0$ and $a_{n + 1}$ with $s_{n + 1} = \\infty$. We are interested in a maximum-size set $A_{0, n + 1}$ of mutually compatible activities in $S_{0, n + 1}$. We'll use tables $val[0..n + 1, 0..n + 1]$, as in the recurrence, and $act[0..n + 1, 0..n + 1]$\u008d, where $act[i, j]$ is the activity $k$ that we choose to put into $A_{ij}$ .\n\n\nWe fill the tables in according to increasing difference $j - i$, which we denote by $l$ in the pseudocode. Since $S_{ij} = \\emptyset$ if $j - i < 2$, we initialize $val[i, i] = 0$ for all $i$ and $val[i, i + 1] = 0$ for $0\\le i\\le n$. As in $\\text{RECURSIVE-ACTIVITY-SELECTOR}$ and $\\text{GREEDY-ACTIVITY-SELECTOR}$, the start and finish times are given as arrays $s$ and $f$, where we assume that the arrays already include the two fictitious activities and that the activities are sorted by monotonically increasing finish time. The array $v$ specifies the value of each activity.\n\n\nMAX\n-\nVALUE\n-\nACTIVITY\n-\nSELECTOR\n(\ns\n,\n \nf\n,\n \nv\n,\n \nn\n)\n\n    \nlet\n \nval\n[\n0.\n.\nn\n \n+\n \n1\n,\n \n0.\n.\nn\n \n+\n \n1\n]\n \nand\n \nact\n[\n0.\n.\nn\n \n+\n \n1\n,\n \n0.\n.\nn\n \n+\n \n1\n]\n \nbe\n \nnew\n \ntables\n\n    \nfor\n \ni\n \n=\n \n0\n \nto\n \nn\n\n        \nval\n[\ni\n,\n \ni\n]\n \n=\n \n0\n\n        \nval\n[\ni\n,\n \ni\n \n+\n \n1\n]\n \n=\n \n0\n\n    \nval\n[\nn\n \n+\n \n1\n,\n \nn\n \n+\n \n1\n]\n \n=\n \n0\n\n    \nfor\n \nl\n \n=\n \n2\n \nto\n \nn\n \n+\n \n1\n\n        \nfor\n \ni\n \n=\n \n0\n \nto\n \nn\n \n-\n \nl\n \n+\n \n1\n\n            \nj\n \n=\n \ni\n \n+\n \nl\n\n            \nval\n[\ni\n,\n \nj\n]\n \n=\n \n0\n\n            \nk\n \n=\n \nj\n \n-\n \n1\n\n            \nwhile\n \nf\n[\ni\n]\n \n<\n \nf\n[\nk\n]\n\n                \nif\n \nf\n[\ni\n]\n \n\u2264\n \ns\n[\nk\n]\n \nand\n \nf\n[\nk\n]\n \n\u2264\n \ns\n[\nj\n]\n \nand\n \nval\n[\ni\n,\n \nk\n]\n \n+\n \nval\n[\nk\n,\n \nj\n]\n \n+\n \nvk\n \n>\n \nval\n[\ni\n,\n \nj\n]\n\n                    \nval\n[\ni\n,\n \nj\n]\n \n=\n \nval\n[\ni\n,\n \nk\n]\n \n+\n \nval\n[\nk\n,\n \nj\n]\n \n+\n \nvk\n\n                    \nact\n[\ni\n,\n \nj\n]\n \n=\n \nk\n\n                \nk\n \n=\n \nk\n \n-\n \n1\n\n    \nprint\n \n\"A maximum-value set of mutually compatible activities has value\"\n \nval\n[\n0\n,\n \nn\n \n+\n \n1\n]\n\n    \nprint\n \n\"The set contains\"\n\n    \nPRINT\n-\nACTIVITIES\n(\nval\n,\n \nact\n,\n \n0\n,\n \nn\n \n+\n \n1\n)\n\n\n\n\n\nPRINT\n-\nACTIVITIES\n(\nval\n,\n \nact\n,\n \ni\n,\n \nj\n)\n\n    \nif\n \nval\n[\ni\n,\n \nj\n]\n \n>\n \n0\n\n        \nk\n \n=\n \nact\n[\ni\n,\n \nj\n]\n\n        \nprint\n \nk\n\n        \nPRINT\n-\nACTIVITIES\n(\nval\n,\n \nact\n,\n \ni\n,\n \nk\n)\n\n        \nPRINT\n-\nACTIVITIES\n(\nval\n,\n \nact\n,\n \nk\n,\n \nj\n)\n\n\n\n\n\nThe $\\text{PRINT-ACTIVITIES}$ procedure recursively prints the set of activities placed into the optimal solution $A_{ij}$ . It first prints the activity $k$ that achieved the maximum value of $val[i, j]$\u008d, and then it recurses to print the activities in $A_{ik}$ and $A_{kj}$. The recursion bottoms out when $val[i, j] = 0$, so that $A_{ij} = \\emptyset$.\n\n\nWhereas $\\text{GREEDY-ACTIVITY-SELECTOR}$ runs in $\\Theta(n)$ time, the $\\text{MAX-VALUE-ACTIVITY-SELECTOR}$ procedure runs in $O(n^3)$ time.",
            "title": "16.1 An activity-selection problem"
        },
        {
            "location": "/Chap16/16.1/#161-1",
            "text": "Give a dynamic-programming algorithm for the activity-selection problem, based on recurrence $\\text{(16.2)}$. Have your algorithm compute the sizes $c[i, j]$ as defined above and also produce the maximum-size subset of mutually compatible activities.  Assume that the inputs have been sorted as in equation $\\text{(16.1)}$. Compare the running time of your solution to the running time of $\\text{GREEDY-ACTIVITY-SELECTOR}$.   The tricky part is determining which activities are in the set $S_{ij}$. If activity $k$ is in $S_{ij}$, then we must have $i < k < j$, which means that $j - 1 \\ge 2$, but we must also have that $f_i \\le s_k$ and $f_k \\le s_j$. If we start $k$ at $j - 1$ and decrement $k$, we can stop once $k$ reaches $i$, but we can also stop once we find that $f_k \\le f_i$, since then activities $i + 1$ through $k$ cannot be compatible with activity $i$.  We create two fictitious activities, $a_0$ with $f_0 = 0$ and $a_{n + 1}$ with $s_{n + 1} = \\infty$. We are interested in a maximum-size set $A_{0, n + 1}$ of mutually compatible activities in $S_{0, n + 1}$. We'll use tables $c[0..n + 1, 0..n + 1]$\u008d, as in recurrence $\\text{(16.2)}$ (so that $c[i, j] = |A_{ij}|$), and $act[0..n + 1, 0..n + 1]$\u008d, where $act[i, j]$ \u008dis the activity $k$ that we choose to put into $A_{ij}$.  We fill the tables in according to increasing difference $j - 1$, which we denote by $l$ in the pseudocode. Since $S_{ij} = \\emptyset$; if $j - i < 2$, we initialize $c[i, i] = 0$ for all $i$ and $c[i, i + 1] = 0$ for $0 \\le i \\le n$. As in $\\text{RECURSIVE-ACTIVITY-SELECTOR}$ and $\\text{GREEDY-ACTIVITY-SELECTOR}$, the start and finish times are given as arrays $s$ and $f$, where we assume that the arrays already include the two fictitious activities and that the activities are sorted by monotonically increasing finish time.  DYNAMIC - ACTIVITY - SELECTOR ( s ,   f ,   n ) \n     let   c [ 0. . n   +   1 ,   0. . n   +   1 ]   and   act [ 0. . n   +   1 ,   0. . n   +   1 ]   be   new   tables \n     for   i   =   0   to   n \n         c [ i ,   i ]   =   0 \n         c [ i ,   i   +   1 ]   =   0 \n     c [ n   +   1 ,   n   +   1 ]   =   0 \n     for   l   =   2   to   n   +   1 \n         for   i   =   0   to   n   -   l   +   1 \n             j   =   i   +   l \n             c [ i ,   j ]   =   0 \n             k   =   j   -   1 \n             while   f [ i ]   <   f [ k ] \n                 if   f [ i ]   \u2264   s [ k ]   and   f [ k ]   \u2264   s [ j ]   and   c [ i ,   k ]   +   c [ k ,   j ]   +   1   >   c [ i ,   j ] \n                     c [ i ,   j ]   =   c [ i ,   k ]   +   c [ k ,   j ]   +   1 \n                     act [ i ,   j ]   =   k \n                 k   =   k   -   1 \n     print   \"A maximum size set of mutually compatible activities has size\"   c [ 0 ,   n   +   1 ] \n     print   \"The set contains\" \n     PRINT - ACTIVITIES ( c ,   act ,   0 ,   n   +   1 )   PRINT - ACTIVITIES ( c ,   act ,   i ,   j ) \n     if   c [ i ,   j ]   >   0 \n         k   =   act [ i ,   j ] \n         print   k \n         PRINT - ACTIVITIES ( c ,   act ,   i ,   k ) \n         PRINT - ACTIVITIES ( c ,   act ,   k ,   j )   The $\\text{PRINT-ACTIVITIES}$ procedure recursively prints the set of activities placed into the optimal solution $A_{ij}$. It first prints the activity $k$ that achieved the maximum value of $c[i, j]$\u008d, and then it recurses to print the activities in $A_{ik}$ and $A_{kj}$. The recursion bottoms out when $c[i, j] = 0$, so that $A_{ij} = \\emptyset$.  Whereas $\\text{GREEDY-ACTIVITY-SELECTOR}$ runs in $\\Theta(n)$ time, the $\\text{DYNAMIC-ACTIVITY-SELECTOR}$ procedure runs in $O(n^3)$ time.",
            "title": "16.1-1"
        },
        {
            "location": "/Chap16/16.1/#161-2",
            "text": "Suppose that instead of always selecting the first activity to finish, we instead select the last activity to start that is compatible with all previously selected activities. Describe how this approach is a greedy algorithm, and prove that it yields an optimal solution.   The proposed approach\u2014selecting the last activity to start that is compatible with all previously selected activities\u2014is really the greedy algorithm but starting from the end rather than the beginning.  Another way to look at it is as follows. We are given a set $S = \\{a_1, a_2, \\ldots, a_n\\}$ of activities, where $a_i = [s_i, f_i)$, and we propose to find an optimal solution by selecting the last activity to start that is compatible with all previously selected activities. Instead, let us create a set $S = \\{a_1', a_2', \\ldots, a_n'\\}$, where $a_i' = [f_i, s_i)$. That is, $a_i'$ is $a_i$ in reverse. Clearly, a subset of $\\{a_{i_1}, a_{i_2}, \\ldots, a_{i_k}\\} \\subseteq S$ is mutually compatible if and only if the corresponding subset $\\{a_{i_1}', a_{i_2}', \\ldots, a_{i_k}'\\} \\subseteq S'$  is also mutually compatible. Thus, an optimal solution for $S$ maps directly to an optimal solution for $S'$ and vice versa.  The proposed approach of selecting the last activity to start that is compatible with all previously selected activities, when run on $S$, gives the same answer as the greedy algorithm from the text\u2014selecting the first activity to finish that is compatible with all previously selected activities\u2014when run on $S'$. The solution that the proposed approach finds for $S$ corresponds to the solution that the text's greedy algorithm finds for $S'$, and so it is optimal.",
            "title": "16.1-2"
        },
        {
            "location": "/Chap16/16.1/#161-3",
            "text": "Not just any greedy approach to the activity-selection problem produces a maximum-size set of mutually compatible activities. Give an example to show that the approach of selecting the activity of least duration from among those that are compatible with previously selected activities does not work. Do the same for the approaches of always selecting the compatible activity that overlaps the fewest other remaining activities and always selecting the compatible remaining activity with the earliest start time.     For the approach of selecting the activity of least duration from those that are compatible with previously selected activities:  \\begin{array}{l|ccc}\n  i             & 1 & 2 & 3 \\\\\n\\hline\ns_i             & 0 & 2 & 3 \\\\\nf_i             & 3 & 4 & 6 \\\\\n\\text{duration} & 3 & 2 & 3\n\\end{array}  This approach selects just $\\{a_2\\}$, but the optimal solution selects $\\{a_1, a_3\\}$.    For the approach of always selecting the compatible activity that overlaps the fewest other remaining activities:  \\begin{array}{l|ccc}\n  i             & 1 & 2 & 3 & 4 & 5 & 6 & 7 & 8 & 9 & 10 & 11 \\\\\n\\hline\ns_i             & 0 & 1 & 1 & 1 & 2 & 3 & 4 & 5 & 5 &  5 &  6 \\\\\nf_i             & 2 & 3 & 3 & 3 & 4 & 5 & 6 & 7 & 7 &  7 &  8 \\\\\n\\text{# of overlapping activities} & 3 & 4 & 4 & 4 & 4 & 2 & 4 & 4 & 4 &  4 &  3\n\\end{array}  This approach frst selects $a_6$, and after that choice it can select only two other activities (one of $a_1$, $a_2$, $a_3$, $a_4$ and one of $a_8$, $a_9$, $a_{10}$, $a_{11}$). An optimal solution is $\\{a_1, a_5, a_7, a_{11}\\}$.    For the approach of always selecting the compatible remaining activity with the earliest start time, just add one more activity with the interval $[0, 14)$ to the example in Section 16.1. It will be the first activity selected, and no other activities are compatible with it.",
            "title": "16.1-3"
        },
        {
            "location": "/Chap16/16.1/#161-4",
            "text": "Suppose that we have a set of activities to schedule among a large number of lecture halls, where any activity can take place in any lecture hall. We wish to schedule all the activities using as few lecture halls as possible. Give an efficient greedy algorithm to determine which activity should use which lecture hall.  (This problem is also known as the  interval-graph coloring problem . We can create an interval graph whose vertices are the given activities and whose edges connect incompatible activities. The smallest number of colors required to color every vertex so that no two adjacent vertices have the same color corresponds to finding the fewest lecture halls needed to schedule all of the given activities.)   Let $S$ be the set of $n$ activities.  The ''obvious'' solution of using $\\text{GREEDY-ACTIVITY-SELECTOR}$ to find a maximum-size set $S_1$ of compatible activities from $S$ for the first lecture hall, then using it again to find a maximum-size set $S_2$ of compatible activities from $S - S_1$ for the second hall, (and so on until all the activities are assigned), requires $\\Theta(n^2)$ time in the worst case.  There is a better algorithm, however, whose asymptotic time is just the time needed to sort the activities by time\u2014$O(n\\lg n)$ time for arbitrary times, or possibly as fast as $O(n)$ if the times are small integers.  The general idea is to go through the activities in order of start time, assigning each to any hall that is available at that time. To do this, move through the set of events consisting of activities starting and activities finishing, in order of event time. Maintain two lists of lecture halls: Halls that are busy at the current event time $t$ (because they have been assigned an activity $i$ that started at $s_i \\le t$ but won't finish until $f_i > t$) and halls that are free at time $t$. (As in the activity- selection problem in Section 16.1, we are assuming that activity time intervals are half open\u2014i.e., that if $s_i \\ge f_j$, then activities $i$ and $j$ are compatible.) When $t$ is the start time of some activity, assign that activity to a free hall and move the hall from the free list to the busy list. When $t$ is the finish time of some activity, move the activity's hall from the busy list to the free list. (The activity is certainly in some hall, because the event times are processed in order and the activity must have started before its finish time $t$, hence must have been assigned to a hall.)  To avoid using more halls than necessary, always pick a hall that has already had an activity assigned to it, if possible, before picking a never-used hall. (This can be done by always working at the front of the free-halls list\u2014putting freed halls onto the front of the list and taking halls from the front of the list\u2014so that a new hall doesn't come to the front and get chosen if there are previously-used halls.)  This guarantees that the algorithm uses as few lecture halls as possible: The algorithm will terminate with a schedule requiring $m \\le n$ lecture halls. Let activity $i$ be the first activity scheduled in lecture hall $m$. The reason that $i$ was put in the $m$th lecture hall is that the first $m - 1$ lecture halls were busy at time $s_i$ . So at this time there are $m$ activities occurring simultaneously. Therefore any schedule must use at least $m$ lecture halls, so the schedule returned by the algorithm is optimal.  Run time:   Sort the $2n$ activity-starts/activity-ends events. (In the sorted order, an activity-ending event should precede an activity-starting event that is at the same time.) $O(n\\lg n)$ time for arbitrary times, possibly $O(n)$ if the times are restricted (e.g., to small integers).  Process the events in $O(n)$ time: Scan the $2n$ events, doing $O(1)$ work for each (moving a hall from one list to the other and possibly associating an activity with it).   Total: $O(n + \\text{time to sort)}$ [The idea of this algorithm is related to the rectangle-overlap algorithm in Exercise 14.3-7.]",
            "title": "16.1-4"
        },
        {
            "location": "/Chap16/16.1/#161-5",
            "text": "Consider a modification to the activity-selection problem in which each activity $a_i$ has, in addition to a start and finish time, a value $v_i$. The objective is no longer to maximize the number of activities scheduled, but instead to maximize the total value of the activities scheduled. That is, we wish to choose a set $A$ of compatible activities such that $\\sum_{a_k \\in A} v_k$ is maximized. Give a polynomial-time algorithm for this problem.   We can no longer use the greedy algorithm to solve this problem. However, as we show, the problem still has an optimal substructure which allows us to formulate a dynamic programming solution. The analysis here follows closely the analysis of Section 16.1 in the book. We define the value of a set of compatible events as the sum of values of events in that set. Let $S_{ij}$ be defined as in Section 16.1. An  optimal solution  to $S_{ij}$ is a subset of mutually compatible events of $S_{ij}$ that has maximum value. Let $A_{ij}$ be an optimal solution to $S_{ij}$. Suppose $A_{ij}$ includes an event $a_k$. Let $A_{ik}$ and $A_{kj}$ be defined as in Section 16.1. Thus, we have $A_{ij} = A_{ik} \\cup {a_k} \\cup A_{kj}$, and so the value of maximum-value set $A_{ij}$ is equal to the value of $A_{ik}$ plus the value of $A_{kj}$ plus $v_k$.  The usual cut-and-paste argument shows that the optimal solution $A_{ij}$ must also include optimal solutions to the two subproblems for $S_{ik}$ and $S_{kj}$. If we could find a set $A_{kj}'$ of mutually compatible activities in $S_{kj}$ where the value of $A_{kj}'$ is greater than the value of $A_{kj}$, then we could use $A_{kj}'$, rather than $A_{kj}$, in a solution to the subproblem for $S_{ij}$. We would have constructed a set of mutually compatible activities with greater value than that of $A_{ij}$, which contradicts the assumption that $A_{ij}$ is an optimal solution. A symmetric argument applies to the activities in $S_{ik}$.  Let us denote the value of an optimal solution for the set $S_{ij}$ by $val[i, j]$. Then, we would have the recurrence  $$val[i, j] = val[i, k] + val[k, j] + v_k.$$  Of course, since we do not know that an optimal solution for the set $S_{ij}$ includes activity $a_k$ , we would have to examine all activities in $S_{ij}$ to find which one to choose, so that  $$\nval[i, j] =\n\\begin{cases}\n0 & \\text{if $S_{ij} = \\emptyset$}, \\\\\n\\max\\limits_{a_k\\in S_{ij}} {val[i, k] + val[k, j] + v_k} & \\text{if $S_{ij} \\ne \\emptyset$}.\n\\end{cases}\n$$  While implementing the recurrence, the tricky part is determining which activities are in the set $S_{ij}$ . If activity $k$ is in $S_{ij}$ , then we must have $i < k < j$, which means that $j - i \\ge 2$, but we must also have that $f_i \\le s_k$ and $f_k \\le s_j$. If we start $k$ at $j - 1$ and decrement $k$, we can stop once $k$ reaches $i$, but we can also stop once we find that $f_k \\le f_i$, since then activities $i + 1$ through $k$ cannot be compatible with activity $i$.  We create two fictitious activities, $a_0$ with $f_0 = 0$ and $a_{n + 1}$ with $s_{n + 1} = \\infty$. We are interested in a maximum-size set $A_{0, n + 1}$ of mutually compatible activities in $S_{0, n + 1}$. We'll use tables $val[0..n + 1, 0..n + 1]$, as in the recurrence, and $act[0..n + 1, 0..n + 1]$\u008d, where $act[i, j]$ is the activity $k$ that we choose to put into $A_{ij}$ .  We fill the tables in according to increasing difference $j - i$, which we denote by $l$ in the pseudocode. Since $S_{ij} = \\emptyset$ if $j - i < 2$, we initialize $val[i, i] = 0$ for all $i$ and $val[i, i + 1] = 0$ for $0\\le i\\le n$. As in $\\text{RECURSIVE-ACTIVITY-SELECTOR}$ and $\\text{GREEDY-ACTIVITY-SELECTOR}$, the start and finish times are given as arrays $s$ and $f$, where we assume that the arrays already include the two fictitious activities and that the activities are sorted by monotonically increasing finish time. The array $v$ specifies the value of each activity.  MAX - VALUE - ACTIVITY - SELECTOR ( s ,   f ,   v ,   n ) \n     let   val [ 0. . n   +   1 ,   0. . n   +   1 ]   and   act [ 0. . n   +   1 ,   0. . n   +   1 ]   be   new   tables \n     for   i   =   0   to   n \n         val [ i ,   i ]   =   0 \n         val [ i ,   i   +   1 ]   =   0 \n     val [ n   +   1 ,   n   +   1 ]   =   0 \n     for   l   =   2   to   n   +   1 \n         for   i   =   0   to   n   -   l   +   1 \n             j   =   i   +   l \n             val [ i ,   j ]   =   0 \n             k   =   j   -   1 \n             while   f [ i ]   <   f [ k ] \n                 if   f [ i ]   \u2264   s [ k ]   and   f [ k ]   \u2264   s [ j ]   and   val [ i ,   k ]   +   val [ k ,   j ]   +   vk   >   val [ i ,   j ] \n                     val [ i ,   j ]   =   val [ i ,   k ]   +   val [ k ,   j ]   +   vk \n                     act [ i ,   j ]   =   k \n                 k   =   k   -   1 \n     print   \"A maximum-value set of mutually compatible activities has value\"   val [ 0 ,   n   +   1 ] \n     print   \"The set contains\" \n     PRINT - ACTIVITIES ( val ,   act ,   0 ,   n   +   1 )   PRINT - ACTIVITIES ( val ,   act ,   i ,   j ) \n     if   val [ i ,   j ]   >   0 \n         k   =   act [ i ,   j ] \n         print   k \n         PRINT - ACTIVITIES ( val ,   act ,   i ,   k ) \n         PRINT - ACTIVITIES ( val ,   act ,   k ,   j )   The $\\text{PRINT-ACTIVITIES}$ procedure recursively prints the set of activities placed into the optimal solution $A_{ij}$ . It first prints the activity $k$ that achieved the maximum value of $val[i, j]$\u008d, and then it recurses to print the activities in $A_{ik}$ and $A_{kj}$. The recursion bottoms out when $val[i, j] = 0$, so that $A_{ij} = \\emptyset$.  Whereas $\\text{GREEDY-ACTIVITY-SELECTOR}$ runs in $\\Theta(n)$ time, the $\\text{MAX-VALUE-ACTIVITY-SELECTOR}$ procedure runs in $O(n^3)$ time.",
            "title": "16.1-5"
        },
        {
            "location": "/Chap16/16.2/",
            "text": "16.2-1\n\n\n\n\nProve that the fractional knapsack problem has the greedy-choice property.\n\n\n\n\nLet $I$ be the following instance of the knapsack problem: Let $n$ be the number of items, let $v_i$ be the value of the $i$th item, let $w_i$ be the weight of the $i$th item and let $W$ be the capacity. Assume the items have been ordered in increasing order by $v_i / w_i$ and that $W \\ge w_n$.\nLet $s = (s_1, s_2, \\ldots, s_n)$ be a solution. The greedy algorithm works by assigning $s_n = \\min(wn, W)$, and then continuing by solving the subproblem\n\n\n$$I' = (n - 1, {v_1, v_2, \\ldots, v_{n - 1}}, {w_1, w_2, \\ldots, w_{n - 1}}, W - w_n)$$\n\n\nuntil it either reaches the state $W = 0$ or $n = 0$.\n\n\nWe need to show that this strategy always gives an optimal solution. We prove this by contradiction. Suppose the optimal solution to $I$ is $s_1, s_2, \\ldots, s_n$, where $s_n < \\min(wn, W)$. Let $i$ be the smallest number such that $s_i > 0$. By decreasing $s_i$ to $\\max(0, W - w_n)$ and increasing $s_n$ by the same amount, we get a better solution. Since this a contradiction the assumption must be false. Hence the problem has the greedy-choice property.\n\n\n16.2-2\n\n\n\n\nGive a dynamic-programming solution to the $0$-$1$ knapsack problem that runs in $O(nW)$ time, where $n$ is the number of items and $W$ is the maximum weight of items that the thief can put in his knapsack.\n\n\n\n\nThe solution is based on the optimal-substructure observation in the text: Let $i$ be the highest-numbered item in an optimal solution $S$ for $W$ pounds and items $1, \\ldots, n$. Then $S'  = S - \\{i\\}$ must be an optimal solution for $W - w_i$ pounds and items $1, \\ldots, i - 1$, and the value of the solution $S$ is $v_i$ plus the value of the subproblem solution $S'$.\n\n\nWe can express this relationship in the following formula: Define $c[i, w]$ to be the value of the solution for items $1, \\ldots, i$ and maximum weight $w$. Then\n\n\n$$\nc[i,w] =\n\\begin{cases}\n0                                          & \\text{ if } i = 0 \\text{ or } w = 0, \\\\\nc[i - 1, w]                                & \\text{ if } w_i > w, \\\\\n\\max(v_i + c[i - 1, w - w_i], c[i - 1, w]) & \\text{ if } i > 0 \\text{ and } w \\ge w_i.\n\\end{cases}\n$$\n\n\nThe last case says that the value of a solution for i items either includes item $i$, in which case it is $v_i$ plus a subproblem solution for $i - 1$ items and the weight excluding $w_i$, or doesn't include item $i$, in which case it is a subproblem solution for $i - 1$ items and the same weight. That is, if the thief picks item $i$, he takes $v_i$ value, and he can choose from items $1, \\ldots, i - 1$ up to the weight limit $w - w_i$ , and get $c[i - 1, w - w_i]$ additional value. On the other hand, if he decides not to take item $i$, he can choose from items $1, \\ldots, i - 1$ up to the weight limit $w$, and get $c[i - 1, w]$ value. The better of these two choices should be made.\n\n\nThe algorithm takes as inputs the maximum weight $W$, the number of items $n$, and the two sequences $v = \\langle v_1, v_2, \\ldots, v_n \\rangle$ and $w = \\langle w_1, w_2, \\ldots, w_n \\rangle$. It stores the $c[i, j]$ values in a table $c[0..n, 0..W]$ whose entries are computed in row-major order. (That is, the first row of $c$ is filled in from left to right, then the second row, and so on.) At the end of the computation, $c[n, W]$ contains the maximum value the thief can take.\n\n\nDYNAMIC\n-\n0\n-\n1\n-\nKNAPSACK\n(\nv\n,\n \nw\n,\n \nn\n,\n \nW\n)\n\n    \nlet\n \nc\n[\n0.\n.\nn\n,\n \n0.\n.\nW\n]\n \nbe\n \na\n \nnew\n \narray\n\n    \nfor\n \nw\n \n=\n \n0\n \nto\n \nW\n\n        \nc\n[\n0\n,\n \nw\n]\n \n=\n \n0\n\n    \nfor\n \ni\n \n=\n \n1\n \nto\n \nn\n\n        \nc\n[\ni\n,\n \n0\n]\n \n=\n \n0\n\n        \nfor\n \nw\n \n=\n \n1\n \nto\n \nW\n\n            \nif\n \nwi\n \n\u2264\n \nw\n\n                \nif\n \nvi\n \n+\n \nc\n[\ni\n \n-\n \n1\n,\n \nw\n \n-\n \nwi\n]\n \n>\n \nc\n[\ni\n \n-\n \n1\n,\n \nw\n]\n\n                    \nc\n[\ni\n,\n \nw\n]\n \n=\n \nvi\n \n+\n \nc\n[\ni\n \n-\n \n1\n,\n \nw\n \n-\n \nwi\n]\n\n                \nelse\n \nc\n[\ni\n,\n \nw\n]\n \n=\n \nc\n[\ni\n \n-\n \n1\n,\n \nw\n]\n\n            \nelse\n \nc\n[\ni\n,\n \nw\n]\n \n=\n \nc\n[\ni\n \n-\n \n1\n,\n \nw\n]\n\n\n\n\n\nThe set of items to take can be deduced from the $c$ table by starting at $c[n, W]$ and tracing where the optimal values came from. If $c[i, w] = c[i - 1, w]$, then item $i$ is not part of the solution, and we continue tracing with $c[i - 1, w]$. Otherwise item $i$ is part of the solution, and we continue tracing with $c[i - 1, w - w_i]$.\n\n\nThe above algorithm takes $\\Theta(nW)$ time total:\n\n\n\n\n$\\Theta(nW)$ to fill in the $c$ table: $(n + 1) \\cdot (W + 1)$ entries, each requiring $\\Theta(1)$ time to compute.\n\n\n$O(n)$ time to trace the solution (since it starts in row $n$ of the table and moves up one row at each step).\n\n\n\n\n16.2-3\n\n\n\n\nSuppose that in a $0$-$1$ knapsack problem, the order of the items when sorted by increasing weight is the same as their order when sorted by decreasing value. Give an efficient algorithm to find an optimal solution to this variant of the knapsack problem, and argue that your algorithm is correct.\n\n\n\n\nSuppose in an optimal solution we take an item with $v_1$, $w_1$, and drop an item with $v_2$, $w_2$, and $w_1 > w_2$, $v_1 < v_2$, we can substitude $1$ with $2$ and get a better solution. Therefore we should always choose the items with the greatest values.\n\n\n16.2-4\n\n\n\n\nProfessor Gekko has always dreamed of inline skating across North Dakota. He plans to cross the state on highway U.S. 2, which runs from Grand Forks, on the eastern border with Minnesota, to Williston, near the western border withMontana. The professor can carry two liters of water, and he can skate $m$ miles before running out of water. (Because North Dakota is relatively flat, the professor does not have to worry about drinking water at a greater rate on uphill sections than on flat or downhill sections.) The professor will start in Grand Forks with two full liters of water. His official North Dakota state map shows all the places along U.S. 2 at which he can refill his water and the distances between these locations.\n\n\nThe professor's goal is to minimize the number of water stops along his route across the state. Give an efficient method by which he can determine which water stops he should make. Prove that your strategy yields an optimal solution, and give its running time.\n\n\n\n\nThe optimal strategy is the obvious greedy one. Starting will both bottles, Professor Gekko should go to the westernmost place that he can refill his bottles within $m$ miles of Grand Forks. Fill up there. Then go to the westernmost refilling location he can get to within $m$ miles of where he filled up, and fill up there, and so on.\n\n\nLooked at another way, at each refilling location, Professor Gekko should check whether he can make it to the next refilling location without stopping at this one. If he can, skip this one. If he cannot, then fill up. Professor Gekko doesn't need to know how much water he has or how fat the next refilling location is to implement this approach, since at each fillup, he can determine which is the next location at which he'll need to stop.\n\n\nThis problem has optimal substructure. Suppose there are $n$ possible refilling locations. Consider an optimal solution with $s$ refilling locations and whose first stop is at the $k$th refilling location. Then the rest of the optimal solution must be an optimal solution to the subproblem of the remaining $n - k$ locations. Otherwise, if there were a better solution to the subproblem, i.e., one with fewer than $s - 1$ stops, we could use it to come up with a solution with fewer than $s$ stops for the full problem, contradicting our supposition of optimality.\n\n\nThis problem also has the greedy-choice property. Suppose there are $k$ refilling locations beyond the start that are within $m$ miles of the start. The greedy solution chooses the $k$th location as its first stop. No location beyond the $k$th works as a first stop, since Professor Gekko runs out of gas first. If a solution chooses a location $j < k$ as its first stop, then Professor Gekko could choose the $k$th location instead, having at least as much water when he leaves the $k$th location as if he'd chosen the $j$th location. Therefore, he would get at least as far without filling up again if he had chosen the $k$th location.\n\n\nIf there are $n$ refilling locations on the map, Professor Gekko needs to inspect each one just once. The running time is $O(n)$.\n\n\n16.2-5\n\n\n\n\nDescribe an efficient algorithm that, given a set $\\{x_1, x_2, \\ldots, x_n\\}$ of points on the real line, determines the smallest set of unit-length closed intervals that contains all of the given points. Argue that your algorithm is correct.\n\n\n\n\nConsider the leftmost interval. It will do no good if it extends any further left than the leftmost point, however, we know that it must contain the leftmost point. So, we know that it's left hand side is exactly the leftmost point. \n\n\nSo, we just remove any point that is within a unit distance of the left most point since they are contained in this single interval. Then, we just repeat until all points are covered. Since at each step there is a clearly optimal choice for where to put the leftmost interval, this final solution is optimal.\n\n\n16.2-6 $\\star$\n\n\n\n\nShow how to solve the fractional knapsack problem in $O(n)$ time.\n\n\n\n\nUse a linear-time median algorithm to calculate the median m of the $v_i / w_i$ ratios. Next, partition the items into three sets: $G = \\{i : v_i / w_i > m\\}$, $E = \\{i : v_i / w_i = m\\}$, and $L = \\{i : v_i / w_i < m\\}$; this step takes linear time. Compute $W_G = \\sum_{i \\in G} w_i$ and $W_E = \\sum_{i \\in E} w_i$, the total weight of the items in sets $G$ and $E$, respectively.\n\n\n\n\nIf $W_G > W$, then do not yet take any items in set $G$, and instead recurse on the set of items $G$ and knapsack capacity $W$.\n\n\nOtherwise $(W_G \\le W)$, take all items in set $G$, and take as much of the items in set $E$ as will fit in the remaining capacity $W - W_G$.\n\n\nIf $W_G + W_E \\ge W$ (i.e., there is no capacity left after taking all the items in set $G$ and all the items in set E that fit in the remaining capacity $W - W_G$), then we are done.\n\n\nOtherwise $(W_G + W_E < W)$, then after taking all the items in sets $G$ and $E$, recurse on the set of items $L$ and knapsack capacity $W - W_G - W_E$.\n\n\n\n\nTo analyze this algorithm, note that each recursive call takes linear time, exclusive of the time for a recursive call that it may make. When there is a recursive call, there is just one, and it's for a problem of at most half the size. Thus, the running time is given by the recurrence $T(n) \\le T (n / 2) + \\Theta(n)$, whose solution is $T(n) = O(n)$.\n\n\n16.2-7\n\n\n\n\nSuppose you are given two sets $A$ and $B$, each containing $n$ positive integers. You can choose to reorder each set however you like. After reordering, let $a_i$ be the $i$th element of set $A$, and let $b_i$ be the $i$ th element of set $B$. You then receive a payoff of $\\prod_{i = 1}^n a_i^{b_i}$. Give an algorithm that will maximize your payoff. Prove that your algorithm maximizes the payoff, and state its running time.\n\n\n\n\nSort $A$ and $B$ into monotonically decreasing order.\n\n\nHere's a proof that this method yields an optimal solution. Consider any indices $i$ and $j$ such that $i < j$, and consider the terms $a_i^{b_i}$ and $a_j^{b_j}$. We want to show that it is no worse to include these terms in the payoff than to include $a_i^{b_j}$ and $a_j^{b_i}$, i.e., that $a_i^{b_i} a_j^{b_j} \\ge a_i^{b_j} a_j^{b_i}$. Since $A$ and $B$ are sorted into monotonically decreasing order and $i < j$, we have $a_i \\ge a_j$ and $b_i \\ge b_j$. Since $a_i$ and $a_j$ are positive and $b_i - b_j$ is nonnegative, we have $a_i^{b_i - b_j} \\ge a_j^{b_i - b_j}$. Multiplying both sides by $a_i^{b_j} a_j^{b_j}$ yields $a_i^{b_i} a_j^{b_j} \\ge a_i^{b_j} a_j^{b_i}$.\n\n\nSince the order of multiplication doesn't matter, sorting $A$ and $B$ into monotonically increasing order works as well.",
            "title": "16.2 Elements of the greedy strategy"
        },
        {
            "location": "/Chap16/16.2/#162-1",
            "text": "Prove that the fractional knapsack problem has the greedy-choice property.   Let $I$ be the following instance of the knapsack problem: Let $n$ be the number of items, let $v_i$ be the value of the $i$th item, let $w_i$ be the weight of the $i$th item and let $W$ be the capacity. Assume the items have been ordered in increasing order by $v_i / w_i$ and that $W \\ge w_n$.\nLet $s = (s_1, s_2, \\ldots, s_n)$ be a solution. The greedy algorithm works by assigning $s_n = \\min(wn, W)$, and then continuing by solving the subproblem  $$I' = (n - 1, {v_1, v_2, \\ldots, v_{n - 1}}, {w_1, w_2, \\ldots, w_{n - 1}}, W - w_n)$$  until it either reaches the state $W = 0$ or $n = 0$.  We need to show that this strategy always gives an optimal solution. We prove this by contradiction. Suppose the optimal solution to $I$ is $s_1, s_2, \\ldots, s_n$, where $s_n < \\min(wn, W)$. Let $i$ be the smallest number such that $s_i > 0$. By decreasing $s_i$ to $\\max(0, W - w_n)$ and increasing $s_n$ by the same amount, we get a better solution. Since this a contradiction the assumption must be false. Hence the problem has the greedy-choice property.",
            "title": "16.2-1"
        },
        {
            "location": "/Chap16/16.2/#162-2",
            "text": "Give a dynamic-programming solution to the $0$-$1$ knapsack problem that runs in $O(nW)$ time, where $n$ is the number of items and $W$ is the maximum weight of items that the thief can put in his knapsack.   The solution is based on the optimal-substructure observation in the text: Let $i$ be the highest-numbered item in an optimal solution $S$ for $W$ pounds and items $1, \\ldots, n$. Then $S'  = S - \\{i\\}$ must be an optimal solution for $W - w_i$ pounds and items $1, \\ldots, i - 1$, and the value of the solution $S$ is $v_i$ plus the value of the subproblem solution $S'$.  We can express this relationship in the following formula: Define $c[i, w]$ to be the value of the solution for items $1, \\ldots, i$ and maximum weight $w$. Then  $$\nc[i,w] =\n\\begin{cases}\n0                                          & \\text{ if } i = 0 \\text{ or } w = 0, \\\\\nc[i - 1, w]                                & \\text{ if } w_i > w, \\\\\n\\max(v_i + c[i - 1, w - w_i], c[i - 1, w]) & \\text{ if } i > 0 \\text{ and } w \\ge w_i.\n\\end{cases}\n$$  The last case says that the value of a solution for i items either includes item $i$, in which case it is $v_i$ plus a subproblem solution for $i - 1$ items and the weight excluding $w_i$, or doesn't include item $i$, in which case it is a subproblem solution for $i - 1$ items and the same weight. That is, if the thief picks item $i$, he takes $v_i$ value, and he can choose from items $1, \\ldots, i - 1$ up to the weight limit $w - w_i$ , and get $c[i - 1, w - w_i]$ additional value. On the other hand, if he decides not to take item $i$, he can choose from items $1, \\ldots, i - 1$ up to the weight limit $w$, and get $c[i - 1, w]$ value. The better of these two choices should be made.  The algorithm takes as inputs the maximum weight $W$, the number of items $n$, and the two sequences $v = \\langle v_1, v_2, \\ldots, v_n \\rangle$ and $w = \\langle w_1, w_2, \\ldots, w_n \\rangle$. It stores the $c[i, j]$ values in a table $c[0..n, 0..W]$ whose entries are computed in row-major order. (That is, the first row of $c$ is filled in from left to right, then the second row, and so on.) At the end of the computation, $c[n, W]$ contains the maximum value the thief can take.  DYNAMIC - 0 - 1 - KNAPSACK ( v ,   w ,   n ,   W ) \n     let   c [ 0. . n ,   0. . W ]   be   a   new   array \n     for   w   =   0   to   W \n         c [ 0 ,   w ]   =   0 \n     for   i   =   1   to   n \n         c [ i ,   0 ]   =   0 \n         for   w   =   1   to   W \n             if   wi   \u2264   w \n                 if   vi   +   c [ i   -   1 ,   w   -   wi ]   >   c [ i   -   1 ,   w ] \n                     c [ i ,   w ]   =   vi   +   c [ i   -   1 ,   w   -   wi ] \n                 else   c [ i ,   w ]   =   c [ i   -   1 ,   w ] \n             else   c [ i ,   w ]   =   c [ i   -   1 ,   w ]   The set of items to take can be deduced from the $c$ table by starting at $c[n, W]$ and tracing where the optimal values came from. If $c[i, w] = c[i - 1, w]$, then item $i$ is not part of the solution, and we continue tracing with $c[i - 1, w]$. Otherwise item $i$ is part of the solution, and we continue tracing with $c[i - 1, w - w_i]$.  The above algorithm takes $\\Theta(nW)$ time total:   $\\Theta(nW)$ to fill in the $c$ table: $(n + 1) \\cdot (W + 1)$ entries, each requiring $\\Theta(1)$ time to compute.  $O(n)$ time to trace the solution (since it starts in row $n$ of the table and moves up one row at each step).",
            "title": "16.2-2"
        },
        {
            "location": "/Chap16/16.2/#162-3",
            "text": "Suppose that in a $0$-$1$ knapsack problem, the order of the items when sorted by increasing weight is the same as their order when sorted by decreasing value. Give an efficient algorithm to find an optimal solution to this variant of the knapsack problem, and argue that your algorithm is correct.   Suppose in an optimal solution we take an item with $v_1$, $w_1$, and drop an item with $v_2$, $w_2$, and $w_1 > w_2$, $v_1 < v_2$, we can substitude $1$ with $2$ and get a better solution. Therefore we should always choose the items with the greatest values.",
            "title": "16.2-3"
        },
        {
            "location": "/Chap16/16.2/#162-4",
            "text": "Professor Gekko has always dreamed of inline skating across North Dakota. He plans to cross the state on highway U.S. 2, which runs from Grand Forks, on the eastern border with Minnesota, to Williston, near the western border withMontana. The professor can carry two liters of water, and he can skate $m$ miles before running out of water. (Because North Dakota is relatively flat, the professor does not have to worry about drinking water at a greater rate on uphill sections than on flat or downhill sections.) The professor will start in Grand Forks with two full liters of water. His official North Dakota state map shows all the places along U.S. 2 at which he can refill his water and the distances between these locations.  The professor's goal is to minimize the number of water stops along his route across the state. Give an efficient method by which he can determine which water stops he should make. Prove that your strategy yields an optimal solution, and give its running time.   The optimal strategy is the obvious greedy one. Starting will both bottles, Professor Gekko should go to the westernmost place that he can refill his bottles within $m$ miles of Grand Forks. Fill up there. Then go to the westernmost refilling location he can get to within $m$ miles of where he filled up, and fill up there, and so on.  Looked at another way, at each refilling location, Professor Gekko should check whether he can make it to the next refilling location without stopping at this one. If he can, skip this one. If he cannot, then fill up. Professor Gekko doesn't need to know how much water he has or how fat the next refilling location is to implement this approach, since at each fillup, he can determine which is the next location at which he'll need to stop.  This problem has optimal substructure. Suppose there are $n$ possible refilling locations. Consider an optimal solution with $s$ refilling locations and whose first stop is at the $k$th refilling location. Then the rest of the optimal solution must be an optimal solution to the subproblem of the remaining $n - k$ locations. Otherwise, if there were a better solution to the subproblem, i.e., one with fewer than $s - 1$ stops, we could use it to come up with a solution with fewer than $s$ stops for the full problem, contradicting our supposition of optimality.  This problem also has the greedy-choice property. Suppose there are $k$ refilling locations beyond the start that are within $m$ miles of the start. The greedy solution chooses the $k$th location as its first stop. No location beyond the $k$th works as a first stop, since Professor Gekko runs out of gas first. If a solution chooses a location $j < k$ as its first stop, then Professor Gekko could choose the $k$th location instead, having at least as much water when he leaves the $k$th location as if he'd chosen the $j$th location. Therefore, he would get at least as far without filling up again if he had chosen the $k$th location.  If there are $n$ refilling locations on the map, Professor Gekko needs to inspect each one just once. The running time is $O(n)$.",
            "title": "16.2-4"
        },
        {
            "location": "/Chap16/16.2/#162-5",
            "text": "Describe an efficient algorithm that, given a set $\\{x_1, x_2, \\ldots, x_n\\}$ of points on the real line, determines the smallest set of unit-length closed intervals that contains all of the given points. Argue that your algorithm is correct.   Consider the leftmost interval. It will do no good if it extends any further left than the leftmost point, however, we know that it must contain the leftmost point. So, we know that it's left hand side is exactly the leftmost point.   So, we just remove any point that is within a unit distance of the left most point since they are contained in this single interval. Then, we just repeat until all points are covered. Since at each step there is a clearly optimal choice for where to put the leftmost interval, this final solution is optimal.",
            "title": "16.2-5"
        },
        {
            "location": "/Chap16/16.2/#162-6-star",
            "text": "Show how to solve the fractional knapsack problem in $O(n)$ time.   Use a linear-time median algorithm to calculate the median m of the $v_i / w_i$ ratios. Next, partition the items into three sets: $G = \\{i : v_i / w_i > m\\}$, $E = \\{i : v_i / w_i = m\\}$, and $L = \\{i : v_i / w_i < m\\}$; this step takes linear time. Compute $W_G = \\sum_{i \\in G} w_i$ and $W_E = \\sum_{i \\in E} w_i$, the total weight of the items in sets $G$ and $E$, respectively.   If $W_G > W$, then do not yet take any items in set $G$, and instead recurse on the set of items $G$ and knapsack capacity $W$.  Otherwise $(W_G \\le W)$, take all items in set $G$, and take as much of the items in set $E$ as will fit in the remaining capacity $W - W_G$.  If $W_G + W_E \\ge W$ (i.e., there is no capacity left after taking all the items in set $G$ and all the items in set E that fit in the remaining capacity $W - W_G$), then we are done.  Otherwise $(W_G + W_E < W)$, then after taking all the items in sets $G$ and $E$, recurse on the set of items $L$ and knapsack capacity $W - W_G - W_E$.   To analyze this algorithm, note that each recursive call takes linear time, exclusive of the time for a recursive call that it may make. When there is a recursive call, there is just one, and it's for a problem of at most half the size. Thus, the running time is given by the recurrence $T(n) \\le T (n / 2) + \\Theta(n)$, whose solution is $T(n) = O(n)$.",
            "title": "16.2-6 $\\star$"
        },
        {
            "location": "/Chap16/16.2/#162-7",
            "text": "Suppose you are given two sets $A$ and $B$, each containing $n$ positive integers. You can choose to reorder each set however you like. After reordering, let $a_i$ be the $i$th element of set $A$, and let $b_i$ be the $i$ th element of set $B$. You then receive a payoff of $\\prod_{i = 1}^n a_i^{b_i}$. Give an algorithm that will maximize your payoff. Prove that your algorithm maximizes the payoff, and state its running time.   Sort $A$ and $B$ into monotonically decreasing order.  Here's a proof that this method yields an optimal solution. Consider any indices $i$ and $j$ such that $i < j$, and consider the terms $a_i^{b_i}$ and $a_j^{b_j}$. We want to show that it is no worse to include these terms in the payoff than to include $a_i^{b_j}$ and $a_j^{b_i}$, i.e., that $a_i^{b_i} a_j^{b_j} \\ge a_i^{b_j} a_j^{b_i}$. Since $A$ and $B$ are sorted into monotonically decreasing order and $i < j$, we have $a_i \\ge a_j$ and $b_i \\ge b_j$. Since $a_i$ and $a_j$ are positive and $b_i - b_j$ is nonnegative, we have $a_i^{b_i - b_j} \\ge a_j^{b_i - b_j}$. Multiplying both sides by $a_i^{b_j} a_j^{b_j}$ yields $a_i^{b_i} a_j^{b_j} \\ge a_i^{b_j} a_j^{b_i}$.  Since the order of multiplication doesn't matter, sorting $A$ and $B$ into monotonically increasing order works as well.",
            "title": "16.2-7"
        },
        {
            "location": "/Chap16/16.3/",
            "text": "16.3-1\n\n\n\n\nExplain why, in the proof of Lemma 16.2, if $x.freq = b.freq$, then we must have $a.freq = b.freq = x.freq = y.freq$.\n\n\n\n\nWe are given that $x.freq \\le y.freq$ are the two lowest frequencies in order, and that $a.freq \\le b.freq$. Now,\n\n\n\\begin{array}{rcl}\n            b.freq & =   & x.freq \\\\\n\\Rightarrow a.freq & \\le & x.freq \\\\\n\\Rightarrow a.freq & =   & x.freq & \\text{(since $x.freq$ is the lowest frequency)},\n\\end{array}\n\n\nand since $y.freq \\le b.freq$,\n\n\n\\begin{array}{rcl}\n            b.freq & =   & x.freq \\\\\n\\Rightarrow y.freq & \\le & x.freq \\\\\n\\Rightarrow y.freq & =   & x.freq & \\text{(since $x.freq$ is the lowest frequency)}.\n\\end{array}\n\n\nThus, if we assume that $x.freq = b.freq$, then we have that each of $a.freq$, $b.freq$, and $y.freq$ equals $x.freq$, and so \n\n\n$$a.freq = b.freq = x.freq = y.freq.$$\n\n\n16.3-2\n\n\n\n\nProve that a binary tree that is not full cannot correspond to an optimal prefix code.\n\n\n\n\nLet $T$ be a binary tree that is not full. $T$ represents a binary prefix code for a file composed of characters from alphabet $C$, where $c \\in C$, $f(c)$ is th number of occurrences of $c$ in the file. The cost of tree $T$, or the number of bits in the encoding, is  $\\sum_{c \\in C} d_T(c) \\cdot f(c)$, where $d_T(c)$ is the depth of character $c$ in tree $T$.\n\n\nLet $N$ be a node of greatest depth that has exactly one child. If $N$ is the root of $T$, $N$ can be removed and the deepth of each node reduced by one, yielding a tree representing the same alphabet with a lower cost. This mean the original code was not optimal.\n\n\nOtherwise, let $M$ be the parent of $N$, let $T_1$ be the (possibly non-existent) sibling of $N$, and let $T_2$ be the subtree rooted at the child of $N$. Replace $M$ by $N$, making the children of $N$ the roots of subtrees $T_1$ and $T_2$. If $T_1$ is empty, repeat the process. We have a new prefix code of lower cost, so the original was not optimal.\n\n\n16.3-3\n\n\n\n\nWhat is an optimal Huffman code for the following set of frequencies, based on\n\nthe first 8 Fibonacci numbers?\n\n\n$$a:1 \\quad b:1 \\quad c:2 \\quad d:3 \\quad e:5 \\quad f:8 \\quad g:13 \\quad h:21$$\n\n\nCan you generalize your answer to find the optimal code when the frequencies are the first $n$ Fibonacci numbers?\n\n\n\n\n\\begin{array}{c|l}\na & 1111111 \\\\\nb & 1111110 \\\\\nc & 111110 \\\\\nd & 11110 \\\\\ne & 1110 \\\\\nf & 110 \\\\\ng & 10 \\\\\nh & 0\n\\end{array}\n\n\n16.3-4\n\n\n\n\nProve that we can also express the total cost of a tree for a code as the sum, over all internal nodes, of the combined frequencies of the two children of the node.\n\n\n\n\nLet tree be a full binary tree with n leaves. Apply induction hypothesis on the number of leaves in $T$. When $n = 2$ (the case $n = 1$ is trivially true), there are two leaves $x$ and $y$ with the same parent $z$, then the cost of $T$ is\n\n\n\\begin{align}\nB(T) & = f(x) d_T(x) + f(y) d_T(y) \\\\\n     & = f(x) + f(y) & \\text{since $d_T(x) = d_T(y) = 1$}  \\\\\n     & = f(\\text{child}_1\\text{ of }z) + f(\\text{child}_2\\text{ of }z).\n\\end{align}\n\n\nThus, the statement of theorem is true. Now suppose $n > 2$ and also suppose that theorem is true for trees on $n - 1$ leaves.\n\nLet $c_1$ and $c_2$ are two sibling leaves in $T$ such that they have the same parent $p$. Letting $T'$ be the tree obtained by deleting $c_1$ and $c_2$, by induction we know that\n\n\n\\begin{align}\nB(T) & = \\sum_{\\text{leaves } l'\\in T'} f(l')d_T(l') \\\\\n     & = \\sum_{\\text{internal nodes } i'\\in T'} f(\\text{child}_1\\text{ of }i') + f(\\text{child}_2\\text{ of }i').\n\\end{align}\n\n\nUsing this information, calculates the cost of $T$.\n\n\n\\begin{align}\nB(T) & = \\sum_{\\text{leaves }l \\in T} f(l)d_T(l) \\\\\n     & = \\sum_{l \\ne c_1, c_2} f(l)d_T(l) + f(c_1)d_T(c_1) - 1 + f(c_2)d_T(c_2) - 1 + f(c_1) + f(c_2) \\\\\n     & = \\sum_{\\text{internal nodes }i'\\in T'} f(\\text{child}_1\\text{ of }i') + f(\\text{child}_2\\text{ of }i') + f(c_1) + f(c_2) \\\\\n     & = \\sum_{\\text{internal nodes }i\\in T} f(\\text{child}_1\\text{ of }i) + f(\\text{child}_1\\text{ of }i).\n\\end{align}\n\n\nThus the statement is true.\n\n\n16.3-5\n\n\n\n\nProve that if we order the characters in an alphabet so that their frequencies are monotonically decreasing, then there exists an optimal code whose codeword lengths are monotonically increasing.\n\n\n\n\nIt were a contradiction to have an optimal tree whose frequencies and codewords were monotonically increasing in the strict sense; since, given $f(x_1) > \\ldots > f(x_n) \\wedge d_T(x_1) > \\cdots > d_T(x_n)$, it follows that (where $n$ is odd):\n\n\n\\begin{align}\n& f(x_1)d_T(x_1) + \\cdots + f(x_n)d_T(x_n) > f(x_1)d_T(x_n) + \\cdots + f(x_n)d_T(x_1) > 0 \\\\\n& f(x_1)(d_T(x_1) - d_T(x_n)) + \\cdots + f(x_n)(d_T(x_n) - d_T(x_1)) > 0 \\\\\n& f(x_1)(d_T(x_1) - d_T(x_n)) + \\cdots + f(x_{\\lfloor \\frac{n}{2} - 1 \\rfloor})(d_T(x_{\\lfloor \\frac{n}{2} \\rfloor - 1}) - d_T(x_{\\lfloor \\frac{n}{2} \\rfloor + 1})) \\\\\n& > f(x_{\\lfloor \\frac{n}{2} + 1 \\rfloor})(d_T(x_{\\lfloor \\frac{n}{2} \\rfloor - 1}) - d_T(x_{\\lfloor \\frac{n}{2} \\rfloor + 1}))+ \\cdots + f(x_n)(d_T(x_1) - d_T(x_n)).\n\\end{align}\n\n\nThat is, where $i$ and $j$ are the upper and lower median,\n\nrespectively; and $c_i = d_T(x_i) - d_T(x_{n - i + 1})$:\n\n\n$$f(x_1)c_1 + \\cdots + f(x_i)c_i > f(x_j)c_i + \\cdots + f(x_n)c_1$$\n\n\nsince\n\n\n\\begin{align}\nf(x_i) & > f(x_{n - i + 1}) & 1 \\le i \\le \\Big\\lfloor \\frac{n}{2} \\Big\\rfloor.\n\\end{align}\n\n\n16.3-6\n\n\n\n\nSuppose we have an optimal prefix code on a set $C = {0, 1, \\ldots, n - 1}$ of characters and we wish to transmit this code using as few bits as possible. Show how to represent any optimal prefix code on $C$ using only $2n - 1 + n \\lceil \\lg n \\rceil$ bits. ($\\textit{Hint:}$ Use $2n - 1$ bits to specify the structure of the tree, as discovered by a walk of the tree.)\n\n\n\n\nFirst observe that any full binary tree has exactly $2n - 1$ nodes. We can encode the structure of our full binary tree by performing a preorder traversal of $T$. \nFor each node that we record in the traversal, write a $0$ if it is an internal node and a $1$ if it is a leaf node. Since we know the tree to be full, this uniquely determines its structure. \n\n\nNext, note that we can encode any character of $C$ in $\\lceil \\lg n \\rceil$ bits. Since there are $n$ characters, we can encode them in order of appearance in our preorder traversal using ndlg ne bits.\n\n\n16.3-7\n\n\n\n\nGeneralize Huffman's algorithm to ternary codewords (i.e., codewords using the symbols $0$, $1$, and $2$), and prove that it yields optimal ternary codes.\n\n\n\n\nInstead of grouping together the two with lowest frequency into pairs that have the smallest total frequency, we will group together the three with lowest frequency in order to have a final result that is a ternary tree. The analysis of optimality is almost identical to the binary case. We are placing the symbols of lowest frequency lower down in the final tree and so they will have longer codewords than the more frequently occurring symbols.\n\n\n16.3-8\n\n\n\n\nSuppose that a data file contains a sequence of $8$-bit characters such that all $256$ characters are about equally common: the maximum character frequency is less than twice the minimum character frequency. Prove that Huffman coding in this case is no more efficient than using an ordinary $8$-bit fixed-length code.\n\n\n\n\nFor any $2$ characters, the sum of their frequencies exceeds the frequency of any other character, so initially Huffman coding makes $128$ small trees with $2$ leaves each. At the next stage, no internal node has a label which is more than twice that of any other, so we are in the same setup as before. Continuing in this fashion, Huffman coding builds a complete binary tree of height $\\lg 256 = 8$, which is no more efficient than ordinary $8$-bit length codes.\n\n\n16.3-9\n\n\n\n\nShow that no compression scheme can expect to compress a file of randomly chosen 8-bit characters by even a single bit. ($\\textit{Hint:}$ Compare the number of possible files with the number of possible encoded files.)\n\n\n\n\nIf every possible character is equally likely, then, when constructing the Huffman code, we will end up with a complete binary tree of depth $7$. This means that every character, regardless of what it is will be represented using $7$ bits.\n\n\nThis is exactly as many bits as was originally used to represent those characters,\nso the total length of the file will not decrease at all.",
            "title": "16.3 Huffman codes"
        },
        {
            "location": "/Chap16/16.3/#163-1",
            "text": "Explain why, in the proof of Lemma 16.2, if $x.freq = b.freq$, then we must have $a.freq = b.freq = x.freq = y.freq$.   We are given that $x.freq \\le y.freq$ are the two lowest frequencies in order, and that $a.freq \\le b.freq$. Now,  \\begin{array}{rcl}\n            b.freq & =   & x.freq \\\\\n\\Rightarrow a.freq & \\le & x.freq \\\\\n\\Rightarrow a.freq & =   & x.freq & \\text{(since $x.freq$ is the lowest frequency)},\n\\end{array}  and since $y.freq \\le b.freq$,  \\begin{array}{rcl}\n            b.freq & =   & x.freq \\\\\n\\Rightarrow y.freq & \\le & x.freq \\\\\n\\Rightarrow y.freq & =   & x.freq & \\text{(since $x.freq$ is the lowest frequency)}.\n\\end{array}  Thus, if we assume that $x.freq = b.freq$, then we have that each of $a.freq$, $b.freq$, and $y.freq$ equals $x.freq$, and so   $$a.freq = b.freq = x.freq = y.freq.$$",
            "title": "16.3-1"
        },
        {
            "location": "/Chap16/16.3/#163-2",
            "text": "Prove that a binary tree that is not full cannot correspond to an optimal prefix code.   Let $T$ be a binary tree that is not full. $T$ represents a binary prefix code for a file composed of characters from alphabet $C$, where $c \\in C$, $f(c)$ is th number of occurrences of $c$ in the file. The cost of tree $T$, or the number of bits in the encoding, is  $\\sum_{c \\in C} d_T(c) \\cdot f(c)$, where $d_T(c)$ is the depth of character $c$ in tree $T$.  Let $N$ be a node of greatest depth that has exactly one child. If $N$ is the root of $T$, $N$ can be removed and the deepth of each node reduced by one, yielding a tree representing the same alphabet with a lower cost. This mean the original code was not optimal.  Otherwise, let $M$ be the parent of $N$, let $T_1$ be the (possibly non-existent) sibling of $N$, and let $T_2$ be the subtree rooted at the child of $N$. Replace $M$ by $N$, making the children of $N$ the roots of subtrees $T_1$ and $T_2$. If $T_1$ is empty, repeat the process. We have a new prefix code of lower cost, so the original was not optimal.",
            "title": "16.3-2"
        },
        {
            "location": "/Chap16/16.3/#163-3",
            "text": "What is an optimal Huffman code for the following set of frequencies, based on \nthe first 8 Fibonacci numbers?  $$a:1 \\quad b:1 \\quad c:2 \\quad d:3 \\quad e:5 \\quad f:8 \\quad g:13 \\quad h:21$$  Can you generalize your answer to find the optimal code when the frequencies are the first $n$ Fibonacci numbers?   \\begin{array}{c|l}\na & 1111111 \\\\\nb & 1111110 \\\\\nc & 111110 \\\\\nd & 11110 \\\\\ne & 1110 \\\\\nf & 110 \\\\\ng & 10 \\\\\nh & 0\n\\end{array}",
            "title": "16.3-3"
        },
        {
            "location": "/Chap16/16.3/#163-4",
            "text": "Prove that we can also express the total cost of a tree for a code as the sum, over all internal nodes, of the combined frequencies of the two children of the node.   Let tree be a full binary tree with n leaves. Apply induction hypothesis on the number of leaves in $T$. When $n = 2$ (the case $n = 1$ is trivially true), there are two leaves $x$ and $y$ with the same parent $z$, then the cost of $T$ is  \\begin{align}\nB(T) & = f(x) d_T(x) + f(y) d_T(y) \\\\\n     & = f(x) + f(y) & \\text{since $d_T(x) = d_T(y) = 1$}  \\\\\n     & = f(\\text{child}_1\\text{ of }z) + f(\\text{child}_2\\text{ of }z).\n\\end{align}  Thus, the statement of theorem is true. Now suppose $n > 2$ and also suppose that theorem is true for trees on $n - 1$ leaves. \nLet $c_1$ and $c_2$ are two sibling leaves in $T$ such that they have the same parent $p$. Letting $T'$ be the tree obtained by deleting $c_1$ and $c_2$, by induction we know that  \\begin{align}\nB(T) & = \\sum_{\\text{leaves } l'\\in T'} f(l')d_T(l') \\\\\n     & = \\sum_{\\text{internal nodes } i'\\in T'} f(\\text{child}_1\\text{ of }i') + f(\\text{child}_2\\text{ of }i').\n\\end{align}  Using this information, calculates the cost of $T$.  \\begin{align}\nB(T) & = \\sum_{\\text{leaves }l \\in T} f(l)d_T(l) \\\\\n     & = \\sum_{l \\ne c_1, c_2} f(l)d_T(l) + f(c_1)d_T(c_1) - 1 + f(c_2)d_T(c_2) - 1 + f(c_1) + f(c_2) \\\\\n     & = \\sum_{\\text{internal nodes }i'\\in T'} f(\\text{child}_1\\text{ of }i') + f(\\text{child}_2\\text{ of }i') + f(c_1) + f(c_2) \\\\\n     & = \\sum_{\\text{internal nodes }i\\in T} f(\\text{child}_1\\text{ of }i) + f(\\text{child}_1\\text{ of }i).\n\\end{align}  Thus the statement is true.",
            "title": "16.3-4"
        },
        {
            "location": "/Chap16/16.3/#163-5",
            "text": "Prove that if we order the characters in an alphabet so that their frequencies are monotonically decreasing, then there exists an optimal code whose codeword lengths are monotonically increasing.   It were a contradiction to have an optimal tree whose frequencies and codewords were monotonically increasing in the strict sense; since, given $f(x_1) > \\ldots > f(x_n) \\wedge d_T(x_1) > \\cdots > d_T(x_n)$, it follows that (where $n$ is odd):  \\begin{align}\n& f(x_1)d_T(x_1) + \\cdots + f(x_n)d_T(x_n) > f(x_1)d_T(x_n) + \\cdots + f(x_n)d_T(x_1) > 0 \\\\\n& f(x_1)(d_T(x_1) - d_T(x_n)) + \\cdots + f(x_n)(d_T(x_n) - d_T(x_1)) > 0 \\\\\n& f(x_1)(d_T(x_1) - d_T(x_n)) + \\cdots + f(x_{\\lfloor \\frac{n}{2} - 1 \\rfloor})(d_T(x_{\\lfloor \\frac{n}{2} \\rfloor - 1}) - d_T(x_{\\lfloor \\frac{n}{2} \\rfloor + 1})) \\\\\n& > f(x_{\\lfloor \\frac{n}{2} + 1 \\rfloor})(d_T(x_{\\lfloor \\frac{n}{2} \\rfloor - 1}) - d_T(x_{\\lfloor \\frac{n}{2} \\rfloor + 1}))+ \\cdots + f(x_n)(d_T(x_1) - d_T(x_n)).\n\\end{align}  That is, where $i$ and $j$ are the upper and lower median, \nrespectively; and $c_i = d_T(x_i) - d_T(x_{n - i + 1})$:  $$f(x_1)c_1 + \\cdots + f(x_i)c_i > f(x_j)c_i + \\cdots + f(x_n)c_1$$  since  \\begin{align}\nf(x_i) & > f(x_{n - i + 1}) & 1 \\le i \\le \\Big\\lfloor \\frac{n}{2} \\Big\\rfloor.\n\\end{align}",
            "title": "16.3-5"
        },
        {
            "location": "/Chap16/16.3/#163-6",
            "text": "Suppose we have an optimal prefix code on a set $C = {0, 1, \\ldots, n - 1}$ of characters and we wish to transmit this code using as few bits as possible. Show how to represent any optimal prefix code on $C$ using only $2n - 1 + n \\lceil \\lg n \\rceil$ bits. ($\\textit{Hint:}$ Use $2n - 1$ bits to specify the structure of the tree, as discovered by a walk of the tree.)   First observe that any full binary tree has exactly $2n - 1$ nodes. We can encode the structure of our full binary tree by performing a preorder traversal of $T$. \nFor each node that we record in the traversal, write a $0$ if it is an internal node and a $1$ if it is a leaf node. Since we know the tree to be full, this uniquely determines its structure.   Next, note that we can encode any character of $C$ in $\\lceil \\lg n \\rceil$ bits. Since there are $n$ characters, we can encode them in order of appearance in our preorder traversal using ndlg ne bits.",
            "title": "16.3-6"
        },
        {
            "location": "/Chap16/16.3/#163-7",
            "text": "Generalize Huffman's algorithm to ternary codewords (i.e., codewords using the symbols $0$, $1$, and $2$), and prove that it yields optimal ternary codes.   Instead of grouping together the two with lowest frequency into pairs that have the smallest total frequency, we will group together the three with lowest frequency in order to have a final result that is a ternary tree. The analysis of optimality is almost identical to the binary case. We are placing the symbols of lowest frequency lower down in the final tree and so they will have longer codewords than the more frequently occurring symbols.",
            "title": "16.3-7"
        },
        {
            "location": "/Chap16/16.3/#163-8",
            "text": "Suppose that a data file contains a sequence of $8$-bit characters such that all $256$ characters are about equally common: the maximum character frequency is less than twice the minimum character frequency. Prove that Huffman coding in this case is no more efficient than using an ordinary $8$-bit fixed-length code.   For any $2$ characters, the sum of their frequencies exceeds the frequency of any other character, so initially Huffman coding makes $128$ small trees with $2$ leaves each. At the next stage, no internal node has a label which is more than twice that of any other, so we are in the same setup as before. Continuing in this fashion, Huffman coding builds a complete binary tree of height $\\lg 256 = 8$, which is no more efficient than ordinary $8$-bit length codes.",
            "title": "16.3-8"
        },
        {
            "location": "/Chap16/16.3/#163-9",
            "text": "Show that no compression scheme can expect to compress a file of randomly chosen 8-bit characters by even a single bit. ($\\textit{Hint:}$ Compare the number of possible files with the number of possible encoded files.)   If every possible character is equally likely, then, when constructing the Huffman code, we will end up with a complete binary tree of depth $7$. This means that every character, regardless of what it is will be represented using $7$ bits.  This is exactly as many bits as was originally used to represent those characters,\nso the total length of the file will not decrease at all.",
            "title": "16.3-9"
        },
        {
            "location": "/Chap16/16.4/",
            "text": "16.4-1\n\n\n\n\nShow that $(S, I_k)$ is a matroid, where $S$ is any finite set and $I_k$ is the set of all subsets of $S$ of size at most $k$, where $k \\le |S|$.\n\n\n\n\nThe first condition that $S$ is a finite set is a given. To prove the second condition we assume that $k \\ge 0$, this gets us that $\\mathcal I_k$ is nonempty. Also, to prove the hereditary property, suppose $A \\in \\mathcal I_k$ this means that $|A| \\le k$.\nThen, if $B \\subseteq A$, this means that $|B| \\le |A| \\le k$, so $B \\in \\mathcal I_k$. Lastly, we prove the exchange property by letting $A, B \\in \\mathcal I_k$ be such that $|A| < |B|$. Then, we can pick any element $x \\in B \\backslash A$, then,\n\n\n$$|A \\cup {x}| = |A| + 1 \\le |B| \\le k,$$\n\n\nso, we can extend $A$ to $A \\cup \\{x\\} \\in \\mathcal I_k$.\n\n\n16.4-2 $\\star$\n\n\n\n\nGiven an $m \\times n$ matrix $T$ over some field (such as the reals), show that $(S, \\mathcal I)$ is a matroid, where $S$ is the set of columns of $T$ and $A \\in \\mathcal I$ if and only if the columns in $A$ are linearly independent.\n\n\n\n\nWe need to show three things to prove that $(S, \\mathcal I)$ is a matroid:\n\n\n\n\n$S$ is finite. That's because $S$ is the set of $m$ columns of matrix $T$.\n\n\n$\\mathcal I$ is hereditary. That's because if $B \\in \\mathcal I$, then the colums in $B$ are linearly independent. If $A \\subseteq B$, then the columns of $A$ must also be linearly independent, and so $A \\in I$.\n\n\n\n\n$(S, \\mathcal I)$ satisfies the exchange property. To see why, let us suppose that $A, B \\in \\mathcal I$ and $|A| < |B|$.\n    We will use the following properties of matrices:\n\n\n\n\nThe rank of a matrix is the number of columns in a maximal set of linearly independent columns. The rank is also equal to the dimension of the column space of the matrix.\n\n\nIf the column space of matrix $B$ is a subspace of the column space of matrix $A$, then $\\text{rank}(B) \\le \\text{rank}(A)$.\n\n\n\n\nBecause the columns in $A$ are linearly independent, if we take just these columns as a matrix $A$, we have that $\\text{rank}(A) = |A|$. Similarly, if we take the columns of $B$ as a matrix $B$, we have $\\text{rank}(B) = |B|$. Since $|A| < |B|$, we have $\\text{rank}(A) < \\text{rank}(B)$.\n\n\nWe shall show that there is some column $b \\in B$ that is not a linear combination of the columns in $A$, and so $A \\cup \\{b\\}$ is linearly independent. The proof proceeds by contradiction. Assume that each column in $B$ is a linear combination of the columns of $A$. That means that any vector that is a linear combination of the columns of $B$ is also a linear combination of the columns of $A$, and so, treating the columns of $A$ and $B$ as matrices, the column space of $B$ is a subspace of the column space of $A$. By the second property above, we have $\\text{rank}(B) \\le \\text{rank}(A)$. But we have already shown that $\\text{rank}(A) < \\text{rank}(B)$ a contradiction. Therefore, some column in $B$ is not a linear combination of the columns of $A$, and $(S, \\mathcal I)$ satisfies the exchange property.\n\n\n\n\n\n\n16.4-3 $\\star$\n\n\n\n\nShow that if $(S, \\mathcal I)$ is a matroid, then $(S, \\mathcal I')$ is a matroid, where\n\n\n$I' = \\{A': S - A'$ contains some maximal $A \\in \\mathcal I\\}$.\n\n\nThat is, the maximal independent sets of $(S, \\mathcal I')$ are just the complements of the maximal independent sets of $(S, \\mathcal I)$.\n\n\n\n\n[This exercise defines what is commonly known as the dual of a matroid, and it asks to prove that the dual of a matroid is itself a matroid. The literature contains simpler proofs of this fact, but they depend on other (equivalent) definitions of a matroid. The proof given here is more complicated, but it relies only on the definition given in the text.]\n\n\nWe need to show three things to prove that $(S, \\mathcal I')$ is a matroid:\n\n\n\n\n$S$ is finite. We are given that.\n\n\n$\\mathcal I'$ is hereditary. Suppose that $B' \\in \\mathcal I'$ and $A' \\subseteq B'$ . Since $B' \\in \\mathcal I'$, there is some maximal set $B \\in \\mathcal I$ such that $B \\subseteq S - B'$ . But $A' \\subseteq B'$ implies that $S - B' \\subseteq S - A'$, and so $B \\subseteq S - B' \\subseteq S - A'$. Thus, there exists a maximal set $B \\in \\mathcal I$ such that $B \\subseteq S - A'$, proving that $A' \\in \\mathcal I'$.\n\n\n$(S, \\mathcal I')$ satisfies the exchange property. We start with two preliminary facts about sets. The proofs of these facts are omitted.\n\n\nFact 1:\n $|X - Y| = |X| - |X \\cap Y|$.\n\n\nFact 2:\n Let $S$ be the universe of elements. If $X - Y \\subseteq Z$ and $Z \\subseteq S - Y$, then $|X \\cap Z| = |X| - |X \\cap Y|$.\n\n\n\n\n\n\n\n\nTo show that $(S, \\mathcal I')$ satisfies the exchange property, let us assume that $A' \\in \\mathcal I', B' \\in \\mathcal I'$, and that $|A'| < |B'|$. We need to show that there exists some $x \\in B' - A'$ such that $A' \\cup \\{x\\} \\in \\mathcal I'$. Because $A' \\in \\mathcal I'$ and $B' \\in \\mathcal I'$, there are maximal sets $A \\subseteq S - A'$ and $B \\subseteq S - B'$ such that $A \\in \\mathcal I$ and $B \\in \\mathcal I$.\n\n\nDefine the set $X = B' - A' - A$, so that $X$ consists of elements in $B'$ but not in $A'$ or $A$.\n\n\nIf $X$ is nonempty, then let $x$ be any element of $X$. By how we defined set $X$, we know that $x \\in B'$ and $x \\notin A'$, so that $x \\in B' - A'$. Since $x \\notin A$, we also have that $A \\subseteq S - A' - \\{x\\} = S - (A' \\cup \\{x\\})$, and so $A' \\cup \\{x\\} \\in \\mathcal I'$.\n\n\nIf $X$ is empty, the situation is more complicated. Because$|A'| < |B'|$, we have that $B' - A' \\ne \\emptyset$, and so $X$ being empty means that $B' - A' \\subseteq A$.\n\n\nClaim\n\n\nThere is an element $y \\in B - A'$ such that $(A - B') \\cup \\{y\\} \\in \\mathcal I$.\n\n\nProof\n\n\nFirst, observe that because $A - B' \\subseteq A$ and $A \\in \\mathcal I$, we have that $A - B' \\in \\mathcal I$. Similarly, $B - A' \\subseteq B$ and $B \\in \\mathcal I$, and so $B - A' \\in \\mathcal I$. If we show that $|A - B'| < |B - A'|$, the assumption that $(S, \\mathcal I)$ is a matroid proves the existence of $y$.\n\n\nBecause $B' - A' \\subseteq A$ and $A \\subseteq S - A'$, we can apply Fact 2 to conclude that $|B' \\cap A| = |B'| - |B' \\cap A'|$. We claim that $|B \\cap A'| \\le |A' - B'|$. To see why, observe that $A' - B' = A' \\cap (S - B')$ and $B \\subseteq S - B'$, and so $B \\cap A' \\subseteq (S - B') \\cap A' = A' \\cap (S - B') = A' - B'$. Applying Fact 1, we see that $|A' - B'| = |A'| - |A' \\cap B'| = |A'| - |B' \\cap A'|$, and hence $|B \\cap A'| \\le |A'| - |B' \\cap A'|$.\n\nNow, we have\n\n\n\\begin{align}\n              |A'| & < |B'|                & \\text{(by assumption)} \\\\\n|A'| - |B'\\cap A'| & < |B'| - |B' \\cap A'| & \\text{(subtracting same quantity)} \\\\\n       |B \\cap A'| & < |B'| - |B' \\cap A'| & (|B \\cap A'| \\le |A'| - |B' \\cap A'|) \\\\\n       |B \\cap A'| & < |B' \\cap A|         & (|B' \\cap A| = |B'| - |B' \\cap A'|) \\\\\n |B| - |B \\cap A'| & > |A| - |B' \\cap A|   & (|A| = |B|) \\\\\n          |B - A'| & > |A - B'|            & \\text{(Fact 1)} \\\\\n\\end{align}\n\n\nNow we know there is an element $y \\in B - A'$ such that $(A - B') \\cup \\{y\\} \\in \\mathcal I$. Moreover, we claim that $y \\notin A$. To see why, we know that by the exchange property, $y \\notin A - B'$. In order for $y$ to be in $A$, it would have to be in $A \\cap B'$. But $y \\in B$, which means that $y \\notin B'$, and hence $y \\notin A \\cap B'$. Therefore $y \\notin A$.\n\n\nApplying the exchange property, we add elements in $B - A'$ to $A - B'$, maintaining that the set we get, say $C$, is in $\\mathcal I$. Then we keep applying the exchange property, adding a new element in $A - C$ to $C$, maintaining that $C$ is in $\\mathcal I$, until $|C| = |A|$. Once $|C| = |A|$, there must exist some element $x \\in A$ that we have not added into $C$. We know that such an element exists because the element $y$ that we first added into $C$ was not in $A$, and so some element $x$ in $A$ must be left over. Also, we must have $x \\in B'$ because all the elements in $A - B'$ are initially in $C$. Therefore, we have $x \\in B' - A'$.\n\n\nThe set $C$ so constructed is maximal, because it has the same cardinality as $A$, which is maximal, and $C \\in \\mathcal I$. All the elements but one in $C$ are also in $A$; the one exceptions is in $B - A'$, and so $C$ contains no elements in $A'$. Because we never added $x$ to $C$, we have that $C \\subseteq S - A' - \\{x\\} = S - (A' \\cup \\{x\\})$. Therefore, $A' \\cup \\{x\\} \\in \\mathcal I'$, as we needed to show.\n\n\n16.4-4 $\\star$\n\n\n\n\nLet $S$ be a finite set and let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into nonempty disjoint subsets. Define the structure $(S, I)$ by the condition that $\\mathcal I = \\{A: \\mid A \\cap S_i \\mid \\le 1$ for $i = 1, 2, \\ldots, k\\}$. Show that $(S, \\mathcal I)$ is a matroid. That is, the set of all sets $A$ that contain at most one member of each subset in the partition determines the independent sets of a matroid.\n\n\n\n\nSuppose $X \\subset Y$ and $Y \\in \\mathcal I$. Then $(X \\cap S_i) \\subset (Y \\cap S_i)$ for all $i$, so\n\n\n$$|X \\cap S_i| \\le |Y \\cap S_i| \\le 1$$\n\n\nfor all $1 \\le i \\le k$. Therefore $\\mathcal M$ is closed under inclusion.\n\n\nNow Let $A, B \\in \\mathcal I$ with $|A| = |B| + 1$. Then there must exist some $j$ such that $|A \\cap S_j| = 1$ but $|B \\cap S_j| = 0$. Let $a = A \\cap S_j$. Then $a \\ne B$ and $|(B \\cup \\{a\\}) \\cap S_j| = 1$. Since\n\n\n$$|(B \\cup {a}) \\cap S_i| = |B \\cap S_i|$$\n\n\nfor all $i \\ne j$, we must have $B \\cup \\{a\\} \\in \\mathcal I$. Therefore $\\mathcal M$ is a matroid.\n\n\n16.4-5\n\n\n\n\nShow how to transform the weight function of a weighted matroid problem, where the desired optimal solution is a \nminimum-weight\n maximal independent subset, to make it a standard weighted-matroid problem. Argue carefully that your transformation is correct.\n\n\n\n\nSuppose that $W$ is the largest weight that any one element takes. Then, define the new weight function $w_2(x) = 1 + W - w(x)$. This then assigns a strictly positive weight, and we will show that any independent set that that has maximum weight with respect to $w_2$ will have minimum weight with respect to $w$.\n\n\nRecall Theorem 16.6 since we will be using it, suppose that for our matriod, all maximal independent sets have size $S$. Then, suppose $M_1$ and $M_2$ are maximal independent sets so that $M_1$ is maximal with respect to $w_2$ and $M_2$ is minimal with respect to $w$. Then, we need to show that $w(M_1) = w(M_2)$. Suppose not to achieve a contradiction, then, by minimality of $M_2$, $w(M_1) > w(M_2)$.\n\n\nRewriting both sides in terms of $w_2$, we have\n\n\n$$w_2(M_2) - (1 + W)S > w_2(M_1) - (1 + W)S,$$\n\n\nso,\n\n\n$$w_2(M_2) > w_2(M_1).$$\n\n\nThis however contradicts maximality of $M_1$ with respect to $w_2$. So, we must have that $w(M_1) = w(M_2)$. So, a maximal independent set that has the largest weight with respect to $w_2$ also has the smallest weight with respect to $w$.",
            "title": "16.4 Matroids and greedy methods"
        },
        {
            "location": "/Chap16/16.4/#164-1",
            "text": "Show that $(S, I_k)$ is a matroid, where $S$ is any finite set and $I_k$ is the set of all subsets of $S$ of size at most $k$, where $k \\le |S|$.   The first condition that $S$ is a finite set is a given. To prove the second condition we assume that $k \\ge 0$, this gets us that $\\mathcal I_k$ is nonempty. Also, to prove the hereditary property, suppose $A \\in \\mathcal I_k$ this means that $|A| \\le k$.\nThen, if $B \\subseteq A$, this means that $|B| \\le |A| \\le k$, so $B \\in \\mathcal I_k$. Lastly, we prove the exchange property by letting $A, B \\in \\mathcal I_k$ be such that $|A| < |B|$. Then, we can pick any element $x \\in B \\backslash A$, then,  $$|A \\cup {x}| = |A| + 1 \\le |B| \\le k,$$  so, we can extend $A$ to $A \\cup \\{x\\} \\in \\mathcal I_k$.",
            "title": "16.4-1"
        },
        {
            "location": "/Chap16/16.4/#164-2-star",
            "text": "Given an $m \\times n$ matrix $T$ over some field (such as the reals), show that $(S, \\mathcal I)$ is a matroid, where $S$ is the set of columns of $T$ and $A \\in \\mathcal I$ if and only if the columns in $A$ are linearly independent.   We need to show three things to prove that $(S, \\mathcal I)$ is a matroid:   $S$ is finite. That's because $S$ is the set of $m$ columns of matrix $T$.  $\\mathcal I$ is hereditary. That's because if $B \\in \\mathcal I$, then the colums in $B$ are linearly independent. If $A \\subseteq B$, then the columns of $A$ must also be linearly independent, and so $A \\in I$.   $(S, \\mathcal I)$ satisfies the exchange property. To see why, let us suppose that $A, B \\in \\mathcal I$ and $|A| < |B|$.\n    We will use the following properties of matrices:   The rank of a matrix is the number of columns in a maximal set of linearly independent columns. The rank is also equal to the dimension of the column space of the matrix.  If the column space of matrix $B$ is a subspace of the column space of matrix $A$, then $\\text{rank}(B) \\le \\text{rank}(A)$.   Because the columns in $A$ are linearly independent, if we take just these columns as a matrix $A$, we have that $\\text{rank}(A) = |A|$. Similarly, if we take the columns of $B$ as a matrix $B$, we have $\\text{rank}(B) = |B|$. Since $|A| < |B|$, we have $\\text{rank}(A) < \\text{rank}(B)$.  We shall show that there is some column $b \\in B$ that is not a linear combination of the columns in $A$, and so $A \\cup \\{b\\}$ is linearly independent. The proof proceeds by contradiction. Assume that each column in $B$ is a linear combination of the columns of $A$. That means that any vector that is a linear combination of the columns of $B$ is also a linear combination of the columns of $A$, and so, treating the columns of $A$ and $B$ as matrices, the column space of $B$ is a subspace of the column space of $A$. By the second property above, we have $\\text{rank}(B) \\le \\text{rank}(A)$. But we have already shown that $\\text{rank}(A) < \\text{rank}(B)$ a contradiction. Therefore, some column in $B$ is not a linear combination of the columns of $A$, and $(S, \\mathcal I)$ satisfies the exchange property.",
            "title": "16.4-2 $\\star$"
        },
        {
            "location": "/Chap16/16.4/#164-3-star",
            "text": "Show that if $(S, \\mathcal I)$ is a matroid, then $(S, \\mathcal I')$ is a matroid, where  $I' = \\{A': S - A'$ contains some maximal $A \\in \\mathcal I\\}$.  That is, the maximal independent sets of $(S, \\mathcal I')$ are just the complements of the maximal independent sets of $(S, \\mathcal I)$.   [This exercise defines what is commonly known as the dual of a matroid, and it asks to prove that the dual of a matroid is itself a matroid. The literature contains simpler proofs of this fact, but they depend on other (equivalent) definitions of a matroid. The proof given here is more complicated, but it relies only on the definition given in the text.]  We need to show three things to prove that $(S, \\mathcal I')$ is a matroid:   $S$ is finite. We are given that.  $\\mathcal I'$ is hereditary. Suppose that $B' \\in \\mathcal I'$ and $A' \\subseteq B'$ . Since $B' \\in \\mathcal I'$, there is some maximal set $B \\in \\mathcal I$ such that $B \\subseteq S - B'$ . But $A' \\subseteq B'$ implies that $S - B' \\subseteq S - A'$, and so $B \\subseteq S - B' \\subseteq S - A'$. Thus, there exists a maximal set $B \\in \\mathcal I$ such that $B \\subseteq S - A'$, proving that $A' \\in \\mathcal I'$.  $(S, \\mathcal I')$ satisfies the exchange property. We start with two preliminary facts about sets. The proofs of these facts are omitted.  Fact 1:  $|X - Y| = |X| - |X \\cap Y|$.  Fact 2:  Let $S$ be the universe of elements. If $X - Y \\subseteq Z$ and $Z \\subseteq S - Y$, then $|X \\cap Z| = |X| - |X \\cap Y|$.     To show that $(S, \\mathcal I')$ satisfies the exchange property, let us assume that $A' \\in \\mathcal I', B' \\in \\mathcal I'$, and that $|A'| < |B'|$. We need to show that there exists some $x \\in B' - A'$ such that $A' \\cup \\{x\\} \\in \\mathcal I'$. Because $A' \\in \\mathcal I'$ and $B' \\in \\mathcal I'$, there are maximal sets $A \\subseteq S - A'$ and $B \\subseteq S - B'$ such that $A \\in \\mathcal I$ and $B \\in \\mathcal I$.  Define the set $X = B' - A' - A$, so that $X$ consists of elements in $B'$ but not in $A'$ or $A$.  If $X$ is nonempty, then let $x$ be any element of $X$. By how we defined set $X$, we know that $x \\in B'$ and $x \\notin A'$, so that $x \\in B' - A'$. Since $x \\notin A$, we also have that $A \\subseteq S - A' - \\{x\\} = S - (A' \\cup \\{x\\})$, and so $A' \\cup \\{x\\} \\in \\mathcal I'$.  If $X$ is empty, the situation is more complicated. Because$|A'| < |B'|$, we have that $B' - A' \\ne \\emptyset$, and so $X$ being empty means that $B' - A' \\subseteq A$.  Claim  There is an element $y \\in B - A'$ such that $(A - B') \\cup \\{y\\} \\in \\mathcal I$.  Proof  First, observe that because $A - B' \\subseteq A$ and $A \\in \\mathcal I$, we have that $A - B' \\in \\mathcal I$. Similarly, $B - A' \\subseteq B$ and $B \\in \\mathcal I$, and so $B - A' \\in \\mathcal I$. If we show that $|A - B'| < |B - A'|$, the assumption that $(S, \\mathcal I)$ is a matroid proves the existence of $y$.  Because $B' - A' \\subseteq A$ and $A \\subseteq S - A'$, we can apply Fact 2 to conclude that $|B' \\cap A| = |B'| - |B' \\cap A'|$. We claim that $|B \\cap A'| \\le |A' - B'|$. To see why, observe that $A' - B' = A' \\cap (S - B')$ and $B \\subseteq S - B'$, and so $B \\cap A' \\subseteq (S - B') \\cap A' = A' \\cap (S - B') = A' - B'$. Applying Fact 1, we see that $|A' - B'| = |A'| - |A' \\cap B'| = |A'| - |B' \\cap A'|$, and hence $|B \\cap A'| \\le |A'| - |B' \\cap A'|$. \nNow, we have  \\begin{align}\n              |A'| & < |B'|                & \\text{(by assumption)} \\\\\n|A'| - |B'\\cap A'| & < |B'| - |B' \\cap A'| & \\text{(subtracting same quantity)} \\\\\n       |B \\cap A'| & < |B'| - |B' \\cap A'| & (|B \\cap A'| \\le |A'| - |B' \\cap A'|) \\\\\n       |B \\cap A'| & < |B' \\cap A|         & (|B' \\cap A| = |B'| - |B' \\cap A'|) \\\\\n |B| - |B \\cap A'| & > |A| - |B' \\cap A|   & (|A| = |B|) \\\\\n          |B - A'| & > |A - B'|            & \\text{(Fact 1)} \\\\\n\\end{align}  Now we know there is an element $y \\in B - A'$ such that $(A - B') \\cup \\{y\\} \\in \\mathcal I$. Moreover, we claim that $y \\notin A$. To see why, we know that by the exchange property, $y \\notin A - B'$. In order for $y$ to be in $A$, it would have to be in $A \\cap B'$. But $y \\in B$, which means that $y \\notin B'$, and hence $y \\notin A \\cap B'$. Therefore $y \\notin A$.  Applying the exchange property, we add elements in $B - A'$ to $A - B'$, maintaining that the set we get, say $C$, is in $\\mathcal I$. Then we keep applying the exchange property, adding a new element in $A - C$ to $C$, maintaining that $C$ is in $\\mathcal I$, until $|C| = |A|$. Once $|C| = |A|$, there must exist some element $x \\in A$ that we have not added into $C$. We know that such an element exists because the element $y$ that we first added into $C$ was not in $A$, and so some element $x$ in $A$ must be left over. Also, we must have $x \\in B'$ because all the elements in $A - B'$ are initially in $C$. Therefore, we have $x \\in B' - A'$.  The set $C$ so constructed is maximal, because it has the same cardinality as $A$, which is maximal, and $C \\in \\mathcal I$. All the elements but one in $C$ are also in $A$; the one exceptions is in $B - A'$, and so $C$ contains no elements in $A'$. Because we never added $x$ to $C$, we have that $C \\subseteq S - A' - \\{x\\} = S - (A' \\cup \\{x\\})$. Therefore, $A' \\cup \\{x\\} \\in \\mathcal I'$, as we needed to show.",
            "title": "16.4-3 $\\star$"
        },
        {
            "location": "/Chap16/16.4/#164-4-star",
            "text": "Let $S$ be a finite set and let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into nonempty disjoint subsets. Define the structure $(S, I)$ by the condition that $\\mathcal I = \\{A: \\mid A \\cap S_i \\mid \\le 1$ for $i = 1, 2, \\ldots, k\\}$. Show that $(S, \\mathcal I)$ is a matroid. That is, the set of all sets $A$ that contain at most one member of each subset in the partition determines the independent sets of a matroid.   Suppose $X \\subset Y$ and $Y \\in \\mathcal I$. Then $(X \\cap S_i) \\subset (Y \\cap S_i)$ for all $i$, so  $$|X \\cap S_i| \\le |Y \\cap S_i| \\le 1$$  for all $1 \\le i \\le k$. Therefore $\\mathcal M$ is closed under inclusion.  Now Let $A, B \\in \\mathcal I$ with $|A| = |B| + 1$. Then there must exist some $j$ such that $|A \\cap S_j| = 1$ but $|B \\cap S_j| = 0$. Let $a = A \\cap S_j$. Then $a \\ne B$ and $|(B \\cup \\{a\\}) \\cap S_j| = 1$. Since  $$|(B \\cup {a}) \\cap S_i| = |B \\cap S_i|$$  for all $i \\ne j$, we must have $B \\cup \\{a\\} \\in \\mathcal I$. Therefore $\\mathcal M$ is a matroid.",
            "title": "16.4-4 $\\star$"
        },
        {
            "location": "/Chap16/16.4/#164-5",
            "text": "Show how to transform the weight function of a weighted matroid problem, where the desired optimal solution is a  minimum-weight  maximal independent subset, to make it a standard weighted-matroid problem. Argue carefully that your transformation is correct.   Suppose that $W$ is the largest weight that any one element takes. Then, define the new weight function $w_2(x) = 1 + W - w(x)$. This then assigns a strictly positive weight, and we will show that any independent set that that has maximum weight with respect to $w_2$ will have minimum weight with respect to $w$.  Recall Theorem 16.6 since we will be using it, suppose that for our matriod, all maximal independent sets have size $S$. Then, suppose $M_1$ and $M_2$ are maximal independent sets so that $M_1$ is maximal with respect to $w_2$ and $M_2$ is minimal with respect to $w$. Then, we need to show that $w(M_1) = w(M_2)$. Suppose not to achieve a contradiction, then, by minimality of $M_2$, $w(M_1) > w(M_2)$.  Rewriting both sides in terms of $w_2$, we have  $$w_2(M_2) - (1 + W)S > w_2(M_1) - (1 + W)S,$$  so,  $$w_2(M_2) > w_2(M_1).$$  This however contradicts maximality of $M_1$ with respect to $w_2$. So, we must have that $w(M_1) = w(M_2)$. So, a maximal independent set that has the largest weight with respect to $w_2$ also has the smallest weight with respect to $w$.",
            "title": "16.4-5"
        },
        {
            "location": "/Chap16/16.5/",
            "text": "16.5-1\n\n\n\n\nSolve the instance of the scheduling problem given in Figure 16.7, but with each penalty $w_i$ replaced by $80 - wi$.\n\n\n\n\n\\begin{array}{c|ccccccc}\na_i &  1 &  2 &  3 &  4 &  5 &  6 &  7 \\\\\n\\hline\nd_i &  4 &  2 &  4 &  3 &  1 &  4 &  6 \\\\\nw_i & 10 & 20 & 30 & 40 & 50 & 60 & 70\n\\end{array}\n\n\nWe begin by just greedily constructing the matroid, adding the most costly to leave incomplete tasks first. So, we add tasks $7, 6, 5, 4, 3$. Then, in order to schedule tasks $1$ or $2$ we need to leave incomplete more important tasks. So, our final schedule is $\\langle 5, 3, 4, 6, 7, 1, 2 \\rangle$ to have a total penalty of only $w_1 + w_2 = 30$.\n\n\n16.5-2\n\n\n\n\nShow how to use property 2 of Lemma 16.12 to determine in time $O(|A|)$ whether or not a given set $A$ of tasks is independent.\n\n\n\n\nCreate an array $B$ of length $n$ containing zeros in each entry. For each element $a \\in A$, add $1$ to $B[a.deadline]$. If $B[a.deadline] > a.deadline$, return that the set is not independent. Otherwise, continue. If successfully examine every element of $A$, return that the set is independent.",
            "title": "16.5 A task-scheduling problem as a matroid"
        },
        {
            "location": "/Chap16/16.5/#165-1",
            "text": "Solve the instance of the scheduling problem given in Figure 16.7, but with each penalty $w_i$ replaced by $80 - wi$.   \\begin{array}{c|ccccccc}\na_i &  1 &  2 &  3 &  4 &  5 &  6 &  7 \\\\\n\\hline\nd_i &  4 &  2 &  4 &  3 &  1 &  4 &  6 \\\\\nw_i & 10 & 20 & 30 & 40 & 50 & 60 & 70\n\\end{array}  We begin by just greedily constructing the matroid, adding the most costly to leave incomplete tasks first. So, we add tasks $7, 6, 5, 4, 3$. Then, in order to schedule tasks $1$ or $2$ we need to leave incomplete more important tasks. So, our final schedule is $\\langle 5, 3, 4, 6, 7, 1, 2 \\rangle$ to have a total penalty of only $w_1 + w_2 = 30$.",
            "title": "16.5-1"
        },
        {
            "location": "/Chap16/16.5/#165-2",
            "text": "Show how to use property 2 of Lemma 16.12 to determine in time $O(|A|)$ whether or not a given set $A$ of tasks is independent.   Create an array $B$ of length $n$ containing zeros in each entry. For each element $a \\in A$, add $1$ to $B[a.deadline]$. If $B[a.deadline] > a.deadline$, return that the set is not independent. Otherwise, continue. If successfully examine every element of $A$, return that the set is independent.",
            "title": "16.5-2"
        },
        {
            "location": "/Chap16/Problems/16-1/",
            "text": "Consider the problem of making change for $n$ cents using the fewest number of coins. Assume that each coin's value is an integer.\n\n\na.\n Describe a greedy algorithm to make change consisting of quarters, dimes, nickels, and pennies. Prove that your algorithm yields an optimal solution.\n\n\nb.\n Suppose that the available coins are in the denominations that are powers of $c$, i.e., the denominations are $c^0, c^1, \\ldots, c^k$ for some integers $c > 1$ and $k \\ge 1$. Show that the greedy algorithm always yields an optimal solution.\n\n\nc.\n Give a set of coin denominations for which the greedy algorithm does not yield an optimal solution. Your set should include a penny so that there is a solution for every value of $n$.\n\n\nd.\n Give an $O(nk)$-time algorithm that makes change for any set of $k$ different coin denominations, assuming that one of the coins is a penny.\n\n\n\n\nBefore we go into the various parts of this problem, let us first prove once and for all that the coin-changing problem has optimal substructure.\n\n\nSuppose we have an optimal solution for a problem of making change for $n$ cents, and we know that this optimal solution uses a coin whose value is $c$ cents; let this optimal solution use $k$ coins. We claim that this optimal solution for the problem of $n$ cents must contain within it an optimal solution for the problem of $n - c$ cents. We use the usual cut-and-paste argument. Clearly, there are $k - 1$ coins in the solution to the $n - c$ cents problem used within our optimal solution to the $n$ cents problem. If we had a solution to the $n - c$ cents problem that used fewer than $k - 1$ coins, then we could use this solution to produce a solution to the $n$ cents problem that uses fewer than $k$ coins, which contradicts the optimality of our solution.\n\n\na.\n A greedy algorithm to make change using quarters, dimes, nickels, and pennies works as follows:\n\n\n\n\nGive $q = \\lfloor n / 25 \\rfloor$ quarters. That leaves $n_q = n \\mod 25$ cents to make change.\n\n\nThen give $d = \\lfloor n_q / 10 \\rfloor$ dimes. That leaves $n_d = n_q \\mod 10$ cents to make change.\n\n\nThen give $k = \\lfloor n_d / 5 \\rfloor$ nickels. That leaves $n_k = n_d \\mod 5$ cents to make change.\n\n\nFinally, give $p = n_k$ pennies.\n\n\n\n\nAn equivalent formulation is the following. The problem we wish to solve is making change for $n$ cents. If $n = 0$, the optimal solution is to give no coins. If $n > 0$, determine the largest coin whose value is less than or equal to $n$. Let this coin have value $c$. Give one such coin, and then recursively solve the subproblem of making change for $n - c$ cents.\n\n\nTo prove that this algorithm yields an optimal solution, we first need to show that the greedy-choice property holds, that is, that some optimal solution to making change for $n$ cents includes one coin of value $c$, where $c$ is the largest coin value such that $c \\le n$. Consider some optimal solution. If this optimal solution includes a coin of value $c$, then we are done. Otherwise, this optimal solution does not include a coin of value $c$. We have four cases to consider:\n\n\n\n\nIf $1 \\le n < 5$, then $c = 1$. A solution may consist only of pennies, and so it must contain the greedy choice.\n\n\nIf $5 \\le n < 10$, then $c = 5$. By supposition, this optimal solution does not contain a nickel, and so it consists of only pennies. Replace five pennies by one nickel to give a solution with four fewer coins.\n\n\nIf $10 \\le n < 25$, then $c = 10$. By supposition, this optimal solution does not contain a dime, and so it contains only nickels and pennies. Some subset of the nickels and pennies in this solution adds up to $10$ cents, and so we can replace these nickels and pennies by a dime to give a solution with (between $1$ and $9$) fewer coins.\n\n\nIf $25 \\le n$, then $c = 25$. By supposition, this optimal solution does not contain a quarter, and so it contains only dimes, nickels, and pennies. If it contains three dimes, we can replace these three dimes by a quarter and a nickel, giving a solution with one fewer coin. If it contains at most two dimes, then some subset of the dimes, nickels, and pennies adds up to $25$ cents, and so we can replace these coins by one quarter to give a solution with fewer coins.\n\n\n\n\nThus, we have shown that there is always an optimal solution that includes the greedy choice, and that we can combine the greedy choice with an optimal solution to the remaining subproblem to produce an optimal solution to our original problem. Therefore, the greedy algorithm produces an optimal solution.\n\n\nFor the algorithm that chooses one coin at a time and then recurses on subproblems, the running time is $\\Theta(k)$, where $k$ is the number of coins used in an optimal solution. Since $k \\le n$, the running time is $O(n)$. For our first description of the algorithm, we perform a constant number of calculations (since there are only $4$ coin types), and the running time is $O(1)$.\n\n\nb.\n When the coin denominations are $c^0, c^1, \\ldots, c^k$, the greedy algorithm to make change for $n$ cents works by finding the denomination $c^j$ such that $j = \\max \\{0 \\le i \\le k: c^i \\le n\\}$, giving one coin of denomination $c^j$, and recursing on the subproblem of making change for $n - c^j$ cents. (An equivalent, but more efficient, algorithm is to give $\\lfloor n / c^k \\rfloor$ coins of denomination $c^k$ and $\\lfloor (n \\mod c^{i + 1}) / c^i \\rfloor$ coins of denomination $c^i$ for $i = 0, 1, \\ldots, k - 1$.)\n\n\nTo show that the greedy algorithm produces an optimal solution, we start by proving the following lemma:\n\n\nLemma\n\n\nFor $i = 0, 1, \\ldots, k$, let $a_i$ be the number of coins of denomination $c^i$ used in an optimal solution to the problem of making change for $n$ cents. Then for $i = 0, 1, \\ldots, k - 1$, we have $a_i < c$.\n\n\nProof\n \n\n\nIf $a_i \\ge c$ for some $0 \\le i < k$, then we can improve the solution by using one more coin of denomination $c^{i + 1}$ and $c$ fewer coins of denomination $c^i$. The amount for which we make change remains the same, but we use $c - 1 > 0$ fewer coins.\n\n\nTo show that the greedy solution is optimal, we show that any non-greedy solution is not optimal. As above, let $j = \\max\\{0 \\le i \\le k: c^i \\le n\\}$, so that the greedy solution uses at least one coin of denomination $c^j$. Consider a nongreedy solution, which must use no coins of denomination $c^j$ or higher. Let the non-greedy solution use $a_i$ coins of denomination $c^i$, for $i = 0, 1, \\ldots, j - 1$; thus we have $\\sum_{i = 0}^{j - 1} a_i c^i = n$. Since $n \\ge c^j$, we have that $\\sum_{i = 0}^{j - 1} a_i c^i \\ge c^j$.. Now suppose that the non-greedy solution is optimal. By the above lemma, $a_i \\le c - 1$ for $i = 0, 1, \\ldots, j - 1$. Thus,\n\n\n\\begin{align}\n\\sum_{i = 0}^{j - 1} a_i c^i\n    & \\le \\sum_{i = 0}^{j - 1} (c - 1) c^i \\\\\n    & =   (c - 1) \\sum_{i = 0}^{j - 1} c^i \\\\\n    & =   (c - 1) \\frac{c^j - 1}{c - 1} \\\\\n    & =   c^j - 1 \\\\\n    & <   c^j,\n\\end{align}\n\n\nwhich contradicts our earlier assertion that $\\sum_{i = 0}^{j - 1} a_i c^i \\ge c^j$. We conclude that the non-greedy solution is not optimal.\n\n\nSince any algorithm that does not produce the greedy solution fails to be optimal, only the greedy algorithm produces the optimal solution.\n\n\nThe problem did not ask for the running time, but for the more efficient greedy algorithm formulation, it is easy to see that the running time is $O(k)$, since we have to perform at most $k$ each of the division, \ufb02oor, and mod operations.\n\n\nc.\n With actual U.S. coins, we can use coins of denomination $1$, $10$, and $25$. When $n = 30$ cents, the greedy solution gives one quarter and five pennies, for a total of six coins. The non-greedy solution of three dimes is better.\n\n\nThe smallest integer numbers we can use are $1$, $3$, and $4$. When $n = 6$ cents, the greedy solution gives one $4$-cent coin and two $1$-cent coins, for a total of three coins. The non-greedy solution of two $3$-cent coins is better.\n\n\nd.\n Since we have optimal substructure, dynamic programming might apply. And indeed it does.\n\n\nLet us define $c[j]$\u008d to be the minimum number of coins we need to make change for $j$ cents. Let the coin denominations be $d_1, d_2, \\ldots, d_k$. Since one of the coins is a penny, there is a way to make change for any amount $j \\ge 1$.\n\n\nBecause of the optimal substructure, if we knew that an optimal solution for the problem of making change for $j$ cents used a coin of denomination $d_i$, we would have $c[j]\u008d = 1 + c[j - d_i]$.\u008d As base cases, we have that $c[j] = 0$ for all $j \\le 0$.\n\n\nTo develop a recursive formulation, we have to check all denominations, giving\n\n\nc[j] =\n\\begin{cases}\n0                                            & \\text{if $j \\le 0$}, \\\\\n1 + \\min\\limits_{1 \\le i \\le k} {c[j - d_i]} & \\text{if $j > 1$}.\n\\end{cases}\n\n\nWe can compute the $c[j]$\u008d values in order of increasing $j$ by using a table. The following procedure does so, producing a table $c[1..n]$\u008d. It avoids even examining $c[j]$\u008d for $j \\le 0$ by ensuring that $j \\ge d_i$ before looking up $c[j - d_i]$\u008d. The procedure also produces a table $denom[1..n]$, where $denom[j]$ is the denomination of a coin used in an optimal solution to the problem of making change for $j$ cents.\n\n\nCOMPUTE\n-\nCHANGE\n(\nn\n,\n \nd\n,\n \nk\n)\n\n    \nlet\n \nc\n[\n1.\n.\nn\n]\n \nand\n \ndenom\n[\n1.\n.\nn\n]\n \nbe\n \nnew\n \narrays\n\n    \nfor\n \nj\n \n=\n \n1\n \nto\n \nn\n\n        \nc\n[\nj\n]\n \n=\n \n\u221e\n\n        \nfor\n \ni\n \n=\n \n1\n \nto\n \nk\n\n            \nif\n \nj\n \n\u2265\n \ndi\n \nand\n \n1\n \n+\n \nc\n[\nj\n \n-\n \ndi\n]\n \n<\n \nc\n[\nj\n]\n\n                \nc\n[\nj\n]\n \n=\n \n1\n \n+\n \nc\n[\nj\n \n-\n \ndi\n]\n\n                \ndenom\n[\nj\n]\n \n=\n \ndi\n\n    \nreturn\n \nc\n \nand\n \ndenom\n\n\n\n\n\nThis procedure obviously runs in $O(nk)$ time.\n\n\nWe use the following procedure to output the coins used in the optimal solution computed by $\\text{COMPUTE-CHANGE}$:\n\n\nGIVE\n-\nCHANGE\n(\nj\n,\n \ndenom\n)\n\n    \nif\n \nj\n \n>\n \n0\n\n        \ngive\n \none\n \ncoin\n \nof\n \ndenomination\n \ndenom\n[\nj\n]\n\n        \nGIVE\n-\nCHANGE\n(\nj\n \n-\n \ndenom\n[\nj\n],\n \ndenom\n)\n\n\n\n\n\nThe initial call is $\\text{GIVE-CHANGE}(n, denom)$. Since the value of the first parameter decreases in each recursive call, this procedure runs in $O(n)$ time.",
            "title": "16-1 Coin changing"
        },
        {
            "location": "/Chap16/Problems/16-2/",
            "text": "Suppose you are given a set $S = \\{a_1, a_2, \\ldots, a_n\\}$ of tasks, where task $a_i$ requires $p_i$ units of processing time to complete, once it has started. You have one computer on which to run these tasks, and the computer can run only one task at a time. Let $c_i$ be the \ncompletion time\n of task $a_i$ , that is, the time at which task $a_i$ completes processing. Your goal is to minimize the average completion time, that is, to minimize $(1 / n) \\sum_{i = 1}^n c_i$. For example, suppose there are two tasks, $a_1$ and $a_2$, with $p_1 = 3$ and $p_2 = 5$, and consider the schedule in which $a_2$ runs first, followed by $a_1$. Then $c_2 = 5$, $c_1 = 8$, and the average completion time is $(5 + 8) / 2 = 6.5$. If task $a_1$ runs first, however, then $c_1 = 3$, $c_2 = 8$, and the average completion time is $(3 + 8) / 2 = 5.5$.\n\n\na.\n Give an algorithm that schedules the tasks so as to minimize the average completion time. Each task must run non-preemptively, that is, once task $a_i$ starts, it must run continuously for $p_i$ units of time. Prove that your algorithm minimizes the average completion time, and state the running time of your algorithm.\n\n\nb.\n Suppose now that the tasks are not all available at once. That is, each task cannot start until its \nrelease time\n $r_i$. Suppose also that we allow \npreemption\n, so that a task can be suspended and restarted at a later time. For example, a task $a_i$ with processing time $p_i = 6$ and release time $r_i = 1$ might start running at time $1$ and be preempted at time $4$. It might then resume at time $10$ but be preempted at time $11$, and it might finally resume at time $13$ and complete at time $15$. Task $a_i$ has run for a total of $6$ time units, but its running time has been divided into three pieces. In this scenario, $a_i$'s completion time is $15$. Give an algorithm that schedules the tasks so as to minimize the average completion time in this new scenario. Prove that your algorithm minimizes the average completion time, and state the running time of your algorithm.\n\n\n\n\na.\n Order the tasks by processing time from smallest to largest and run them in that order. To see that this greedy solution is optimal, first observe that the problem exhibits optimal substructure: if we run the first task in an optimal solution, then we obtain an optimal solution by running the remaining tasks in a way which minimizes the average completion time. Let $O$ be an optimal solution. Let $a$ be the task which has the smallest processing time and let b be the first task run in $O$. Let $G$ be the solution obtained by switching the order in which we run $a$ and $b$ in $O$. This amounts reducing the completion times of a and the completion times of all tasks in $G$ between $a$ and $b$ by the difference in processing times of $a$ and $b$. Since all other completion times remain the same, the average completion time of $G$ is less than or equal to the average completion time of $O$, proving that the greedy solution gives an optimal solution. This has runtime $O(n\\lg n)$ because we must first sort the elements.\n\n\nb.\n Without loss of generality we my assume that every task is a unit time task. Apply the same strategy as in part (a), except this time if a task which we would like to add next to the schedule isn't allowed to run yet, we must skip over it. Since there could be many tasks of short processing time which have late release time, the runtime becomes $O(n^2)$ since we might have to spend $O(n)$ time deciding which task to add next at each step.\n\n\nMAKE\n-\nCHANGE\n(\nS\n,\n \nv\n)\n\n    \nlet\n \nnumcoins\n \nand\n \ncoin\n \nbe\n \nempty\n \narrays\n \nof\n \nlength\n \nv\n,\n \nand\n \nany\n \nattempt\n \nto\n \naccess\n \nthem\n \nat\n \nindices\n \nin\n \nthe\n \nrange\n \n-\nmax\n(\nS\n),\n \n-\n1\n \nshould\n \nreturn\n \n\u221e\n\n    \nfor\n \ni\n \n=\n \n1\n \nto\n \nv\n \n        \nbestcoin\n \n=\n \nNIL\n\n        \nbestnum\n \n=\n \n\u221e\n\n        \nfor\n \nc\n \nin\n \nS\n\n            \nif\n \nnumcoins\n[\ni\n \n-\n \nc\n]\n \n+\n \n1\n \n<\n \nbestnum\n\n                \nbestnum\n \n=\n \nnumcoins\n[\ni\n \n-\n \nc\n]\n\n                \nbestcoin\n \n=\n \nc\n\n        \nnumcoins\n[\ni\n]\n \n=\n \nbestnum\n\n        \ncoin\n[\ni\n]\n \n=\n \nbestcoin\n\n    \nlet\n \nchange\n \nbe\n \nan\n \nempty\n \nset\n\n    \niter\n \n=\n \nv\n\n    \nwhile\n \niter\n \n>\n \n0\n\n        \nadd\n \ncoin\n[\niter\n]\n \nto\n \nchange\n\n        \niter\n \n=\n \niter\n \n-\n \ncoin\n[\niter\n]\n\n    \nreturn\n \nchange",
            "title": "16-2 Scheduling to minimize average completion time"
        },
        {
            "location": "/Chap16/Problems/16-3/",
            "text": "a.\n The \nincidence matrix\n for an undirected graph $G = (V, E)$ is a $|V| \\times |E|$ matrix $M$ such that $M_{ve} = 1$ if edge $e$ is incident on vertex $v$, and $M_{ve} = 0$ otherwise. Argue that a set of columns of $M$ is linearly independent over the field of integers modulo 2 if and only if the corresponding set of edges is acyclic. Then, use the result of Exercise 16.4-2 to provide an alternate proof that $(E, I)$ of part (a) is a matroid.\n\n\nb.\n Suppose that we associate a nonnegative weight $w(e)$ with each edge in an undirected graph $G = (V, E)$. Give an efficient algorithm to find an acyclic subset of $E$ of maximum total weight.\n\n\nc.\n Let $G(V, E)$ be an arbitrary directed graph, and let $(E, I)$ be defined so that $A \\in I$ if and only if $A$ does not contain any directed cycles. Give an example of a directed graph $G$ such that the associated system $(E, I)$ is not a matroid. Specify which defining condition for a matroid fails to hold.\n\n\nd.\n The \nincidence matrix\n for a directed graph $G = (V, E)$ with no self-loops is a $|V| \\times |E|$ matrix $M$ such that $M_{ve} = -1$ if edge $e$ leaves vertex $v$, $M_{ve} = 1$ if edge $e$ enters vertex $v$, and $M_{ve} = 0$ otherwise. Argue that if a set of columns of $M$ is linearly independent, then the corresponding set of edges does not contain a directed cycle.\n\n\ne.\n Exercise 16.4-2 tells us that the set of linearly independent sets of columns of any matrix $M$ forms a matroid. Explain carefully why the results of parts (d) and (e) are not contradictory. How can there fail to be a perfect correspondence between the notion of a set of edges being acyclic and the notion of the associated set of columns of the incidence matrix being linearly independent?\n\n\n\n\na.\n First, suppose that a set of columns is not linearly independent over $\\mathbb F_2$ then, there is some subset of those columns, say $S$ so that a linear combination of $S$ is $0$. However, over $\\mathbb F_2$, since the only two elements are $1$ and $0$, a linear combination is a sum over some subset. \nSuppose that this subset is $S'$, note that it has to be nonempty because of linear dependence. Now, consider the set of edges that these columns correspond to. Since the columns had their total incidence with each vertex $0$ in $\\mathbb F_2$, it is even. So, if we consider the subgraph on these edges, then every vertex has a even degree. Also, since our $S'$ was nonempty, some component has an edge. Restrict our attention to any such component. Since this component is connected and has all even vertex degrees, it contains an Euler Circuit, which is a cycle. \nNow, suppose that our graph had some subset of edges which was a cycle. Then, the degree of any vertex with respect to this set of edges is even, so, when we add the corresponding columns, we will get a zero column in $\\mathbb F_2$. Since sets of linear independent columns form a matroid, by problem 16.4-2, the acyclic sets of edges form a matroid as well.\n\n\nb.\n One simple approach is to take the highest weight edge that doesn't complete a cycle. Another way to phrase this is by running Kruskal's algorithm (see Chapter 23) on the graph with negated edge weights.\n\n\nc.\n Consider the digraph on [3] with the edges $(1, 2), (2, 1), (2, 3), (3, 2), (3, 1)$ where $(u, v)$ indicates there is an edge from $u$ to $v$. Then, consider the two acyclic subsets of edges $B = (3, 1), (3, 2), (2, 1)$ and $A = (1, 2), (2, 3)$. Then, adding any edge in $B - A$ to $A$ will create a cycle. So, the exchange property is violated.\n\n\nd.\n Suppose that the graph contained a directed cycle consisting of edges corresponding to columns $S$. Then, since each vertex that is involved in this cycle has exactly as many edges going out of it as going into it, the rows corresponding to each vertex will add up to zero, since the outgoing edges count negative and the incoming vertices count positive. This means that the sum of the columns in $S$ is zero, so, the columns were not linearly independent.\n\n\ne.\n There is not a perfect correspondence because we didn't show that not containing a directed cycle means that the columns are linearly  independent, so there is not perfect correspondence between these sets of independent columns (which we know to be a matriod) and the acyclic sets of edges (which we know not to be a matroid).",
            "title": "16-3 Acyclic subgraphs"
        },
        {
            "location": "/Chap16/Problems/16-4/",
            "text": "Consider the following algorithm for the problem from Section 16.5 of scheduling unit-time tasks with deadlines and penalties. Let all $n$ time slots be initially empty, where time slot $i$ is the unit-length slot of time that finishes at time $i$. We consider the tasks in order of monotonically decreasing penalty. When considering task $a_j$, if there exists a time slot at or before $a_j$'s deadline $d_j$ that is still empty, assign $a_j$ to the latest such slot, filling it. If there is no such slot, assign task $a_j$ to the latest of the as yet unfilled slots.\n\n\na.\n Argue that this algorithm always gives an optimal answer.\n\n\nb.\n Use the fast disjoint-set forest presented in Section 21.3 to implement the algorithm efficiently. Assume that the set of input tasks has already been sorted into monotonically decreasing order by penalty. Analyze the running time of your implementation.\n\n\n\n\na.\n Let $O$ be an optimal solution. If $a_j$ is scheduled before its deadline, we can always swap it with whichever activity is scheduled at its deadline without changing the penalty. If it is scheduled after its deadline but $a_j.deadline \\le j$ then there must exist a task from among the first $j$ with penalty less than that of $a_j$ . We can then swap aj with this task to reduce the overall penalty incurred. Since $O$ is optimal, this can't happen. Finally, if $a_j$ is scheduled after its deadline and $a_j.deadline > j$ we can swap $a_j$ with any other late task without increasing the penalty incurred. Since the problem exhibits the greedy choice property as well, this greedy strategy always yields on optimal solution.\n\n\nb.\n Assume that $\\text{MAKE-SET}(x)$ returns a pointer to the element $x$ which is now it its own set. Our disjoint sets will be collections of elements which have been scheduled at contiguous times. We'll use this structure to quickly find the next available time to schedule a task. Store attributes $x.low$ and $x.high$ at the representative $x$ of each disjoint set. This will give the earliest and latest time of a scheduled task in the block. Assume that $\\text{UNION}(x, y)$ maintains this attribute. This can be done in constant time, so it won't affect the asymptotics. Note that the attribute is well-defined under the union operation because we only union two blocks if they are contiguous. \n\n\nWithout loss of generality we may assume that task $a_1$ has the greatest penalty, task $a_2$ has the second greatest penalty, and so on, and they are given to us in the form of an array $A$ where $A[i] = a_i$. We will maintain an array $D$ such that $D[i]$ contains a pointer to the task with deadline i. We may assume that the size of $D$ is at most n, since a task with deadline later than n can't possibly be scheduled on time. There are at most $3n$ total $\\text{MAKE-SET}$, $\\text{UNION}$, and $\\text{FIND-SET}$ operations, each of which occur at most n times, so by Theorem 21.14 the runtime is $O(n\\alpha(n))$.\n\n\nSCHEDULING\n-\nVARIATIONS\n(\nA\n)\n\n    \ninitialize\n \nan\n \narray\n \nD\n \nof\n \nsize\n \nn\n\n    \nfor\n \ni\n \n=\n \n1\n \nto\n \nn\n\n        \na\n[\ni\n].\ntime\n \n=\n \na\n[\ni\n].\ndeadline\n\n        \nif\n \nD\n[\na\n[\ni\n].\ndeadline\n]\n \n!=\n \nNIL\n\n            \ny\n \n=\n \nFIND\n-\nSET\n(\nD\n[\na\n[\ni\n].\ndeadline\n])\n\n            \na\n[\ni\n].\ntime\n \n=\n \ny\n.\nlow\n \n-\n \n1\n\n        \nx\n \n=\n \nMAKE\n-\nSET\n(\na\n[\ni\n])\n\n        \nD\n[\na\n[\ni\n].\ntime\n]\n \n=\n \nx\n\n        \nx\n.\nlow\n \n=\n \nx\n.\nhigh\n \n=\n \na\n[\ni\n].\ntime\n\n        \nif\n \nD\n[\na\n[\ni\n].\ntime\n \n-\n \n1\n]\n \n!=\n \nNIL\n\n            \nUNION\n(\nD\n[\na\n[\ni\n].\ntime\n \n-\n \n1\n],\n \nD\n[\na\n[\ni\n].\ntime\n])\n\n        \nif\n \nD\n[\na\n[\ni\n].\ntime\n \n+\n \n1\n]\n \n!=\n \nNIL\n\n            \nUNION\n(\nD\n[\na\n[\ni\n].\ntime\n],\n \nD\n[\na\n[\ni\n].\ntime\n \n+\n \n1\n])",
            "title": "16-4 Scheduling variations"
        },
        {
            "location": "/Chap16/Problems/16-5/",
            "text": "Modern computers use a cache to store a small amount of data in a fast memory. Even though a program may access large amounts of data, by storing a small subset of the main memory in the \ncache\n\u2014a small but faster memory\u2014overall access time can greatly decrease. When a computer program executes, it makes a sequence $\\langle r_1, r_2, \\ldots, r_n \\rangle$ of $n$ memory requests, where each request is for a particular data element. For example, a program that accesses 4 distinct elements $\\{a, b, c, d\\}$ might make the sequence of requests $\\langle d, b, d, b, d, a, c, d, b, a, c, b \\rangle$. Let $k$ be the size of the cache. When the cache contains $k$ elements and the program requests the $(k + 1)$st element, the system must decide, for this and each subsequent request, which $k$ elements to keep in the cache. More precisely, for each request $r_i$, the cache-management algorithm checks whether element $r_i$ is already in the cache. If it is, then we have a \ncache hit\n; otherwise, we have a cache miss. Upon a \ncache miss\n, the system retrieves $r_i$ from the main memory, and the cache-management algorithm must decide whether to keep $r_i$ in the cache. If it decides to keep $r_i$ and the cache already holds $k$ elements, then it must evict one element to make room for $r_i$ . The cache-management algorithm evicts data with the goal of minimizing the number of cache misses over the entire sequence of requests.\n\n\nTypically, caching is an on-line problem. That is, we have to make decisions about which data to keep in the cache without knowing the future requests. Here, however, we consider the off-line version of this problem, in which we are given in advance the entire sequence of n requests and the cache size $k$, and we wish to minimize the total number of cache misses.\n\n\nWe can solve this off-line problem by a greedy strategy called \nfurthest-in-future\n, which chooses to evict the item in the cache whose next access in the request sequence comes furthest in the future.\n\n\na.\n Write pseudocode for a cache manager that uses the furthest-in-future strategy. The input should be a sequence $\\langle r_1, r2, \\ldots, r_n \\rangle$ of requests and a cache size $k$, and the output should be a sequence of decisions about which data element (if any) to evict upon each request. What is the running time of your algorithm?\n\n\nb.\n Show that the off-line caching problem exhibits optimal substructure.\n\n\nc.\n Prove that furthest-in-future produces the minimum possible number of cache misses.\n\n\n\n\na.\n The procedure $\\text{CACHE-MANAGER}$ is a generic procedure, which initializes a cache by calling $\\text{INITIALIZE-CACHE}$ and then calls $\\text{ACCESS}$ with each data element in turn. The inputs are a sequence $R = \\langle r_1, r_, \\ldots, r_n \\rangle$ of memory requests and a cache size $k$.\n\n\nCACHE\n-\nMANAGER\n(\nR\n,\n \nk\n)\n\n    \nINITIALIZE\n-\nCACHE\n(\nR\n,\n \nk\n)\n\n    \nfor\n \ni\n \n=\n \n1\n \nto\n \nn\n\n        \nACCESS\n(\nri\n)\n\n\n\n\n\nThe running time of $\\text{CACHE-MANAGER}$ of course depends heavily on how $\\text{ACCESS}$ is implemented. We have several choices for how to implement the greedy strategy outlined in the problem. A straightforward way of implementing the greedy strategy is that when processing request $r_i$, for each of the at most $k$ elements currently in the cache, scan through requests $r_{i + 1}, \\ldots, r_n$ to find which of the elements in the cache and $r_i$ has its next access furthest in the future, and evict this element. Because each scan takes $O(n)$ time, each request entails $O(k)$ scans, and there are $n$ requests, the running time of this straightforward approach is $O(kn^2)$.\n\n\nInstead, we describe an asymptotically faster algorithm, which uses a red-black tree to check whether a given element is currently in the cache, a max-priority queue to retrieve the data element with the furthest access time, and a hash table (resolving collisions by chaining) to map data elements to integer indices. We assume that the data elements can be linearly ordered, so that it makes sense to put them into a red-black tree and a max-priority queue. The following procedure $\\text{INITIALIZE-CACHE}$ creates and initializes some global data structures that are used by ACCESS.\n\n\nINITIALIZE\n-\nCACHE\n(\nR\n,\n \nk\n)\n\n    \nlet\n \nT\n \nbe\n \na\n \nnew\n \nred\n-\nblack\n \ntree\n\n    \nlet\n \nP\n \nbe\n \na\n \nnew\n \nmax\n-\npriority\n \nqueue\n\n    \nlet\n \nH\n \nbe\n \na\n \nnew\n \nhash\n \ntable\n\n    \nind\n \n=\n \n1\n\n    \nfor\n \ni\n \n=\n \n1\n \nto\n \nn\n\n        \nj\n \n=\n \nHASH\n-\nSEARCH\n(\nri\n)\n\n        \nif\n \nj\n \n==\n \nNIL\n\n            \nHASH\n-\nINSERT\n(\nri\n,\n \nind\n)\n\n            \nlet\n \nS_\n{\nind\n}\n \nbe\n \na\n \nnew\n \nlinked\n \nlist\n\n            \nj\n \n=\n \nind\n\n            \nind\n \n=\n \nind\n \n+\n \n1\n\n        \nappend\n \ni\n \nto\n \nSj\n\n\n\n\n\nIn the above procedure, here is the meaning of various variables:\n\n\n\n\nThe red-black tree $T$ has at most $k$ nodes and holds the distinct data elements that are currently in the cache. We assume that the red-black tree procedures are modified to keep track of the number of nodes currently in the tree, and that the procedure $\\text{TREE-SIZE}$ returns this value. Because red-black tree $T$ has at most $k$ nodes, we can insert into, delete from, or search in it in $O(\\lg k)$ worst-case time.\n\n\nThe max-priority queue $P$ contains elements with two attributes: $key$ is the next access time of a data element, and $value$ is the actual data element for each data element in the cache. $key$ gives the key and $value$ is satellite data in the priority queue. Like the red-black tree $T$, the max-priority queue contains only elements currently in the cache. We need to maintain $T$ and $P$ separately, however, because $T$ is keyed on the data elements and $P$ is keyed on access times. Using a max-heap to implement $P$, we can extract the maximum element or insert a new element in $O(\\lg k)$ time, and we can find the maximum element in $\\Theta(1)$ time.\n\n\nThe hash table $H$ is a dictionary or a map, which maps each data element to a unique integer. This integer is used to index linked lists, which are described next. We assume that the $\\text{HASH-INSERT}$ procedure uses the table-expansion technique of Section 17.4.1 to keep the hash table's load factor to be at most some constant $\\alpha$. In this way, the amortized cost per insertion is $\\Theta(1)$ and, under the assumption of simple uniform hashing, then by Theorems 11.1 and 11.2, the average-case search time is also $\\Theta(1)$.\n\n\nFor every distinct data element $r_i$, we create a linked list $S_{ind}$ (where $ind$ is obtained through the hash table) holding the indices in the input array where $r_i$ occurs. For example, if the input sequence is $\\langle d, b, d, b, d, a, c, d, b, a, c, b \\rangle$, then we create four linked lists: $S_1$ for $a$, $S_2$ for $b$, $S_3$ for $c$, and $S_4$ for $d$. $S_1$ holds the indices where $a$ is accessed, and so $S_1 = \\langle 6, 10 \\rangle$. Similarly, $S_2 = \\langle 2, 4, 9, 12 \\rangle$, $S_3 = \\langle 7, 11 \\rangle$ and $S_4 = \\langle 1, 3, 5, 8 \\rangle$.\n\n\n\n\nFor each data element $r_i$, we first check whether there is already a linked list associated with $r_i$ and create a new linked list if not. We retrieve the linked list associated with $r_i$ and append $i$ to it, indicating that an access to $r_i$ occurs at access $i$.\n\n\nACCESS\n(\nri\n)\n\n    \n// Compute the next access time for ri.\n\n    \nind\n \n=\n \nHASH\n-\nSEARCH\n(\nri\n)\n\n    \ntime\n \n=\n \n\u221e\n\n    \ndelete\n \nthe\n \nhead\n \nof\n \nS_\n{\nind\n}\n\n    \nif\n \nS_\n{\nind\n}\n \nis\n \nnot\n \nempty\n\n        \ntime\n \n=\n \nhead\n \nof\n \nS_\n{\nind\n}\n\n    \n// Check to see whether ri is currently in the cache.\n\n    \nif\n \nTREE\n-\nSEARCH\n(\nT\n.\nroot\n,\n \nri\n)\n \n!=\n \nNIL\n\n        \nprint\n \n\"cache hit\"\n\n    \nelse\n \nif\n \nTREE\n-\nSIZE\n(\nT\n)\n \n<\n \nk\n\n        \n// Insert in an empty slot in the cache.\n\n        \nlet\n \nz\n \nbe\n \na\n \nnew\n \nnode\n \nfor\n \nT\n\n        \nz\n.\nkey\n \n=\n \nri\n\n        \nRB\n-\nINSERT\n(\nT\n,\n \nz\n)\n\n        \nlet\n \nevent\n \nbe\n \na\n \nnew\n \nobject\n \nfor\n \nP\n\n        \nevent\n.\nkey\n \n=\n \ntime\n\n        \nevent\n.\nvalue\n \n=\n \nri\n\n        \nINSERT\n(\nP\n,\n \nevent\n)\n\n        \nprint\n \n\"cache miss, inserted \"\n \nri\n \n\"in empty slot\"\n\n    \nelse\n \nevent\n \n=\n \nMAXIMUM\n(\nP\n)\n\n        \nif\n \nevent\n.\nkey\n \n\u2264\n \ntime\n     \n// ri has the furthest access time\n\n            \nprint\n \n\"cache miss, no data element evicted\"\n\n        \nelse\n \n// evict the element with furthest access time\n\n            \nprint\n \n\"cache miss, evict data element \"\n \nevent\n.\nvalue\n\n            \nevent\n \n=\n \nEXTRACT\n-\nMAX\n(\nP\n)\n\n            \nRB\n-\nDELETE\n(\nT\n,\n \nTREE\n-\nSEARCH\n(\nT\n.\nroot\n,\n \nevent\n.\nvalue\n))\n\n            \nevent\n.\nkey\n \n=\n \ntime\n\n            \nevent\n.\nvalue\n \n=\n \nri\n\n            \nINSERT\n(\nP\n,\n \nevent\n)\n\n            \nlet\n \nz\n \nbe\n \na\n \nnew\n \nnode\n \nfor\n \nT\n\n            \nz\n.\nkey\n \n=\n \nri\n\n            \nRB\n-\nINSERT\n(\nT\n,\n \nz\n)\n\n\n\n\n\nThe procedure $\\text{ACCESS}$ takes an input $r_i$ and decides which element to evict, if any, from the cache. The first if condition properly sets time to the next access time of $r_i$. The head of the linked list associated with $r_i$ contains $i$; we remove this element from the list, and the new head contains the next access time for $r_i$. Then, we check to see whether $r_i$ is already present in the cache. If $r_i$ is not present in the cache, we check to see whether we can store $r_i$ in an empty slot. If there are no empty slots, we have to evict the element with the furthest access time. We retrieve the element with the furthest access time from the max-priority queue and compare it with that of $r_i$ . If $r_i$'s next access is sooner, we evict the element with the furthest access time from the cache (deleting the element from the tree and from the priority queue) and insert $r_i$ into the tree and priority queue.\n\n\nUnder the assumption of simple uniform hashing, the average-case running time of $\\text{ACCESS}$ is $O(\\lg k)$, since it performs a constant number of operations on the red-black tree, priority queue, and hash table. Thus, the average-case running time of $\\text{CACHE-MANAGER}$ is $O(n\\lg k)$.\n\n\nb.\n To show that the problem exhibits optimal substructure, we define the subproblem $(C, i)$ as the contents of the cache just before the $i$th request, where $C$ is a subset of the set of input data elements containing at most $k$ of them. A \nsolution\n to $(C, i)$ is a sequence of decisions that specifies which element to evict (if any) for each request $i, i + 1, \\ldots, n$. An \noptimal solution\n to $(C, i)$ is a solution that minimizes the number of cache misses.\n\n\nLet $S$ be an optimal solution to $(C, i)$. Let $S'$ be the subsolution of $S$ for requests $i + 1, i + 2, \\ldots, n$. If a cache hit occurs on the $i$th request, then the cache remains unchanged. If a cache miss occurs, then the $i$th request results in the contents of the cache changing to $C'$ (possibly with $C' = C$ if no element was evicted). We claim that $S'$ is an optimal solution to $(C', i + 1)$. Why? If $S'$ were not an optimal solution to $(C', i + 1)$, then there exists another solution $S''$ to $(C', i + 1)$ that makes fewer cache misses than $S'$. By combining $S''$ with the decision of $S$ at the $i$th request, we obtain another solution that makes fewer cache misses than $S$, which contradicts our assumption that $S$ is an optimal solution to $(C, i)$.\n\n\nSuppose the $i$th request results in a cache miss. Let $P_C$ be the set of all cache states that can be reached from $C$ through a single decision of the cache manager. The set $P_C$ contains up to $k + 1$ states: $k$ of them arising from different elements of the cache being evicted and one arising from the decision of evicting no element. For example, if $C = {r_1, r_2, r_3}$ and the requested data element is $r_4$, then\n\n\n$$P_C = \\{\\{r_1, r_2, r_3\\}, \\{r_1, r_2, r_4\\}, \\{r_1, r_3, r_4\\}, \\{r_2, r_3, r_4\\}\\}.$$\nLet $miss(C, i)$ denote the minimum number of cache misses for $(C, i)$. We can state a recurrence for $miss(C, i)$ as\n\n\n$$\nmiss(C, i) =\n\\begin{cases}\n0                                              & \\text{if $i = n$ and $r_n \\in C$}, \\\\\n1                                              & \\text{if $i = n$ and $r_n \\notin C$}, \\\\\nmiss(C, i + 1)                                 & \\text{if $i < n$ and $r_i \\in C$}, \\\\\n1 + \\min\\limits_{C' \\in P_C} {miss(C', i + 1)} & \\text{if $i < n$ and $r_i \\notin C$}.\n\\end{cases}\n$$\n\n\nThus, we conclude that the problem exhibits optimal substructure.\n\n\nc.\n To prove that the furthest-in-future strategy yields an optimal solution, we show that the problem exhibits the greedy-choice property. Combined with the optimal-substructure property from part (b), the greedy-choice property will prove that furthest-in-future produces the minimum possible number of cache misses.\n\n\nWe use the definitions of subproblem, solution, and optimal solution from part (b). Since we will be comparing different solutions, let us define $C_{Ai}$ as the state of the cache for solution $A$ just before the ith request. The following theorem is the key.\n\n\nTheorem (Greedy-choice property)\n\n\nLet $A$ be some optimal solution to $(C, i)$. Let b be the element in $C_{Ai} \\cup \\{r_i\\}$ whose next access at the time of the $i$th request is furthest in the future, at time $m$. Then, we can construct another solution $A'$ to $(C, i)$ that has the following properties:\n\n\n\n\nOn the $i$th request, $A'$ evicts $b$.\n\n\nFor $i + 1 \\le j \\le m$, the caches $C_{Aj}$ and $C_{A' j}$ differ by at most one element. If they differ, then $b \\in C_{Aj}$ is always the element in $C_{Aj}$ that is not in $C_{A' j}$. Equivalently, if $C_{Aj}$ and $C_{A' j}$ differ, we can write $C_{Aj} = D_j \\cup \\{b\\}$ and $C_{A' j} = D_j \\cup \\{x\\}$, where $D_j$ is a size-($k - 1$) set and $x \\ne b$ is some data element.\n\n\nFor requests $i, \\ldots, m - 1$, if $A$ has a cache hit, then $A'$ has a cache hit.\n\n\n$C_{Aj} = C_{A' j}$ for $j > m$.\n\n\nFor requests $i, \\ldots, m$, the number of cache misses produced by $A'$ is at most the number of cache misses produced by $A$.\n\n\n\n\nProof\n \n\n\nIf $A$ evicts $b$ at request $i$, then the proof of the theorem is trivial. Therefore, suppose $A$ evicts data element $a$ on request $i$, where $a \\ne b$. We will prove the theorem by constructing $A'$ inductively for each request.\n\n\n\n\nAt request $i$, $A'$ evicts $b$ instead of $a$.\n\n\nWe proceed with induction on $j$, where $i + 1 \\le j \\le m$. The construction for property 1 establishes the base case because $C_{A, i + 1}$ and $C_{A', i + 1}$ differ by just one element and b is the element in $C_{A, i + 1}$ that is not in $C_{A', i + 1}$.\n\n    For the induction step, suppose property 2 is true for some request $j$, where $i + 1 \\le j < m$. If $A$ does not evict any element or evicts an element in $D_j$, then construct $A'$ to make the same decision on request $j$ as $A$ makes. If $A$ evicts $b$ on request $j$, then construct $A'$ to evict $x$ and keep the same element as $A$ keeps, namely $r_j$. This construction conserves property 2 for $j + 1$. Note that this construction might sometimes insert duplicate elements in the cache. This situation can easily be dealt with by introducing a dummy element for $x$.\n\n\nSuppose $A$ has a cache hit for request $j$, where $i \\le j \\le m - 1$. Then, $r_j \\in D_j$ since $r_j \\notin C_{A' j}$. Thus, $r_j \\in C_{A' j}$ and $A'$ has a cache hit, too.\n\n\nBy property 2, the cache $C_{Am}$ differs from $C_{A' m}$ by at most one element, with $b$ being the element in $C_{Am}$ that might not be in $C_{A' m}$ . If $C_{Am} = C_{A' m}$ , then construct $A'$ to make the same decision on request $m$ as $A$. Otherwise, $C_{Am} \\ne C_{A' m}$ and $b \\in C_{Am}$. Construct $A'$ to evict $x$ and keep $b$ on request $m$. Since the $m$th request is for element $b$ and $b \\in C_{Am}$, $A$ has a cache hit so that it does not evict any element. Thus, we can ensure that $C_{A, m + 1} = C_{A', m + 1}$. From the ($m + 1$)st request on, $A'$ simply makes the same decisions as $A$.\n\n\nBy property 3, for requests $i, \\ldots, m - 1$, whenever we have a cache hit for $A$, we also have a cache hit for $A'$. Thus, we have to concern ourselves with only the $m$th request. If $A$ has a cache miss on the $m$th request, we are done. Otherwise, $A$ has a cache hit on the $m$th request, and we will prove that there exists at least one request $j$, where $i + 1 \\le j \\le m - 1$, such that the $j$th request results in a cache miss for $A$ and a cache hit for $A'$. Because $A$ evicts data element $a$ in request $i$, then, by our construction of $A'$, $C_{A', i + 1} = D_{i + 1} \\cup \\{a\\}$. The $m$th request is for data element $b$. If $A$ has a cache hit, then because none of the requests $i + 1, \\ldots, m - 1$ were for $b$, $A$ could not have evicted $b$ and brought it back. Moreover, because $A$ has a cache hit on the $m$th request, $b \\in C_{Am}$. Therefore, $A$ did not evict $b$ in any of requests $i, \\ldots, m - 1$. By our construction, $A'$ did not evict $a$. But a request for $a$ occurs at least once before the $m$th request. Consider the first such instance. At this instance, $A$ has a cache miss and $A'$ has a cache hit.\n\n\n\n\nThe above theorem and the optimal-substructure property proved in part (b) imply that furthest-in-future produces the minimum number of cache misses.",
            "title": "16-5 Off-line caching"
        },
        {
            "location": "/Chap17/17.1/",
            "text": "17.1-1\n\n\n\n\nIf the set of stack operations included a $\\text{MULTIPUSH}$ operation, which pushses $k$ items onto the stack, would the $O(1)$ bound on the amortized cost of stack operations continue to hold?\n\n\n\n\nNo. The time complexity of such a series of operations depends on the number of pushes (pops vise versa) could be made. Since one $\\text{MULTIPUSH}$ needs $\\Theta(k)$ time, performing n $\\text{MULTIPUSH}$ operations, each with $k$ elements, would take $\\Theta(kn)$ time, leading to amortized cost of $\\Theta(k)$.\n\n\n17.1-2\n\n\n\n\nShow that if a $\\text{DECREMENT}$ operatoin were included in the $k$-bit counter example, $n$ operations could cost as much as $\\Theta(nk)$ time.\n\n\n\n\nThe logarithmic bit flipping predicate does not hold, and indeed a sequence of events could consist of the incrementation of all $1$s and decrementation of all $0$s; yielding $\\Theta(nk)$.\n\n\n17.1-3\n\n\n\n\nSuppose we perform a sequence of $n$ operations on a data structure in which the $i$th operation costs $i$ if $i$ is an exact power of $2$, and $1$ otherwise. Use aggregate analysis to determine the amortized cost per operation.\n\n\n\n\nLet $c_i =$ cost of $i$th operation.\n\n\n$$\nc_i =\n\\begin{cases}\ni & \\text{if $i$ is an exact power of $2$}, \\\\\n1 & \\text{otherwise}.\n\\end{cases}\n$$\n\n\n\\begin{array}{cc}\n\\text{Operation} & \\text{Cost} \\\\\n\\hline\n 1 & 1 \\\\\n 2 & 2 \\\\\n 3 & 1 \\\\\n 4 & 4 \\\\\n 5 & 1 \\\\\n 6 & 1 \\\\\n 7 & 1 \\\\\n 8 & 8 \\\\\n 9 & 1 \\\\\n10 & 1 \\\\\n\\vdots & \\vdots\n\\end{array}\n\n\n$n$ operations cost:\n\n\n$$\\sum_{i = 1}^n c_i \\le n + \\sum_{j = 0}^{\\lg n} 2^j = n + (2n - 1) < 3n.$$\n\n\n(Note: Ignoring floor in upper bound of $\\sum 2^j$.)\n\n\nAverage cost of operation:\n\n\n$$\\frac{\\text{Total case}}{\\text{# operations}} < 3.$$\n\n\nBy aggregate analysis, the amoritzed cost per operation = $O(1)$.",
            "title": "17.1 Aggregate analysis"
        },
        {
            "location": "/Chap17/17.1/#171-1",
            "text": "If the set of stack operations included a $\\text{MULTIPUSH}$ operation, which pushses $k$ items onto the stack, would the $O(1)$ bound on the amortized cost of stack operations continue to hold?   No. The time complexity of such a series of operations depends on the number of pushes (pops vise versa) could be made. Since one $\\text{MULTIPUSH}$ needs $\\Theta(k)$ time, performing n $\\text{MULTIPUSH}$ operations, each with $k$ elements, would take $\\Theta(kn)$ time, leading to amortized cost of $\\Theta(k)$.",
            "title": "17.1-1"
        },
        {
            "location": "/Chap17/17.1/#171-2",
            "text": "Show that if a $\\text{DECREMENT}$ operatoin were included in the $k$-bit counter example, $n$ operations could cost as much as $\\Theta(nk)$ time.   The logarithmic bit flipping predicate does not hold, and indeed a sequence of events could consist of the incrementation of all $1$s and decrementation of all $0$s; yielding $\\Theta(nk)$.",
            "title": "17.1-2"
        },
        {
            "location": "/Chap17/17.1/#171-3",
            "text": "Suppose we perform a sequence of $n$ operations on a data structure in which the $i$th operation costs $i$ if $i$ is an exact power of $2$, and $1$ otherwise. Use aggregate analysis to determine the amortized cost per operation.   Let $c_i =$ cost of $i$th operation.  $$\nc_i =\n\\begin{cases}\ni & \\text{if $i$ is an exact power of $2$}, \\\\\n1 & \\text{otherwise}.\n\\end{cases}\n$$  \\begin{array}{cc}\n\\text{Operation} & \\text{Cost} \\\\\n\\hline\n 1 & 1 \\\\\n 2 & 2 \\\\\n 3 & 1 \\\\\n 4 & 4 \\\\\n 5 & 1 \\\\\n 6 & 1 \\\\\n 7 & 1 \\\\\n 8 & 8 \\\\\n 9 & 1 \\\\\n10 & 1 \\\\\n\\vdots & \\vdots\n\\end{array}  $n$ operations cost:  $$\\sum_{i = 1}^n c_i \\le n + \\sum_{j = 0}^{\\lg n} 2^j = n + (2n - 1) < 3n.$$  (Note: Ignoring floor in upper bound of $\\sum 2^j$.)  Average cost of operation:  $$\\frac{\\text{Total case}}{\\text{# operations}} < 3.$$  By aggregate analysis, the amoritzed cost per operation = $O(1)$.",
            "title": "17.1-3"
        },
        {
            "location": "/Chap17/17.2/",
            "text": "17.2-1\n\n\n\n\nSuppose we perform a sequence of stack operations on a stack whose size never exceeds $k$. After every $k$ operations, we make a copy of the entire stack for backup purposes. Show that the cost of $n$ stack operations, including copying the stack, is $O(n)$ by assigning suitable amortized costs to the various stack operations.\n\n\n\n\n[We assume that the only way in which COPY is invoked is automatically, after every sequence of $k$ PUSH and POP operations.]\n\n\nCharge $\\$2$ for each $\\text{PUSH}$ and $\\text{POP}$ operation and $\\$0$ for each $\\text{COPY}$. When we call $\\text{PUSH}$, we use $\\$1$ to pay for the operation, and we store the other $\\$1$ on the item pushed. When we call $\\text{POP}$, we again use $\\$1$ to pay for the operation, and we store the other $\\$1$ in the stack itself. Because the stack size never exceeds $k$, the actual cost of a $\\text{COPY}$ operation is at most $\\$k$, which is paid by the $\\$k$ found in the items in the stack and the stack itself. Since $k$ $\\text{PUSH}$ and $\\text{POP}$ operations occur between two consecutive $\\text{COPY}$ operations, $k$ of credit stored, either on individual items (from $\\text{PUSH}$ operations) or in the stack itself (from $\\text{POP}$ operations) by the time a $\\text{COPY}$ occurs. Since the amortized cost of each operation is $O(1)$ and the amount of credit never goes negative, the total cost of $n$ operations is $O(n)$.\n\n\n17.2-2\n\n\n\n\nRedo Exercise 17.1-3 using an accounting method of analysis.\n\n\n\n\nLet $c_i =$ csot of $i$th operation.\n\n\nc_i =\n\\begin{cases}\ni & \\text{if $i$ is an exact power of $2$}, \\\\\n1 & \\text{otherwise}. \\\\\n\\end{cases}\n\n\nCharge each operation $3$ (amotized cost $\\hat c_i$).\n\n\n\n\nIf $i$ is not an exact power of $2$, pay $\\$1$, and store $\\$2$ as credit.\n\n\nIf $i$ is an exact power of $2$, pay $\\$i$, using stored credit.\n\\begin{array}{cccc}\n\\text{Operation} & \\text{Cost} & \\text{Actual cost} & \\text{Credit remaining} \\\\\n\\hline\n 1 & 3 & 1 &  2 \\\\\n 2 & 3 & 2 &  3 \\\\\n 3 & 3 & 1 &  5 \\\\\n 4 & 3 & 4 &  4 \\\\\n 5 & 3 & 1 &  6 \\\\\n 6 & 3 & 1 &  8 \\\\\n 7 & 3 & 1 & 10 \\\\\n 8 & 3 & 8 &  5 \\\\\n 9 & 3 & 1 &  7 \\\\\n10 & 3 & 1 &  9 \\\\\n\\vdots & \\vdots & \\vdots & \\vdots\n\\end{array}\n\n\n\n\nSince the amortized cost is $\\$3$ per operation, $\\sum\\limits_{i = 1}^n \\hat c_i = 3n$. \n\n\nWe know from Exercise 17.1-3 that $\\sum\\limits_{i = 1}^n \\hat c_i < 3n$.\n\n\nThen we have\n\n\n$$\\sum_{i = 1}^n \\hat c_i \\ge \\sum_{i = 1}^n c_i \\Rightarrow \\text{credit} = \\text{amortized cose} - \\text{actual cost} \\ge 0.$$\n\n\nSince the amortized cost of each operation is $O(1)$, and the amount of credit never goes negative, the total cost of $n$ operations is $O(n)$.\n\n\n17.2-3\n\n\n\n\nSuppose we wish not only to increment a counter but also to reset it to zero (i.e., make all bits in it $0$). Counting the time to examine or modify a bit as $\\Theta(1)$, show how to implement a counter as an array of bits so that any sequence of $n$ $\\text{INCREMENT}$ and $\\text{RESET}$ operations takes time $O(n)$ on an initially zero counter. ($\\textit{Hint:}$ Keep a pointer to the high-order $1$.)\n\n\n\n\nWe introduce a new field $A.max$ to hold the index of the high-order $1$ in $A$. Initially, $A.max$ is set to $-1$, since the low-order bit of $A$ is at index $0$, and there are initially no $1$'s in $A$. The value of $A.max$ is updated as appropriate when the counter is incremented or reset, and we use this value to limit how much of $A$ must be looked at to reset it. By controlling the cost of $\\text{RESET}$ in this way, we can limit it to an amount that can be covered by credit from earlier $\\text{INCREMENT}$s.\n\n\nINCREMENT\n(\nA\n)\n\n    \ni\n \n=\n \n0\n\n    \nwhile\n \ni\n \n<\n \nA\n.\nlength\n \nand\n \nA\n[\ni\n]\n \n==\n \n1\n\n        \nA\n[\ni\n]\n \n=\n \n0\n\n        \ni\n \n=\n \ni\n \n+\n \n1\n\n    \nif\n \ni\n \n<\n \nA\n.\nlength\n\n        \nA\n[\ni\n]\n \n=\n \n1\n\n        \n// Additions to book's INCREMENT start here.\n\n        \nif\n \ni\n \n>\n \nA\n.\nmax\n\n            \nA\n.\nmax\n \n=\n \ni\n\n    \nelse\n \nA\n.\nmax\n \n=\n \n-\n1\n\n\n\n\n\nRESET\n(\nA\n)\n\n    \nfor\n \ni\n \n=\n \n0\n \nto\n \nA\n.\nmax\n\n        \nA\n[\ni\n]\n \n=\n \n0\n\n    \nA\n.\nmax\n \n=\n \n-\n1\n\n\n\n\n\nAs for the counter in the book, we assume that it costs $\\$1$ to flip a bit. In addition, we assume it costs $\\$1$ to update $A.max$.\n\n\nSetting and resetting of bits by $\\text{INCREMENT}$ will work exactly as for the original counter in the book: $\\$1$ will pay to set one bit to $1$; $\\$1$ will be placed on the bit that is set to $1$ as credit; the credit on each $1$ bit will pay to reset the bit during incrementing.\n\n\nIn addition, we'll use $\\$1$ to pay to update $max$, and if $max$ increases, we'll place an additional $\\$1$ of credit on the new high-order $1$. (If $max$ doesn't increase, we can just waste that $\\$1$\u2014it won't be needed.) Since $\\text{RESET}$ manipulates bits at positions only up to $A.max$, and since each bit up to there must have become the high-order $1$ at some time before the high-order $1$ got up to $A.max$, every bit seen by $\\text{RESET}$ has $\\$1$ of credit on it. So the zeroing of bits of $A$ by $\\text{RESET}$ can be completely paid for by the credit stored on the bits. We just need $\\$1$ to pay for resetting $max$.\n\n\nThus charging $\\$4$ for each $\\text{INCREMENT}$ and $\\$1$ for each $\\text{RESET}$ is sufficient, so the sequence of $n$ $\\text{INCREMENT}$ and $\\text{RESET}$ operations takes $O(n)$ time.",
            "title": "17.2 The accounting method"
        },
        {
            "location": "/Chap17/17.2/#172-1",
            "text": "Suppose we perform a sequence of stack operations on a stack whose size never exceeds $k$. After every $k$ operations, we make a copy of the entire stack for backup purposes. Show that the cost of $n$ stack operations, including copying the stack, is $O(n)$ by assigning suitable amortized costs to the various stack operations.   [We assume that the only way in which COPY is invoked is automatically, after every sequence of $k$ PUSH and POP operations.]  Charge $\\$2$ for each $\\text{PUSH}$ and $\\text{POP}$ operation and $\\$0$ for each $\\text{COPY}$. When we call $\\text{PUSH}$, we use $\\$1$ to pay for the operation, and we store the other $\\$1$ on the item pushed. When we call $\\text{POP}$, we again use $\\$1$ to pay for the operation, and we store the other $\\$1$ in the stack itself. Because the stack size never exceeds $k$, the actual cost of a $\\text{COPY}$ operation is at most $\\$k$, which is paid by the $\\$k$ found in the items in the stack and the stack itself. Since $k$ $\\text{PUSH}$ and $\\text{POP}$ operations occur between two consecutive $\\text{COPY}$ operations, $k$ of credit stored, either on individual items (from $\\text{PUSH}$ operations) or in the stack itself (from $\\text{POP}$ operations) by the time a $\\text{COPY}$ occurs. Since the amortized cost of each operation is $O(1)$ and the amount of credit never goes negative, the total cost of $n$ operations is $O(n)$.",
            "title": "17.2-1"
        },
        {
            "location": "/Chap17/17.2/#172-2",
            "text": "Redo Exercise 17.1-3 using an accounting method of analysis.   Let $c_i =$ csot of $i$th operation.  c_i =\n\\begin{cases}\ni & \\text{if $i$ is an exact power of $2$}, \\\\\n1 & \\text{otherwise}. \\\\\n\\end{cases}  Charge each operation $3$ (amotized cost $\\hat c_i$).   If $i$ is not an exact power of $2$, pay $\\$1$, and store $\\$2$ as credit.  If $i$ is an exact power of $2$, pay $\\$i$, using stored credit.\n\\begin{array}{cccc}\n\\text{Operation} & \\text{Cost} & \\text{Actual cost} & \\text{Credit remaining} \\\\\n\\hline\n 1 & 3 & 1 &  2 \\\\\n 2 & 3 & 2 &  3 \\\\\n 3 & 3 & 1 &  5 \\\\\n 4 & 3 & 4 &  4 \\\\\n 5 & 3 & 1 &  6 \\\\\n 6 & 3 & 1 &  8 \\\\\n 7 & 3 & 1 & 10 \\\\\n 8 & 3 & 8 &  5 \\\\\n 9 & 3 & 1 &  7 \\\\\n10 & 3 & 1 &  9 \\\\\n\\vdots & \\vdots & \\vdots & \\vdots\n\\end{array}   Since the amortized cost is $\\$3$ per operation, $\\sum\\limits_{i = 1}^n \\hat c_i = 3n$.   We know from Exercise 17.1-3 that $\\sum\\limits_{i = 1}^n \\hat c_i < 3n$.  Then we have  $$\\sum_{i = 1}^n \\hat c_i \\ge \\sum_{i = 1}^n c_i \\Rightarrow \\text{credit} = \\text{amortized cose} - \\text{actual cost} \\ge 0.$$  Since the amortized cost of each operation is $O(1)$, and the amount of credit never goes negative, the total cost of $n$ operations is $O(n)$.",
            "title": "17.2-2"
        },
        {
            "location": "/Chap17/17.2/#172-3",
            "text": "Suppose we wish not only to increment a counter but also to reset it to zero (i.e., make all bits in it $0$). Counting the time to examine or modify a bit as $\\Theta(1)$, show how to implement a counter as an array of bits so that any sequence of $n$ $\\text{INCREMENT}$ and $\\text{RESET}$ operations takes time $O(n)$ on an initially zero counter. ($\\textit{Hint:}$ Keep a pointer to the high-order $1$.)   We introduce a new field $A.max$ to hold the index of the high-order $1$ in $A$. Initially, $A.max$ is set to $-1$, since the low-order bit of $A$ is at index $0$, and there are initially no $1$'s in $A$. The value of $A.max$ is updated as appropriate when the counter is incremented or reset, and we use this value to limit how much of $A$ must be looked at to reset it. By controlling the cost of $\\text{RESET}$ in this way, we can limit it to an amount that can be covered by credit from earlier $\\text{INCREMENT}$s.  INCREMENT ( A ) \n     i   =   0 \n     while   i   <   A . length   and   A [ i ]   ==   1 \n         A [ i ]   =   0 \n         i   =   i   +   1 \n     if   i   <   A . length \n         A [ i ]   =   1 \n         // Additions to book's INCREMENT start here. \n         if   i   >   A . max \n             A . max   =   i \n     else   A . max   =   - 1   RESET ( A ) \n     for   i   =   0   to   A . max \n         A [ i ]   =   0 \n     A . max   =   - 1   As for the counter in the book, we assume that it costs $\\$1$ to flip a bit. In addition, we assume it costs $\\$1$ to update $A.max$.  Setting and resetting of bits by $\\text{INCREMENT}$ will work exactly as for the original counter in the book: $\\$1$ will pay to set one bit to $1$; $\\$1$ will be placed on the bit that is set to $1$ as credit; the credit on each $1$ bit will pay to reset the bit during incrementing.  In addition, we'll use $\\$1$ to pay to update $max$, and if $max$ increases, we'll place an additional $\\$1$ of credit on the new high-order $1$. (If $max$ doesn't increase, we can just waste that $\\$1$\u2014it won't be needed.) Since $\\text{RESET}$ manipulates bits at positions only up to $A.max$, and since each bit up to there must have become the high-order $1$ at some time before the high-order $1$ got up to $A.max$, every bit seen by $\\text{RESET}$ has $\\$1$ of credit on it. So the zeroing of bits of $A$ by $\\text{RESET}$ can be completely paid for by the credit stored on the bits. We just need $\\$1$ to pay for resetting $max$.  Thus charging $\\$4$ for each $\\text{INCREMENT}$ and $\\$1$ for each $\\text{RESET}$ is sufficient, so the sequence of $n$ $\\text{INCREMENT}$ and $\\text{RESET}$ operations takes $O(n)$ time.",
            "title": "17.2-3"
        },
        {
            "location": "/Chap17/17.3/",
            "text": "17.3-1\n\n\n\n\nSuppose we have a potential function $\\Phi$ such that $\\Phi(D_i) \\ge \\Phi(D_0)$ for all $i$, but $\\Phi(D_0) \\ne 0$. Show that there exists a potential fuction $\\Phi'$ such that $\\Phi'(D_0) = 0$, $\\Phi'(D_i) \\ge 0$ for all $i \\ge 1$, and the amortized costs using $\\Phi'$ are the same as the amortized costs using $\\Phi$.\n\n\n\n\nDefine the potential function $\\Phi'(D_i) = \\Phi(D_i) - \\Phi(D_0)$ for all $i \\ge 1$.\n\n\nThen\n\n\n$$\\Phi'(D_0) = \\Phi(D_0) - \\Phi(D_0) = 0,$$\n\n\nand\n\n\n$$\\Phi'(D_i) = \\Phi(D_i) - \\Phi(D_0) \\ge 0.$$\n\n\nThe amortized cost is\n\n\n\\begin{align}\n\\hat c_i' & = c_i + \\Phi'(D_i) - \\Phi'(D_{i - 1}) \\\\\n          & = c_i + (\\Phi(D_i) - \\Phi(D_0)) - (\\Phi(D_{i - 1}) - \\Phi(D_0)) \\\\\n          & = c_i + \\Phi(D_i) - \\Phi(D_{i - 1}) \\\\\n          & = \\hat c_i.\n\\end{align}\n\n\n17.3-2\n\n\n\n\nRedo Exercise 17.1-3 using a potential method of analysis.\n\n\n\n\nDefine the potential function $\\Phi(D_0) = 0$, and $\\Phi(D_i) = 2i - 2^{1 + \\lfloor \\lg i \\rfloor}$ for $i > 0$. For operation 1,\n\n\n$$\\hat c_i = c_i + \\Phi(D_i) - \\Phi(D_{i - 1}) = 1 + 2i - 2^{1+ \\lfloor \\lg i \\rfloor} - 0 = 1.$$\n\n\nFor operation $i(i > 1)$, if $i$ is not a power of $2$, then\n\n\n$$\\hat c_i = c_i + \\Phi(D_i) - \\Phi(D_{i - 1}) = 1 + 2i - 2^{1 + \\lfloor \\lg 1 \\rfloor} - (2(i - 1) - 2^{1 + \\lfloor \\lg(i - 1) \\rfloor}) = 3.$$\n\n\nIf $i = 2^j$ for some $j \\in \\mathbb N$, then\n\n\n$$\\hat c_i = c_i + \\Phi(D_i) - \\Phi(D_{i - 1}) = i + 2i - 2^{1 + j}-(2(i - 1) - 2^{1 + j - 1}) = i + 2i - 2i - 2i + 2 + i = 2.$$\n\n\nThus, the amortized cost is $3$ per operation.\n\n\n17.3-3\n\n\n\n\nConsider an ordinary binary min-heap data structure with $n$ elements supporting the instructions $\\text{INSERT}$ and $\\text{EXTRACT-MIN}$ in $O(\\lg n)$ worst-case time. Give a potential function $\\Phi$ such that the amortized cost of $\\text{INSERT}$ is $O(\\lg n)$ and the amortized cost of $\\text{EXTRACT-MIN}$ is $O(1)$, and show that it works.\n\n\n\n\nLet $D_i$ be the heap after the $i$th operation, and let $D_i$ consist of $n_i$ elements. Also, let $k$ be a constant such that each $\\text{INSERT}$ or $\\text{EXTRACT-MIN}$ operation takes at most $k \\ln n$ time, where $n = \\max(n_{i - 1}, n_i)$. (We don't want to worry about taking the log of $0$, and at least one of $n_{n - 1}$ and $n_i$ is at least $1$. We'll see later why we use the natural log.)\n\n\nDefine\n\n\n$$\n\\Phi(D_i) =\n\\begin{cases}\n0             & \\text{if $n_i = 0$}, \\\\\nk n_i \\ln n_i & \\text{if $n_i > 0$}.\n\\end{cases}\n$$\n\n\nThis function exhibits the characteristics we like in a potential function: if we start with an empty heap, then $\\Phi(D_0) = 0$, and we always maintain that $\\Phi(D_i) \\ge 0$.\n\n\nBefore proving that we achieve the desired amortized times, we show that if $n \\ge 2$, then $n \\ln\\frac{n}{n - 1} \\le 2$. We have\n\n\n\\begin{align}\nn \\ln\\frac{n}{n - 1}\n    & =   n\\ln \\Big(1 + \\frac{1}{n - 1} \\Big) \\\\\n    & =   \\ln \\Big(1 + \\frac{1}{n - 1} \\Big)^n \\\\\n    & \\le \\ln\\big(e^{\\frac{1}{n - 1}} \\big)^n & \\text{(since $1 + x \\le e^2$ for all real $x$)} \\\\\n    & =   \\ln e^{\\frac{n}{n - 1}} \\\\\n    & =   \\frac{n}{n - 1} \\\\\n    & \\le 2,\n\\end{align}\n\n\nassuming that $n \\ge 2$. (The equation $\\ln e^{\\frac{n}{n - 1}} = \\frac{n}{n - 1}$ is why we use the natural log.) If the $i$th operation is an $\\text{INSERT}$, then $n_i = n_{i - 1} + 1$. If the $i$th operation inserts into an empty heap, then $n_i = 1$, $n_{i - 1} = 0$ and the amortized cost is\n\n\n\\begin{align}\n\\hat c_i & =   c_i + \\Phi(D_i) - \\Phi(D_{i - 1}) \\\\\n         & \\le k\\ln 1 + k \\cdot 1\\ln 1 - 0 \\\\\n         & =   0.\n\\end{align}\n\n\nIf the $i$th operation inserts into a nonempty heap, then $n_i = n_{i - 1} + 1$, and the amortized cost is\n\n\n\\begin{align}\n\\hat c_i & =   c_i + \\Phi(D_i) - \\Phi(D_{i - 1}) \\\\\n         & \\le k\\ln n_i + k n_i\\ln n_i - k n_{i - 1}\\ln n_{i - 1} \\\\\n         & =   k\\ln n_i + k n_i\\ln n_i - k(n_i - 1) \\ln(n_i - 1) \\\\\n         & =   k\\ln n_i + k n_i\\ln n_i - kn_i\\ln(n_i - 1) + k\\ln(n_i - 1) \\\\\n         & <   2k\\ln n_i + kn_i \\ln\\frac{n_i}{n_i - 1} \\\\\n         & \\le 2k\\ln n_i + 2k \\\\\n         & =   O(\\lg n_i).\n\\end{align}\n\n\nIf the $i$th operation is an $\\text{EXTRACT-MIN}$, then $n_i = n_{i - 1} - 1$. If the $i$th operation extracts the one and only heap item, then $n_i = 0$, $n_{i - 1} = 1$, and the amortized cost is\n\n\n\\begin{align}\n\\hat{c_i} & =   c_i + \\Phi(D_i) - \\Phi(D_{i - 1}) \\\\\n          & \\le k\\ln 1 + 0 - k \\cdot 1\\ln 1 \\\\\n          & =   0.\n\\end{align}\n\n\nIf the $i$th operation extracts from a heap with more than 1 item, then $n_i = n_{i - 1} - 1$, and $n_{i - 1} \\ge 2$, and the amortized cost is\n\n\n\\begin{align}\n\\hat c_i & =   c_i + \\Phi(D_i) - \\Phi(D_{i - 1}) \\\\\n         & \\le k\\ln n_{i - 1} + kn_i\\ln n_i - kn_{i - 1}\\ln n_{i - 1} \\\\\n         & =   k\\ln n_{i - 1} + k(n_{i - 1} - 1)\\ln(n_{i - 1} - 1) - kn_{i - 1}\\ln n_{i - 1} \\\\\n         & =   k\\ln n_{i - 1} + kn_{i - 1}\\ln(n_{i - 1} - 1) - k\\ln(n_{i - 1} - 1) - kn_{i - 1}\\ln n_{i - 1} \\\\\n         & =   k\\ln\\frac{n_{i - 1}}{n_{i - 1} - 1} + kn_{i - 1}\\ln\\frac{n_{i - 1} - 1}{n_{i - 1}} \\\\\n         & <   k\\ln\\frac{n_{i - 1}}{n_{i - 1} - 1} + kn_{i - 1}\\ln 1 \\\\\n         & =   k\\ln\\frac{n_{i - 1}}{n_{i - 1} - 1} \\\\\n         & \\le k\\ln 2 \\qquad \\text{(since $n_{i - 1} \\ge 2$)} \\\\\n         & =   O(1).\n\\end{align}\n\n\nA slightly different potential function\u2014which may be easier to work with\u2014is as follows. For each node $x$ in the heap, let $d_i(x)$ be the depth of $x$ in $D_i$ . Define\n\n\n\\begin{align}\n\\Phi(D_i) & = \\sum_{x\\in D_i} k(d_i(x) + 1) \\\\\n          & = k \\Bigg(n_i + \\sum_{x\\in D_i} d_i(x) \\Bigg),\n\\end{align}\n\n\nwhere $k$ is defined as before.\n\n\nInitially, the heap has no items, which means that the sum is over an empty set, and so $\\Phi(D_0) = 0$. We always have $\\Phi(D_i) \\ge 0$, as required.\n\n\nObserve that after an $\\text{INSERT}$, the sum changes only by an amount equal to the depth of the new last node of the heap, which is $\\lfloor \\lg n_i \\rfloor$. Thus, the change in potential due to an $\\text{INSERT}$ is $k(1 + \\lfloor \\lg n_i \\rfloor)$, and so the amortized cost is $O(\\lg n_i) + O(\\lg n_i) = O(\\lg n_i) = O(\\lg n)$.\n\n\nAfter an $\\text{EXTRACT-MIN}$, the sum changes by the negative of the depth of the old last node in the heap, and so the potential \ndecreases\n by $k(1 + \\lfloor \\lg n_{i - 1} \\rfloor)$. The amortized cost is at most $k\\lg n_{i - 1} - k(1 + \\lfloor \\lg n_{i - 1} \\rfloor) = O(1)$.\n\n\n17.3-4\n\n\n\n\nWhat is the total cost of executing $n$ of the stack operations $\\text{PUSH}$, $\\text{POP}$, and $\\text{MULTIPOP}$, assuming that the stack begins with $s_0$ objects and finishes with $s_n$ objects?\n\n\n\n\nLet $\\Phi$ be the potential function that returns the number of elements in the stack. We know that for this potential function, we have amortized cost $2$ for $\\text{PUSH}$ operation and amortized cost $0$ for $\\text{POP}$ and $\\text{MULTIPOP}$ operations.\n\n\nThe total amortized cost is\n\n\n$$\\sum_{i = 1}^n \\hat c_i = \\sum_{i = 1}^n c_i + \\Phi(D_n) - \\Phi(D_0).$$\n\n\nUsing the potential function and the known amortized costs, we can rewrite the equation as\n\n\n\\begin{align}\n\\sum_{i = 1}^n c_i \n    & = \\sum_{i = 1}^n \\hat c_i + \\Phi(D_0) - \\Phi(D_n) \\\\\n    & = \\sum_{i = 1}^n \\hat c_i + s_0 - s_n \\\\\n    & \\le 2n + s_0 - s_n,\n\\end{align}\n\n\nwhich gives us the total cost of $O(n + (s_0 - s_n))$. If $s_n \\ge s_0$, then this equals to $O(n)$, that is, if the stack grows, then the work done is limited by the number of operations.\n\n\n(Note that it does not matter here that the potential may go below the starting potential. The condition $\\Phi(D_n) \\ge \\Phi(D_0)$ for all $n$ is only required to have $\\sum_{i = 1}^n \\hat c_i \\ge \\sum_{i = 1}^n c_i$, but we do not need for that to hold in this application.)\n\n\n17.3-5\n\n\n\n\nSuppose that a counter begins at a number with $b$ $1$s in its binary representation, rather than at 0. Show that the cost of performing $n$ $\\text{INCREMENT}$ operations is $O(n)$ if $n = \\Omega(b)$. (Do not assume that $b$ is constant.)\n\n\n\n\n\\begin{align}\n\\sum_{i = 1}^n c_i\n    & =   \\sum_{i = 1}^n \\hat c_i - \\Phi(D_n) + \\Phi(D_0) \\\\\n    & =   n - x + b \\\\\n    & \\le n - x + n \\\\\n    & =   O(n).\n\\end{align}\n\n\n17.3-6\n\n\n\n\nShow how to implement a queue with two ordinary stacks (Exercise 10.1-6) so that the amortized cost of each $\\text{ENQUEUE}$ and each $\\text{DEQUEUE}$ operation is $O(1)$.\n\n\n\n\nWe'll use the accounting method for the analysis. Assign cost $3$ to the $\\text{ENQUEUE}$ operation and $0$ to the $\\text{DEQUEUE}$ operation. Recall the implementation of 10.1-6 where we enqueue by pushing on to the top of stack 1, and dequeue by popping from stack 2.\n\n\nIf stack 2 is empty, then we must pop every element from stack 1 and push it onto stack 2 before popping the top element from stack 2. For each item that we enqueue we accumulate 2 credits. Before we can dequeue an element, it must be moved to stack 2. Note: this might happen prior to the time at which we wish to dequeue it, but it will happen only once overall. One of the 2 credits will be used for  this move. Once an item is on stack 2 its pop only costs $1$ credit, which is exactly the remaining credit associated to the element. Since each operation's cost is $O(1)$, the amortized cost per operation is $O(1)$.\n\n\n17.3-7\n\n\n\n\nDesign a data structure to support the following two operations for a dynamic multiset $S$ of integers, which allows duplicate values:\n\n\n$\\text{INSERT}(S, x)$ inserts $x$ into $S$.\n\n\n$\\text{DELETE-LARGER-HALF}(S)$ deletes the largest $\\lceil |S| / 2 \\rceil$ elements from $S$.\n\n\nExplain how to implement this data structure so that any sequence of $m$ $\\text{INSERT}$ and $\\text{DELETE-LARGER-HALF}$ operations runs in $O(m)$ time. Your implementation should also include a way to output the elements of $S$ in $O(|S|)$ time.\n\n\n\n\nWe'll store all our elements in an array, and if ever it is too large, we will copy all the elements out into an array of twice the length. \n\n\nTo delete the larger half, we first find the element $m$ with order statistic $\\lceil |S| / 2 \\rceil$ by the algor$i$thm presented in section 9.3. Then, scan through the array and copy out the elements that are smaller or equal to $m$ into an array of half the size. \n\n\nSince the delete half operation takes time $O(|S|)$ and reduces the number of elements by $\\lfloor |S| / 2 \\rfloor \\in \\Omega(|S|)$, we can make these operations take ammortized constant time by selecting our potential function to be linear in $|S|$. \n\n\nSince the insert operation only increases $|S|$ by one, we have that there is only a constant amount of work going towards satisfying the potential, so the total ammortized cost of an insertion is still constant. To output all the elements just iterate through the array and output each.",
            "title": "17.3 The potential method"
        },
        {
            "location": "/Chap17/17.3/#173-1",
            "text": "Suppose we have a potential function $\\Phi$ such that $\\Phi(D_i) \\ge \\Phi(D_0)$ for all $i$, but $\\Phi(D_0) \\ne 0$. Show that there exists a potential fuction $\\Phi'$ such that $\\Phi'(D_0) = 0$, $\\Phi'(D_i) \\ge 0$ for all $i \\ge 1$, and the amortized costs using $\\Phi'$ are the same as the amortized costs using $\\Phi$.   Define the potential function $\\Phi'(D_i) = \\Phi(D_i) - \\Phi(D_0)$ for all $i \\ge 1$.  Then  $$\\Phi'(D_0) = \\Phi(D_0) - \\Phi(D_0) = 0,$$  and  $$\\Phi'(D_i) = \\Phi(D_i) - \\Phi(D_0) \\ge 0.$$  The amortized cost is  \\begin{align}\n\\hat c_i' & = c_i + \\Phi'(D_i) - \\Phi'(D_{i - 1}) \\\\\n          & = c_i + (\\Phi(D_i) - \\Phi(D_0)) - (\\Phi(D_{i - 1}) - \\Phi(D_0)) \\\\\n          & = c_i + \\Phi(D_i) - \\Phi(D_{i - 1}) \\\\\n          & = \\hat c_i.\n\\end{align}",
            "title": "17.3-1"
        },
        {
            "location": "/Chap17/17.3/#173-2",
            "text": "Redo Exercise 17.1-3 using a potential method of analysis.   Define the potential function $\\Phi(D_0) = 0$, and $\\Phi(D_i) = 2i - 2^{1 + \\lfloor \\lg i \\rfloor}$ for $i > 0$. For operation 1,  $$\\hat c_i = c_i + \\Phi(D_i) - \\Phi(D_{i - 1}) = 1 + 2i - 2^{1+ \\lfloor \\lg i \\rfloor} - 0 = 1.$$  For operation $i(i > 1)$, if $i$ is not a power of $2$, then  $$\\hat c_i = c_i + \\Phi(D_i) - \\Phi(D_{i - 1}) = 1 + 2i - 2^{1 + \\lfloor \\lg 1 \\rfloor} - (2(i - 1) - 2^{1 + \\lfloor \\lg(i - 1) \\rfloor}) = 3.$$  If $i = 2^j$ for some $j \\in \\mathbb N$, then  $$\\hat c_i = c_i + \\Phi(D_i) - \\Phi(D_{i - 1}) = i + 2i - 2^{1 + j}-(2(i - 1) - 2^{1 + j - 1}) = i + 2i - 2i - 2i + 2 + i = 2.$$  Thus, the amortized cost is $3$ per operation.",
            "title": "17.3-2"
        },
        {
            "location": "/Chap17/17.3/#173-3",
            "text": "Consider an ordinary binary min-heap data structure with $n$ elements supporting the instructions $\\text{INSERT}$ and $\\text{EXTRACT-MIN}$ in $O(\\lg n)$ worst-case time. Give a potential function $\\Phi$ such that the amortized cost of $\\text{INSERT}$ is $O(\\lg n)$ and the amortized cost of $\\text{EXTRACT-MIN}$ is $O(1)$, and show that it works.   Let $D_i$ be the heap after the $i$th operation, and let $D_i$ consist of $n_i$ elements. Also, let $k$ be a constant such that each $\\text{INSERT}$ or $\\text{EXTRACT-MIN}$ operation takes at most $k \\ln n$ time, where $n = \\max(n_{i - 1}, n_i)$. (We don't want to worry about taking the log of $0$, and at least one of $n_{n - 1}$ and $n_i$ is at least $1$. We'll see later why we use the natural log.)  Define  $$\n\\Phi(D_i) =\n\\begin{cases}\n0             & \\text{if $n_i = 0$}, \\\\\nk n_i \\ln n_i & \\text{if $n_i > 0$}.\n\\end{cases}\n$$  This function exhibits the characteristics we like in a potential function: if we start with an empty heap, then $\\Phi(D_0) = 0$, and we always maintain that $\\Phi(D_i) \\ge 0$.  Before proving that we achieve the desired amortized times, we show that if $n \\ge 2$, then $n \\ln\\frac{n}{n - 1} \\le 2$. We have  \\begin{align}\nn \\ln\\frac{n}{n - 1}\n    & =   n\\ln \\Big(1 + \\frac{1}{n - 1} \\Big) \\\\\n    & =   \\ln \\Big(1 + \\frac{1}{n - 1} \\Big)^n \\\\\n    & \\le \\ln\\big(e^{\\frac{1}{n - 1}} \\big)^n & \\text{(since $1 + x \\le e^2$ for all real $x$)} \\\\\n    & =   \\ln e^{\\frac{n}{n - 1}} \\\\\n    & =   \\frac{n}{n - 1} \\\\\n    & \\le 2,\n\\end{align}  assuming that $n \\ge 2$. (The equation $\\ln e^{\\frac{n}{n - 1}} = \\frac{n}{n - 1}$ is why we use the natural log.) If the $i$th operation is an $\\text{INSERT}$, then $n_i = n_{i - 1} + 1$. If the $i$th operation inserts into an empty heap, then $n_i = 1$, $n_{i - 1} = 0$ and the amortized cost is  \\begin{align}\n\\hat c_i & =   c_i + \\Phi(D_i) - \\Phi(D_{i - 1}) \\\\\n         & \\le k\\ln 1 + k \\cdot 1\\ln 1 - 0 \\\\\n         & =   0.\n\\end{align}  If the $i$th operation inserts into a nonempty heap, then $n_i = n_{i - 1} + 1$, and the amortized cost is  \\begin{align}\n\\hat c_i & =   c_i + \\Phi(D_i) - \\Phi(D_{i - 1}) \\\\\n         & \\le k\\ln n_i + k n_i\\ln n_i - k n_{i - 1}\\ln n_{i - 1} \\\\\n         & =   k\\ln n_i + k n_i\\ln n_i - k(n_i - 1) \\ln(n_i - 1) \\\\\n         & =   k\\ln n_i + k n_i\\ln n_i - kn_i\\ln(n_i - 1) + k\\ln(n_i - 1) \\\\\n         & <   2k\\ln n_i + kn_i \\ln\\frac{n_i}{n_i - 1} \\\\\n         & \\le 2k\\ln n_i + 2k \\\\\n         & =   O(\\lg n_i).\n\\end{align}  If the $i$th operation is an $\\text{EXTRACT-MIN}$, then $n_i = n_{i - 1} - 1$. If the $i$th operation extracts the one and only heap item, then $n_i = 0$, $n_{i - 1} = 1$, and the amortized cost is  \\begin{align}\n\\hat{c_i} & =   c_i + \\Phi(D_i) - \\Phi(D_{i - 1}) \\\\\n          & \\le k\\ln 1 + 0 - k \\cdot 1\\ln 1 \\\\\n          & =   0.\n\\end{align}  If the $i$th operation extracts from a heap with more than 1 item, then $n_i = n_{i - 1} - 1$, and $n_{i - 1} \\ge 2$, and the amortized cost is  \\begin{align}\n\\hat c_i & =   c_i + \\Phi(D_i) - \\Phi(D_{i - 1}) \\\\\n         & \\le k\\ln n_{i - 1} + kn_i\\ln n_i - kn_{i - 1}\\ln n_{i - 1} \\\\\n         & =   k\\ln n_{i - 1} + k(n_{i - 1} - 1)\\ln(n_{i - 1} - 1) - kn_{i - 1}\\ln n_{i - 1} \\\\\n         & =   k\\ln n_{i - 1} + kn_{i - 1}\\ln(n_{i - 1} - 1) - k\\ln(n_{i - 1} - 1) - kn_{i - 1}\\ln n_{i - 1} \\\\\n         & =   k\\ln\\frac{n_{i - 1}}{n_{i - 1} - 1} + kn_{i - 1}\\ln\\frac{n_{i - 1} - 1}{n_{i - 1}} \\\\\n         & <   k\\ln\\frac{n_{i - 1}}{n_{i - 1} - 1} + kn_{i - 1}\\ln 1 \\\\\n         & =   k\\ln\\frac{n_{i - 1}}{n_{i - 1} - 1} \\\\\n         & \\le k\\ln 2 \\qquad \\text{(since $n_{i - 1} \\ge 2$)} \\\\\n         & =   O(1).\n\\end{align}  A slightly different potential function\u2014which may be easier to work with\u2014is as follows. For each node $x$ in the heap, let $d_i(x)$ be the depth of $x$ in $D_i$ . Define  \\begin{align}\n\\Phi(D_i) & = \\sum_{x\\in D_i} k(d_i(x) + 1) \\\\\n          & = k \\Bigg(n_i + \\sum_{x\\in D_i} d_i(x) \\Bigg),\n\\end{align}  where $k$ is defined as before.  Initially, the heap has no items, which means that the sum is over an empty set, and so $\\Phi(D_0) = 0$. We always have $\\Phi(D_i) \\ge 0$, as required.  Observe that after an $\\text{INSERT}$, the sum changes only by an amount equal to the depth of the new last node of the heap, which is $\\lfloor \\lg n_i \\rfloor$. Thus, the change in potential due to an $\\text{INSERT}$ is $k(1 + \\lfloor \\lg n_i \\rfloor)$, and so the amortized cost is $O(\\lg n_i) + O(\\lg n_i) = O(\\lg n_i) = O(\\lg n)$.  After an $\\text{EXTRACT-MIN}$, the sum changes by the negative of the depth of the old last node in the heap, and so the potential  decreases  by $k(1 + \\lfloor \\lg n_{i - 1} \\rfloor)$. The amortized cost is at most $k\\lg n_{i - 1} - k(1 + \\lfloor \\lg n_{i - 1} \\rfloor) = O(1)$.",
            "title": "17.3-3"
        },
        {
            "location": "/Chap17/17.3/#173-4",
            "text": "What is the total cost of executing $n$ of the stack operations $\\text{PUSH}$, $\\text{POP}$, and $\\text{MULTIPOP}$, assuming that the stack begins with $s_0$ objects and finishes with $s_n$ objects?   Let $\\Phi$ be the potential function that returns the number of elements in the stack. We know that for this potential function, we have amortized cost $2$ for $\\text{PUSH}$ operation and amortized cost $0$ for $\\text{POP}$ and $\\text{MULTIPOP}$ operations.  The total amortized cost is  $$\\sum_{i = 1}^n \\hat c_i = \\sum_{i = 1}^n c_i + \\Phi(D_n) - \\Phi(D_0).$$  Using the potential function and the known amortized costs, we can rewrite the equation as  \\begin{align}\n\\sum_{i = 1}^n c_i \n    & = \\sum_{i = 1}^n \\hat c_i + \\Phi(D_0) - \\Phi(D_n) \\\\\n    & = \\sum_{i = 1}^n \\hat c_i + s_0 - s_n \\\\\n    & \\le 2n + s_0 - s_n,\n\\end{align}  which gives us the total cost of $O(n + (s_0 - s_n))$. If $s_n \\ge s_0$, then this equals to $O(n)$, that is, if the stack grows, then the work done is limited by the number of operations.  (Note that it does not matter here that the potential may go below the starting potential. The condition $\\Phi(D_n) \\ge \\Phi(D_0)$ for all $n$ is only required to have $\\sum_{i = 1}^n \\hat c_i \\ge \\sum_{i = 1}^n c_i$, but we do not need for that to hold in this application.)",
            "title": "17.3-4"
        },
        {
            "location": "/Chap17/17.3/#173-5",
            "text": "Suppose that a counter begins at a number with $b$ $1$s in its binary representation, rather than at 0. Show that the cost of performing $n$ $\\text{INCREMENT}$ operations is $O(n)$ if $n = \\Omega(b)$. (Do not assume that $b$ is constant.)   \\begin{align}\n\\sum_{i = 1}^n c_i\n    & =   \\sum_{i = 1}^n \\hat c_i - \\Phi(D_n) + \\Phi(D_0) \\\\\n    & =   n - x + b \\\\\n    & \\le n - x + n \\\\\n    & =   O(n).\n\\end{align}",
            "title": "17.3-5"
        },
        {
            "location": "/Chap17/17.3/#173-6",
            "text": "Show how to implement a queue with two ordinary stacks (Exercise 10.1-6) so that the amortized cost of each $\\text{ENQUEUE}$ and each $\\text{DEQUEUE}$ operation is $O(1)$.   We'll use the accounting method for the analysis. Assign cost $3$ to the $\\text{ENQUEUE}$ operation and $0$ to the $\\text{DEQUEUE}$ operation. Recall the implementation of 10.1-6 where we enqueue by pushing on to the top of stack 1, and dequeue by popping from stack 2.  If stack 2 is empty, then we must pop every element from stack 1 and push it onto stack 2 before popping the top element from stack 2. For each item that we enqueue we accumulate 2 credits. Before we can dequeue an element, it must be moved to stack 2. Note: this might happen prior to the time at which we wish to dequeue it, but it will happen only once overall. One of the 2 credits will be used for  this move. Once an item is on stack 2 its pop only costs $1$ credit, which is exactly the remaining credit associated to the element. Since each operation's cost is $O(1)$, the amortized cost per operation is $O(1)$.",
            "title": "17.3-6"
        },
        {
            "location": "/Chap17/17.3/#173-7",
            "text": "Design a data structure to support the following two operations for a dynamic multiset $S$ of integers, which allows duplicate values:  $\\text{INSERT}(S, x)$ inserts $x$ into $S$.  $\\text{DELETE-LARGER-HALF}(S)$ deletes the largest $\\lceil |S| / 2 \\rceil$ elements from $S$.  Explain how to implement this data structure so that any sequence of $m$ $\\text{INSERT}$ and $\\text{DELETE-LARGER-HALF}$ operations runs in $O(m)$ time. Your implementation should also include a way to output the elements of $S$ in $O(|S|)$ time.   We'll store all our elements in an array, and if ever it is too large, we will copy all the elements out into an array of twice the length.   To delete the larger half, we first find the element $m$ with order statistic $\\lceil |S| / 2 \\rceil$ by the algor$i$thm presented in section 9.3. Then, scan through the array and copy out the elements that are smaller or equal to $m$ into an array of half the size.   Since the delete half operation takes time $O(|S|)$ and reduces the number of elements by $\\lfloor |S| / 2 \\rfloor \\in \\Omega(|S|)$, we can make these operations take ammortized constant time by selecting our potential function to be linear in $|S|$.   Since the insert operation only increases $|S|$ by one, we have that there is only a constant amount of work going towards satisfying the potential, so the total ammortized cost of an insertion is still constant. To output all the elements just iterate through the array and output each.",
            "title": "17.3-7"
        },
        {
            "location": "/Chap17/17.4/",
            "text": "17.4-1\n\n\n\n\nSuppose that we wish to implement a dynamic, open-address hash table. Why might we consider the table to be full when its load factor reaches some value $\\alpha$ that is strictly less than $1$? Describe briefly how to make insertion into a dynamic, open-address hash table run in such a way that the expected value of the amortized cost per insertion is $O(1)$. Why is the expected value of the actual cost per insertion not necessarily $O(1)$ for all insertions?\n\n\n\n\nBy theorems 11.6-11.8, the expected cost of performing insertions and searches in an open address hash table approaches infinity as the load factor approaches one, for any load factor fixed away from $1$, the expected time is bounded by a constant though. The expected value of the actual cost my not be $O(1)$ for every insertion because the actual cost may include copying out the current values from the current table into a larger table because it became too full. This would take time that is linear in the number of elements stored.\n\n\n17.4-2\n\n\n\n\nShow that if $\\alpha_{i - 1} \\ge 1 / 2$ and the $i$th operation on a dynamic table is $\\text{TABLE-DELETE}$, then the amortized cost of the operation with respect to the potential function $\\text{(17.6)}$ is bounded above by a constant.\n\n\n\n\n\\begin{align}\n\\hat c_i & = c_i + \\Phi_i - \\Phi_{i - 1} \\\\\n         & = 1 + (2 \\cdot num_i - size_i) - (2 \\cdot (num_i + 1) - size_i) \\\\\n         & = -1.\n\\end{align}\n\n\n17.4-3\n\n\n\n\nSuppose that instead of contracting a table by halving its size when its load factor drops below $1 / 4$, we contract it by multiplying its size by $2 / 3$ when its load factor drops below $1 / 3$. Using the potential function\n\n\n$\\Phi(T) = | 2 \\cdot T.num - T.size |$,\n\n\nshow that the amortized cost of a $\\text{TABLE-DELETE}$ that uses this strategy is bounded above by a constant.\n\n\n\n\nIf $1 / 3 < \\alpha_i \\le 1 / 2$,\n\n\n\\begin{align}\n\\hat c_i & = c_i + \\Phi_i - \\Phi_{i - 1} \\\\\n         & = 1 + (size_i - 2 \\cdot num_i) - (size_i - 2 \\cdot (num_i + 1)) \\\\\n         & = 3.\n\\end{align}\n\n\nIf the $i$th operation does trigger a contraction,\n\n\n\\begin{align}\n\\frac{1}{3} size_{i - 1} & = num_i + 1 \\\\\n            size_{i - 1} & = 3 (num_i + 1) \\\\\n            size_{i}     & = \\frac{2}{3} size_{i - 1} = 2 (num_i + 1).\n\\end{align}\n\\begin{align}\n\\hat c_i & = c_i + \\Phi_i - \\Phi_{i - 1} \\\\\n         & = (num_i + 1) + [2 \\cdot (num_i + 1) - 2 \\cdot num_i] - [3 \\cdot (num_i + 1) - 2 \\cdot (num_i + 1)] \\\\\n         & = 2.\n\\end{align}",
            "title": "17.4 Dynamic tables"
        },
        {
            "location": "/Chap17/17.4/#174-1",
            "text": "Suppose that we wish to implement a dynamic, open-address hash table. Why might we consider the table to be full when its load factor reaches some value $\\alpha$ that is strictly less than $1$? Describe briefly how to make insertion into a dynamic, open-address hash table run in such a way that the expected value of the amortized cost per insertion is $O(1)$. Why is the expected value of the actual cost per insertion not necessarily $O(1)$ for all insertions?   By theorems 11.6-11.8, the expected cost of performing insertions and searches in an open address hash table approaches infinity as the load factor approaches one, for any load factor fixed away from $1$, the expected time is bounded by a constant though. The expected value of the actual cost my not be $O(1)$ for every insertion because the actual cost may include copying out the current values from the current table into a larger table because it became too full. This would take time that is linear in the number of elements stored.",
            "title": "17.4-1"
        },
        {
            "location": "/Chap17/17.4/#174-2",
            "text": "Show that if $\\alpha_{i - 1} \\ge 1 / 2$ and the $i$th operation on a dynamic table is $\\text{TABLE-DELETE}$, then the amortized cost of the operation with respect to the potential function $\\text{(17.6)}$ is bounded above by a constant.   \\begin{align}\n\\hat c_i & = c_i + \\Phi_i - \\Phi_{i - 1} \\\\\n         & = 1 + (2 \\cdot num_i - size_i) - (2 \\cdot (num_i + 1) - size_i) \\\\\n         & = -1.\n\\end{align}",
            "title": "17.4-2"
        },
        {
            "location": "/Chap17/17.4/#174-3",
            "text": "Suppose that instead of contracting a table by halving its size when its load factor drops below $1 / 4$, we contract it by multiplying its size by $2 / 3$ when its load factor drops below $1 / 3$. Using the potential function  $\\Phi(T) = | 2 \\cdot T.num - T.size |$,  show that the amortized cost of a $\\text{TABLE-DELETE}$ that uses this strategy is bounded above by a constant.   If $1 / 3 < \\alpha_i \\le 1 / 2$,  \\begin{align}\n\\hat c_i & = c_i + \\Phi_i - \\Phi_{i - 1} \\\\\n         & = 1 + (size_i - 2 \\cdot num_i) - (size_i - 2 \\cdot (num_i + 1)) \\\\\n         & = 3.\n\\end{align}  If the $i$th operation does trigger a contraction,  \\begin{align}\n\\frac{1}{3} size_{i - 1} & = num_i + 1 \\\\\n            size_{i - 1} & = 3 (num_i + 1) \\\\\n            size_{i}     & = \\frac{2}{3} size_{i - 1} = 2 (num_i + 1).\n\\end{align}\n\\begin{align}\n\\hat c_i & = c_i + \\Phi_i - \\Phi_{i - 1} \\\\\n         & = (num_i + 1) + [2 \\cdot (num_i + 1) - 2 \\cdot num_i] - [3 \\cdot (num_i + 1) - 2 \\cdot (num_i + 1)] \\\\\n         & = 2.\n\\end{align}",
            "title": "17.4-3"
        },
        {
            "location": "/Chap17/Problems/17-1/",
            "text": "Chapter 30 examines an important algorithm called the fast Fourier transform, or $\\text{FFT}$. The first step of the $\\text{FFT}$ algorithm performs a \nbit-reversal permutation\n on an input array $A[0..n - 1]$ whose length is $n = 2^k$ for some nonnegative integer $k$. This permutation swaps elements whose indices have binary representations that are the reverse of each other.\n\n\nWe can express each index $a$ as a $k$-bit sequence $\\langle a_{k - 1}, a_{k - 2}, \\ldots, a_0 \\rangle$, where $a = \\sum_{i = 0}^{k - 1} a_i 2^i$. We define\n\n\n$\\text{rev}_k(\\langle a_{k - 1}, a_{k - 2}, \\ldots, a_0 \\rangle) = \\langle a_0, a_1, \\ldots, a_{k - 1} \\rangle$;\n\n\nthus,\n\n\n$$\\text{rev}_k(a) = \\sum_{i = 0}^{k - 1} a_{k - i - 1} 2^i.$$\n\n\nFor example, if $n = 16$ (or, equivalently, $k = 4$), then $\\text{rev}_k(3) = 12$, since the $4$-bit representation of $3$ is $0011$, which when reversed gives $1100$, the $4$-bit representation of $12$.\n\n\na.\n Given a function $\\text{rev}_k$ that runs in $\\Theta(k)$ time, write an algorithm to perform the bit-reversal permutation on an array of length $n = 2^k$ in $O(nk)$ time.\n\n\nWe can use an algorithm based on an amortized analysis to improve the running time of the bit-reversal permutation. We maintain a ''bit-reversed counter'' and a procedure $\\text{BIT-REVERSED-INCREMENT}$ that, when given a bit-reversed-counter value $a$, produces $\\text{rev}_k(\\text{rev}_k(a) + 1)$. If $k = 4$, for example, and the bit-reversed counter starts at $0$, then successive calls to $\\text{BIT-REVERSED-INCREMENT}$ produce the sequence\n\n\n$$0000, 1000, 0100, 1100, 0010, 1010, \\ldots = 0, 8, 4, 12, 2, 10, \\ldots.$$\n\n\nb.\n Assume that the words in your computer store $k$-bit values and that in unit time, your computer can manipulate the binary values with operations such as shifting left or right by arbitrary amounts, bitwise-$\\text{AND}$, bitwise-$\\text{OR}$, etc. Describe an implementation of the $\\text{BIT-REVERSED-INCREMENT}$ procedure that allows the bit-reversal permutation on an $n$-element array to be performed in a total of $O(n)$ time.\n\n\nc.\n Suppose that you can shift a word left or right by only one bit in unit time. Is it still possible to implement an $O(n)$-time bit-reversal permutation?\n\n\n\n\na.\n Initialize a second array of length $n$ to all trues, then, going through the indices of the original array in any order, if the corresponding entry in the second array is true, then swap the element at the current index with the element at the bit-reversed position, and set the entry in the second array corresponding to the bit-reversed index equal to false. Since we are running $rev_k < n$ times, the total runtime is $O(nk)$.\n\n\nb.\n Doing a bit reversed increment is the same thing as adding a one to the leftmost position where all carries are going to the left instead of the right. \n\n\nBIT\n-\nREVERSED\n-\nINCREMENT\n(\na\n)\n\n    \nlet\n \nm\n \nbe\n \na\n \n1\n \nfollowed\n \nby\n \nk\n \n-\n \n1\n \n0\ns\n\n    \nwhile\n \nm\n \nbitwise\n-\nAND\n \nis\n \nnot\n \nzero\n\n        \na\n \n=\n \na\n \nbitwise\n-\nXOR\n \nm\n\n        \nshift\n \nm\n \nright\n \nby\n \n1\n\n    \nm\n \nbitwise\n-\nOR\n \na\n\n\n\n\n\nBy a similar analysis to the binary counter (just look at the problem in a mirror), this $\\text{BIT-REVERSED-INCREMENT}$ will take constant ammortized time. So, to perform the bit-reversed permutation, have a normal binary counter and a bit reversed counter, then, swap the values of the two counters and increment. Do not swap however if those pairs of elements have already been swapped, which can be kept track of in a auxiliary array.\n\n\nc.\n The $\\text{BIT-REVERSED-INCREMENT}$ procedure given in the previous part only uses single shifts to the right, not arbitrary shifts.",
            "title": "17-1 Bit-reversed binary counter"
        },
        {
            "location": "/Chap17/Problems/17-2/",
            "text": "Binary search of a sorted array takes logarithmic search time, but the time to insert a new element is linear in the size of the array. We can improve the time for insertion by keeping several sorted arrays.\n\n\nSpecifically, suppose that we wish to support $\\text{SEARCH}$ and $\\text{INSERT}$ on a set of $n$ elements. Let $k = \\lceil \\lg(n + 1) \\rceil$, and let the binary representation of $n$ be $\\langle n_{k - 1}, n_{k - 2}, \\ldots, n_0 \\rangle$. We have $k$ sorted arrays $A_0, A_1, \\ldots, A_{k - 1}$, where for $i = 0, 1, \\ldots, k - 1$, the length of array $A_i$ is $2^i$. Each array is either full or empty, depending on whether $n_i = 1$ or $n_i = 0$, respectively. The total number of elements held in all $k$ arrays is therefore $\\sum_{i = 0}^{k - 1} n_i 2^i = n$. Although each individual array is sorted, elements in different arrays bear no particular relationship to each other.\n\n\na.\n Describe how to perform the $\\text{SEARCH}$ operation for this data structure. Analyze its worst-case running time.\n\n\nb.\n Describe how to perform the $\\text{INSERT}$ operation. Analyze its worst-case and amortized running times.\n\n\nc.\n Discuss how to implement $\\text{DELETE}$.\n\n\n\n\na.\n The $\\text{SEARCH}$ operation can be performed by searching each of the individually sorted arrays. Since all the individual arrays are sorted, searching one of them using a binary search algorithm takes $O(\\lg m)$ time, where $m$ is the size of the array. In an unsuccessful search, the time is $\\Theta(\\lg m)$. In the worst case, we may assume that all the arrays $A_0, A_1, \\ldots, A_{k - 1}$ are full, $k = \\lceil \\lg(n + 1) \\rceil$, and we perform an unsuccessful search. The total time taken is\n\n\n\\begin{align}\nT(n) & = \\Theta(\\lg 2^{k - 1} + \\lg 2^{k - 2} + \\cdots + \\lg 2^1 + \\lg 2^0) \\\\\n     & = \\Theta((k - 1) + (k - 2) + \\cdots + 1 + 0) \\\\\n     & = \\Theta(k(k - 1) / 2) \\\\\n     & = \\Theta(\\lceil \\lg(n + 1)\\rceil(\\lceil \\lg(n + 1) \\rceil) - 1) / 2) \\\\\n     & = \\Theta(\\lg^2 n).\n\\end{align}\n\n\nThus, the worst-case running time is $\\Theta(\\lg^2 n)$.\n\n\nb.\n We create a new sorted array of size $1$ containing the new element to be inserted. If array $A_0$ (which has size $1$) is empty, then we replace $A_0$ with the new sorted array. Otherwise, we merge sort the two arrays into another sorted array of size $2$. If $A_1$ is empty, then we replace $A_1$ with the new array; otherwise we merge sort the arrays as before and continue. Since array $A_i$ is of size $2^i$, if we merge sort two arrays of size $2^i$ each, we obtain one of size $2^{i + 1}$, which is the size of $A_{i + 1}$. Thus, this method will result in another list of arrays in the same structure that we had before.\n\n\nLet us analyze its worst-case running time. We will assume that merge sort takes $2m$ time to merge two sorted lists of size $m$ each. If all the arrays $A_0, A_1, \\ldots, A_{k - 2}$ are full, then the running time to fill array $A_{k - 1}$ would be\n\n\n\\begin{align}\nT(n) & = 2(2^0 + 2^1 + \\cdots + 2^{k - 2}) \\\\\n     & = 2(2^{k - 1} - 1) \\\\\n     & = 2^k - 2 \\\\\n     & = \\Theta(n).\n\\end{align}\n\n\nTherefore, the worst-case time to insert an element into this data structure is $\\Theta(n)$.\n\n\nHowever, let us now analyze the amortized running time. Using the aggregate method, we compute the total cost of a sequence of $n$ inserts, starting with the empty data structure. Let $r$ be the position of the rightmost $0$ in the binary representation $\\langle n_{k - 1}, n_{k - 2}, \\ldots, n_0 \\rangle$ of $n$, so that $n_j = 1$ for $j = 0, 1, \\ldots, r - 1$. The cost of an insertion when $n$ items have already been inserted is\n\n\n$$\\sum_{j = 0}^{r - 1} 2 \\cdot 2^j = O(2^r).$$\n\n\nFurthermore, $r = 0$ half the time, $r = 1$ a quarter of the time, and so on. There are at most $\\lceil n / 2^r \\rceil$ insertions for each value of $r$. The total cost of the $n$ operations is therefore bounded by\n\n\n$$O\\Bigg(\\sum_{r = 0}^{\\lceil \\lg(n + 1) \\rceil} \\bigg(\\bigg\\lceil \\frac{n}{2^r} \\bigg\\rceil\\bigg) 2^r \\Bigg) = O(n\\lg n).$$\n\n\nThe amortized cost per $\\text{INSERT}$ operation, therefore is $O(\\lg n)$.\n\n\nWe can also use the accounting method to analyze the running time. We can charge $k$ to insert an element. $\\$1$ pays for the insertion, and we put $\\$(k - 1)$ on the inserted item to pay for it being involved in merges later on. Each time it is merged, it moves to a higher-indexed array, i.e., from $A_i$ to $A_{i + 1}$. It can move to a higher-indexed array at most $k - 1$ times, and so the $\\$(k - 1)$ on the item suffices to pay for all the times it will ever be involved in merges. Since $k = \\Theta(\\lg n)$, we have an amortized cost of $\\Theta(\\lg n)$ per insertion.\n\n\nc.\n $\\text{DELETE}(x)$ will be implemented as follows:\n\n\n\n\nFind the smallest $j$ for which the array $A_j$ with $2^j$ elements is full. Let $y$ be the last element of $A_j$.\n\n\nLet $x$ be in the array $A_i$. If necessary, find which array this is by using the search procedure.\n\n\nRemove $x$ from $A_i$ and put $y$ into $A_i$ . Then move $y$ to its correct place in $A_i$ .\n\n\nDivide $A_j$ (which now has $2^j - 1$ elements left): The first element goes into array $A_0$ , the next 2 elements go into array $A_1$ , the next 4 elements go into array $A_2$, and so forth. Mark array $A_j$ as empty. The new arrays are created already sorted.\n\n\n\n\nThe cost of $\\text{DELETE}$ is $\\Theta(n)$ in the worst case, where $i = k - 1$ and $j = k - 2: \\Theta(\\lg n)$ to find $A_j$, $\\Theta(\\lg^2 n)$ to find $A_i$, $\\Theta(2^i) = \\Theta(n)$ to put $y$ in its correct place in array $A_i$, and $\\Theta(2^j) = \\Theta(n)$ to divide array $A_j$ . The following sequence of $n$ operations, where $n / 3$ is a power of $2$, yields an amortized cost that is no better: perform $n / 3$ $\\text{INSERT}$ operations, followed by $n / 3$ pairs of $\\text{DELETE}$ and $\\text{INSERT}$. It costs $O(n\\lg n)$ to do the first $n / 3$ $\\text{INSERT}$ operations. This creates a single full array. Each subsequent $\\text{DELETE}$/$\\text{INSERT}$ pair costs $\\Theta(n)$ for the $\\text{DELETE}$ to divide the full array and another $\\Theta(n)$ for the $\\text{INSERT}$ to recombine it. The total is then $\\Theta(n^2)$, or $\\Theta(n)$ per operation.",
            "title": "17-2 Making binary search dynamic"
        },
        {
            "location": "/Chap17/Problems/17-3/",
            "text": "Consider an ordinary binary search tree augmented by adding to each node $x$ the attribute $x.size$ giving the number of keys stored in the subtree rooted at $x$. Let $\\alpha$ be a constant in the range $1 / 2 \\le \\alpha < 1$. We say that a given node $x$ is \n$\\alpha$-balanced\n if $x.left.size \\le \\alpha \\cdot x.size$ and $x.right.size \\le \\alpha \\cdot x.size$. The tree as a whole is \n$\\alpha$-balanced\n if every node in the tree is $\\alpha$-balanced. The following amortized approach to maintaining weight-balanced trees was suggested by G. Varghese.\n\n\na.\n A $1 / 2$-balanced tree is, in a sense, as balanced as it can be. Given a node $x$ in an arbitrary binary search tree, show how to rebuild the subtree rooted at $x$ so that it becomes $1 / 2$-balanced. Your algorithm should run in time $\\Theta(x.size)$, and it can use $O(x.size)$ auxiliary storage.\n\n\nb.\n Show that performing a search in an $n$-node $\\alpha$-balanced binary search tree takes $O(\\lg n)$ worst-case time.\n\n\nFor the remainder of this problem, assume that the constant $\\alpha$ is strictly greater than $1 / 2$. Suppose that we implement $\\text{INSERT}$ and $\\text{DELETE}$ as usual for an $n$-node binary search tree, except that after every such operation, if any node in the tree is no longer $\\alpha$-balanced, then we \"rebuild\" the subtree rooted at the highest such node in the tree so that it becomes $1 / 2$-balanced.\n\n\nWe shall analyze this rebuilding scheme using the potential method. For a node $x$ in a binary search tree $T$, we define\n\n\n$$\\Delta(x) = |x.left.size - x.right.size|,$$\n\n\nand we define the potential of $T$ as\n\n\n$$\\Phi(T) = c \\sum_{x \\in T: \\Delta(x) \\ge 2} \\Delta(x),$$\n\n\nwhere $c$ is a sufficiently large constant that depends on $\\alpha$.\n\n\nc.\n Argue that any binary search tree has nonnegative potential and that a $1 / 2$-balanced tree has potential $0$.\n\n\nd.\n Suppose that $m$ units of potential can pay for rebuilding an $m$-node subtree. How large must $c$ be in terms of $\\alpha$ in order for it to take $O(1)$ amortized time to rebuild a subtree that is not $\\alpha$-balanced?\n\n\ne.\n Show that inserting a node into or deleting a node from an $n$-node $\\alpha$-balanced tree costs $O(\\lg n)$ amortized time.\n\n\n\n\na.\n Since we have $O(x.size)$ auxiliary space, we will take the tree rooted at $x$ and write down an inorder traversal of the tree into the extra space. This will only take linear time to do because it will visit each node thrice, once when passing to its left child, once when the nodes value is output and passing to the right child, and once when passing to the parent. Then, once the inorder traversal is written down, we can convert it back to a binary tree by selecting the median of the list to be the root, and recursing on the two halves of the list that remain on both sides. Since we can index into the middle element of a list in constant time, we will have the recurrence\n\n\n$$T(n) = 2T(n / 2) + 1,$$\n\n\nwhich has solution that is linear. Since both trees come from the same underlying inorder traversal, the result is a $\\text{BST}$ since the original was. Also, since the root at each point was selected so that half the elements are larger and half the elements are smaller, it is a $1 / 2$-balanced tree.\n\n\nb.\n We will show by induction that any tree with $\\le \\alpha^{-d} + d$ elements has a depth of at most $d$. This is clearly true for $d = 0$ because any tree with a single node has depth $0$, and since $\\alpha^0 = 1$, we have that our restriction on the number of elements requires there to only be one. Now, suppose that in some inductive step we had a contradiction, that is, some tree of depth $d$ that is $\\alpha$ balanced but has more than $\\alpha - d$ elements.\n\n\nWe know that both of the subtrees are alpha balanced, and by being alpha balanced at the root, we have\n\n\n$$root.left.size \\le \\alpha \\cdot root.size,$$\n\n\nwhich implies\n\n\n$$root.right.size > root.size - \\alpha \\cdot root.size - 1.$$\n\n\nSo, \n\n\n\\begin{align}\nroot.right.size & >   (1 - \\alpha)root.size - 1 \\\\\n                & >   (1 - \\alpha)\\alpha - d + d - 1 \\\\\n                & =   (\\alpha - 1 - 1)\\alpha - d + 1 + d - 1 \\\\\n                & \\ge \\alpha - d + 1 + d - 1,\n\\end{align}\n\n\nwhich is a contradiction to the fact that it held for all smaller values of $d$ because any child of a tree of depth d has depth $d - 1$.\n\n\nc.\n The potential function is a sum of $\\Delta(x)$ each of which is the absolute value of a quantity, so, since it is a sum of nonnegative values, it is nonnegative regardless of the input $\\text{BST}$.\n\n\nIf we suppose that our tree is $1 / 2$-balanced, then, for every node $x$, we'll have that $\\Delta(x) \\le 1$, so, the sum we compute to find the potential will be over no nonzero terms.\n\n\nd.\n\n\n\\begin{align}\n       \\hat c_i & =   c_i + \\Phi(D_i) - \\Phi(D_{i - 1}) \\\\\n           O(1) & =   m + \\Phi(D_i) - \\Phi(D_{i - 1}) \\\\\n\\Phi(D_{i - 1}) & =   m + \\Phi(D_i) \\\\\n\\Phi(D_{i - 1}) & \\ge m.\n\\end{align}\n\n\n\\begin{align}\n\\Delta(x) & =   x.left.size - x.right.size \\\\\n          & \\ge \\alpha \\cdot m - ((1 - \\alpha) m - 1) \\\\\n          & =   (2\\alpha - 1)m + 1.\n\\end{align}\n\n\n\\begin{align}\nm & \\le c((2\\alpha - 1)m + 1) \\\\\nc & \\ge \\frac{m}{(2\\alpha - 1)m + 1} \\\\\n  & \\ge \\frac{1}{2\\alpha}.\n\\end{align}\n\n\ne.\n Suppose that our tree is $\\alpha$ balanced. Then, we know that performing a search takes time $O(\\lg(n))$. So, we perform that search and insert the element that we need to insert or delete the element we found. Then, we may have made the tree become unbalanced. However, we know that since we only changed one position, we have only changed the $\\Delta$ value for all of the parents of the node that we either inserted or deleted. Therefore, we can rebuild the balanced properties starting at the lowest such unbalanced node and working up. \n\n\nSince each one only takes ammortized constant time, and there are $O(\\lg(n))$ many trees made unbalanced, tot total time to rebalanced every subtree is $O(\\lg(n))$ ammortized time.",
            "title": "17-3 Amortized weight-balanced trees"
        },
        {
            "location": "/Chap17/Problems/17-4/",
            "text": "There are four basic operations on red-black trees that perform \nstructural modifications\n: node insertions, node deletions, rotations, and color changes. We have seen that $\\text{RB-INSERT}$ and $\\text{RB-DELETE}$ use only $O(1)$ rotations, node insertions, and node deletions to maintain the red-black properties, but they may make many more color changes.\n\n\na.\n Describe a legal red-black tree with $n$ nodes such that calling $\\text{RB-INSERT}$ to add the $(n + 1)$st node causes $\\Omega(\\lg n)$ color changes. Then describe a legal red-black tree with $n$ nodes for which calling $\\text{RB-DELETE}$ on a particular node causes $\\Omega(\\lg n)$ color changes.\n\n\nAlthough the worst-case number of color changes per operation can be logarithmic, we shall prove that any sequence of $m$ $\\text{RB-INSERT}$ and $\\text{RB-DELETE}$ operations on an initially empty red-black tree causes $O(m)$ structural modifications in the worst case. Note that we count each color change as a structural modification.\n\n\nb.\n Some of the cases handled by the main loop of the code of both $\\text{RB-INSERT-FIXUP}$ and $\\text{RB-DELETE-FIXUP}$ are \nterminating\n: once encountered, they cause the loop to terminate after a constant number of additional operations. For each of the cases of $\\text{RB-INSERT-FIXUP}$ and $\\text{RB-DELETE-FIXUP}$, specify which are terminating and which are not. ($\\textit{Hint:}$ Look at Figures 13.5, 13.6, and 13.7.)\n\n\nWe shall first analyze the structural modifications when only insertions are performed. Let $T$ be a red-black tree, and define $\\Phi(T)$ to be the number of red nodes in $T$. Assume that $1$ unit of potential can pay for the structural modifications performed by any of the three cases of $\\text{RB-INSERT-FIXUP}$.\n\n\nc.\n Let $T'$ be the result of applying Case 1 of $\\text{RB-INSERT-FIXUP}$ to $T$. Argue that $\\Phi(T') = \\Phi(T) - 1$.\n\n\nd.\n When we insert a node into a red-black tree using $\\text{RB-INSERT}$, we can break the operation into three parts. List the structural modifications and potential changes resulting from lines 1\u201316 of $\\text{RB-INSERT}$, from nonterminating cases of $\\text{RB-INSERT-FIXUP}$, and from terminating cases of $\\text{RB-INSERT-FIXUP}$.\n\n\ne.\n Using part (d), argue that the amortized number of structural modifications performed by any call of $\\text{RB-INSERT}$ is $O(1)$.\n\n\nWe now wish to prove that there are $O(m)$ structural modifications when there are both insertions and deletions. Let us define, for each node $x$,\n\n\n$$\nw(x) =\n\\begin{cases}\n    0 & \\text{ if } x \\text{ is red}, \\\\\n\n    1 & \\text{ if } x \\text{ is black and has no red children}, \\\\\n\n    0 & \\text{ if } x \\text{ is black and has one red children}, \\\\\n    2 & \\text{ if } x \\text{ is black and has two red children}. \\\\\n\n\\end{cases}\n$$\n\n\nNow we redefine the potential of a red-black tree $T$ as\n\n\n$$\\Phi(T) = \\sum_{x \\in T} w(x),$$\n\n\nand let $T'$ be the tree that results from applying any nonterminating case of $\\text{RB-INSERT-FIXUP}$ or $\\text{RB-DELETE-FIXUP}$ to $T$.\n\n\nf.\n Show that $\\Phi(T') \\le \\Phi(T) - 1$ for all nonterminating cases of $\\text{RB-INSERT-FIXUP}$. Argue that the amortized number of structural modifications performed by any call of $\\text{RB-INSERT-FIXUP}$ is $O(1)$.\n\n\ng.\n Show that $\\Phi(T') \\le \\Phi(T) - 1$ for all nonterminating cases of $\\text{RB-DELETE-FIXUP}$. Argue that the amortized number of structural modifications performed by any call of $\\text{RB-DELETE-FIXUP}$ is $O(1)$.\n\n\nh.\n Complete the proof that in the worst case, any sequence of $m$ $\\text{RB-INSERT}$ and $\\text{RB-DELETE}$ operations performs $O(m)$ structural modifications.\n\n\n\n\na.\n For $\\text{RB-INSERT}$, consider a complete red-black tree in which the colors alternate between levels. That is, the root is black, the children of the root are red, the grandchildren of the root are black, the great-grandchildren of the root are red, and so on. When a node is inserted as a red child of one of the red leaves, then case 1 of $\\text{RB-INSERT-FIXUP}$ occurs $(\\lg(n + 1)) / 2$ times, so that there are \u007f$\\Omega(\\lg n)$ color changes to fix the colors of nodes on the path from the inserted node to the root.\n\n\nFor $\\text{RB-DELETE}$, consider a complete red-black tree in which all nodes are black. If a leaf is deleted, then the double blackness will be pushed all the way up to the root, with a color change at each level (case 2 of $\\text{RB-DELETE-FIXUP}$), for a total of \u007f$\\Omega(\\lg n)$ color changes.\n\n\nb.\n All cases except for case 1 of $\\text{RB-INSERT-FIXUP}$ and case 2 of $\\text{RB-DELETE-FIXUP}$ are terminating.\n\n\nc.\n Case 1 of $\\text{RB-INSERT-FIXUP}$ reduces the number of red nodes by 1. As Figure 13.5 shows, node $z$'s parent and uncle change from red to black, and $z$'s grandparent changes from black to red. Hence, $\\Phi(T') = \\Phi(T) - 1$.\n\n\nd.\n Lines 1\u201316 of $\\text{RB-INSERT}$ cause one node insertion and a unit increase in potential. The nonterminating case of $\\text{RB-INSERT-FIXUP}$ (Case 1) makes three color changes and decreases the potential by 1. The terminating cases of $\\text{RB-INSERT-FIXUP}$ (cases 2 and 3) cause one rotation each and do not affect the potential. (Although case 3 makes color changes, the potential does not change. As Figure 13.6 shows, node $z$'s parent changes from red to black, and $z$'s grandparent changes from black to red.)\n\n\ne.\n The number of structural modifications and amount of potential change resulting from lines 1\u201316 of $\\text{RB-INSERT}$ and from the terminating cases of $\\text{RB-INSERT-FIXUP}$ are $O(1)$, and so the amortized number of structural modifications of these parts is $O(1)$. The nonterminating case of $\\text{RB-INSERT-FIXUP}$ may repeat $O(\\lg n)$ times, but its amortized number of structural modifications is $0$, since by our assumption the unit decrease in the potential pays for the structural modifications needed. Therefore, the amortized number of structural modifications performed by $\\text{RB-INSERT}$ is $O(1)$.\n\n\nf.\n From Figure 13.5, we see that case 1 of $\\text{RB-INSERT-FIXUP}$ makes the following changes to the tree:\n\n\n\n\nChanges a black node with two red children (node $C$) to a red node, resulting in a potential change of $-2$.\n\n\nChanges a red node (node $A$ in part (a) and node $B$ in part (b)) to a black node with one red child, resulting in no potential change.\n\n\nChanges a red node (node $D$) to a black node with no red children, resulting in a potential change of $1$.\n\n\n\n\nThe total change in potential is $-1$, which pays for the structural modifications performed, and thus the amortized number of structural modifications in case 1 (the nonterminating case) is $0$. The terminating cases of $\\text{RB-INSERT-FIXUP}$ cause $O(1)$ structural changes. Because $w(v)$ is based solely on node colors and the number of color changes caused by terminating cases is $O(1)$, the change in potential in terminating cases is $O(1)$. Hence, the amortized number of structural modifications in the terminating cases is $O(1)$. The overall amortized number of structural modifications in $\\text{RB-INSERT}$, therefore, is $O(1)$.\n\n\ng.\n Figure 13.7 shows that case 2 of $\\text{RB-DELETE-FIXUP}$ makes the following changes to the tree:\n\n\n\n\nChanges a black node with no red children (node $D$) to a red node, resulting in a potential change of $-1$.\n\n\nIf $B$ is red, then it loses a black child, with no effect on potential.\n\n\nIf $B$ is black, then it goes from having no red children to having one red child, resulting in a potential change of $-1$. \n\n\n\n\nThe total change in potential is either $-1$ or $-2$, depending on the color of $B$. In either case, one unit of potential pays for the structural modifications performed, and thus the amortized number of structural modifications in case 2 (the nonterminating case) is at most $0$. The terminating cases of $\\text{RB-DELETE}$ cause $O(1)$ structural changes. Because $w(v)$ is based solely on node colors and the number of color changes caused by terminating cases is $O(1)$, the change in potential in terminating cases is $O(1)$. Hence, the amortized number of structural changes in the terminating cases is $O(1)$. The overall amortized number of structural modifications in $\\text{RB-DELETE-FIXUP}$, therefore, is $O(1)$.\n\n\nh.\n Since the amortized number structural modification in each operation is $O(1)$, the actual number of structural modifications for any sequence of $m$ $\\text{RB-INSERT}$ and $\\text{RB-DELETE}$ operations on an initially empty red-black tree is $O(m)$ in the worst case.",
            "title": "17-4 The cost of restructuring red-black trees"
        },
        {
            "location": "/Chap17/Problems/17-5/",
            "text": "A \nself-organizing\n list is a linked list of $n$ elements, in which each element has a unique key. When we search for an element in the list, we are given a key, and we want to find an element with that key.\n\n\nA self-organizing list has two important properties:\n\n\n\n\nTo find an element in the list, given its key, we must traverse the list from the beginning until we encounter the element with the given key. If that element is the $k$th element from the start of the list, then the cost to find the element is $k$.\n\n\nWe may reorder the list elements after any operation, according to a given rule with a given cost. We may choose any heuristic we like to decide how to reorder the list.\n\n\n\n\nAssume that we start with a given list of $n$ elements, and we are given an access sequence $\\sigma = \\langle \\sigma_1, \\sigma_2, \\ldots, \\sigma_m \\rangle$ of keys to find, in order. The cost of the sequence is the sum of the costs of the individual accesses in the sequence.\n\n\nOut of the various possible ways to reorder the list after an operation, this problem focuses on transposing adjacent list elements-switching their positions in the list\u2014with a unit cost for each transpose operation. You will show, by means of a potential function, that a particular heuristic for reordering the list, move-to-front, entails a total cost no worse than 4 times that of any other heuristic for maintaining the list order\u2014even if the other heuristic knows the access sequence in advance! We call this type of analysis a \ncompetitive analysis\n.\n\n\nFor a heuristic $H$ and a given initial ordering of the list, denote the access cost of sequence $\\sigma$ by $C_H(\\sigma)$ Let $m$ be the number of accesses in $\\sigma$.\n\n\na.\n Argue that if heuristic $H$ does not know the access sequence in advance, then the worst-case cost for $H$ on an access sequence $\\sigma$ is $C_H(\\sigma) = \\Omega(mn)$.\n\n\nWith the \nmove-to-front\n heuristic, immediately after searching for an element $x$, we move $x$ to the first position on the list (i.e., the front of the list).\n\n\nLet $\\text{rank}_L(x)$ denote the rank of element $x$ in list $L$, that is, the position of $x$ in list $L$. For example, if $x$ is the fourth element in $L$, then $\\text{rank}_L(x) = 4$. Let $c_i$ denote the cost of access $\\sigma_i$ using the move-to-front heuristic, which includes the cost of finding the element in the list and the cost of moving it to the front of the list by a series of transpositions of adjacent list elements.\n\n\nb.\n Show that if $\\sigma_i$ accesses element $x$ in list $L$ using the move-to-front heuristic, then $c_i = 2 \\cdot \\text{rank}_L(x) - 1$.\n\n\nNow we compare move-to-front with any other heuristic $\\text H$ that processes an access sequence according to the two properties above. Heuristic $\\text H$ may transpose elements in the list in any way it wants, and it might even know the entire access sequence in advance.\n\n\nLet $L_i$ be the list after access $\\sigma_i$ using move-to-front, and let $L_i^*$ be the list after access $\\sigma_i$ using heuristic $\\text H$. We denote the cost of access $\\sigma_i$ by $c_i$ for move-to-front and by $c_i^*$ for heuristic $\\text H$. Suppose that heuristic $\\text H$ performs $t_i^*$ transpositions during access $\\sigma_i$.\n\n\nc.\n In part (b), you showed that $c_i = 2 \\cdot \\text{rank}_{L_{i - 1}}(x) - 1$. Now show that $c_i^* = \\text{rank}_{L_{i - 1}^*}(x) + t_i^*$.\n\n\nWe define an \ninversion\n in list $L_i$ as a pair of elements $y$ and $z$ such that $y$ precedes $z$ in $L_i$ and $z$ precedes $y$ in list $L_i^*$. Suppose that list $L_i$ has $q_i$ inversions after processing the access sequence $\\langle \\sigma_1, \\sigma_2, \\ldots, \\sigma_i \\rangle$. Then, we define a potential function $\\Phi$ that maps $L_i$ to a real number by $\\Phi(L_i) = 2q_i$. For example, if $L_i$ has the elements $\\langle e, c, a, d, b \\rangle$ and $L_i^*$ has the elements $\\langle c, a, b, d, e \\rangle$, then $L_i$ has 5 inversions $((e, c), (e, a), (e, d), (e, b), (d, b))$, and so $\\Phi(L_i) = 10$. Observe that $\\Phi(L_i) \\ge 0$ for all $i$ and that, if move-to-front and heuristic $\\text H$ start with the same list $L_0$, then $\\Phi(L_0) = 0$.\n\n\nd.\n Argue that a transposition either increases the potential by $2$ or decreases the potential by $2$.\n\n\nSuppose that access $\\sigma_i$ finds the element $x$. To understand how the potential changes due to $\\sigma_i$, let us partition the elements other than $x$ into four sets, depending on where they are in the lists just before the $i$th access:\n\n\n\n\nSet $A$ consists of elements that precede $x$ in both $L_{i - 1}$ and $L_{i - 1}^*$.\n\n\nSet $B$ consists of elements that precede $x$ in $L_{i - 1}$ and follow $x$ in $L_{i - 1}^*$.\n\n\nSet $C$ consists of elements that follow $x$ in $L_{i - 1}$ and precede $x$ in $L_{i - 1}^*$.\n\n\nSet $D$ consists of elements that follow $x$ in both $L_{i - 1}$ and $L_{i - 1}^*$.\n\n\n\n\ne.\n Argue that $\\text{rank}_{L_{i - 1}}(x) = |A| + |B| + 1$ and $\\text{rank}_{L_{i - 1}^*}(x) = |A| + |C| + 1$.\n\n\nf.\n Show that access $\\sigma_i$ causes a change in potential of\n\n\n$$\\Phi(L_i) - \\Phi(L_{i - 1}) \\le 2(|A| - |B| + t_i^*),$$\n\n\nwhere, as before, heuristic $\\text H$ performs $t_i^*$ transpositions during access $\\sigma_i$.\n\n\nDefine the amortized cost $\\hat c_i$ of access $\\sigma_i$ by $\\hat c_i = c_i + \\Phi(L_i) - \\Phi(L_{i - 1})$.\n\n\ng.\n Show that the amortized cost $\\hat c_i$ of access $\\sigma_i$ is bounded from above by $4c_i^*$.\n\n\nh.\n Conclude that the cost $C_{\\text{MTF}}(\\sigma)$ of access sequence $\\sigma$ with move-to-front is at most $4$ times the cost $C_H(\\sigma)$ of $\\sigma$ withany other heuristic $\\text H$, assuming that both heuristics start with the same list.\n\n\n\n\na.\n Since the heuristic is picked in advance, given any sequence of requests given so far, we can simulate what ordering the heuristic will call for, then, we will pick our next request to be whatever element will of been in the last position of the list. Continuing until all the requests have been made, we have that the cost of this sequence of accesses is $= mn$.\n\n\nb.\n The cost of finding an element is $= \\text{rank}_L(x)$ and since it needs to be swapped with all the elements before it, of which there are $\\text{rank}_L(x) - 1$, the total cost is $2 \\cdot \\text{rank}_L(x) - 1$.\n\n\nc.\n Regardless of the heuristic used, we first need to locate the element, which is left where ever it was after the previous step, so, needs $\\text{rank}_{L_{i - 1}}(x)$. After that, by definition, there are $t_i$ transpositions made, so, $c^*_i = \\text{rank}_{L_{i - 1}}(x) + t_i^*$.\n\n\nd.\n If we perform a transposition of elements $y$ and $z$, where $y$ is towards the left. Then there are two cases. The first is that the final ordering of the list in $L_i^*$ is with $y$ in front of $z$, in which case we have just increased the number of inversions by $1$, so the potential increases by $2$. The second is that in $L_I^*z$ occurs before $y$, in which case, we have just reduced the number of inversions by one, reducing the potential by $2$. \n\n\nIn both cases, whether or not there is an inversion between $y$ or $z$ and any other element has not changed, since the transposition only changed the relative ordering of those two elements.\n\n\ne.\n By definition, $A$ and $B$ are the only two of the four categories to place elements that precede $x$ in $L_{i - 1}$, since there are $|A| + |B|$ elements preceding it, it's rank in $L_{i - 1}$ is $|A| + |B| + 1$. Similarly, the two categories in which an element can be if it precedes $x$ in $L^*_{i - 1}$ are $A$ and $C$, so, in $L^*_{i - 1}$, $x$ has $\\text{rank} |A| + |C| + 1$.\n\n\nf.\n We have from part d that the potential increases by $2$ if we transpose two elements that are being swapped so that their relative order in the final ordering is being screwed up, and decreases by two if they are begin placed into their correct order in $L^*_i$. \n\n\nIn particular, they increase it by at most $2$, since we are keeping track of the number of inversions that may not be the direct effect of the transpositions that heuristic $H$ made, we see which ones the Move to front heuristic may of added. In particular, since the move to front heuristic only changed the relative order of $x$ with respect to the other elements, moving it in front of the elements that preceded it in $L_{i - 1}$, we only care about sets $A$ and $B$. For an element in $A$, moving it to be behind $A$ created an inversion, since that element preceded $x$ in $L^*_i$. However, if the element were in $B$, we are removing an inversion by placing $x$ in front of it.\n\n\ng.\n\n\n\\begin{align}\n\\hat c_i & \\le 2(|A| + |B| + 1) - 1 + 2(|A| - |B| + t_i^*) \\\\\n         & =   4|A| + 1 + 2 t_i^* \\\\\n         & \\le 4(|A| + |C| + 1 + t_i^*) \\\\\n         & =   4 c_i^*.\n\\end{align}\n\n\nh.\n We showed that the amortized cost of each operation under the move to front heuristic was at most four times the cost of the operation using any other heuristic. Since the amortized cost added up over all these operation is at most the total (real) cost, so we have that the total cost with movetofront is at most four times the total cost with an arbitrary other heuristic.",
            "title": "17-5 Competitive analysis of self-organizing lists with move-to-front"
        },
        {
            "location": "/Chap18/18.1/",
            "text": "18.1-1\n\n\n\n\nWhy don't we allow a minimum degree of $t = 1$?\n\n\n\n\nAccording to the definition, minimum degree $t$ means every node other than the root must have at least $t - 1$ keys, and every internal node other than the root thus has at least $t$ children. So, when $t = 1$, it means every node other than the root must have at least $t - 1 = 0$ key, and every internal node other than the root thus has at least $t = 1$ child.\n\n\nThus, we can see that the minimum case doesn't exist, because no node exists with $0$ key, and no node exists with only $1$ child in a B-tree.\n\n\n18.1-2\n\n\n\n\nFor what values of $t$ is the tree of Figure 18.1 a legal B-tree?\n\n\n\n\nAccording to property 5 of B-tree, every node other than the root must have at least $t - 1$ keys and may contain at most $2t - 1$ keys. In Figure 18.1, the number of keys of each node (except the root) is either $2$ or $3$. So to make it a legal B-tree, we need to guarantee that $t - 1 \\le 2 \\text{ and } 2 t - 1 \\ge 3$, which yields $2 \\le t \\le 3$. So $t$ can be $2$ or $3$. \n\n\n18.1-3\n\n\n\n\nShow all legal B-trees of minimum degree $2$ that represent ${1, 2, 3, 4, 5}$.\n\n\n\n\nWe know that every node except the root must have at least $t - 1 = 2$ keys, and at most $2t - 1 = 5$ keys. Also remember that the leaves stay in the same depth. Thus, there are $2$ possible legal B-trees:\n\n\n\n\n\n\n$$| 1, 2, 3, 4, 5 |$$\n\n\n\n\n\n\n$$| 3 |$$\n\n\n\n\n\n\n$$\\swarrow \\quad \\searrow$$\n\n\n$$| 1, 2 | \\qquad\\qquad | 4, 5 |$$\n\n\n\n\n\n\n18.1-4\n\n\n\n\nAs a function of the minimum degree $t$, what is the maximum number of keys that can be stored in a B-tree of height $h$?\n\n\n\n\n\\begin{align}\nn & = (1 + 2t + (2t) ^ 2 + \\cdots + (2t) ^ {h}) \\cdot (2t - 1) \\\\\n  & = (2t)^{h + 1} - 1.\n\\end{align}\n\n\n18.1-5\n\n\n\n\nDescribe the data structure that would result if each black node in a red-black tree were to absorb its red children, incorporating their children with its own.\n\n\n\n\nAfter absorbing each red node into its black parent, each black node may contain $1, 2$ ($1$ red child), or $3$ ($2$ red children) keys, and all leaves of the resulting tree have the same depth, according to property 5 of red-black tree (For each node, all paths from the node to descendant leaves contain the same number of black nodes). Therefore, a red-black tree will become a Btree with minimum degree $t = 2$, i.e., a 2-3-4 tree.",
            "title": "18.1 Definition of B-trees"
        },
        {
            "location": "/Chap18/18.1/#181-1",
            "text": "Why don't we allow a minimum degree of $t = 1$?   According to the definition, minimum degree $t$ means every node other than the root must have at least $t - 1$ keys, and every internal node other than the root thus has at least $t$ children. So, when $t = 1$, it means every node other than the root must have at least $t - 1 = 0$ key, and every internal node other than the root thus has at least $t = 1$ child.  Thus, we can see that the minimum case doesn't exist, because no node exists with $0$ key, and no node exists with only $1$ child in a B-tree.",
            "title": "18.1-1"
        },
        {
            "location": "/Chap18/18.1/#181-2",
            "text": "For what values of $t$ is the tree of Figure 18.1 a legal B-tree?   According to property 5 of B-tree, every node other than the root must have at least $t - 1$ keys and may contain at most $2t - 1$ keys. In Figure 18.1, the number of keys of each node (except the root) is either $2$ or $3$. So to make it a legal B-tree, we need to guarantee that $t - 1 \\le 2 \\text{ and } 2 t - 1 \\ge 3$, which yields $2 \\le t \\le 3$. So $t$ can be $2$ or $3$.",
            "title": "18.1-2"
        },
        {
            "location": "/Chap18/18.1/#181-3",
            "text": "Show all legal B-trees of minimum degree $2$ that represent ${1, 2, 3, 4, 5}$.   We know that every node except the root must have at least $t - 1 = 2$ keys, and at most $2t - 1 = 5$ keys. Also remember that the leaves stay in the same depth. Thus, there are $2$ possible legal B-trees:    $$| 1, 2, 3, 4, 5 |$$    $$| 3 |$$    $$\\swarrow \\quad \\searrow$$  $$| 1, 2 | \\qquad\\qquad | 4, 5 |$$",
            "title": "18.1-3"
        },
        {
            "location": "/Chap18/18.1/#181-4",
            "text": "As a function of the minimum degree $t$, what is the maximum number of keys that can be stored in a B-tree of height $h$?   \\begin{align}\nn & = (1 + 2t + (2t) ^ 2 + \\cdots + (2t) ^ {h}) \\cdot (2t - 1) \\\\\n  & = (2t)^{h + 1} - 1.\n\\end{align}",
            "title": "18.1-4"
        },
        {
            "location": "/Chap18/18.1/#181-5",
            "text": "Describe the data structure that would result if each black node in a red-black tree were to absorb its red children, incorporating their children with its own.   After absorbing each red node into its black parent, each black node may contain $1, 2$ ($1$ red child), or $3$ ($2$ red children) keys, and all leaves of the resulting tree have the same depth, according to property 5 of red-black tree (For each node, all paths from the node to descendant leaves contain the same number of black nodes). Therefore, a red-black tree will become a Btree with minimum degree $t = 2$, i.e., a 2-3-4 tree.",
            "title": "18.1-5"
        },
        {
            "location": "/Chap18/18.2/",
            "text": "18.2-1\n\n\n\n\nShow the results of inserting the keys \n\n\nF, S, Q, K, C, L, H, T, V, W, M, R, N, P, A, B, X, Y, D, Z, E\n\n\nin order into an empty B-tree with minimum degree $2$. Draw only the configurations of the tree just before some node must split, and also draw the final configuration.\n\n\n\n\n(Omit!)\n\n\n18.2-2\n\n\n\n\nExplain under what circumstances, if any, redundant $\\text{DISK-READ}$ or $\\text{DISK-WRITE}$ operations occur during the course of executing a call to $\\text{B-TREE-INSERT}$. (A redundant $\\text{DISK-READ}$ is a $\\text{DISK-READ}$ for a page that is already in memory. A redundant $\\text{DISK-WRITE}$ writes to disk a page of information that is identical to what is already stored there.)\n\n\n\n\nIn order to insert the key into a full child node but without its parent being full, we need the  following operations:\n\n\n\n\n$\\text{DISK-READ}$: Key placement\n\n\n$\\text{DISK-WRITE}$: Split nodes\n\n\n$\\text{DISK-READ}$: Get to the parent\n\n\n$\\text{DISK-WRITE}$: Fill parent\n\n\n\n\nIf both were full, we'd have to do the same, but instead of the final step, repeat the above to split the parent node and write into the child nodes. With both considerations in mind, there should never be a redundant $\\text{DISK-READ}$ or $\\text{DISK-WRITE}$ on a $\\text{B-TREE-INSERT}$.\n\n\n18.2-3\n\n\n\n\nExplain how to find the minimum key stored in a B-tree and how to find the predecessor of a given key stored in a B-tree.\n\n\n\n\nFinding the minimum in a B-tree is quite similar to finding a minimum in a binary search tree. We need to find the left most leaf for the given root, and return the first key.\n\n\n\n\nPRE:\n $x$ is a node on the B-tree $T$. The top level call is $\\text{B-TREE-FIND-MIN}(T.root)$.\n\n\nPOST:\n $\\text{FCTVAL}$ is the minimum key stored in the subtree rooted at $x$.\n\n\n\n\nB\n-\nTREE\n-\nFIND\n-\nMIN\n(\nx\n)\n\n    \nif\n \nx\n \n==\n \nNIL\n           \n// T is empty\n\n        \nreturn\n \nNIL\n\n    \nelse\n \nif\n \nx\n.\nleaf\n        \n// x is leaf\n\n        \nreturn\n \nx\n.\nkey\n[\n1\n]\n   \n// return the minimum key of x\n\n    \nelse\n\n        \nDISK\n-\nREAD\n(\nx\n.\nc\n[\n1\n])\n\n        \nreturn\n \nB\n-\nTREE\n-\nFIND\n-\nMIN\n(\nx\n.\nc\n[\n1\n])\n\n\n\n\n\nFinding the predecessor of a given key $x.key_i$ is according to the following rules:\n\n\n\n\nIf $x$ is not a leaf, return the maximum key in the $i$-th child of $x$, which is also the maximum key of the subtree rooted\nat $x.c_i$.\n\n\nIf $x$ is a leaf and $i > 1$, return the $(i - 1)$st key of $x$, i.e., $x.key_{i - 1}$.\n\n\n\n\nOtherwise, look for the last node y (from the bottom up) and $j > 0$, such that $x.key_i$ is the leftmost key in $y.c_j$; if $j = 1$, return $\\text{NIL}$ since $x.key_i$ is the minimum key in the tree; otherwise we return $y.key_{j - 1}$. \n\n\n\n\n\n\nPRE:\n $x$ is a node on the B-tree $T$. $i$ is the index of the key.\n\n\n\n\nPOST:\n $\\text{FCTVAL}$ is the predecessor of $x.key_i$.\n\n\n\n\nB\n-\nTREE\n-\nFIND\n-\nPREDECESSOR\n(\nx\n,\n \ni\n)\n\n    \nif\n \n!\nx\n.\nleaf\n\n        \nDISK\n-\nREAD\n(\nx\n.\nc\n[\ni\n])\n\n        \nreturn\n \nB\n-\nTREE\n-\nFIND\n-\nMAX\n(\nx\n.\nc\n[\ni\n])\n\n    \nelse\n \nif\n \ni\n \n>\n \n1\n      \n// x is a leaf and i > 1\n\n        \nreturn\n \nx\n.\nkey\n[\ni\n \n-\n \n1\n]\n\n    \nelse\n\n        \nz\n \n=\n \nx\n\n        \nwhile\n \nTRUE\n\n            \nif\n \nz\n.\np\n \n==\n \nNIL\n    \n// z is root\n\n                \nreturn\n \nNIL\n   \n// z.key[i] is the minimum key in T; no predecessor\n\n              \ny\n \n=\n \nz\n.\np\n\n              \nj\n \n=\n \n1\n\n              \nDISK\n-\nREAD\n(\ny\n.\nc\n[\n1\n])\n\n              \nwhile\n \ny\n.\nc\n[\nj\n]\n \n!=\n \nx\n\n                  \nj\n \n=\n \nj\n \n+\n \n1\n\n                  \nDISK\n-\nREAD\n(\ny\n.\nc\n[\nj\n])\n\n              \nif\n \nj\n \n==\n \n1\n\n                  \nz\n \n=\n \ny\n\n              \nelse\n\n                  \nreturn\n \ny\n.\nkey\n[\nj\n \n-\n \n1\n]\n\n\n\n\n\n\n\nPRE:\n $x$ is a node on the B-tree $T$. The top level call is $\\text{B-TREE-FIND-MAX}(T.root)$.\n\n\nPOST:\n $\\text{FCTVAL}$ is the maximum key stored in the subtree rooted at $x$.\n\n\n\n\nB\n-\nTREE\n-\nFIND\n-\nMAX\n(\nx\n)\n\n    \nif\n \nx\n \n==\n \nNIL\n           \n// T is empty\n\n        \nreturn\n \nNIL\n\n    \nelse\n \nif\n \nx\n.\nleaf\n        \n// x is leaf\n\n        \nreturn\n \nx\n.[\nx\n.\nn\n]\n    \n// return the maximum key of x\n\n    \nelse\n\n        \nDISK\n-\nREAD\n(\nx\n.\nc\n[\nx\n.\nn\n \n+\n \n1\n])\n\n        \nreturn\n \nB\n-\nTREE\n-\nFIND\n-\nMIN\n(\nx\n.\nc\n[\nx\n.\nn\n \n+\n \n1\n])\n\n\n\n\n\n18.2-4 $\\star$\n\n\n\n\nSuppose that we insert the keys ${1, 2, \\ldots, n}$ into an empty B-tree with minimum degree 2. How many nodes does the final B-tree have?\n\n\n\n\nThe final tree can have as many as $n - 1$ nodes. Unless $n = 1$ there cannot ever be $n$ nodes since we only ever insert a key into a non-empty node, so there will always be at least one node with $2$ keys. \n\n\nNext observe that we will never have more than one key in a node which is not a right spine of our B-tree. This is because every key we insert is larger than all keys stored in the tree, so it will be inserted into the right spine of the tree. Nodes not in the right spine are a result of splits, and since $t = 2$, every split results in child nodes with one key each. The fewest possible number of nodes occurs when every node in the right spine has $3$ keys. In this case, $n = 2h + 2^{h + 1} - 1$ where $h$ is the height of the B-tree, and the number of nodes is $2^{h + 1} - 1$. Asymptotically these are the same, so the number of nodes is $\\Theta(n)$.\n\n\n18.2-5\n\n\n\n\nSince leaf nodes require no pointers to children, they could conceivably use a different (larger) $t$ value than internal nodes for the same disk page size. Show how to modify the procedures for creating and inserting into a B-tree to handle this variation.\n\n\n\n\nWe could set the new $t$ (name it $t'$) value of leaf node = $1.5t$.\n\n\n18.2-6\n\n\n\n\nSuppose that we were to implement $\\text{B-TREE-SEARCH}$ to use binary search rather than linear search within each node. Show that this change makes the CPU time required $O(\\lg n)$, independently of how $t$ might be chosen as a function of $n$.\n\n\n\n\nAs in the $\\text{TREE-SEARCH}$ procedure for binary search trees, the nodes encountered during the recursion form a simple path downward from the root of the tree. Thus, the $\\text{B-TREE-SEARCH}$ procedure needs $O(h) = O(\\log_t n)$ CPU time to search along the path, where $h$ is the height of the B-tree and $n$ is the number of keys in the B-tree, and we know that $h \\le \\log_t \\frac{n + 1}{2}$. Since the number of keys in each nodeis less than $2t - 1$, a binary search within each node is $O(\\lg t)$. So the total time is:\n\n\n\\begin{align}\nO(\\lg t \\cdot \\log_t n) & = O(\\lg t \\cdot \\frac{\\lg n}{\\lg t}) & \\text{by changing the base of the logarithm.} \\\\\n                        & = O(\\lg n).\n\\end{align}\n\n\nThus, the CPU time required is $O(\\lg n)$.\n\n\n18.2-7\n\n\n\n\nSuppose that disk hardware allows us to choose the size of a disk page arbitrarily, but that the time it takes to read the disk page is $a + bt$, where $a$ and $b$ are specified constants and $t$ is the minimum degree for a B-tree using pages of the selected size. Describe how to choose $t$ so as to minimize (approximately) the B-tree search time. Suggest an optimal value of $t$ for the case in which $a = 5$ milliseconds and $b = 10$ microseconds.\n\n\n\n\n$$\\min \\log_t n \\cdot (a + bt) = \\min \\frac{a + bt}{\\ln t}$$\n\n\n$$\\frac{\\partial}{\\partial t} (\\frac{a + bt}{\\ln t}) = - \\frac{a + bt - bt \\ln t}{t \\ln^2 t}$$\n\n\n\\begin{align}\n a + bt & = bt \\ln t \\\\\n5 + 10t & = 10t \\ln t \\\\\n      t & = e^{W \\left(\\frac{1}{2e} \\right) + 1}, \\\\\n\\end{align}\n\n\nwhere $W$ is the LambertW function, and we should choose $t = 3$.",
            "title": "18.2 Basic operations on B-trees"
        },
        {
            "location": "/Chap18/18.2/#182-1",
            "text": "Show the results of inserting the keys   F, S, Q, K, C, L, H, T, V, W, M, R, N, P, A, B, X, Y, D, Z, E  in order into an empty B-tree with minimum degree $2$. Draw only the configurations of the tree just before some node must split, and also draw the final configuration.   (Omit!)",
            "title": "18.2-1"
        },
        {
            "location": "/Chap18/18.2/#182-2",
            "text": "Explain under what circumstances, if any, redundant $\\text{DISK-READ}$ or $\\text{DISK-WRITE}$ operations occur during the course of executing a call to $\\text{B-TREE-INSERT}$. (A redundant $\\text{DISK-READ}$ is a $\\text{DISK-READ}$ for a page that is already in memory. A redundant $\\text{DISK-WRITE}$ writes to disk a page of information that is identical to what is already stored there.)   In order to insert the key into a full child node but without its parent being full, we need the  following operations:   $\\text{DISK-READ}$: Key placement  $\\text{DISK-WRITE}$: Split nodes  $\\text{DISK-READ}$: Get to the parent  $\\text{DISK-WRITE}$: Fill parent   If both were full, we'd have to do the same, but instead of the final step, repeat the above to split the parent node and write into the child nodes. With both considerations in mind, there should never be a redundant $\\text{DISK-READ}$ or $\\text{DISK-WRITE}$ on a $\\text{B-TREE-INSERT}$.",
            "title": "18.2-2"
        },
        {
            "location": "/Chap18/18.2/#182-3",
            "text": "Explain how to find the minimum key stored in a B-tree and how to find the predecessor of a given key stored in a B-tree.   Finding the minimum in a B-tree is quite similar to finding a minimum in a binary search tree. We need to find the left most leaf for the given root, and return the first key.   PRE:  $x$ is a node on the B-tree $T$. The top level call is $\\text{B-TREE-FIND-MIN}(T.root)$.  POST:  $\\text{FCTVAL}$ is the minimum key stored in the subtree rooted at $x$.   B - TREE - FIND - MIN ( x ) \n     if   x   ==   NIL             // T is empty \n         return   NIL \n     else   if   x . leaf          // x is leaf \n         return   x . key [ 1 ]     // return the minimum key of x \n     else \n         DISK - READ ( x . c [ 1 ]) \n         return   B - TREE - FIND - MIN ( x . c [ 1 ])   Finding the predecessor of a given key $x.key_i$ is according to the following rules:   If $x$ is not a leaf, return the maximum key in the $i$-th child of $x$, which is also the maximum key of the subtree rooted\nat $x.c_i$.  If $x$ is a leaf and $i > 1$, return the $(i - 1)$st key of $x$, i.e., $x.key_{i - 1}$.   Otherwise, look for the last node y (from the bottom up) and $j > 0$, such that $x.key_i$ is the leftmost key in $y.c_j$; if $j = 1$, return $\\text{NIL}$ since $x.key_i$ is the minimum key in the tree; otherwise we return $y.key_{j - 1}$.     PRE:  $x$ is a node on the B-tree $T$. $i$ is the index of the key.   POST:  $\\text{FCTVAL}$ is the predecessor of $x.key_i$.   B - TREE - FIND - PREDECESSOR ( x ,   i ) \n     if   ! x . leaf \n         DISK - READ ( x . c [ i ]) \n         return   B - TREE - FIND - MAX ( x . c [ i ]) \n     else   if   i   >   1        // x is a leaf and i > 1 \n         return   x . key [ i   -   1 ] \n     else \n         z   =   x \n         while   TRUE \n             if   z . p   ==   NIL      // z is root \n                 return   NIL     // z.key[i] is the minimum key in T; no predecessor \n               y   =   z . p \n               j   =   1 \n               DISK - READ ( y . c [ 1 ]) \n               while   y . c [ j ]   !=   x \n                   j   =   j   +   1 \n                   DISK - READ ( y . c [ j ]) \n               if   j   ==   1 \n                   z   =   y \n               else \n                   return   y . key [ j   -   1 ]    PRE:  $x$ is a node on the B-tree $T$. The top level call is $\\text{B-TREE-FIND-MAX}(T.root)$.  POST:  $\\text{FCTVAL}$ is the maximum key stored in the subtree rooted at $x$.   B - TREE - FIND - MAX ( x ) \n     if   x   ==   NIL             // T is empty \n         return   NIL \n     else   if   x . leaf          // x is leaf \n         return   x .[ x . n ]      // return the maximum key of x \n     else \n         DISK - READ ( x . c [ x . n   +   1 ]) \n         return   B - TREE - FIND - MIN ( x . c [ x . n   +   1 ])",
            "title": "18.2-3"
        },
        {
            "location": "/Chap18/18.2/#182-4-star",
            "text": "Suppose that we insert the keys ${1, 2, \\ldots, n}$ into an empty B-tree with minimum degree 2. How many nodes does the final B-tree have?   The final tree can have as many as $n - 1$ nodes. Unless $n = 1$ there cannot ever be $n$ nodes since we only ever insert a key into a non-empty node, so there will always be at least one node with $2$ keys.   Next observe that we will never have more than one key in a node which is not a right spine of our B-tree. This is because every key we insert is larger than all keys stored in the tree, so it will be inserted into the right spine of the tree. Nodes not in the right spine are a result of splits, and since $t = 2$, every split results in child nodes with one key each. The fewest possible number of nodes occurs when every node in the right spine has $3$ keys. In this case, $n = 2h + 2^{h + 1} - 1$ where $h$ is the height of the B-tree, and the number of nodes is $2^{h + 1} - 1$. Asymptotically these are the same, so the number of nodes is $\\Theta(n)$.",
            "title": "18.2-4 $\\star$"
        },
        {
            "location": "/Chap18/18.2/#182-5",
            "text": "Since leaf nodes require no pointers to children, they could conceivably use a different (larger) $t$ value than internal nodes for the same disk page size. Show how to modify the procedures for creating and inserting into a B-tree to handle this variation.   We could set the new $t$ (name it $t'$) value of leaf node = $1.5t$.",
            "title": "18.2-5"
        },
        {
            "location": "/Chap18/18.2/#182-6",
            "text": "Suppose that we were to implement $\\text{B-TREE-SEARCH}$ to use binary search rather than linear search within each node. Show that this change makes the CPU time required $O(\\lg n)$, independently of how $t$ might be chosen as a function of $n$.   As in the $\\text{TREE-SEARCH}$ procedure for binary search trees, the nodes encountered during the recursion form a simple path downward from the root of the tree. Thus, the $\\text{B-TREE-SEARCH}$ procedure needs $O(h) = O(\\log_t n)$ CPU time to search along the path, where $h$ is the height of the B-tree and $n$ is the number of keys in the B-tree, and we know that $h \\le \\log_t \\frac{n + 1}{2}$. Since the number of keys in each nodeis less than $2t - 1$, a binary search within each node is $O(\\lg t)$. So the total time is:  \\begin{align}\nO(\\lg t \\cdot \\log_t n) & = O(\\lg t \\cdot \\frac{\\lg n}{\\lg t}) & \\text{by changing the base of the logarithm.} \\\\\n                        & = O(\\lg n).\n\\end{align}  Thus, the CPU time required is $O(\\lg n)$.",
            "title": "18.2-6"
        },
        {
            "location": "/Chap18/18.2/#182-7",
            "text": "Suppose that disk hardware allows us to choose the size of a disk page arbitrarily, but that the time it takes to read the disk page is $a + bt$, where $a$ and $b$ are specified constants and $t$ is the minimum degree for a B-tree using pages of the selected size. Describe how to choose $t$ so as to minimize (approximately) the B-tree search time. Suggest an optimal value of $t$ for the case in which $a = 5$ milliseconds and $b = 10$ microseconds.   $$\\min \\log_t n \\cdot (a + bt) = \\min \\frac{a + bt}{\\ln t}$$  $$\\frac{\\partial}{\\partial t} (\\frac{a + bt}{\\ln t}) = - \\frac{a + bt - bt \\ln t}{t \\ln^2 t}$$  \\begin{align}\n a + bt & = bt \\ln t \\\\\n5 + 10t & = 10t \\ln t \\\\\n      t & = e^{W \\left(\\frac{1}{2e} \\right) + 1}, \\\\\n\\end{align}  where $W$ is the LambertW function, and we should choose $t = 3$.",
            "title": "18.2-7"
        },
        {
            "location": "/Chap18/18.3/",
            "text": "18.3-1\n\n\n\n\nShow the results of deleting $C$, $P$, and $V$, in order, from the tree of Figure 18.8(f).\n\n\n\n\n\n\n\n\nFigure 18.8(f)\n\n\n\n\n\n\n\n\ndelete $C$\n\n\n    \n\n\n\n\n\n\ndelete $P$\n\n\n\n\n\n\n\n\ndelete $V$\n\n\n\n\n\n\n\n\n18.3-2\n\n\n\n\nWrite pseudocode for $\\text{B-TREE-DELETE}$.\n\n\n\n\nThe algorithm $\\text{B-TREE-DELETE}(x, k)$ is a recursive procedure which deletes key $k$ from the B-tree rooted at node $x$.\n\n\nThe functions $\\text{PREDECESSOR}(k, x)$ and $\\text{SUCCESSOR}(k, x)$ return the predecessor and successor of $k$ in the B-tree rooted at $x$ respectively.\n\n\nThe cases where $k$ is the last key in a node have been omitted because the pseudocode is already unwieldy. For these, we simply use the left sibling as opposed to the right sibling, making the appropriate modifications to the indexing in the for-loops.",
            "title": "18.3 Deleting a key from a B-tree"
        },
        {
            "location": "/Chap18/18.3/#183-1",
            "text": "Show the results of deleting $C$, $P$, and $V$, in order, from the tree of Figure 18.8(f).     Figure 18.8(f)     delete $C$          delete $P$     delete $V$",
            "title": "18.3-1"
        },
        {
            "location": "/Chap18/18.3/#183-2",
            "text": "Write pseudocode for $\\text{B-TREE-DELETE}$.   The algorithm $\\text{B-TREE-DELETE}(x, k)$ is a recursive procedure which deletes key $k$ from the B-tree rooted at node $x$.  The functions $\\text{PREDECESSOR}(k, x)$ and $\\text{SUCCESSOR}(k, x)$ return the predecessor and successor of $k$ in the B-tree rooted at $x$ respectively.  The cases where $k$ is the last key in a node have been omitted because the pseudocode is already unwieldy. For these, we simply use the left sibling as opposed to the right sibling, making the appropriate modifications to the indexing in the for-loops.",
            "title": "18.3-2"
        },
        {
            "location": "/Chap18/Problems/18-1/",
            "text": "Consider implementing a stack in a computer that has a relatively small amount of fast primary memory and a relatively large amount of slower disk storage. The operations $\\text{PUSH}$ and $\\text{POP}$ work on single-word values. The stack we wish to support can grow to be much larger than can fit in memory, and thus most of it must be stored on disk.\n\n\nA simple, but inefficient, stack implementation keeps the entire stack on disk. We maintain in - memory a stack pointer, which is the disk address of the top element on the stack. If the pointer has value $p$, the top element is the $(p \\mod m)$th word on page $\\lfloor p / m \\rfloor$ of the disk, where $m$ is the number of words per page.\n\n\nTo implement the $\\text{PUSH}$ operation, we increment the stack pointer, read the appropriate page into memory from disk, copy the element to be pushed to the appropriate word on the page, and write the page back to disk. A $\\text{POP}$ operation is similar. We decrement the stack pointer, read in the appropriate page from disk, and return the top of the stack. We need not write back the page, since it was not modified.\n\n\nBecause disk operations are relatively expensive, we count two costs for any implementation: the total number of disk accesses and the total CPU time. Any disk access to a page of $m$ words incurs charges of one disk access and $\\Theta(m)$ CPU time.\n\n\na.\n Asymptotically, what is the worst-case number of disk accesses for $n$ stack operations using this simple implementation? What is the CPU time for $n$ stack operations? (Express your answer in terms of $m$ and $n$ for this and subsequent parts.)\n\n\nNow consider a stack implementation in which we keep one page of the stack in memory. (We also maintain a small amount of memory to keep track of which page is currently in memory.) We can perform a stack operation only if the relevant disk page resides in memory. If necessary, we can write the page currently in memory to the disk and read in the new page from the disk to memory. If the relevant disk page is already in memory, then no disk accesses are required.\n\n\nb.\n What is the worst-case number of disk accesses required for $n$ $\\text{PUSH}$ operations? What is the CPU time?\n\n\nc.\n What is the worst-case number of disk accesses required for $n$ stack operations? What is the CPU time?\n\n\nSuppose that we now implement the stack by keeping two pages in memory (in addition to a small number of words for bookkeeping).\n\n\nd.\n Describe how to manage the stack pages so that the amortized number of disk accesses for any stack operation is $O(1 / m)$ and the amortized CPU time for any stack operation is $O(1)$.\n\n\n\n\na.\n We will have to make a disk access for each stack operation. Since each of these disk operations takes time $\\Theta(m)$, the CPU time is $\\Theta(mn)$.\n\n\nb.\n Since only every mth push starts a new page, the number of disk operations is approximately $n / m$, and the CPU runtime is $\\Theta(n)$, since both the contribution from the cost of the disk access and the actual running of the push operations are both $\\Theta(n)$.\n\n\nc.\n If we make a sequence of pushes until it just spills over onto the second page, then alternate popping and pulling many times, the asymptotic number of disk accesses and CPU time is of the same order as in part a. This is because when we are doing that alternating of pops and pushes, each one triggers a disk access. \n\n\nd.\n We define the potential of the stack to be the absolute value of the difference between the current size of the stack and the most recently passed multiple of $m$. This potential function means that the initial stack which has size $0$, is also a multiple of $m$, so the potential is zero. Also, as we do a stack operation we either increase or decrease the potential by one. For us to have to load a new page from disk and write an old one to disk, we would need to be at least $m$ positions away from the most recently visited multiple of $m$, because we would have had to just cross a page boundary. This cost of loading and storing a page takes (real) cpu time of $\\Theta(m)$. However, we just had a drop in the potential function of order $\\Theta(m)$. So, the amortized cost of this operation is $O(1)$.",
            "title": "18-1 Stacks on secondary storage"
        },
        {
            "location": "/Chap18/Problems/18-2/",
            "text": "The \njoin\n operation takes two dynamic sets $S'$ and $S''$ and an element $x$ such that for any $x' \\in S'$ and $x'' \\in S''$, we have $x'.key < x.key < x''.key$. It returns a set $S = S' \\cup \\{x\\} \\cup S''$. The \nsplit\n operation is like an \"inverse\" join: given a dynamic set $S$ and an element $x \\in S$, it creates a set $S'$ that consists of all elements in set $S$ and an element $x \\in S$, it creates a set $S'$ that consists of all elements in $S - \\{x\\}$ whose keys are less than $x.key$ and a set $S''$ that consists of all elements in $S - \\{x\\}$ whose keys are greater than $x.key$. In this problem, we investigate how to implement these operations on 2-3-4 trees. We assume for convenience that elements consist only of keys and that all key values are distinct.\n\n\na.\n Show how to maintain, for every node $x$ of a 2-3-4 tree, the height of the subtree rooted at $x$ as an attribute $x.height$. Make sure that your implementation does not affect the asymptotic running times of searching, insertion, and deletion.\n\n\nb.\n Show how to implement the join operation. Given two 2-3-4 trees $T'$ and $T''$ and a key $k$, the join operation should run in $O(1 + |h' - h''|)$ time, where $h'$ and $h''$ are the heights of $T'$ and $T''$, respectively.\n\n\nc.\n Consider the simple path $p$ from the root of a 2-3-4 tree $T$ to a given key $k$, the set $S'$ of keys in $T$ that are less than $k$, and the set $S''$ of keys in $T$ that are greater than $k$. Show that $p$ breaks $S'$ into a set of trees $\\{T'_0, T'_1, \\ldots, T'_m\\}$ and a set of keys $\\{k'_1, k'_2, \\ldots, k'_m\\}$, where, for $i = 1, 2, \\ldots, m$, we have $y < k'_i < z$ for any keys $y \\in T'_{i - 1}$ and $z \\in T'_i$. What is the relationship between the heights of $T'_{i - 1}$ and $T'_i$? Describe how $p$ breaks $S''$ into sets of trees and keys.\n\n\nd.\n Show how to implement the split operation on $T$. Use the join operation to assemble the keys in $S'$ into a single 2-3-4 tree $T'$ and the keys in $S''$ into a single 2-3-4 tree $T''$. The running time of the split operation should be $O(\\lg n)$, where $n$ is then umber of keys in $T$. ($\\textit{Hint:}$ The costs for joining should telescope.)\n\n\n\n\na.\n For insertion it will suffice to explain how to update height when we split a node. Suppose node $x$ is split into nodes $y$ and $z$, and the median of $x$ is merged into node $w$. The height of $w$ remains unchanged unless $x$ was the root (in which case $w.height = x.height + 1$).\n\n\nThe height of $y$ or $z$ will often change. We set\n\n\n$$y.height = \\max_i y.c_i .height + 1$$\n\n\nand\n\n\n$$z.height = \\max_i z.c_i.height + 1.$$\n\n\nEach update takes $O(t)$. Since a call to $\\text{B-TREE-INSERT}$ makes at most $h$ splits where $h$ is the height of the tree, the total time it takes to update heights is $O(th)$, preserving the asymptotic running time of insert. For deletion the situation is even simple. The only time the height changes is when the root has a single node and it is merged with its subtree nodes, leaving an empty root node to be deleted. In this case, we update the height of the new node to be the (old) height of the root minus $1$.\n\n\nb.\n Without loss of generality, assume $h' \\ge h''$. We essentially wish to merge $T''$ into $T'$ at a node of height $h''$ using node $x$. To do this, find the node at depth $h' - h''$ on the right spine of $T'$. Add $x$ as a key to this node, and $T''$ as the additional child. If it should happen that the node was already full, perform a split operation.\n\n\nc.\n Let $x_i$ be the node encountered after $i$ steps on path $p$. Let $l_i$ be the index of the largest key stored in $x_i$ which is less than or equal to $k$. We take $k_i' = x_i.key_{l_i}$ and $T'_{i - 1}$ to be the tree whose root node consists of the keys in $x_i$ which are less than $x_i.key_{l_i}$, and all of their children. In general, $T'_{i - 1}.height \\ge T'_i.height$.\n\n\nFor $S''$, we take a similar approach. They keys will be those in nodes passed on $p$ which are immediately greater than $k$, and the trees will be rooted at a node consisting of the larger keys, with the associated subtrees. When we reach the node which contains $k$, we don't assign a key, but we do assign a tree.\n\n\nd.\n Let $T_1$ and $T_2$ be empty trees. Consider the path $p$ from the root of $T$ to $k$. Suppose we have reached node $x_i$. We join tree $T'_{i - 1}$ to $T_1$, then insert $k' i$ into $T_1$. We join $T''_{i - 1}$ to $T_2$ and insert $k''_i$ into $T_2$. Once we have encountered the node which contains $k$ at $x_m.key_k$, join $x_m.c_k$ with $T_1$ and $x_m.c_{k + 1}$ with $T_2$.\n\n\nWe will perform at most $2$ join operations and $1$ insert operation for each level of the tree. Using the runtime determined in part (b), and the fact that when we join a tree $T'$ to $T_1$ (or $T''$ to $T_2$ respectively) the height difference is\n\n\n$$T'.height - T_1.height.$$\n\n\nSince the heights are nondecreasing of successive tree that are joined, we get a telescoping sum of heights. The first tree has height $h$, where $h$ is the height of $T$, and the last tree has height $0$. Thus, the runtime is\n\n\n$$O(2(h + h)) = O(\\lg n).$$",
            "title": "18-2 Joining and splitting 2-3-4 trees"
        },
        {
            "location": "/Chap19/19.1/",
            "text": "There is no exercise in this section.",
            "title": "19.1 Structure of Fibonacci heaps"
        },
        {
            "location": "/Chap19/19.2/",
            "text": "19.2-1\n\n\n\n\nShow the Fibonacci heap that results from calling $\\text{FIB-HEAP-EXTRACT-MIN}$ on the Fibonacci heap shown in Figure 19.4(m).\n\n\n\n\n(Omit!)",
            "title": "19.2 Mergeable-heap operations"
        },
        {
            "location": "/Chap19/19.2/#192-1",
            "text": "Show the Fibonacci heap that results from calling $\\text{FIB-HEAP-EXTRACT-MIN}$ on the Fibonacci heap shown in Figure 19.4(m).   (Omit!)",
            "title": "19.2-1"
        },
        {
            "location": "/Chap19/19.3/",
            "text": "19.3-1\n\n\n\n\nSuppose that a root $x$ in a Fibonacci heap is marked. Explain how $x$ came to be a marked root. Argue that it doesn't matter to the analysis that $x$ is marked, even though it is not a root that was first linked to another node and then lost one child.\n\n\n\n\nA root in the heap became marked because it at some point had a child whose key was decreased. It doesn't add the potential for having to do any more actual work for it to be marked. This is because the only time that markedness is checked is in line 3 of cascading cut. This however is only ever run on nodes whose parent is non $\\text{NIL}$. Since every root has $\\text{NIL}$ as it parent, line 3 of cascading cut will never be run on this marked root. It will still cause the potential function to be larger than needed, but that extra computation that was paid in to get the potential function higher will never be used up later.\n\n\n19.3-2\n\n\n\n\nJustify the $O(1)$ amortized time of $\\text{FIB-HEAP-DECREASE-KEY}$ as an average cost per operation by using aggregate analysis.\n\n\n\n\nRecall that the actual cost of $\\text{FIB-HEAP-DECREASE-KEY}$ is $O(c)$, where $c$ is the number of calls made to $\\text{CASCADING-CUT}$. If $c_i$ is the number of calls made on the $i$th key decrease, then the total time of $n$ calls to $\\text{FIB-HEAPDECREASE-KEY}$ is $\\sum_{i = 1}^n O(c_i)$. \n\n\nNext observe that every call to $\\text{CASCADING-CUT}$ moves a node to the root, and every call to a root node takes $O(1)$. Since no roots ever become children during the course of these calls, we must have that $\\sum_{i = 1}^n c_i = O(n)$. Therefore the aggregate cost is $O(n)$, so the average, or amortized, cost is $O(1)$.",
            "title": "19.3 Decreasing a key and deleting a node"
        },
        {
            "location": "/Chap19/19.3/#193-1",
            "text": "Suppose that a root $x$ in a Fibonacci heap is marked. Explain how $x$ came to be a marked root. Argue that it doesn't matter to the analysis that $x$ is marked, even though it is not a root that was first linked to another node and then lost one child.   A root in the heap became marked because it at some point had a child whose key was decreased. It doesn't add the potential for having to do any more actual work for it to be marked. This is because the only time that markedness is checked is in line 3 of cascading cut. This however is only ever run on nodes whose parent is non $\\text{NIL}$. Since every root has $\\text{NIL}$ as it parent, line 3 of cascading cut will never be run on this marked root. It will still cause the potential function to be larger than needed, but that extra computation that was paid in to get the potential function higher will never be used up later.",
            "title": "19.3-1"
        },
        {
            "location": "/Chap19/19.3/#193-2",
            "text": "Justify the $O(1)$ amortized time of $\\text{FIB-HEAP-DECREASE-KEY}$ as an average cost per operation by using aggregate analysis.   Recall that the actual cost of $\\text{FIB-HEAP-DECREASE-KEY}$ is $O(c)$, where $c$ is the number of calls made to $\\text{CASCADING-CUT}$. If $c_i$ is the number of calls made on the $i$th key decrease, then the total time of $n$ calls to $\\text{FIB-HEAPDECREASE-KEY}$ is $\\sum_{i = 1}^n O(c_i)$.   Next observe that every call to $\\text{CASCADING-CUT}$ moves a node to the root, and every call to a root node takes $O(1)$. Since no roots ever become children during the course of these calls, we must have that $\\sum_{i = 1}^n c_i = O(n)$. Therefore the aggregate cost is $O(n)$, so the average, or amortized, cost is $O(1)$.",
            "title": "19.3-2"
        },
        {
            "location": "/Chap19/19.4/",
            "text": "19.4-1\n\n\n\n\nProfessor Pinocchio claims that the height of an $n$-node Fibonacci heap is $O(\\lg n)$. Show that the professor is mistaken by exhibiting, for any positive integer $n$, a sequence of Fibonacci-heap operations that creates a Fibonacci heap consisting of just one tree that is a linear chain of $n$ nodes.\n\n\n\n\n\n\nInitialize:\n insert 3 numbers then extract-min.\n\n\nIteration:\n insert 3 numbers, in which at least two numbers are less than the root of chain, then extract-min. The smallest newly inserted number will be extracted and the remaining two numbers will form a heap whose degree of root is $1$, and since the root of the heap is less than the old chain, the chain will be merged into the newly created heap. Finally we should delete the node which contains the largest number of the 3 inserted numbers.\n\n\n\n\n19.4-2\n\n\n\n\nSuppose we generalize the cascading-cut rule to cut a node $x$ from its parent as soon as it loses its $k$th child, for some integer constant $k$. (The rule in Section 19.3 uses $k = 2$.) For what values of $k$ is $D(n) = O(\\lg n)$?\n\n\n\n\nFollowing the proof of lemma 19.1, if $x$ is any node if a Fibonacci heap, $x.degree = m$, and $x$ has children $y_1, y_2, \\ldots, y_m$, then $y_1.degree \\ge 0$ and $y_i.degree \\ge i - k$. Thus, if $s_m$ denotes the fewest nodes possible in a node of degree $m$, then we have $s_0 = 1, s_1 = 2, \\ldots, s_{k - 1} = k$ and in general, $s_m = k + \\sum_{i = 0}^{m - k} s_i$. Thus, the difference between $s_m$ and $s_{m - 1}$ is $s_{m - k}$.\n\n\nLet ${f_m}$ be the sequence such that $f_m = m + 1$ for $0 \\le m < k$ and $f_m = f_{m - 1} + f_{m - k}$ for $m \\ge k$.\n\n\nIf $F(x)$ is the generating function for $f_m$ then we have $F(x) = \\frac{1 - x^k}{(1 - x)(1 - x - x^k)}$. Let $\\alpha$ be a root of $x^k = x^{k - 1} + 1$. We'll show by induction that $f_{m + k} \\ge \\alpha^m$. For the base cases:\n\n\n\\begin{align}\n      f_k & = k + 1 \\ge 1 = \\alpha^0 \\\\\nf_{k + 1} & = k + 3 \\ge \\alpha^1 \\\\\n          & \\vdots \\\\\nf_{k + k} & = k + \\frac{(k + 1)(k + 2)}{2} = k + k + 1 + \\frac{k(k + 1)}{2} \\ge 2k + 1+\\alpha^{k - 1} \\ge \\alpha^k.\n\\end{align}\n\n\nIn general, we have\n\n\n$$f_{m + k} = f_{m + k - 1} + f_m \\ge \\alpha^{m - 1} + \\alpha^{m - k}  = \\alpha^{m - k}(\\alpha^{k - 1} + 1) = \\alpha^m.$$\n\n\nNext we show that $f_{m + k} = k + \\sum_{i = 0}^m f_i$. The base case is clear, since $f_k = f_0 + k = k + 1$. For the induction step, we have\n\n\n$$f_{m + k} = f_{m - 1 - k} + f_m = k \\sum_{i = 0}^{m - 1} f_i + f_m = k + \\sum_{i = 0}^m f_i.$$\n\n\nObserve that $s_i \\ge f_{i + k}$ for $0 \\le i < k$. Again, by induction, for $m \\ge k$ we have\n\n\n$$s_m = k + \\sum_{i = 0}^{m - k} s_i \\ge k + \\sum_{i = 0}^{m - k} f_{i + k} \\ge k + \\sum_{i = 0}^m f_i = f_{m + k}.$$\n\n\nSo in general, $s_m \\ge f_{m + k}$. Putting it all together, we have\n\n\n\\begin{align}\nsize(x) & \\ge s_m \\\\\n        & \\ge k + \\sum_{i = k}^m s_{i - k} \\\\\n        & \\ge k + \\sum_{i = k}^m f_i \\\\\n        & \\ge f_{m + k} \\\\\n        & \\ge \\alpha^m.\n\\end{align}\n\n\nTaking logs on both sides, we have\n\n\n$$\\log_\\alpha n \\ge m.$$\n\n\nIn other words, provided that $\\alpha$ is a constant, we have a logarithmic bound on the maximum degree.",
            "title": "19.4 Bounding the maximum degree"
        },
        {
            "location": "/Chap19/19.4/#194-1",
            "text": "Professor Pinocchio claims that the height of an $n$-node Fibonacci heap is $O(\\lg n)$. Show that the professor is mistaken by exhibiting, for any positive integer $n$, a sequence of Fibonacci-heap operations that creates a Fibonacci heap consisting of just one tree that is a linear chain of $n$ nodes.    Initialize:  insert 3 numbers then extract-min.  Iteration:  insert 3 numbers, in which at least two numbers are less than the root of chain, then extract-min. The smallest newly inserted number will be extracted and the remaining two numbers will form a heap whose degree of root is $1$, and since the root of the heap is less than the old chain, the chain will be merged into the newly created heap. Finally we should delete the node which contains the largest number of the 3 inserted numbers.",
            "title": "19.4-1"
        },
        {
            "location": "/Chap19/19.4/#194-2",
            "text": "Suppose we generalize the cascading-cut rule to cut a node $x$ from its parent as soon as it loses its $k$th child, for some integer constant $k$. (The rule in Section 19.3 uses $k = 2$.) For what values of $k$ is $D(n) = O(\\lg n)$?   Following the proof of lemma 19.1, if $x$ is any node if a Fibonacci heap, $x.degree = m$, and $x$ has children $y_1, y_2, \\ldots, y_m$, then $y_1.degree \\ge 0$ and $y_i.degree \\ge i - k$. Thus, if $s_m$ denotes the fewest nodes possible in a node of degree $m$, then we have $s_0 = 1, s_1 = 2, \\ldots, s_{k - 1} = k$ and in general, $s_m = k + \\sum_{i = 0}^{m - k} s_i$. Thus, the difference between $s_m$ and $s_{m - 1}$ is $s_{m - k}$.  Let ${f_m}$ be the sequence such that $f_m = m + 1$ for $0 \\le m < k$ and $f_m = f_{m - 1} + f_{m - k}$ for $m \\ge k$.  If $F(x)$ is the generating function for $f_m$ then we have $F(x) = \\frac{1 - x^k}{(1 - x)(1 - x - x^k)}$. Let $\\alpha$ be a root of $x^k = x^{k - 1} + 1$. We'll show by induction that $f_{m + k} \\ge \\alpha^m$. For the base cases:  \\begin{align}\n      f_k & = k + 1 \\ge 1 = \\alpha^0 \\\\\nf_{k + 1} & = k + 3 \\ge \\alpha^1 \\\\\n          & \\vdots \\\\\nf_{k + k} & = k + \\frac{(k + 1)(k + 2)}{2} = k + k + 1 + \\frac{k(k + 1)}{2} \\ge 2k + 1+\\alpha^{k - 1} \\ge \\alpha^k.\n\\end{align}  In general, we have  $$f_{m + k} = f_{m + k - 1} + f_m \\ge \\alpha^{m - 1} + \\alpha^{m - k}  = \\alpha^{m - k}(\\alpha^{k - 1} + 1) = \\alpha^m.$$  Next we show that $f_{m + k} = k + \\sum_{i = 0}^m f_i$. The base case is clear, since $f_k = f_0 + k = k + 1$. For the induction step, we have  $$f_{m + k} = f_{m - 1 - k} + f_m = k \\sum_{i = 0}^{m - 1} f_i + f_m = k + \\sum_{i = 0}^m f_i.$$  Observe that $s_i \\ge f_{i + k}$ for $0 \\le i < k$. Again, by induction, for $m \\ge k$ we have  $$s_m = k + \\sum_{i = 0}^{m - k} s_i \\ge k + \\sum_{i = 0}^{m - k} f_{i + k} \\ge k + \\sum_{i = 0}^m f_i = f_{m + k}.$$  So in general, $s_m \\ge f_{m + k}$. Putting it all together, we have  \\begin{align}\nsize(x) & \\ge s_m \\\\\n        & \\ge k + \\sum_{i = k}^m s_{i - k} \\\\\n        & \\ge k + \\sum_{i = k}^m f_i \\\\\n        & \\ge f_{m + k} \\\\\n        & \\ge \\alpha^m.\n\\end{align}  Taking logs on both sides, we have  $$\\log_\\alpha n \\ge m.$$  In other words, provided that $\\alpha$ is a constant, we have a logarithmic bound on the maximum degree.",
            "title": "19.4-2"
        },
        {
            "location": "/Chap19/Problems/19-1/",
            "text": "Professor Pisano has proposed the following variant of the $\\text{FIB-HEAP-DELETE}$ procedure, claiming that it runs faster when the node being deleted is not the node pointed to by $H.min$.\n\n\nPISANO\n-\nDELETE\n(\nH\n,\n \nx\n)\n\n    \nif\n \nx\n \n==\n \nH\n.\nmin\n\n        \nFIB\n-\nHEAP\n-\nEXTRACT\n-\nMIN\n(\nH\n)\n\n    \nelse\n \ny\n \n=\n \nx\n.\np\n\n        \nif\n \ny\n \n!=\n \nNIL\n\n            \nCUT\n(\nH\n,\n \nx\n,\n \ny\n)\n\n            \nCASCADING\n-\nCUT\n(\nH\n,\n \ny\n)\n\n        \nadd\n \nx\n'\ns\n \nchild\n \nlist\n \nto\n \nthe\n \nroot\n \nlist\n \nof\n \nH\n\n        \nremove\n \nx\n \nfrom\n \nthe\n \nroot\n \nlist\n \nof\n \nH\n\n\n\n\n\na.\n The professor's claim that this procedure runs faster is based partly on the assumption that line 7 can be performed in $O(1)$ actual time. What is wrong with this assumption?\n\n\nb.\n Give a good upper bound on the actual time of $\\text{PISANO-DELETE}$ when $x$ is not $H.min$. Your bound should be in terms of $x.degree$ and the number $c$ of calls to the $\\text{CASCADING-CUT}$ procedure.\n\n\nc.\n Suppose that we call $\\text{PISANO-DELETE}(H, x)$, and let $H'$ be the Fibonacci heap that results. Assuming that node $x$ is not a root, bound the potential of $H'$ in terms of $x.degree$, $c$, $t(H)$, and $m(H)$.\n\n\nd.\n Conclude that the amortized time for $\\text{PISANO-DELETE}$ is asymptotically no better than for $\\text{FIB-HEAP-DELETE}$, evenwhen $x \\ne H.min$.\n\n\n\n\na.\n It can take actual time proportional to the number of children that $x$ had because for each child, when placing it in the root list, their parent pointer needs to be updated to be $\\text{NIL}$ instead of $x$.\n\n\nb.\n Line 7 takes actual time bounded by $x.degree$ since updating each of the children of $x$ only takes constant time. So, if $c$ is the number of cascading cuts that are done, the actual cost is $O(c + x.degree)$.\n\n\nc.\n From the cascading cut, we marked at most one more node, so, $m(H') \\le 1 + m(H)$ regardless of the number of calls to cascading cut, because only the highest thing in the chain of calls actually goes from unmarked to marked. \n\n\nAlso, the number of children increases by the number of children that $x$ had, that is $t(H') = x.degree + t(H)$. Putting these together, we get that\n\n\n$$\\Phi(H') \\le t(H) + x.degree + 2(1 + m(H)).$$\n\n\nd.\n The asymptotic time is \n\n\n$$\\Theta(x.degree) = \\Theta(\\lg(n)),$$\n\n\nwhich is the same asyptotic time that was required for the original deletion method.",
            "title": "19-1 Alternative implementation of deletion"
        },
        {
            "location": "/Chap19/Problems/19-2/",
            "text": "The \nbinomial tree\n $B_k$ is an ordered tree (see Section B.5.2) defined recursively. As shown in Figure 19.6(a), the binomial tree $B_0$ consists of a single node. The binomial tree $B_k$ consists of two binomial trees $B_{k - 1}$ that are linked together so that the root of one is the leftmost child of the root of the other. Figure 19.6(b) shows the binomial trees $B_0$ through $B_4$.\n\n\na.\n Show that for the binomial tree $B_k$,\n\n\n\n\nthere are $2^k$ nodes,\n\n\nthe height of the tree is $k$,\n\n\nthere are exactly $\\binom{k}{i}$ nodes at depth $i$ for $i = 0, 1, \\ldots, k$, and\n\n\nthe root has degree $k$, which is greater than that of any other node; moreover, as Figure 19.6(c) shows, if we number the children of the root from left to right by $k - 1, k - 2, \\ldots, 0$, then child $i$ is the root of a subtree $B_i$.\n\n\n\n\nA \nbinomial heap\n $H$ is a set of binomial trees that satisfies the following properties:\n\n\n\n\nEach node has a $key$ (like a Fibonacci heap).\n\n\nEach binomial tree in $H$ obeys the min-heap property.\n\n\nFor any nonnegative integer $k$, there is at most one binomial tree in $H$ whose root has degree $k$.\n\n\n\n\nb.\n Suppose that a binomial heap $H$ has a total of $n$ nodes. Discuss the relationship between the binomial trees that $H$ contains and the binary representation of $n$. Conclude that $H$ consists of at most $\\lfloor \\lg n \\rfloor + 1$ binomial trees.\n\n\nSuppose that we represent a binomial heap as follows. The left-child, right-sibling scheme of Section 10.4 represents each binomial tree within a binomial heap. Each node contains its key; pointers to its parent, to its leftmost child, and to the sibling immediately to its right (these pointers are $\\text{NIL}$ when appropriate); and its degree (as in Fibonacci heaps, how many children it has). The roots form a singly linked root list, ordered by the degrees of the roots (from low to high), and we access the binomial heap by a pointer to the first node on the root list.\n\n\nc.\n Complete the description of how to represent a binomial heap (i.e., name the attributes, describe when attributes have the value $\\text{NIL}$, and define how the root list is organized), and show how to implement the same seven operations on binomial heaps as this chapter implemented on Fibonacci heaps. Each operation should run in $O(\\lg n)$ worst-case time, where $n$ is the number of nodes in the binomial heap (or in the case of the $\\text{UNION}$ operation, in the two binomial heaps that are being united). The $\\text{MAKE-HEAP}$ operation should take constant time.\n\n\nd.\n Suppose that we were to implement only the mergeable-heap operations on a Fibonacci heap (i.e., we do not implement the $\\text{DECREASE-KEY}$ or $\\text{DELETE}$ operations). How would the trees in a Fibonacci heap resemble those in a binomial heap? How would they differ? Show that the maximum degree in an $n$-node Fibonacci heap would be at most $\\lfloor \\lg n\\rfloor$.\n\n\ne.\n Professor McGee has devised a new data structure based on Fibonacci heaps. A McGee heap has the same structure as a Fibonacci heap and supports just the mergeable-heap operations. The implementations of the operations are the same as for Fibonacci heaps, except that insertion and union consolidate the root list as their last step. What are the worst-case running times of operations on McGee heaps?\n\n\n\n\na.\n\n\n\n\n$B_k$ consists of two binomial trees $B_{k - 1}$.\n\n\nThe height of one $B_{k - 1}$ is increased by $1$.\n\n\nFor $i = 0$, $\\binom{k}{0} = 1$ and only root is at depth $0$. Suppose in $B_{k - 1}$, the number of nodes at depth $i$ is $\\binom{k - 1}{i}$, in $B_k$, the number of nodes at depth $i$ is $\\binom{k - 1}{i} + \\binom{k - 1}{i - 1} = \\binom{k}{i}$.\n\n\nThe degree of the root increase by $1$.\n\n\n\n\nb.\n Let $n.b$ denote the binary expansion of $n$. The fact that we can have at most one of each binomial tree corresponds to the fact that we can have at most $1$ as any digit of $n.b$. Since each binomial tree has a size which is a power of $2$, the binomial trees required to represent n nodes are uniquely determined. We include $B_k$ if and only if the $k$th position of $n.b$ is $1$. Since the binary representation of $n$ has at most $\\lfloor \\lg n \\rfloor+ 1$ digits, this also bounds the number of trees which can be used to represent $n$ nodes.\n\n\nc.\n Given a node $x$, let $x.key$, $x.p$, $x.c$, and $x.s$ represent the attributes key, parent, left-most child, and sibling to the right, respectively. The pointer attributes have value $\\text{NIL}$ when no such node exists. The root list will be stored in a singly linked list.\n\n\n\n\nMAKE-HEAP\n initialize an empty list for the root list and return a pointer to the head of the list, which contains $\\text{NIL}$. This takes constant time. To insert: Let $x$ be a node with key $k$, to be inserted. Scan the root list to find the first $m$ such that $B_m$ is not one of the trees in the binomial heap. If there is no $B_0$, simply create a single root node $x$. Otherwise, union $x, B_0, B_1, \\ldots, B_{m - 1}$ into a $B_m$ tree. Remove all root nodes of the unioned trees from the root list, and update it with the new root. Since each join operation is logarithmic in the height of the tree, the total time is $O(\\lg n)$. $\\text{MINIMUM}$ just scans the root list and returns the minimum in $O(\\lg n)$, since the root list has size at most $O(\\lg n)$.\n\n\nEXTRACT-MIN:\n finds and deletes the minimum, then splits the tree Bm which contained the minimum into its component binomial trees $B_0, B_1, \\ldots, B_{m - 1}$ in $O(\\lg n)$ time. Finally, it unions each of these with any existing trees of the same size in $O(\\lg n)$ time.\n\n\nUNION:\n suppose we have two binomial heaps consisting of trees $B_{i_1}, B_{i_2}, \\ldots, B_{i_k}$ and $B_{j_1}, B_{j_2}, \\ldots, B_{j_m}$ respectively. Simply union  orresponding trees of the same size between the two heaps, then do another check and join any newly created trees which have caused additional duplicates. Note: we will perform at most one union on any fixed size of binomial tree so the total running time is still logarithmic in $n$, where we assume that $n$ is sum of the sizes of the trees which we are unioning.\n\n\nDECREASE-KEY:\n simply swap the node whose key was decreased up the tree until it satisfies the min-heap property.\n\n\nDELETE:\n note that every binomial tree consists of two copies of a smaller binomial tree, so we can write the procedure recursively. If the tree is a single node, simply delete it. If we wish to delete from $B_k$, first split the tree into its constituent copies of $B_{k - 1}$, and recursively call delete on the copy of $B_{k - 1}$ which contains $x$. If this results in two binomial trees of the same size, simply union them.\n\n\n\n\nd.\n The Fibonacci heap will look like a binomial heap, except that multiple copies of a given binomial tree will be allowed. Since the only trees which will appear are binomial trees and $B_k$ has $2k$ nodes, we must have $2k \\le n$, which implies $k \\le \\lfloor \\lg n \\rfloor$. Since the largest root of any binomial tree occurs at the root, and on $B_k$ it is degree $k$, this also bounds the largest degree of a node.\n\n\ne.\n $\\text{INSERT}$ and $\\text{UNION}$ will no longer have amortized $O(1)$ running time because $\\text{CONSOLIDATE}$ has runtime $O(\\lg n)$. Even if no nodes are consolidated, the runtime is dominated by the check that all degrees are distinct. \n\n\nSince calling $\\text{UNION}$ on a heap and a single node is the same as insertion, it must also have runtime $O(\\lg n)$. The other operations remain unchanged.",
            "title": "19-2 Binomial trees and binomial heaps"
        },
        {
            "location": "/Chap19/Problems/19-3/",
            "text": "We wish to augment a Fibonacci heap $H$ to support two new operations without changing the amortized running time of any other Fibonacci-heap operations.\n\n\na.\n The operation $\\text{FIB-HEAP-CHANGE-KEY}(H, x, k)$ changes the key of node $x$ to the value $k$. Give an efficient implementation of $\\text{FIB-HEAP-CHANGE-KEY}$, and analyze the amortized running time of your implementation for the cases in which $k$ is greater than, less than, or equal to $x.key$.\n\n\nb.\n Give an efficient implementation of $\\text{FIB-HEAP-PRUNE}(H, r)$, which deletes $q = \\min(r, H.n)$ nodes from $H$. You may choose any $q$ nodes to delete. Analyze the amortized running time of your implementation. ($\\textit{Hint:}$ You may need to modify the data structure and potential function.)\n\n\n\n\na.\n If $k < x.key$ just run the decrease key procedure. If $k > x.key$, delete the current value $x$ and insert $x$ again with a new key. Both of these cases only need $O(\\lg(n))$ amortized time to run.\n\n\nb.\n Suppose that we also had an additional cost to the potential function that was proportional to the size of the structure. This would only increase when we do an insertion, and then only by a constant amount, so there aren't any worries concerning this increased potential function raising the amortized cost of any operations. Once we've made this modification, to the potential function, we also modify the heap itself by having a doubly linked list along all of the leaf nodes in the heap. \n\n\nTo prune we then pick any leaf node, remove it from it's parent's child list, and remove it from the list of leaves. We repeat this $\\min(r, H.n)$ times. This causes the potential to drop by an amount proportional to $r$ which is on the order of the actual cost of what just happened since the deletions from the linked list take only constant amounts of time each. So, the amortized time is constant.",
            "title": "19-3 More Fibonacci-heap operations"
        },
        {
            "location": "/Chap19/Problems/19-4/",
            "text": "Chapter 18 introduced the 2-3-4 tree, in which every internal node (other than possibly the root) has two, three, or four children and all leaves have the same depth. In this problem, we shall implement \n2-3-4 heaps\n, which support the mergeable-heap operations.\n\n\nThe 2-3-4 heaps differ from 2-3-4 trees in the following ways. In 2-3-4 heaps, only leaves store keys, and each leaf $x$ stores exactly one key in the attribute $x.key$. The keys in the leaves may appear in any order. Each internal node $x$ contains a value $x.small$ that is equal to the smallest key stored in any leaf in the subtree rooted at $x$. The root $r$ contains an attribute $r.height$ that gives the height of the tree. Finally, 2-3-4 heaps are designed to be kept in main memory, so that disk reads and writes are not needed.\n\n\nImplement the following 2-3-4 heap operations. In parts (a)\u2013(e), each operation should run in $O(\\lg n)$ time on a 2-3-4 heap with $n$ elements. The $\\text{UNION}$ operation in part (f) should run in $O(\\lg n)$ time, where $n$ is the number of elements in the two input heaps.\n\n\na.\n $\\text{MINIMUM}$, which returns a pointer to the leaf with the smallest key.\n\n\nb.\n $\\text{DECREASE-KEY}$, which decreases the key of a given leaf $x$ to a given value $k \\le x.key$.\n\n\nc.\n $\\text{INSERT}$, which inserts leaf $x$ with key $k$.\n\n\nd.\n $\\text{DELETE}$, which deletes a given leaf $x$.\n\n\ne.\n $\\text{EXTRACT-MIN}$, which extracts the leaf with the smallest key.\n\n\nf.\n $\\text{UNION}$, which unites two 2-3-4 heaps, returning a single 2-3-4 heap and destroying the input heaps.\n\n\n\n\na.\n Traverse a path from root to leaf as follows: At a given node, examine the attribute $x.small$ in each child-node of the current node. Proceed to the child node which minimizes this attribute. If the children of the current node are leaves, then simply return a pointer to the child node with smallest key. Since the height of the tree is $O(\\lg n)$ and the number of children of any node is at most $4$, this has runtime $O(\\lg n)$.\n\n\nb.\n Decrease the key of $x$, then traverse the simple path from $x$ to the root by following the parent pointers. At each node $y$ encountered, check the attribute $y.small$. If $k < y.small$, set $y.small = k$. Otherwise do nothing and continue on the path.\n\n\nc.\n Insert works the same as in a B-tree, except that at each node it is assumed that the node to be inserted is 'smaller' than every key stored at that node, so the runtime is inherited. If the root is split, we update the height of the tree. When we reach the final node before the leaves, simply insert the new node as the leftmost child of that node.\n\n\nd.\n As with $\\text{B-TREE-DELETE}$, we'll want to ensure that the tree satisfies the properties of being a 2-3-4 tree after deletion, so we'll need to check that we're never deleting a leaf which only has a single sibling. This is handled in much the same way as in chapter 18. We can imagine that dummy keys are stored in all the internal nodes, and carry out the deletion process in exactly the same way as done in exercise 18.3-2, with the added requirement that we update the height stored in the root if we merge the root with its child nodes. \n\n\ne.\n $\\text{EXTRACT-MIN}$ simply locates the minimum as done in part (a), then deletes it as in part (d).\n\n\nf.\n This can be done by implementing the join operation, as in Problem 18-2 (b).",
            "title": "19-4 2-3-4 heaps"
        },
        {
            "location": "/Chap20/20.1/",
            "text": "20.1-1\n\n\n\n\nModify the data structures in this section to support duplicate keys.\n\n\n\n\nTo modify these structure to allow for multiple elements, instead of just storing a bit in each of the entries, we can store the head of a linked list representing how many elements of that value that are contained in the structure, with a $\\text{NIL}$ value to represent having no elements of that value.\n\n\n20.1-2\n\n\n\n\nModify the data structures in this section to support keys that have associated satellite data.\n\n\n\n\nAll operations will remain the same, except instead of the leaves of the tree being an array of integers, they will be an array of nodes, each of which stores $x.key$ in addition to whatever additional satellite data you wish.\n\n\n20.1-3\n\n\n\n\nObserve that, using the structures in this section, the way we find the successor and predecessor of a value $x$ does not depend on whether $x$ is in the set at the time. Show how to find the successor of $x$ in a binary search tree when $x$ is not stored in the tree.\n\n\n\n\nTo find the successor of a given key $k$ from a binary tree, call the procedure $\\text{SUCC}(x, T.root)$. Note that this will return $\\text{NIL}$ if there is no entry in the tree with a larger key.\n\n\n20.1-4\n\n\n\n\nSuppose that instead of superimposing a tree of degree $\\sqrt u$, we were to superimpose a tree of degree $u^{1 / k}$, where $k > 1$ is a constant. What would be the height of such a tree, and how long would each of the operations take?\n\n\n\n\nThe new tree would have height $k$. $\\text{INSERT}$ would take $O(k)$, $\\text{MINIMUM}$, $\\text{MAXIMUM}$, $\\text{SUCCESSOR}$, $\\text{PREDECESSOR}$, and $\\text{DELETE}$ would take $O(ku^{1 / k})$.",
            "title": "20.1 Preliminary approaches"
        },
        {
            "location": "/Chap20/20.1/#201-1",
            "text": "Modify the data structures in this section to support duplicate keys.   To modify these structure to allow for multiple elements, instead of just storing a bit in each of the entries, we can store the head of a linked list representing how many elements of that value that are contained in the structure, with a $\\text{NIL}$ value to represent having no elements of that value.",
            "title": "20.1-1"
        },
        {
            "location": "/Chap20/20.1/#201-2",
            "text": "Modify the data structures in this section to support keys that have associated satellite data.   All operations will remain the same, except instead of the leaves of the tree being an array of integers, they will be an array of nodes, each of which stores $x.key$ in addition to whatever additional satellite data you wish.",
            "title": "20.1-2"
        },
        {
            "location": "/Chap20/20.1/#201-3",
            "text": "Observe that, using the structures in this section, the way we find the successor and predecessor of a value $x$ does not depend on whether $x$ is in the set at the time. Show how to find the successor of $x$ in a binary search tree when $x$ is not stored in the tree.   To find the successor of a given key $k$ from a binary tree, call the procedure $\\text{SUCC}(x, T.root)$. Note that this will return $\\text{NIL}$ if there is no entry in the tree with a larger key.",
            "title": "20.1-3"
        },
        {
            "location": "/Chap20/20.1/#201-4",
            "text": "Suppose that instead of superimposing a tree of degree $\\sqrt u$, we were to superimpose a tree of degree $u^{1 / k}$, where $k > 1$ is a constant. What would be the height of such a tree, and how long would each of the operations take?   The new tree would have height $k$. $\\text{INSERT}$ would take $O(k)$, $\\text{MINIMUM}$, $\\text{MAXIMUM}$, $\\text{SUCCESSOR}$, $\\text{PREDECESSOR}$, and $\\text{DELETE}$ would take $O(ku^{1 / k})$.",
            "title": "20.1-4"
        },
        {
            "location": "/Chap20/20.2/",
            "text": "20.2-1\n\n\n\n\nWrite pseudocode for the procedures $\\text{PROTO-vEB-MAXIMUM}$ and $\\text{PROTO-vEB-PREDECESSOR}$.\n\n\n\n\nSee the two algorithms, $\\text{PROTO-vEB-MAXIMUM}$ and $\\text{PROTO-vEB-PREDECESSOR}$.\n\n\n20.2-2\n\n\n\n\nWrite pseudocode for $\\text{PROTO-vEB-DELETE}$. It should update the appropriate summary bit by scanning the related bits within the cluster. What is the worst-case running time of your procedure?\n\n\n\n\nPROTO\n-\nvEB\n-\nDELETE\n(\nV\n,\n \nx\n)\n\n    \nif\n \nV\n.\nu\n \n==\n \n2\n\n        \nV\n.\nA\n[\nx\n]\n \n=\n \n0\n\n    \nelse\n\n        \nPROTO\n-\nvEB\n-\nDELETE\n(\nV\n.\ncluster\n[\nhigh\n(\nx\n)],\n \nlow\n(\nx\n))\n\n        \ninCluster\n \n=\n \nFALSE\n\n        \nfor\n \ni\n \n=\n \nhigh\n(\nx\n)\n\uff0e\nsqrt\n(\nu\n)\n \nto\n \n(\nhigh\n(\nx\n)\n \n+\n \n1\n)\n\uff0e\nsqrt\n(\nu\n)\n \n-\n \n1\n\n            \nif\n \nPROTO\n-\nvEB\n-\nMEMBER\n(\nV\n.\ncluster\n[\nhigh\n(\nx\n)],\n \ni\n)\n\n                \ninCluster\n \n=\n \nTRUE\n\n                \nbreak\n\n        \nif\n \ninCluster\n \n==\n \nFALSE\n\n            \nPROTO\n-\nvEB\n-\nDELETE\n(\nV\n.\nsummary\n,\n \nhigh\n(\nx\n))\n\n\n\n\n\nWhen we delete a key, we need to check membership of all keys of that cluster to know how to update the summary structure. There are $\\sqrt u$ of these, and each membership takes $O(\\lg\\lg u)$ time to check. With the recursive calls, recurrence for running time is\n\n\n$$T(u) = T(\\sqrt u) + O(\\sqrt u\\lg\\lg u).$$\n\n\nWe make the substitution $m = \\lg u$ and $S(m) = T(2^m)$. Then we apply the Master Theorem, using case 3, to solve the recurrence. Substituting back, we find that the runtime is $T(u) = O(\\sqrt u\\lg\\lg u)$.\n\n\n20.2-3\n\n\n\n\nAdd the attribute $n$ to each $\\text{proto-vEB}$ structure, giving the number of elements currently in the set it represents, and write pseudocode for $\\text{PROTO-vEB-DELETE}$ that uses the attribute $n$ to decide when to reset summary bits to $0$. What is the worst-case running time of your procedure? What other procedures need to change because of the new attribute? Do these changes affect their running times?\n\n\n\n\nWe would keep the same as before, but insert immediately after the else, a check of whether $n = 1$. If it doesn't continue as usual, but if it does, then we can just immediately set the summary bit to $0$, null out the pointer in the table, and be done immediately. This has the upside that it can sometimes save up to $\\lg\\lg u$. The procedure has the big downside that the number of elements that are in the set could be as high as $\\lg(\\lg u)$, in which case $\\lg u$ many bits are needed to store $n$.\n\n\n20.2-4\n\n\n\n\nModify the $\\text{proto-vEB}$ structure to support duplicate keys.\n\n\n\n\nThe array $A$ found in a proto van Emde Boas structure of size $2$ should now support integers, instead of just bits. All other pats of the structure will remain the same. The integer will store the number of duplicates at that position. The modifications to insert, delete, minimum, successor, etc will be minor. Only the base cases will need to be updated.\n\n\nPROTO\n-\nvEB\n-\nDELETE\n(\nV\n,\n \nx\n)\n\n    \nif\n \nV\n.\nu\n \n==\n \n2\n\n        \nV\n.\nA\n[\nx\n]\n \n=\n \n0\n\n    \nelse\n\n        \nPROTO\n-\nvEB\n-\nDELETE\n(\nV\n.\ncluster\n[\nhigh\n(\nx\n)],\n \nlow\n(\nx\n))\n\n        \ninCluster\n \n=\n \nFALSE\n\n        \nfor\n \ni\n \n=\n \nhigh\n(\nx\n)\n \n*\n \nsqrt\n(\nu\n)\n \nto\n \n(\nhigh\n(\nx\n)\n \n+\n \n1\n)\n \n*\n \nsqrt\n(\nu\n)\n \n-\n \n1\n\n            \nif\n \nPROTO\n-\nvEB\n-\nMEMBER\n(\nV\n.\ncluster\n[\nhigh\n(\nx\n)],\n \ni\n)\n\n                \ninCluster\n \n=\n \nTRUE\n\n                \nbreak\n\n        \nif\n \ninCluster\n \n=\n \nFALSE\n\n            \nPROTO\n-\nvEB\n-\nDELETE\n(\nV\n.\nsummary\n,\nhigh\n(\nx\n))\n\n\n\n\n\n20.2-5\n\n\n\n\nModify the $\\text{proto-vEB}$ structure to support keys that have associated satellite data.\n\n\n\n\nThe only modification necessary would be for the $u = 2$ trees. They would need to also include a length two array that had pointers to the corresponding satellite data which would be populated in case the corresponding entry in $A$ were $1$.\n\n\n20.2-6\n\n\n\n\nWrite pseudocode for a procedure that creates a $\\text{proto-vEB}(u)$ structure.\n\n\n\n\nThis algorithm recursively allocates proper space and appropriately initializes attributes for a proto van Emde Boas structure of size $u$.\n\n\nMAKE\n-\nPROTO\n-\nvEB\n(\nu\n)\n\n    \nV\n \n=\n \nallocate\n-\nnode\n()\n\n    \nV\n.\nu\n \n=\n \nu\n\n    \nif\n \nu\n \n==\n \n2\n\n        \nlet\n \nA\n \nbe\n \nan\n \narray\n \nof\n \nsize\n \n2\n\n        \nV\n.\nA\n[\n1\n]\n \n=\n \nV\n.\nA\n[\n0\n]\n \n=\n \n0\n\n    \nelse\n\n        \nV\n.\nsummary\n \n=\n \nMAKE\n-\nPROTO\n-\nvEB\n(\nsqrt\n(\nu\n))\n\n        \nfor\n \ni\n \n=\n \n0\n \nto\n \nsqrt\n(\nu\n)\n \n-\n \n1\n\n            \nV\n.\ncluster\n[\ni\n]\n \n=\n \nMAKE\n-\nPROTO\n-\nvEB\n(\nsqrt\n(\nu\n))\n\n\n\n\n\n20.2-7\n\n\n\n\nArgue that if line 9 of $\\text{PROTO-vEB-MINIMUM}$ is executed, then the $\\text{proto-vEB}$ structure is empty.\n\n\n\n\nFor line 9 to be executed, we would need that in the summary data, we also had a $\\text{NIL}$ returned. This could of either happened through line 9, or 6. Eventually though, it would need to happen in line 6, so, there must be some number of summarizations that happened of $V$ that caused us to get an empty $u = 2$ $\\text{vEB}$. However, a summarization has an entry of one if any of the corresponding entries in the data structure are one. This means that there are no entries in $V$, and so, we have that $V$ is empty.\n\n\n20.2-8\n\n\n\n\nSuppose that we designed a $\\text{proto-vEB}$ structure in which each \ncluster\n array had only $u^{1 / 4}$ elements. What would the running times of each operation be?\n\n\n\n\nThere are $u^{3 / 4}$ clusters in each $\\text{proto-vEB}$.\n\n\n\n\n\n\nMEMBER/INSERT:\n\n\n$$T(u) = T(u^{1 / 4}) + O(1) = \\Theta(\\lg\\log_4 u) = \\Theta(\\lg\\lg u).$$\n\n\n\n\n\n\nMINIMUM/MAXIMUM:\n\n\n$$T(u) = T(u^{1 / 4}) + T(u^{3 / 4}) + O(1) = \\Theta(\\lg u).$$\n\n\n\n\n\n\nSUCCESSOR/PREDECESSOR/DELETE:\n\n\n$$T(u) = T(u^{1 / 4}) + T(u^{3 / 4}) + \\Theta(\\lg u^{1 / 4}) = \\Theta(\\lg u \\lg\\lg u).$$",
            "title": "20.2 A recursive structure"
        },
        {
            "location": "/Chap20/20.2/#202-1",
            "text": "Write pseudocode for the procedures $\\text{PROTO-vEB-MAXIMUM}$ and $\\text{PROTO-vEB-PREDECESSOR}$.   See the two algorithms, $\\text{PROTO-vEB-MAXIMUM}$ and $\\text{PROTO-vEB-PREDECESSOR}$.",
            "title": "20.2-1"
        },
        {
            "location": "/Chap20/20.2/#202-2",
            "text": "Write pseudocode for $\\text{PROTO-vEB-DELETE}$. It should update the appropriate summary bit by scanning the related bits within the cluster. What is the worst-case running time of your procedure?   PROTO - vEB - DELETE ( V ,   x ) \n     if   V . u   ==   2 \n         V . A [ x ]   =   0 \n     else \n         PROTO - vEB - DELETE ( V . cluster [ high ( x )],   low ( x )) \n         inCluster   =   FALSE \n         for   i   =   high ( x ) \uff0e sqrt ( u )   to   ( high ( x )   +   1 ) \uff0e sqrt ( u )   -   1 \n             if   PROTO - vEB - MEMBER ( V . cluster [ high ( x )],   i ) \n                 inCluster   =   TRUE \n                 break \n         if   inCluster   ==   FALSE \n             PROTO - vEB - DELETE ( V . summary ,   high ( x ))   When we delete a key, we need to check membership of all keys of that cluster to know how to update the summary structure. There are $\\sqrt u$ of these, and each membership takes $O(\\lg\\lg u)$ time to check. With the recursive calls, recurrence for running time is  $$T(u) = T(\\sqrt u) + O(\\sqrt u\\lg\\lg u).$$  We make the substitution $m = \\lg u$ and $S(m) = T(2^m)$. Then we apply the Master Theorem, using case 3, to solve the recurrence. Substituting back, we find that the runtime is $T(u) = O(\\sqrt u\\lg\\lg u)$.",
            "title": "20.2-2"
        },
        {
            "location": "/Chap20/20.2/#202-3",
            "text": "Add the attribute $n$ to each $\\text{proto-vEB}$ structure, giving the number of elements currently in the set it represents, and write pseudocode for $\\text{PROTO-vEB-DELETE}$ that uses the attribute $n$ to decide when to reset summary bits to $0$. What is the worst-case running time of your procedure? What other procedures need to change because of the new attribute? Do these changes affect their running times?   We would keep the same as before, but insert immediately after the else, a check of whether $n = 1$. If it doesn't continue as usual, but if it does, then we can just immediately set the summary bit to $0$, null out the pointer in the table, and be done immediately. This has the upside that it can sometimes save up to $\\lg\\lg u$. The procedure has the big downside that the number of elements that are in the set could be as high as $\\lg(\\lg u)$, in which case $\\lg u$ many bits are needed to store $n$.",
            "title": "20.2-3"
        },
        {
            "location": "/Chap20/20.2/#202-4",
            "text": "Modify the $\\text{proto-vEB}$ structure to support duplicate keys.   The array $A$ found in a proto van Emde Boas structure of size $2$ should now support integers, instead of just bits. All other pats of the structure will remain the same. The integer will store the number of duplicates at that position. The modifications to insert, delete, minimum, successor, etc will be minor. Only the base cases will need to be updated.  PROTO - vEB - DELETE ( V ,   x ) \n     if   V . u   ==   2 \n         V . A [ x ]   =   0 \n     else \n         PROTO - vEB - DELETE ( V . cluster [ high ( x )],   low ( x )) \n         inCluster   =   FALSE \n         for   i   =   high ( x )   *   sqrt ( u )   to   ( high ( x )   +   1 )   *   sqrt ( u )   -   1 \n             if   PROTO - vEB - MEMBER ( V . cluster [ high ( x )],   i ) \n                 inCluster   =   TRUE \n                 break \n         if   inCluster   =   FALSE \n             PROTO - vEB - DELETE ( V . summary , high ( x ))",
            "title": "20.2-4"
        },
        {
            "location": "/Chap20/20.2/#202-5",
            "text": "Modify the $\\text{proto-vEB}$ structure to support keys that have associated satellite data.   The only modification necessary would be for the $u = 2$ trees. They would need to also include a length two array that had pointers to the corresponding satellite data which would be populated in case the corresponding entry in $A$ were $1$.",
            "title": "20.2-5"
        },
        {
            "location": "/Chap20/20.2/#202-6",
            "text": "Write pseudocode for a procedure that creates a $\\text{proto-vEB}(u)$ structure.   This algorithm recursively allocates proper space and appropriately initializes attributes for a proto van Emde Boas structure of size $u$.  MAKE - PROTO - vEB ( u ) \n     V   =   allocate - node () \n     V . u   =   u \n     if   u   ==   2 \n         let   A   be   an   array   of   size   2 \n         V . A [ 1 ]   =   V . A [ 0 ]   =   0 \n     else \n         V . summary   =   MAKE - PROTO - vEB ( sqrt ( u )) \n         for   i   =   0   to   sqrt ( u )   -   1 \n             V . cluster [ i ]   =   MAKE - PROTO - vEB ( sqrt ( u ))",
            "title": "20.2-6"
        },
        {
            "location": "/Chap20/20.2/#202-7",
            "text": "Argue that if line 9 of $\\text{PROTO-vEB-MINIMUM}$ is executed, then the $\\text{proto-vEB}$ structure is empty.   For line 9 to be executed, we would need that in the summary data, we also had a $\\text{NIL}$ returned. This could of either happened through line 9, or 6. Eventually though, it would need to happen in line 6, so, there must be some number of summarizations that happened of $V$ that caused us to get an empty $u = 2$ $\\text{vEB}$. However, a summarization has an entry of one if any of the corresponding entries in the data structure are one. This means that there are no entries in $V$, and so, we have that $V$ is empty.",
            "title": "20.2-7"
        },
        {
            "location": "/Chap20/20.2/#202-8",
            "text": "Suppose that we designed a $\\text{proto-vEB}$ structure in which each  cluster  array had only $u^{1 / 4}$ elements. What would the running times of each operation be?   There are $u^{3 / 4}$ clusters in each $\\text{proto-vEB}$.    MEMBER/INSERT:  $$T(u) = T(u^{1 / 4}) + O(1) = \\Theta(\\lg\\log_4 u) = \\Theta(\\lg\\lg u).$$    MINIMUM/MAXIMUM:  $$T(u) = T(u^{1 / 4}) + T(u^{3 / 4}) + O(1) = \\Theta(\\lg u).$$    SUCCESSOR/PREDECESSOR/DELETE:  $$T(u) = T(u^{1 / 4}) + T(u^{3 / 4}) + \\Theta(\\lg u^{1 / 4}) = \\Theta(\\lg u \\lg\\lg u).$$",
            "title": "20.2-8"
        },
        {
            "location": "/Chap20/20.3/",
            "text": "20.3-1\n\n\n\n\nModify vEB trees to support duplicate keys.\n\n\n\n\nTo support duplicate keys, for each $u = 2$ vEB tree, instead of storing just a bit in each of the entries of its array, it should store an integer representing how many elements of that value the vEB contains.\n\n\n20.3-2\n\n\n\n\nModify vEB trees to support keys that have associated satellite data.\n\n\n\n\nFor any key which is a minimum on some vEB, we'll need to store its satellite data with the min value since the key doesn't appear in the subtree. The rest of the satellite data will be stored alongside the keys of the vEB trees of size $2$. Explicitly, for each non-summary vEB tree, store a pointer in addition to min. If min is $\\text{NIL}$, the pointer should also point to $\\text{NIL}$. Otherwise, the pointer should point to the satellite data associated with that minimum. In a size $2$ vEB tree, we'll have two additional pointers, which will each point to the minimum's and maximum's satellite data, or $\\text{NIL}$ if these don't exist. In the case where $\\min = \\max$, the pointers will point to the same data.\n\n\n20.3-3\n\n\n\n\nWrite pseudocode for a procedure that creates an empty van Emde Boas tree.\n\n\n\n\nWe define the procedure for any $u$ that is a power of $2$. If $u = 2$, then, just slap that fact together with an array of length $2$ that contains $0$ in both entries.\n\n\nIf $u = 2k > 2$, then, we create an empty vEB tree called Summary with $u = 2^{\\lceil k / 2 \\rceil}$. We also make an array called cluster of length $2^{\\lceil k / 2 \\rceil}$ with each entry initialized to an empty vEB tree with $u = 2^{\\lfloor k / 2 \\rfloor}$. Lastly, we create a min and max element, both initialized to $\\text{NIL}$.\n\n\n20.3-4\n\n\n\n\nWhat happens if you call $\\text{VEB-TREE-INSERT}$ with an element that is already in the vEB tree? What happens if you call $\\text{VEB-TREE-DELETE}$ with an element that is not in the vEB tree? Explain why the procedures exhibit the behavior that they do. Show how to modify vEB trees and their operations so that we can check in constant time whether an element is present.\n\n\n\n\nSuppose that $x$ is already in $V$ and we call $\\text{INSERT}$. Then we can't satisfy lines 1, 3, 6, or 10, so we will enter the else case on line 9 every time, causing an infinite loop. Now suppose we call $\\text{DELETE}$ when $x$ isn't in $V$ . If there is only a single element in $V$, lines 1 through 3 will delete it, regardless of what element it is. To enter the elseif of line 4, $x$ can't be equal to $0$ or $1$ and the vEB tree must be of size $2$. In this case, we delete the max element, regardless of what it is. Since the recursive call always puts us in this case, we always delete an element we shouldn't. To avoid these issue, keep and updated auxiliary array $A$ with $u$ elements. Set $A[i] = 0$ if $i$ is not in the tree, and $1$ if it is. Since we can perform constant time updates to this array, it won't affect the runtime of any of our operations. When inserting $x$, check first to be sure $A[x] = 0$. If it's not, simply return. If it is, set $A[x] = 1$ and proceed with insert as usual. When deleting $x$, check if $A[x] = 1$. If it isn't, simply return. If it is, set $A[x] = 0$ and proceed with delete as usual.\n\n\n20.3-5\n\n\n\n\nSuppose that instead of $\\sqrt[\\uparrow]u$ clusters, each with universe size $\\sqrt[\\downarrow]u$, we constructed vEB trees to have $u^{1 / k}$ clusters, each with universe size $u^{1 - 1 / k}$, where $k > 1$ is a constant. If we were to modify the operations appropriately, what would be their running times? For the purpose of analysis, assume that $u^{1 / k}$ and $u^{1 - 1 / k}$ are always integers.\n\n\n\n\nSimilar to the analysis of $\\text{(20.4)}$, we will analyze\n\n\n$$T(u) \\le T(u^{1 - 1 / k}) + T(u^{1 / k}) + O(1).$$\n\n\nThis is a good choice for analysis because for many operations we first check the summary vEB tree, which will have size $u^{1 / k}$ (the second term). And then possible have to check a vEB tree somewhere in cluster, which will have size $u^{1 - 1/k}$ (the first term). We let $T(2^m) = S(m)$, so the equation becomes\n\n\n$$S(m) \\le S(m(1 - 1/k)) + S(m/k) + O(1).$$\n\n\nIf $k > 2$ the first term dominates, so by master theorem, we'll have that $S(m)$ is $O(\\lg m)$, this means that T will be $O(\\lg(\\lg u))$ just as in the original case where we took squareroots.\n\n\n20.3-6\n\n\n\n\nCreating a vEB tree with universe size $u$ requires $O(u)$ time. Suppose we wish to explicitly account for that time. What is the smallest number of operations $n$ for which the amortized time of each operation in a vEB tree is $O(\\lg\\lg u)$?\n\n\n\n\nSet $n = u / \\lg\\lg u$. Then performing $n$ operations takes $c(u + n\\lg\\lg u)$ time for some constant $c$. Using the aggregate amortized analysis, we divide by n to see that the amortized cost of each operations is $c(\\lg\\lg u + \\lg\\lg u) = O(\\lg\\lg u)$ per operation. Thus we need $n \\ge u/ \\lg \\lg u$.",
            "title": "20.3 The van Emde Boas tree"
        },
        {
            "location": "/Chap20/20.3/#203-1",
            "text": "Modify vEB trees to support duplicate keys.   To support duplicate keys, for each $u = 2$ vEB tree, instead of storing just a bit in each of the entries of its array, it should store an integer representing how many elements of that value the vEB contains.",
            "title": "20.3-1"
        },
        {
            "location": "/Chap20/20.3/#203-2",
            "text": "Modify vEB trees to support keys that have associated satellite data.   For any key which is a minimum on some vEB, we'll need to store its satellite data with the min value since the key doesn't appear in the subtree. The rest of the satellite data will be stored alongside the keys of the vEB trees of size $2$. Explicitly, for each non-summary vEB tree, store a pointer in addition to min. If min is $\\text{NIL}$, the pointer should also point to $\\text{NIL}$. Otherwise, the pointer should point to the satellite data associated with that minimum. In a size $2$ vEB tree, we'll have two additional pointers, which will each point to the minimum's and maximum's satellite data, or $\\text{NIL}$ if these don't exist. In the case where $\\min = \\max$, the pointers will point to the same data.",
            "title": "20.3-2"
        },
        {
            "location": "/Chap20/20.3/#203-3",
            "text": "Write pseudocode for a procedure that creates an empty van Emde Boas tree.   We define the procedure for any $u$ that is a power of $2$. If $u = 2$, then, just slap that fact together with an array of length $2$ that contains $0$ in both entries.  If $u = 2k > 2$, then, we create an empty vEB tree called Summary with $u = 2^{\\lceil k / 2 \\rceil}$. We also make an array called cluster of length $2^{\\lceil k / 2 \\rceil}$ with each entry initialized to an empty vEB tree with $u = 2^{\\lfloor k / 2 \\rfloor}$. Lastly, we create a min and max element, both initialized to $\\text{NIL}$.",
            "title": "20.3-3"
        },
        {
            "location": "/Chap20/20.3/#203-4",
            "text": "What happens if you call $\\text{VEB-TREE-INSERT}$ with an element that is already in the vEB tree? What happens if you call $\\text{VEB-TREE-DELETE}$ with an element that is not in the vEB tree? Explain why the procedures exhibit the behavior that they do. Show how to modify vEB trees and their operations so that we can check in constant time whether an element is present.   Suppose that $x$ is already in $V$ and we call $\\text{INSERT}$. Then we can't satisfy lines 1, 3, 6, or 10, so we will enter the else case on line 9 every time, causing an infinite loop. Now suppose we call $\\text{DELETE}$ when $x$ isn't in $V$ . If there is only a single element in $V$, lines 1 through 3 will delete it, regardless of what element it is. To enter the elseif of line 4, $x$ can't be equal to $0$ or $1$ and the vEB tree must be of size $2$. In this case, we delete the max element, regardless of what it is. Since the recursive call always puts us in this case, we always delete an element we shouldn't. To avoid these issue, keep and updated auxiliary array $A$ with $u$ elements. Set $A[i] = 0$ if $i$ is not in the tree, and $1$ if it is. Since we can perform constant time updates to this array, it won't affect the runtime of any of our operations. When inserting $x$, check first to be sure $A[x] = 0$. If it's not, simply return. If it is, set $A[x] = 1$ and proceed with insert as usual. When deleting $x$, check if $A[x] = 1$. If it isn't, simply return. If it is, set $A[x] = 0$ and proceed with delete as usual.",
            "title": "20.3-4"
        },
        {
            "location": "/Chap20/20.3/#203-5",
            "text": "Suppose that instead of $\\sqrt[\\uparrow]u$ clusters, each with universe size $\\sqrt[\\downarrow]u$, we constructed vEB trees to have $u^{1 / k}$ clusters, each with universe size $u^{1 - 1 / k}$, where $k > 1$ is a constant. If we were to modify the operations appropriately, what would be their running times? For the purpose of analysis, assume that $u^{1 / k}$ and $u^{1 - 1 / k}$ are always integers.   Similar to the analysis of $\\text{(20.4)}$, we will analyze  $$T(u) \\le T(u^{1 - 1 / k}) + T(u^{1 / k}) + O(1).$$  This is a good choice for analysis because for many operations we first check the summary vEB tree, which will have size $u^{1 / k}$ (the second term). And then possible have to check a vEB tree somewhere in cluster, which will have size $u^{1 - 1/k}$ (the first term). We let $T(2^m) = S(m)$, so the equation becomes  $$S(m) \\le S(m(1 - 1/k)) + S(m/k) + O(1).$$  If $k > 2$ the first term dominates, so by master theorem, we'll have that $S(m)$ is $O(\\lg m)$, this means that T will be $O(\\lg(\\lg u))$ just as in the original case where we took squareroots.",
            "title": "20.3-5"
        },
        {
            "location": "/Chap20/20.3/#203-6",
            "text": "Creating a vEB tree with universe size $u$ requires $O(u)$ time. Suppose we wish to explicitly account for that time. What is the smallest number of operations $n$ for which the amortized time of each operation in a vEB tree is $O(\\lg\\lg u)$?   Set $n = u / \\lg\\lg u$. Then performing $n$ operations takes $c(u + n\\lg\\lg u)$ time for some constant $c$. Using the aggregate amortized analysis, we divide by n to see that the amortized cost of each operations is $c(\\lg\\lg u + \\lg\\lg u) = O(\\lg\\lg u)$ per operation. Thus we need $n \\ge u/ \\lg \\lg u$.",
            "title": "20.3-6"
        },
        {
            "location": "/Chap20/Problems/20-1/",
            "text": "This problem explores the space requirements for van Emde Boas trees and suggests a way to modify the data structure to make its space requirement depend on the number $n$ of elements actually stored in the tree, rather than on the universe size $u$. For simplicity, assume that $\\sqrt u$ is always an integer.\n\n\na.\n Explain why the following recurrence characterizes the space requirement $P(u)$ of a van Emde Boas tree with universe size u:\n\n\n$$P(u) = (\\sqrt u + 1) P(\\sqrt u) + \\Theta(\\sqrt u). \\tag{20.5}$$\n\n\nb.\n Prove that recurrence $\\text{(20.5)}$ has the solution $P(u) = O(u)$.\n\n\nIn order to reduce the space requirements, let us define a \nreduced-space van Emde Boas tree\n, or \nRS-vEB tree\n, as a \nvEB tree\n $V$ but with the following changes:\n\n\n\n\nThe attribute $V.cluster$, rather than being stored as a simple array of pointers to vEB trees with universe size $\\sqrt u$, is a hash table (see Chapter 11) stored as a dynamic table (see Section 17.4). Corresponding to the array version of $V.cluster$, the hash table stores pointers to RS-vEB trees with universe size $\\sqrt u$. To find the $i$th cluster, we look up the key $i$ in the hash table, so that we can find the $i$th cluster by a single search in the hash table.\n\n\nThe hash table stores only pointers to nonempty clusters. A search in the hash table for an empty cluster returns $\\text{NIL}$, indicating that the cluster is empty.\n\n\nThe attribute $V.summary$ is $\\text{NIL}$ if all clusters are empty. Otherwise, $V.summary$ points to an RS-vEB tree with universe size $\\sqrt u$.\n\n\n\n\nBecause the hash table is implemented with a dynamic table, the space it requires is proportional to the number of nonempty clusters.\n\n\nWhen we need to insert an element into an empty RS-vEB tree, we create the RS-vEB tree by calling the following procedure, where the parameter u is the universe size of the RS-vEB tree:\n\n\nCREATE\n-\nNEW\n-\nRS\n-\nVEB\n-\nTREE\n(\nu\n)\n\n    \nallocate\n \na\n \nnew\n \nvEB\n \ntree\n \nV\n\n    \nV\n.\nu\n \n=\n \nu\n\n    \nV\n.\nmin\n \n=\n \nNIL\n\n    \nV\n.\nmax\n \n=\n \nNIL\n\n    \nV\n.\nsummary\n \n=\n \nNIL\n\n    \ncreate\n \nV\n.\ncluster\n \nas\n \nan\n \nempty\n \ndynamic\n \nhash\n \ntable\n\n    \nreturn\n \nV\n\n\n\n\n\nc.\n Modify the $\\text{VEB-TREE-INSERT}$ procedure to produce pseudocode for the procedure $\\text{RS-VEB-TREE-INSERT}(V, x)$, which inserts $x$ into the RS-vEB tree $V$, calling $\\text{CREATE-NEW-RS-VEB-TREE}$ as appropriate.\n\n\nd.\n Modify the $\\text{VEB-TREE-SUCCESSOR}$ procedure to produce pseudocode for the procedure $\\text{RS-VEB-TREE-SUCCESSOR}(V, x)$, which returns the successor of $x$ in RS-vEB tree $V$, or $\\text{NIL}$ if $x$ has no successor in $V$.\n\n\ne.\n Prove that, under the assumption of simple uniform hashing, your $\\text{RS-VEBTREE-INSERT}$ and $\\text{RS-VEB-TREE-SUCCESSOR}$ procedures run in $O(\\lg\\lg u)$ expected time.\n\n\nf.\n Assuming that elements are never deleted from a vEB tree, prove that the space requirement for the RS-vEB tree structure is $O(n)$, where $n$ is the number of elements actually stored in the RS-vEB tree.\n\n\ng.\n RS-vEB trees have another advantage over vEB trees: they require less time to create. How long does it take to create an empty RS-vEB tree?\n\n\n\n\na.\n Lets look at what has to be stored for a vEB tree. Each vEB tree contains one vEB tree of size $\\sqrt[+]u$ and $\\sqrt[+]u$ vEB trees of size $\\sqrt[1]u$. It also is storing three numbers each of order $O(u)$, so they need $\\Theta(\\lg(u))$ space each. Lastly, it needs to store $\\sqrt u$ many pointers to the cluster vEB trees. We'll combine these last two contributions which are $\\Theta(\\lg(u))$ and $\\Theta(\\sqrt u)$ respectively into a single term that is $\\Theta(\\sqrt u)$. This gets us the recurrence\n\n\n$$P(u) = P(\\sqrt[+]u) + \\sqrt[+]u P(\\sqrt[-]u) + \\Theta(\\sqrt u).$$\n\n\nThen, we have that $u = 2^{2m}$ (which follows from the assumption that $\\sqrt u$ was an integer), this equation becomes\n\n\n\\begin{align}\nP(u) & = (1 + 2^m)P(2^m) + \\Theta(\\sqrt u) \\\\\n     & = (1 + \\sqrt u)P(\\sqrt u) + \\Theta(\\sqrt u)\n\\end{align}\n\n\nas desired.\n\n\nb.\n We recall from our solution to problem 3-6.e (it seems like so long ago now) that given a number n, a bound on the number of times that we need to take the squareroot of a number before it falls below $2$ is $\\lg\\lg n$. So, if we just unroll out recurrence, we get that\n\n\n$$P(u) \\le \\Big(\\prod_{i = 1}^{\\lg\\lg u}(u^{1 / 2^i} + 1) \\Big) P(2) + \\sum_{i = 1}^{\\lg\\lg u} \\Theta(u^{1 / 2^i})(u^{1 / 2i} + 1).$$\n\n\nThe first product has a highest power of $u$ corresponding to always multiplying the first terms of each binomial. The power in this term is equal to $\\sum_{i = 1}^{\\lg\\lg u}$ which is a partial sum of a geometric series whose sum is $1$. This means that the first term is $o(u)$. The order of the ith term in the summation appearing in the formula is $u^{2 / 2^i}$. In particular, for $i = 1$ is it $O(u)$, and for any $i > 1$, we have that $2 / 2^i < 1$, so those terms will be $o(u)$. Putting it all together, the largest term appearing is $O(u)$, and so, $P(u)$ is $O(u)$.\n\n\nc.\n For this problem we just use the version written for normal vEB trees, with minor modifications. That is, since there are entries in cluster that may not exist, and summary may of not yet been initialized, just before we try to access either, we check to see if it's initialized. If it isn't, we do so then.\n\n\nd.\n As in the previous problem, we just wait until just before either of the two things that may of not been allocated try to get used then allocate them if need be.\n\n\ne.\n Since the initialization performed only take constant time, those modifications don't ruin the the desired runtime bound for the original algorithms already had. So, our responses to parts (c) and (d) are $O(\\lg\\lg n)$.\n\n\nf.\n As mentioned in the errata, this part should instead be changed to $O(n\\lg n)$ space. When we are adding an element, we may have to add an entry to a dynamic hash table, which means that a constant amount of extra space would be needed. If we are adding an element to that table, we also have to add an element to the RS-vEB tree in the summary, but the entry that we add in the cluster will be a constant size RS-vEB tree. We can charge the cost of that addition to the summary table to the making the minimum element entry that we added in the cluster table. Since we are always making at least one element be added as a new min entry somewhere, this amortization will mean that it is only a constant amount of time in order to store the new entry.\n\n\ng.\n It only takes a constant amount of time to create an empty RS-vEB tree. This is immediate since the only dependence on $u$ in $\\text{CREATE-NEW-RSvEB-TREE}(u)$ is on line 2 when $V.u$ is initialized, but this only takes a constant amount of time. Since nothing else in the procedure depends on $u$, it must take a constant amount of time.",
            "title": "20-1 Space requirements for van Emde Boas trees"
        },
        {
            "location": "/Chap20/Problems/20-2/",
            "text": "This problem investigates D. Willard's \"$y$-fast tries\" which, like van Emde Boas trees, perform each of the operations $\\text{MEMBER}$, $\\text{MINIMUM}$, $\\text{MAXIMUM}$, $\\text{PREDECESSOR}$, and $\\text{SUCCESSOR}$ on elements drawn from a universe with size $u$ in $O(\\lg\\lg u)$ worst-case time. The $\\text{INSERT}$ and $\\text{DELETE}$ operations take $O(\\lg\\lg u)$ amortized time. Like reduced-space van Emde Boas trees (see Problem 20-1), yfast tries use only $O(n)$ space to store $n$ elements. The design of $y$-fast tries relies on perfect hashing (see Section 11.5).\n\n\nAs a preliminary structure, suppose that we create a perfect hash table containing not only every element in the dynamic set, but every prefix of the binary representation of every element in the set. For example, if $u = 16$, so that $\\lg u = 4$, and $x = 13$ is in the set, then because the binary representation of $13$ is $1101$, the perfect hash table would contain the strings $1$, $11$, $110$, and $1101$. In addition to the hash table, we create a doubly linked list of the elements currently in the set, in increasing order.\n\n\na.\n How much space does this structure require?\n\n\nb.\n Show how to perform the $\\text{MINIMUM}$ and $\\text{MAXIMUM}$ operations in $O(1)$ time; the $\\text{MEMBER}$, $\\text{PREDECESSOR}$, and $\\text{SUCCESSOR}$ operations in $O(\\lg\\lg u)$ time; and the $\\text{INSERT}$ and $\\text{DELETE}$ operations in $O(\\lg u)$ time.\n\n\nTo reduce the space requirement to $O(n)$, we make the following changes to the data structure:\n\n\n\n\nWe cluster the $n$ elements into $n / \\lg u$ groups of size $\\lg u$. (Assume for now that $\\lg u$ divides $n$.) The first group consists of the $\\lg u$ smallest elements in the set, the second group consists of the next $\\lg u$ smallest elements, and so on.\n\n\nWe designate a \"representative\" value for each group. The representative of the $i$th group is at least as large as the largest element in the $i$th group, and it is smaller than every element of the $(i + 1)$st group. (The representative of the last group can be the maximum possible element $u - 1$.) Note that a representative might be a value not currently in the set.\n\n\nWe store the $\\lg u$ elements of each group in a balanced binary search tree, such as a red-black tree. Each representative points to the balanced binary search tree for its group, and each balanced binary search tree points to its group's representative.\n\n\n\n\nThe perfect hash table stores only the representatives, which are also stored in a doubly linked list in increasing order.\n\n\nWe call this structure a \n$y$-fast trie\n.\n\n\nc.\n Show that a $y$-fast trie requires only $O(n)$ space to store $n$ elements.\n\n\nd.\n Show how to perform the $\\text{MINIMUM}$ and $\\text{MAXIMUM}$ operations in $O(\\lg\\lg u)$ time with a $y$-fast trie.\n\n\ne.\n Show how to perform the $\\text{MEMBER}$ operation in $O(\\lg\\lg u)$ time.\n\n\nf.\n Show how to perform the $\\text{PREDECESSOR}$ and $\\text{SUCCESSOR}$ operations in $O(\\lg\\lg u)$ time.\n\n\ng.\n Explain why the $\\text{INSERT}$ and $\\text{DELETE}$ operations take $\\Omega(\\lg\\lg u)$ time.\n\n\nh.\n Show how to relax the requirement that each group in a $y$-fast trie has exactly $\\lg u$ elements to allow $\\text{INSERT}$ and $\\text{DELETE}$ to run in $O(\\lg\\lg u)$ amortized time without affecting the asymptotic running times of the other operations.\n\n\n\n\na.\n By 11.5, the perfect hash table uses $O(m)$ space to store m elements. In a universe of size $u$, each element contributes $\\lg u$ entries to the hash table, so the requirement is $O(n\\lg u)$. Since the linked list requires $O(n)$, the total space requirement is $O(n\\lg u)$.\n\n\nb.\n $\\text{MINIMUM}$ and $\\text{MAXIMUM}$ are easy. We just examine the first and last elements of the associated doubly linked list. $\\text{MEMBER}$ can actually be performed in $O(1)$, since we are simply checking membership in a perfect hash table. $\\text{PREDECESSOR}$ and $\\text{SUCCESSOR}$ are a bit more complicated. \n\n\nAssume that we have a binary tree in which we store all the elements and their prefixes. When we query the hash table for an element, we get a pointer to that element's location in the binary search tree, if the element is in the tree, and $\\text{NIL}$ otherwise. Moreover, assume that every leaf node comes with a pointer to its position in the doubly linked list. Let $x$ be the number whose successor we seek. Begin by performing a binary search of the prefixes in the hash table to find the longest hashed prefix $y$ which matches a prefix of $x$. This takes $O(\\lg\\lg u)$ since we can check if any prefix is in the hash table in $O(1)$. \n\n\nObserve that $y$ can have at most one child in the BST, because if it had both children then one of these would share a longer prefix with $x$. If the left child is missing, have the left child pointer point to the largest labeled leaf node in the BST which is less than $y$. If the right child is missing, use its pointer to point to the successor of $y$. If $y$ is a leaf node then $y = x$, so we simply follow the pointer to $x$ in the doubly linked list, in $O(1)$, and its successor is the next element on the list. If $y$ is not a leaf node, we follow its predecessor or successor node, depending on which we need. This gives us $O(1)$ access to the proper element, so the total runtime is $O(\\lg\\lg u)$. $\\text{INSERT}$ and $\\text{DELETE}$ must take $O(\\lg u)$ since we need to insert one entry into the hash table for each of their bits and update the pointers.\n\n\nc.\n The doubly linked list has less than $n$ elements, while the binary search trees contains $n$ nodes, thus a $y$-fast trie requires $O(n)$ space.\n\n\nd.\n $\\text{MINIMUM}$: Find the minimum representative in the doubly linked list in $\\Theta(1)$, then find the minimum element in the binary search tree in $O(\\lg\\lg u)$.\n\n\ne.\n Find the smallest representative greater than $k$ with binary searching in $\\Theta(\\lg\\lg u)$, find the element in the binary search tree in $O(\\lg\\lg u)$.\n\n\nf.\n If we can find the largest representative greater than or equal to $x$, we can determine which binary tree contains the predecessor or successor of $x$. To do this, just call $\\text{PREDECESSOR}$ or $\\text{SUCCESSOR}$ on $x$ to locate the appropriate tree in $O(\\lg\\lg u)$. Since the tree has height $\\lg u$, we can find the predecessor or successor in $O(\\lg\\lg u)$.\n\n\ng.\n Same as \ne\n, we need to find the cluster in $\\Theta(\\lg\\lg u)$, then the operations in the binary search tree takes $O(\\lg\\lg u)$.\n\n\nh.\n We can relax the requirements and only impose the condition that each group has at least $\\frac{1}{2}\\lg u$ elements and at most $2\\lg u$ elements. \n\n\n\n\nIf a red-black tree is too big, we split it in half at the median. \n\n\nIf a red-black tree is too small, we merge it with a neighboring tree. \n\n\nIf this causes the merged tree to become too large, we split it at the median.\n\n\nIf a tree splits, we create a new representative. \n\n\nIf two trees merge, we delete the lost representative. \n\n\n\n\nAny split or merge takes $O(\\lg u)$ since we have to insert or delete an element in the data structure storing our representatives, which by part (b) takes $O(\\lg u)$. \n\n\nHowever, we only split a tree after at least $\\lg u$ insertions, since the size of one of the red-black trees needs to increase from $\\lg u$ to $2\\lg u$ and we only merge two trees after at least $(1 / 2)\\lg u$ deletions, because the size of the merging tree needs to have decreased from $\\lg u$ to $(1 / 2)\\lg u$. Thus, the amortized cost of the merges, splits, and updates to representatives is $O(1)$ per insertion or deletion, so the amortized cost is $O(\\lg\\lg u)$ as desired.",
            "title": "20-2 $y$-fast tries"
        },
        {
            "location": "/Chap21/21.1/",
            "text": "21.1-1\n\n\n\n\nSuppose that $\\text{CONNECTED-COMPONENTS}$ is run on the undirected graph $G = (V, E)$, where $V = \\{a, b, c, d, e, f, g, h, i, j, k\\}$ and the edges of $E$ are processed in the order $(d, i)$, $(f, k)$, $(g, i)$, $(b, g)$, $(a, h)$, $(i, j)$, $(d, k)$, $(b, j)$, $(d, f)$, $(g, j)$, $(a, e)$. List the vertices in each connected component after each iteration of lines 3\u20135.\n\\begin{array}{c|lllllllllll}\n\\text{Edge processed} & \\\\\n\\hline\ninitial & \\{a\\}       & \\{b\\}                   & \\{c\\} & \\{d\\}       & \\{e\\} & \\{f\\}    & \\{g\\} & \\{h\\} & \\{i\\} & \\{j\\} & \\{k\\} \\\\\n(d, i)  & \\{a\\}       & \\{b\\}                   & \\{c\\} & \\{d, i\\}    & \\{e\\} & \\{f\\}    & \\{g\\} & \\{h\\} &       & \\{j\\} & \\{k\\} \\\\\n(f, k)  & \\{a\\}       & \\{b\\}                   & \\{c\\} & \\{d, i\\}    & \\{e\\} & \\{f, k\\} & \\{g\\} & \\{h\\} &       & \\{j\\} &       \\\\\n(g, i)  & \\{a\\}       & \\{b\\}                   & \\{c\\} & \\{d, i, g\\} & \\{e\\} & \\{f, k\\} &       & \\{h\\} &       & \\{j\\} &       \\\\\n(b, g)  & \\{a\\}       & \\{b, d, i, g\\}          & \\{c\\} &             & \\{e\\} & \\{f, k\\} &       & \\{h\\} &       & \\{j\\} &       \\\\\n(a, h)  & \\{a, h\\}    & \\{b, d, i, g\\}          & \\{c\\} &             & \\{e\\} & \\{f, k\\} &       &       &       & \\{j\\} &       \\\\\n(i, j)  & \\{a, h\\}    & \\{b, d, i, g, j\\}       & \\{c\\} &             & \\{e\\} & \\{f, k\\} &       &       &       &       &       \\\\\n(d, k)  & \\{a, h\\}    & \\{b, g, i, g, j, f, k\\} & \\{c\\} &             & \\{e\\} &          &       &       &       &       &       \\\\\n(b, j)  & \\{a, h\\}    & \\{b, g, i, g, j, f, k\\} & \\{c\\} &             & \\{e\\} &          &       &       &       &       &       \\\\\n(d, f)  & \\{a, h\\}    & \\{b, g, i, g, j, f, k\\} & \\{c\\} &             & \\{e\\} &          &       &       &       &       &       \\\\\n(g, j)  & \\{a, h\\}    & \\{b, g, i, g, j, f, k\\} & \\{c\\} &             & \\{e\\} &          &       &       &       &       &       \\\\\n(a, e)  & \\{a, e, h\\} & \\{b, g, i, g, j, f, k\\} & \\{c\\} &             & \\{e\\} &          &       &       &       &       &     \n\n\\end{array}\n\n\n\n\nSo, the connected components that we are left with are  $\\{a, h, e\\}$,  $\\{b, d, i, g, j, f, k\\}$, and $\\{c\\}$.\n\n\n21.1-2\n\n\n\n\nShow that after all edges are processed by $\\text{CONNECTED-COMPONENTS}$, two vertices are in the same connected component if and only if they are in the same set.\n\n\n\n\nFirst suppose that two vertices are in the same connected component. Then there exists a path of edges connecting them. If two vertices are connected by a single edge, then they are put into the same set when that edge is processed. At some point during the algorithm every edge of the path will be processed, so all vertices on the path will be in the same set, including the endpoints. Now suppose two vertices $u$ and $v$ wind up in the same set. Since every vertex starts off in its own set, some sequence of edges in $G$ must have resulted in eventually combining the sets containing $u$ and $v$. From among these, there must be a path of edges from $u$ to $v$, implying that $u$ and $v$ are in the same connected component.\n\n\n21.1-3\n\n\n\n\nDuring the execution of $\\text{CONNECTED-COMPONENTS}$ on an undirected graph $G = (V, E)$ with $k$ connected components, how many times is $\\text{FIND-SET}$ called? How many times is $\\text{UNION}$ called? Express your answers in terms of $|V|$, $|E|$, and $k$.\n\n\n\n\nFind set is called twice on line 4, this is run once per edge in the graph, so, we have that find set is run $2|E|$ times. Since we start with $|V|$ sets, at the end only have $k$, and each call to $\\text{UNION}$ reduces the number of sets by one, we have that we have to of made $|V| - k$ calls to $\\text{UNION}$.",
            "title": "21.1 Disjoint-set operations"
        },
        {
            "location": "/Chap21/21.1/#211-1",
            "text": "Suppose that $\\text{CONNECTED-COMPONENTS}$ is run on the undirected graph $G = (V, E)$, where $V = \\{a, b, c, d, e, f, g, h, i, j, k\\}$ and the edges of $E$ are processed in the order $(d, i)$, $(f, k)$, $(g, i)$, $(b, g)$, $(a, h)$, $(i, j)$, $(d, k)$, $(b, j)$, $(d, f)$, $(g, j)$, $(a, e)$. List the vertices in each connected component after each iteration of lines 3\u20135.\n\\begin{array}{c|lllllllllll}\n\\text{Edge processed} & \\\\\n\\hline\ninitial & \\{a\\}       & \\{b\\}                   & \\{c\\} & \\{d\\}       & \\{e\\} & \\{f\\}    & \\{g\\} & \\{h\\} & \\{i\\} & \\{j\\} & \\{k\\} \\\\\n(d, i)  & \\{a\\}       & \\{b\\}                   & \\{c\\} & \\{d, i\\}    & \\{e\\} & \\{f\\}    & \\{g\\} & \\{h\\} &       & \\{j\\} & \\{k\\} \\\\\n(f, k)  & \\{a\\}       & \\{b\\}                   & \\{c\\} & \\{d, i\\}    & \\{e\\} & \\{f, k\\} & \\{g\\} & \\{h\\} &       & \\{j\\} &       \\\\\n(g, i)  & \\{a\\}       & \\{b\\}                   & \\{c\\} & \\{d, i, g\\} & \\{e\\} & \\{f, k\\} &       & \\{h\\} &       & \\{j\\} &       \\\\\n(b, g)  & \\{a\\}       & \\{b, d, i, g\\}          & \\{c\\} &             & \\{e\\} & \\{f, k\\} &       & \\{h\\} &       & \\{j\\} &       \\\\\n(a, h)  & \\{a, h\\}    & \\{b, d, i, g\\}          & \\{c\\} &             & \\{e\\} & \\{f, k\\} &       &       &       & \\{j\\} &       \\\\\n(i, j)  & \\{a, h\\}    & \\{b, d, i, g, j\\}       & \\{c\\} &             & \\{e\\} & \\{f, k\\} &       &       &       &       &       \\\\\n(d, k)  & \\{a, h\\}    & \\{b, g, i, g, j, f, k\\} & \\{c\\} &             & \\{e\\} &          &       &       &       &       &       \\\\\n(b, j)  & \\{a, h\\}    & \\{b, g, i, g, j, f, k\\} & \\{c\\} &             & \\{e\\} &          &       &       &       &       &       \\\\\n(d, f)  & \\{a, h\\}    & \\{b, g, i, g, j, f, k\\} & \\{c\\} &             & \\{e\\} &          &       &       &       &       &       \\\\\n(g, j)  & \\{a, h\\}    & \\{b, g, i, g, j, f, k\\} & \\{c\\} &             & \\{e\\} &          &       &       &       &       &       \\\\\n(a, e)  & \\{a, e, h\\} & \\{b, g, i, g, j, f, k\\} & \\{c\\} &             & \\{e\\} &          &       &       &       &       &      \n\\end{array}   So, the connected components that we are left with are  $\\{a, h, e\\}$,  $\\{b, d, i, g, j, f, k\\}$, and $\\{c\\}$.",
            "title": "21.1-1"
        },
        {
            "location": "/Chap21/21.1/#211-2",
            "text": "Show that after all edges are processed by $\\text{CONNECTED-COMPONENTS}$, two vertices are in the same connected component if and only if they are in the same set.   First suppose that two vertices are in the same connected component. Then there exists a path of edges connecting them. If two vertices are connected by a single edge, then they are put into the same set when that edge is processed. At some point during the algorithm every edge of the path will be processed, so all vertices on the path will be in the same set, including the endpoints. Now suppose two vertices $u$ and $v$ wind up in the same set. Since every vertex starts off in its own set, some sequence of edges in $G$ must have resulted in eventually combining the sets containing $u$ and $v$. From among these, there must be a path of edges from $u$ to $v$, implying that $u$ and $v$ are in the same connected component.",
            "title": "21.1-2"
        },
        {
            "location": "/Chap21/21.1/#211-3",
            "text": "During the execution of $\\text{CONNECTED-COMPONENTS}$ on an undirected graph $G = (V, E)$ with $k$ connected components, how many times is $\\text{FIND-SET}$ called? How many times is $\\text{UNION}$ called? Express your answers in terms of $|V|$, $|E|$, and $k$.   Find set is called twice on line 4, this is run once per edge in the graph, so, we have that find set is run $2|E|$ times. Since we start with $|V|$ sets, at the end only have $k$, and each call to $\\text{UNION}$ reduces the number of sets by one, we have that we have to of made $|V| - k$ calls to $\\text{UNION}$.",
            "title": "21.1-3"
        },
        {
            "location": "/Chap21/21.2/",
            "text": "21.2-1\n\n\n\n\nWrite pseudocode for $\\text{MAKE-SET}$, $\\text{FIND-SET}$, and $\\text{UNION}$ using the linked-list representation and the weighted-union heuristic. Make sure to specify the attributes that you assume for set objects and list objects.\n\n\n\n\nThe three algorithms follow the english description and are provided here. There are alternate versions using the weighted union heuristic, suffixed with $\\text{WU}$.\n\n\nMAKE\n-\nSET\n(\nx\n)\n\n    \nlet\n \no\n \nbe\n \nan\n \nobject\n \nwith\n \nthree\n \nfields\n,\n \nnext\n,\n \nvalue\n,\n \nand\n \nset\n\n    \nlet\n \nL\n \nbe\n \na\n \nlinked\n \nlist\n \nobject\n \nwith\n \nhead\n \n=\n \ntail\n \n=\n \no\n\n    \no\n.\nnext\n \n=\n \nNIL\n\n    \no\n.\nset\n \n=\n \nL\n\n    \no\n.\nvalue\n \n=\n \nx\n\n    \nreturn\n \nL\n\n\n\n\n\nFIND\n-\nSET\n(\nx\n)\n\n    \nreturn\n \no\n.\nset\n.\nhead\n.\nvalue\n\n\n\n\n\nUNION\n(\nx\n,\n \ny\n)\n\n    \nL1\n \n=\n \nx\n.\nset\n\n    \nL2\n \n=\n \ny\n.\nset\n\n    \nL1\n.\ntail\n.\nnext\n \n=\n \nL2\n.\nhead\n\n    \nz\n \n=\n \nL2\n.\nhead\n\n    \nwhile\n \nz\n.\nnext\n \n!=\n \nNIL\n\n        \nz\n.\nset\n \n=\n \nL1\n\n    \nL1\n.\ntail\n \n=\n \nL2\n.\ntail\n\n    \nreturn\n \nL1\n\n\n\n\n\n21.2-2\n\n\n\n\nShow the data structure that results and the answers returned by the $\\text{FIND-SET}$ operations in the following program. Use the linked-list representation with the weighted-union heuristic.\n\n\n    \nfor\n \ni\n \n=\n \n1\n \nto\n \n16\n\n        \nMAKE\n-\nSET\n(\nx\n[\ni\n])\n\n    \nfor\n \ni\n \n=\n \n1\n \nto\n \n15\n \nby\n \n2\n\n        \nUNION\n(\nx\n[\ni\n],\n \nx\n[\ni\n \n+\n \n1\n])\n\n    \nfor\n \ni\n \n=\n \n1\n \nto\n \n13\n \nby\n \n4\n\n       \nUNION\n(\nx\n[\ni\n],\n \nx\n[\ni\n \n+\n \n2\n])\n\n    \nUNION\n(\nx\n[\n1\n],\n \nx\n[\n5\n])\n\n    \nUNION\n(\nx\n[\n11\n],\n \nx\n[\n13\n])\n\n    \nUNION\n(\nx\n[\n1\n],\n \nx\n[\n10\n])\n\n    \nFIND\n-\nSET\n(\nx\n[\n2\n])\n\n    \nFIND\n-\nSET\n(\nx\n[\n9\n])\n\n\n\n\n\nAssume that if the sets containing $x_i$ and $x_j$ have the same size, then the operation $\\text{UNION}(x_i, x_j)$ appends $x_j$'s list onto $x_i$'s list.\n\n\n\n\nOriginally we have $16$ sets, each containing $x_i$. In the following, we'll replace $x_i$ by $i$. After the \nfor\n loop in line 3 we have:\n\n\n$$\\{1,2\\}, \\{3, 4\\}, \\{5, 6\\}, \\{7, 8\\}, \\{9, 10\\}, \\{11, 12\\}, \\{13, 14\\}, \\{15, 16\\}.$$\n\n\nAfter the \nfor\n loop on line 5 we have\n\n\n$$\\{1, 2, 3, 4\\}, \\{5, 6, 7, 8\\}, \\{9, 10, 11, 12\\}, \\{13, 14, 15, 16\\}.$$\n\n\nLine 7 results in:\n\n\n$$\\{1, 2, 3, 4, 5, 6, 7, 8\\}, \\{9, 10, 11, 12\\}, \\{13, 14, 15, 16\\}.$$\n\n\nLine 8 results in:\n\n\n$$\\{1, 2, 3, 4, 5, 6, 7, 8\\}, \\{9, 10, 11, 12, 13, 14, 15, 16\\}.$$\n\n\nLine 9 results in:\n\n\n$$\\{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16\\}.$$\n\n\n$\\text{FIND-SET}(x_2)$ and $\\text{FIND-SET}(x_9)$ each return pointers to $x_1$.\n\n\nMAKE\n-\nSET\n-\nWU\n(\nx\n)\n\n    \nL\n \n=\n \nMAKE\n-\nSET\n(\nx\n)\n\n    \nL\n.\nsize\n \n=\n \n1\n\n    \nreturn\n \nL\n\n\n\n\n\nUNION\n-\nWU\n(\nx\n,\n \ny\n)\n\n    \nL1\n \n=\n \nx\n.\nset\n\n    \nL2\n \n=\n \ny\n.\nset\n\n    \nif\n \nL1\n.\nsize\n \n\u2265\n \nL2\n.\nsize\n\n        \nL\n \n=\n \nUNION\n(\nx\n,\n \ny\n)\n\n    \nelse\n \nL\n \n=\n \nUNION\n(\ny\n,\n \nx\n)\n\n    \nL\n.\nsize\n \n=\n \nL1\n.\nsize\n \n+\n \nL2\n.\nsize\n\n    \nreturn\n \nL\n\n\n\n\n\n21.2-3\n\n\n\n\nAdapt the aggregate proof of Theorem 21.1 to obtain amortized time bounds of $O(1)$ for $\\text{MAKE-SET}$ and $\\text{FIND-SET}$ and $O(\\lg n)$ for $\\text{UNION}$ using the linked-list representation and the weighted-union heuristic.\n\n\n\n\nWe want to show that we can assign $O(1)$ charges to $\\text{MAKE-SET}$ and $\\text{FIND-SET}$ and an $O(\\lg n)$ charge to $\\text{UNION}$ such that the charges for a sequence of these operations are enough to cover the cost of the sequence\u2014$O(m + n\\lg n)$, according to the theorem. When talking about the charge for each kind of operation, it is helpful to also be able to talk about the number of each kind of operation.\n\n\nConsider the usual sequence of $m$ $\\text{MAKE-SET}$, $\\text{UNION}$, and $\\text{FIND-SET}$ operations, $n$ of which are $\\text{MAKE-SET}$ operations, and let $l < n$ be the number of $\\text{UNION}$ operations. (Recall the discussion in Section 21.1 about there being at most $n - 1$ $\\text{UNION}$ operations.) Then there are $n$ $\\text{MAKE-SET}$ operations, $l$ $\\text{UNION}$ operations, and $m - n - l$ $\\text{FIND-SET}$ operations.\n\n\nThe theorem didn't separately name the number $l$ of $\\text{UNION}$s; rather, it bounded the number by $n$. If you go through the proof of the theorem with $l$ $\\text{UNION}$s, you get the time bound $O(m - l + l\\lg l) = O(m + l\\lg l)$ for the sequence of operations. That is, the actual time taken by the sequence of operations is at most $c(m + l\\lg l)$, for some constant $c$.\n\n\nThus, we want to assign operation charges such that\n\n\n\\begin{array}{ll}\n  \\text{(MAKE-SET charge)} & \\cdot \\quad n \\\\\n+ \\text{(FIND-SET charge)} & \\cdot \\quad (m - n - l) \\\\\n+ \\text{(UNION charge)}    & \\cdot \\quad l \\\\\n\\hline\n\\ge c(m + l\\lg l),\n\\end{array}\n\n\nso that the amortized costs give an upper bound on the actual costs.\n\n\nThe following assignments work, where $c'$ is some constant $\\ge c$:\n\n\n\n\n$\\text{MAKE-SET}$: $c'$\n\n\n$\\text{FIND-SET}$: $c'$\n\n\n$\\text{UNION}$: $c'(\\lg n + 1)$\n\n\n\n\nSubstituting into the above sum, we get\n\n\n\\begin{align}\nc'n + c'(m - n - l) + c'(\\lg n + 1)l \n    & = c'm + c'l\\lg n \\\\\n    & = c'(m + l\\lg n) \\\\\n    & > c(m + l\\lg l).\n\\end{align}\n\n\n21.2-4\n\n\n\n\nGive a tight asymptotic bound on the running time of the sequence of operations in Figure 21.3 assuming the linked-list representation and the weighted-union heuristic.\n\n\n\n\nWe call $\\text{MAKE-SET}$ $n$ times, which contributes $\\Theta(n)$. In each union, the smaller set is of size $1$, so each of these takes $\\Theta(1)$ time. Since we union $n - 1$ times, the runtime is $\\Theta(n)$.\n\n\n21.2-5\n\n\n\n\nProfessor Gompers suspects that it might be possible to keep just one pointer in each set object, rather than two (head and tail), while keeping the number of pointers in each list element at two. Show that the professor's suspicion is well founded by describing how to represent each set by a linked list such that each operation has the same running time as the operations described in this section. Describe also how the operations work. Your scheme should allow for the weighted-union heuristic, with the same effect as described in this section. ($\\textit{Hint:}$ Use the tail of a linked list as its set's representative.)\n\n\n\n\nAs the hint suggests, make the representative of each set be the tail of its linked list. Except for the tail element, each element's representative pointer points to the tail. The tail's representative pointer points to the head. An element is the tail if its next pointer is $\\text{NIL}$. Now we can get to the tail in $O(1)$ time: if $x.next == \\text{NIL}$, then $tail = x$, else $tail = x.rep$. We can get to the head in $O(1)$ time as well: if $x.next == \\text{NIL}$, then $head = x.rep$, else $head = x.rep.rep$. The set object needs only to store a pointer to the tail, though a pointer to any list element would suffice.\n\n\n21.2-6\n\n\n\n\nSuggest a simple change to the $\\text{UNION}$ procedure for the linked-list representation that removes the need to keep the tail pointer to the last object in each list. Whether or not the weighted-union heuristic is used, your change should not change the asymptotic running time of the $\\text{UNION}$ procedure. ($\\textit{Hint:}$ Rather than appending one list to another, splice them together.)\n\n\n\n\nLet's call the two lists $A$ and $B$, and suppose that the representative of the new list will be the representative of $A$. Rather than appending $B$ to the end of $A$, instead splice $B$ into $A$ right after the first element of $A$. We have to traverse $B$ to update pointers to the set object anyway, so we can just make the last element of $B$ point to the second element of $A$.",
            "title": "21.2 Linked-list representation of disjoint sets"
        },
        {
            "location": "/Chap21/21.2/#212-1",
            "text": "Write pseudocode for $\\text{MAKE-SET}$, $\\text{FIND-SET}$, and $\\text{UNION}$ using the linked-list representation and the weighted-union heuristic. Make sure to specify the attributes that you assume for set objects and list objects.   The three algorithms follow the english description and are provided here. There are alternate versions using the weighted union heuristic, suffixed with $\\text{WU}$.  MAKE - SET ( x ) \n     let   o   be   an   object   with   three   fields ,   next ,   value ,   and   set \n     let   L   be   a   linked   list   object   with   head   =   tail   =   o \n     o . next   =   NIL \n     o . set   =   L \n     o . value   =   x \n     return   L   FIND - SET ( x ) \n     return   o . set . head . value   UNION ( x ,   y ) \n     L1   =   x . set \n     L2   =   y . set \n     L1 . tail . next   =   L2 . head \n     z   =   L2 . head \n     while   z . next   !=   NIL \n         z . set   =   L1 \n     L1 . tail   =   L2 . tail \n     return   L1",
            "title": "21.2-1"
        },
        {
            "location": "/Chap21/21.2/#212-2",
            "text": "Show the data structure that results and the answers returned by the $\\text{FIND-SET}$ operations in the following program. Use the linked-list representation with the weighted-union heuristic.       for   i   =   1   to   16 \n         MAKE - SET ( x [ i ]) \n     for   i   =   1   to   15   by   2 \n         UNION ( x [ i ],   x [ i   +   1 ]) \n     for   i   =   1   to   13   by   4 \n        UNION ( x [ i ],   x [ i   +   2 ]) \n     UNION ( x [ 1 ],   x [ 5 ]) \n     UNION ( x [ 11 ],   x [ 13 ]) \n     UNION ( x [ 1 ],   x [ 10 ]) \n     FIND - SET ( x [ 2 ]) \n     FIND - SET ( x [ 9 ])   Assume that if the sets containing $x_i$ and $x_j$ have the same size, then the operation $\\text{UNION}(x_i, x_j)$ appends $x_j$'s list onto $x_i$'s list.   Originally we have $16$ sets, each containing $x_i$. In the following, we'll replace $x_i$ by $i$. After the  for  loop in line 3 we have:  $$\\{1,2\\}, \\{3, 4\\}, \\{5, 6\\}, \\{7, 8\\}, \\{9, 10\\}, \\{11, 12\\}, \\{13, 14\\}, \\{15, 16\\}.$$  After the  for  loop on line 5 we have  $$\\{1, 2, 3, 4\\}, \\{5, 6, 7, 8\\}, \\{9, 10, 11, 12\\}, \\{13, 14, 15, 16\\}.$$  Line 7 results in:  $$\\{1, 2, 3, 4, 5, 6, 7, 8\\}, \\{9, 10, 11, 12\\}, \\{13, 14, 15, 16\\}.$$  Line 8 results in:  $$\\{1, 2, 3, 4, 5, 6, 7, 8\\}, \\{9, 10, 11, 12, 13, 14, 15, 16\\}.$$  Line 9 results in:  $$\\{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16\\}.$$  $\\text{FIND-SET}(x_2)$ and $\\text{FIND-SET}(x_9)$ each return pointers to $x_1$.  MAKE - SET - WU ( x ) \n     L   =   MAKE - SET ( x ) \n     L . size   =   1 \n     return   L   UNION - WU ( x ,   y ) \n     L1   =   x . set \n     L2   =   y . set \n     if   L1 . size   \u2265   L2 . size \n         L   =   UNION ( x ,   y ) \n     else   L   =   UNION ( y ,   x ) \n     L . size   =   L1 . size   +   L2 . size \n     return   L",
            "title": "21.2-2"
        },
        {
            "location": "/Chap21/21.2/#212-3",
            "text": "Adapt the aggregate proof of Theorem 21.1 to obtain amortized time bounds of $O(1)$ for $\\text{MAKE-SET}$ and $\\text{FIND-SET}$ and $O(\\lg n)$ for $\\text{UNION}$ using the linked-list representation and the weighted-union heuristic.   We want to show that we can assign $O(1)$ charges to $\\text{MAKE-SET}$ and $\\text{FIND-SET}$ and an $O(\\lg n)$ charge to $\\text{UNION}$ such that the charges for a sequence of these operations are enough to cover the cost of the sequence\u2014$O(m + n\\lg n)$, according to the theorem. When talking about the charge for each kind of operation, it is helpful to also be able to talk about the number of each kind of operation.  Consider the usual sequence of $m$ $\\text{MAKE-SET}$, $\\text{UNION}$, and $\\text{FIND-SET}$ operations, $n$ of which are $\\text{MAKE-SET}$ operations, and let $l < n$ be the number of $\\text{UNION}$ operations. (Recall the discussion in Section 21.1 about there being at most $n - 1$ $\\text{UNION}$ operations.) Then there are $n$ $\\text{MAKE-SET}$ operations, $l$ $\\text{UNION}$ operations, and $m - n - l$ $\\text{FIND-SET}$ operations.  The theorem didn't separately name the number $l$ of $\\text{UNION}$s; rather, it bounded the number by $n$. If you go through the proof of the theorem with $l$ $\\text{UNION}$s, you get the time bound $O(m - l + l\\lg l) = O(m + l\\lg l)$ for the sequence of operations. That is, the actual time taken by the sequence of operations is at most $c(m + l\\lg l)$, for some constant $c$.  Thus, we want to assign operation charges such that  \\begin{array}{ll}\n  \\text{(MAKE-SET charge)} & \\cdot \\quad n \\\\\n+ \\text{(FIND-SET charge)} & \\cdot \\quad (m - n - l) \\\\\n+ \\text{(UNION charge)}    & \\cdot \\quad l \\\\\n\\hline\n\\ge c(m + l\\lg l),\n\\end{array}  so that the amortized costs give an upper bound on the actual costs.  The following assignments work, where $c'$ is some constant $\\ge c$:   $\\text{MAKE-SET}$: $c'$  $\\text{FIND-SET}$: $c'$  $\\text{UNION}$: $c'(\\lg n + 1)$   Substituting into the above sum, we get  \\begin{align}\nc'n + c'(m - n - l) + c'(\\lg n + 1)l \n    & = c'm + c'l\\lg n \\\\\n    & = c'(m + l\\lg n) \\\\\n    & > c(m + l\\lg l).\n\\end{align}",
            "title": "21.2-3"
        },
        {
            "location": "/Chap21/21.2/#212-4",
            "text": "Give a tight asymptotic bound on the running time of the sequence of operations in Figure 21.3 assuming the linked-list representation and the weighted-union heuristic.   We call $\\text{MAKE-SET}$ $n$ times, which contributes $\\Theta(n)$. In each union, the smaller set is of size $1$, so each of these takes $\\Theta(1)$ time. Since we union $n - 1$ times, the runtime is $\\Theta(n)$.",
            "title": "21.2-4"
        },
        {
            "location": "/Chap21/21.2/#212-5",
            "text": "Professor Gompers suspects that it might be possible to keep just one pointer in each set object, rather than two (head and tail), while keeping the number of pointers in each list element at two. Show that the professor's suspicion is well founded by describing how to represent each set by a linked list such that each operation has the same running time as the operations described in this section. Describe also how the operations work. Your scheme should allow for the weighted-union heuristic, with the same effect as described in this section. ($\\textit{Hint:}$ Use the tail of a linked list as its set's representative.)   As the hint suggests, make the representative of each set be the tail of its linked list. Except for the tail element, each element's representative pointer points to the tail. The tail's representative pointer points to the head. An element is the tail if its next pointer is $\\text{NIL}$. Now we can get to the tail in $O(1)$ time: if $x.next == \\text{NIL}$, then $tail = x$, else $tail = x.rep$. We can get to the head in $O(1)$ time as well: if $x.next == \\text{NIL}$, then $head = x.rep$, else $head = x.rep.rep$. The set object needs only to store a pointer to the tail, though a pointer to any list element would suffice.",
            "title": "21.2-5"
        },
        {
            "location": "/Chap21/21.2/#212-6",
            "text": "Suggest a simple change to the $\\text{UNION}$ procedure for the linked-list representation that removes the need to keep the tail pointer to the last object in each list. Whether or not the weighted-union heuristic is used, your change should not change the asymptotic running time of the $\\text{UNION}$ procedure. ($\\textit{Hint:}$ Rather than appending one list to another, splice them together.)   Let's call the two lists $A$ and $B$, and suppose that the representative of the new list will be the representative of $A$. Rather than appending $B$ to the end of $A$, instead splice $B$ into $A$ right after the first element of $A$. We have to traverse $B$ to update pointers to the set object anyway, so we can just make the last element of $B$ point to the second element of $A$.",
            "title": "21.2-6"
        },
        {
            "location": "/Chap21/21.3/",
            "text": "21.3-1\n\n\n\n\nRedo Exercise 21.2-2 using a disjoint-set forest with union by rank and path compression.\n\n\n\n\n\n\n21.3-2\n\n\n\n\nWrite a nonrecursive version of $\\text{FIND-SET}$ with path compression.\n\n\n\n\nTo implement $\\text{FIND-SET}$ nonrecursively, let $x$ be the element we call the function on. Create a linked list $A$ which contains a pointer to $x$. Each time we most one element up the tree, insert a pointer to that element into $A$. Once the root $r$ has been found, use the linked list to find each node on the path from the root to $x$ and update its parent to $r$.\n\n\n21.3-3\n\n\n\n\nGive a sequence of $m$ $\\text{MAKE-SET}$, $\\text{UNION}$, and $\\text{FIND-SET}$ operations, $n$ of which are $\\text{MAKE-SET}$ operations, that takes $\\Omega(m\\lg n)$ time when we use union by rank only.\n\n\n\n\nYou need to find a sequence of $m$ operations on $n$ elements that takes \u007f$\\Omega(m\\lg n)$ time. Start with $n$ $\\text{MAKE-SET}$s to create singleton sets ${x_1}, {x_2}, \\ldots, {x_n}$. Next perform the $n - 1$ $\\text{UNION}$ operations shown below to create a single set whose tree has depth $\\lg n$.\n\\begin{array}{ll}\n\\hline\n\\text{UNION($x_1, x_2$)} & \\text{$n / 2$ of these} \\\\\n\\text{UNION($x_3, x_4$)} &       \\\\\n\\text{UNION($x_5, x_6$)} &       \\\\\n\\vdots                           \\\\\n\\text{UNION($x_{n - 1}, x_n$)} & \\\\\n\\hline\n\\text{UNION($x_2, x_4$)} & \\text{$n / 4$ of these} \\\\\n\\text{UNION($x_6, x_8$)} &       \\\\\n\\text{UNION($x_{10}, x_{12}$)} & \\\\\n\\vdots                           \\\\\n\\text{UNION($x_{n - 2}, x_n$)} & \\\\\n\\hline\n\\text{UNION($x_4, x_8$)} & \\text{$n / 8$ of these} \\\\\n\\text{UNION($x_{12}, x_{16}$)} & \\\\\n\\text{UNION($x_{20}, x_{24}$)} & \\\\\n\\vdots                           \\\\\n\\text{UNION($x_{n - 4}, x_n$)} & \\\\\n\\hline\n\\vdots                           \\\\\n\\hline\n\\text{UNION($x_{n / 2}, x_n$)} & \\text{$1$ of these} \\\\\n\\hline\n\\end{array}\n\n\nFinally, perform $m - 2n + 1$ $\\text{FIND-SET}$ operations on the deepest element in the tree. Each of these $\\text{FIND-SET}$ operations takes \u007f$\\Omega(\\lg n)$ time. Letting $m \\ge 3n$, we have more than $m / 3$ $\\text{FIND-SET}$ operations, so that the total cost is \u007f$\\Omega(m\\lg n)$.\n\n\n21.3-4\n\n\n\n\nSuppose that we wish to add the operation $\\text{PRINT-SET}(x)$, which is given a node $x$ and prints all the members of $x$'s set, in any order. Show how we can add just a single attribute to each node in a disjoint-set forest so that $\\text{PRINT-SET}(x)$ takes time linear in the number of members of $x$'s set and the asymptotic running times of the other operations are unchanged. Assume that we can print each member of the set in $O(1)$ time.\n\n\n\n\nMaintain a circular, singly linked list of the nodes of each set. To print, just follow the list until you get back to node $x$, printing each member of the list. The only other operations that change are $\\text{FIND-SET}$, which sets $x.next = x$, and $\\text{LINK}$, which exchanges the pointers $x.next$ and $y.next$.\n\n\n21.3-5 $\\star$\n\n\n\n\nShow that any sequence of $m$ $\\text{MAKE-SET}$, $\\text{FIND-SET}$, and $\\text{LINK}$ operations, where all the $\\text{LINK}$ operations appear before any of the $\\text{FIND-SET}$ operations, takes only $O(m)$ time if we use both path compression and union by rank. What happens in the same situation if we use only the path-compression heuristic?\n\n\n\n\nWith the path-compression heuristic, the sequence of $m$ $\\text{MAKE-SET}$, $\\text{FIND-SET}$, and $\\text{LINK}$ operations, where all the $\\text{LINK}$ operations take place before any of the $\\text{FIND-SET}$ operations, runs in $O(m)$ time. The key observation is that once a node $x$ appears on a find path, $x$ will be either a root or a child of a root at all times thereafter.\n\n\nWe use the accounting method to obtain the $O(m)$ time bound. We charge a $\\text{MAKE-SET}$ operation two dollars. One dollar pays for the $\\text{MAKE-SET}$, and one dollar remains on the node $x$ that is created. The latter pays for the first time that $x$ appears on a find path and is turned into a child of a root.\n\n\nWe charge one dollar for a $\\text{LINK}$ operation. This dollar pays for the actual linking of one node to another.\n\n\nWe charge one dollar for a $\\text{FIND-SET}$. This dollar pays for visiting the root and its child, and for the path compression of these two nodes, during the $\\text{FIND-SET}$. All other nodes on the find path use their stored dollar to pay for their visitation and path compression. As mentioned, after the $\\text{FIND-SET}$, all nodes on the find path become children of a root (except for the root itself), and so whenever they are visited during a subsequent $\\text{FIND-SET}$, the $\\text{FIND-SET}$ operation itself will pay for them.\n\n\nSince we charge each operation either one or two dollars, a sequence of $m$ operations is charged at most $2m$ dollars, and so the total time is $O(m)$.\n\n\nObserve that nothing in the above argument requires union by rank. Therefore, we get an $O(m)$ time bound regardless of whether we use union by rank.",
            "title": "21.3 Disjoint-set forests"
        },
        {
            "location": "/Chap21/21.3/#213-1",
            "text": "Redo Exercise 21.2-2 using a disjoint-set forest with union by rank and path compression.",
            "title": "21.3-1"
        },
        {
            "location": "/Chap21/21.3/#213-2",
            "text": "Write a nonrecursive version of $\\text{FIND-SET}$ with path compression.   To implement $\\text{FIND-SET}$ nonrecursively, let $x$ be the element we call the function on. Create a linked list $A$ which contains a pointer to $x$. Each time we most one element up the tree, insert a pointer to that element into $A$. Once the root $r$ has been found, use the linked list to find each node on the path from the root to $x$ and update its parent to $r$.",
            "title": "21.3-2"
        },
        {
            "location": "/Chap21/21.3/#213-3",
            "text": "Give a sequence of $m$ $\\text{MAKE-SET}$, $\\text{UNION}$, and $\\text{FIND-SET}$ operations, $n$ of which are $\\text{MAKE-SET}$ operations, that takes $\\Omega(m\\lg n)$ time when we use union by rank only.   You need to find a sequence of $m$ operations on $n$ elements that takes \u007f$\\Omega(m\\lg n)$ time. Start with $n$ $\\text{MAKE-SET}$s to create singleton sets ${x_1}, {x_2}, \\ldots, {x_n}$. Next perform the $n - 1$ $\\text{UNION}$ operations shown below to create a single set whose tree has depth $\\lg n$.\n\\begin{array}{ll}\n\\hline\n\\text{UNION($x_1, x_2$)} & \\text{$n / 2$ of these} \\\\\n\\text{UNION($x_3, x_4$)} &       \\\\\n\\text{UNION($x_5, x_6$)} &       \\\\\n\\vdots                           \\\\\n\\text{UNION($x_{n - 1}, x_n$)} & \\\\\n\\hline\n\\text{UNION($x_2, x_4$)} & \\text{$n / 4$ of these} \\\\\n\\text{UNION($x_6, x_8$)} &       \\\\\n\\text{UNION($x_{10}, x_{12}$)} & \\\\\n\\vdots                           \\\\\n\\text{UNION($x_{n - 2}, x_n$)} & \\\\\n\\hline\n\\text{UNION($x_4, x_8$)} & \\text{$n / 8$ of these} \\\\\n\\text{UNION($x_{12}, x_{16}$)} & \\\\\n\\text{UNION($x_{20}, x_{24}$)} & \\\\\n\\vdots                           \\\\\n\\text{UNION($x_{n - 4}, x_n$)} & \\\\\n\\hline\n\\vdots                           \\\\\n\\hline\n\\text{UNION($x_{n / 2}, x_n$)} & \\text{$1$ of these} \\\\\n\\hline\n\\end{array}  Finally, perform $m - 2n + 1$ $\\text{FIND-SET}$ operations on the deepest element in the tree. Each of these $\\text{FIND-SET}$ operations takes \u007f$\\Omega(\\lg n)$ time. Letting $m \\ge 3n$, we have more than $m / 3$ $\\text{FIND-SET}$ operations, so that the total cost is \u007f$\\Omega(m\\lg n)$.",
            "title": "21.3-3"
        },
        {
            "location": "/Chap21/21.3/#213-4",
            "text": "Suppose that we wish to add the operation $\\text{PRINT-SET}(x)$, which is given a node $x$ and prints all the members of $x$'s set, in any order. Show how we can add just a single attribute to each node in a disjoint-set forest so that $\\text{PRINT-SET}(x)$ takes time linear in the number of members of $x$'s set and the asymptotic running times of the other operations are unchanged. Assume that we can print each member of the set in $O(1)$ time.   Maintain a circular, singly linked list of the nodes of each set. To print, just follow the list until you get back to node $x$, printing each member of the list. The only other operations that change are $\\text{FIND-SET}$, which sets $x.next = x$, and $\\text{LINK}$, which exchanges the pointers $x.next$ and $y.next$.",
            "title": "21.3-4"
        },
        {
            "location": "/Chap21/21.3/#213-5-star",
            "text": "Show that any sequence of $m$ $\\text{MAKE-SET}$, $\\text{FIND-SET}$, and $\\text{LINK}$ operations, where all the $\\text{LINK}$ operations appear before any of the $\\text{FIND-SET}$ operations, takes only $O(m)$ time if we use both path compression and union by rank. What happens in the same situation if we use only the path-compression heuristic?   With the path-compression heuristic, the sequence of $m$ $\\text{MAKE-SET}$, $\\text{FIND-SET}$, and $\\text{LINK}$ operations, where all the $\\text{LINK}$ operations take place before any of the $\\text{FIND-SET}$ operations, runs in $O(m)$ time. The key observation is that once a node $x$ appears on a find path, $x$ will be either a root or a child of a root at all times thereafter.  We use the accounting method to obtain the $O(m)$ time bound. We charge a $\\text{MAKE-SET}$ operation two dollars. One dollar pays for the $\\text{MAKE-SET}$, and one dollar remains on the node $x$ that is created. The latter pays for the first time that $x$ appears on a find path and is turned into a child of a root.  We charge one dollar for a $\\text{LINK}$ operation. This dollar pays for the actual linking of one node to another.  We charge one dollar for a $\\text{FIND-SET}$. This dollar pays for visiting the root and its child, and for the path compression of these two nodes, during the $\\text{FIND-SET}$. All other nodes on the find path use their stored dollar to pay for their visitation and path compression. As mentioned, after the $\\text{FIND-SET}$, all nodes on the find path become children of a root (except for the root itself), and so whenever they are visited during a subsequent $\\text{FIND-SET}$, the $\\text{FIND-SET}$ operation itself will pay for them.  Since we charge each operation either one or two dollars, a sequence of $m$ operations is charged at most $2m$ dollars, and so the total time is $O(m)$.  Observe that nothing in the above argument requires union by rank. Therefore, we get an $O(m)$ time bound regardless of whether we use union by rank.",
            "title": "21.3-5 $\\star$"
        },
        {
            "location": "/Chap21/21.4/",
            "text": "21.4-1\n\n\n\n\nProve Lemma 21.4.\n\n\n\n\nThe lemma states:\n\n\n\n\nFor all nodes $x$, we have $x.rank \\le x.p.rank$, with strict inequality if $x \\ne x.p$. The value of $x.rank$ is initially $0$ and increases through time until $x \\ne x.p$; from then on, $x.rank$ does not change. The value of $x.p.rank$ monotonically increases over time.\n\n\n\n\nThe initial value of $x.rank$ is $0$, as it is initialized in line 2 of the $\\text{MAKE-SET}(x)$ procedure. When we run $\\text{LINK}(x, y)$, whichever one has the larger rank is placed as the parent of the other, and if there is a tie, the parent's rank is incremented. This means that after any $\\text{LINK}(y, x)$, the two nodes being linked satisfy this strict inequality of ranks.\n\n\nAlso, if we have that $x \\ne x.p$, then, we have that $x$ is not its own set representative, so, any linking together of sets that would occur would not involve $x$, but that's the only way for ranks to increase, so, we have that $x.rank$ must remain constant after that point.\n\n\n21.4-2\n\n\n\n\nProve that every node has rank at most $\\lfloor \\lg n \\rfloor$.\n\n\n\n\nWe'll prove the claim by strong induction on the number of nodes. If $n = 1$, then that node has rank equal to $0 = \\lfloor \\lg 1 \\rfloor$. Now suppose that the claim holds for $1, 2, \\ldots, n$ nodes.\n\n\nGiven $n + 1$ nodes, suppose we perform a $\\text{UNION}$ operation on two disjoint sets with $a$ and $b$ nodes respectively, where $a, b \\le n$. Then the root of the first set has rank at most $\\lfloor \\lg a \\rfloor$ and the root of the second set has rank at most $\\lfloor \\lg b\\rfloor$.\n\n\nIf the ranks are unequal, then the $\\text{UNION}$ operation preserves rank and we are done, so suppose the ranks are equal. Then the rank of the union increases by $1$, and the resulting set has rank $\\lfloor\\lg a\\rfloor + 1 \\le\\lfloor\\lg(n + 1) / 2\\rfloor + 1 = \\lfloor\\lg(n + 1)\\rfloor$.\n\n\n21.4-3\n\n\n\n\nIn light of Exercise 21.4-2, how many bits are necessary to store $x.rank$ for each node $x$?\n\n\n\n\nSince their value is at most $\\lfloor \\lg n \\rfloor$, we can represent them using $\\Theta(\\lg(\\lg(n)))$ bits, and may need to use that many bits to represent a number that can take that many values.\n\n\n21.4-4\n\n\n\n\nUsing Exercise 21.4-2, give a simple proof that operations on a disjoint-set forest with union by rank but without path compression run in $O(m\\lg n)$ time.\n\n\n\n\nClearly, each $\\text{MAKE-SET}$ and $\\text{LINK}$ operation takes $O(1)$ time. Because the rank of a node is an upper bound on its height, each find path has length $O(\\lg n)$, which in turn implies that each $\\text{FIND-SET}$ takes $O(\\lg n)$ time. Thus, any sequence of $m$ $\\text{MAKE-SET}$, $\\text{LINK}$, and $\\text{FIND-SET}$ operations on $n$ elements takes $O(m\\lg n)$ time. It is easy to prove an analogue of Lemma 21.7 to show that if we convert a sequence of $m'$ $\\text{MAKE-SET}$, $\\text{UNION}$, and $\\text{FIND-SET}$ operations into a sequence of $m$ $\\text{MAKE-SET}$, $\\text{LINK}$, and $\\text{FIND-SET}$ operations that take $O(m\\lg n)$ time, then the sequence of $m'$ $\\text{MAKE-SET}$, $\\text{UNION}$, and $\\text{FIND-SET}$ operations takes $O(m'\\lg n)$ time.\n\n\n21.4-5\n\n\n\n\nProfessor Dante reasons that because node ranks increase strictly along a simple path to the root, node levels must monotonically increase along the path. In other words, if $x.rank > 0$ and $x.p$ is not a root, then $\\text{level}(x) \\le \\text{level}(x.p)$. Is the professor correct?\n\n\n\n\nProfessor Dante is mistaken. Take the following scenario. Let $n = 16$, and make $16$ separate singleton sets using $\\text{MAKE-SET}$. Then do $8$ $\\text{UNION}$ operations to link the sets into $8$ pairs, where each pair has a root with rank $0$ and a child with rank $1$. Now do $4$ $\\text{UNION}$s to link pairs of these trees, so that there are $4$ trees, each with a root of rank $2$, children of the root of ranks $1$ and $0$, and a node of rank $0$ that is the child of the rank-$1$ node. Now link pairs of these trees together, so that there are two resulting trees, each with a root of rank $3$ and each containing a path from a leaf to the root with ranks $0$, $1$, and $3$. Finally, link these two trees together, so that there is a path from a leaf to the root with ranks $0$, $1$, $3$, and $4$. Let $x$ and $y$ be the nodes on this path with ranks $1$ and $3$, respectively. Since $A_1(1) = 3$, $\\text{level}(x) = 1$, and since $A_0(3) = 4$, $\\text{level}(y) = 0$. Yet $y$ follows $x$ on the find path.\n\n\n21.4-6 $\\star$\n\n\n\n\nConsider the function $\\alpha'(n) = \\min \\{k: A_k(1) \\ge \\lg(n + 1)\\}$. Show that $\\alpha'(n) \\le 3$ for all practical values of $n$ and, using Exercise 21.4-2, show how to modify the potential-function argument to prove that we can perform a sequence of $m$ $\\text{MAKESET}$, $\\text{UNION}$, and $\\text{FIND-SET}$ operations, $n$ of which are $\\text{MAKE-SET}$ operations, on a disjoint-set forest with union by rank and path compression in worst-case time $O(m \\alpha'(n))$.\n\n\n\n\nFirst, $\\alpha'(2^{2047} - 1) = \\min\\{k: A_k(1) \\ge 2047\\} = 3$, and $2^{2047} - 1 \\gg 10^{80}$.\n\n\nSecond, we need that $0 \\le \\text{level}(x) \\le \\alpha'(n)$ for all nonroots $x$ with $x.rank \\ge 1$. With this definition of $\\alpha'(n)$, we have\n\n\n$$A_{\\alpha'(n)}(x.rank) \\ge A_{\\alpha'(n)}(1) \\ge \\lg(n + 1) > \\lg n \\ge x.p.rank.$$\n\n\nThe rest of the proof goes through with $\\alpha'(n)$ replacing $\\alpha(n)$.",
            "title": "21.4 Analysis of union by rank with path compression"
        },
        {
            "location": "/Chap21/21.4/#214-1",
            "text": "Prove Lemma 21.4.   The lemma states:   For all nodes $x$, we have $x.rank \\le x.p.rank$, with strict inequality if $x \\ne x.p$. The value of $x.rank$ is initially $0$ and increases through time until $x \\ne x.p$; from then on, $x.rank$ does not change. The value of $x.p.rank$ monotonically increases over time.   The initial value of $x.rank$ is $0$, as it is initialized in line 2 of the $\\text{MAKE-SET}(x)$ procedure. When we run $\\text{LINK}(x, y)$, whichever one has the larger rank is placed as the parent of the other, and if there is a tie, the parent's rank is incremented. This means that after any $\\text{LINK}(y, x)$, the two nodes being linked satisfy this strict inequality of ranks.  Also, if we have that $x \\ne x.p$, then, we have that $x$ is not its own set representative, so, any linking together of sets that would occur would not involve $x$, but that's the only way for ranks to increase, so, we have that $x.rank$ must remain constant after that point.",
            "title": "21.4-1"
        },
        {
            "location": "/Chap21/21.4/#214-2",
            "text": "Prove that every node has rank at most $\\lfloor \\lg n \\rfloor$.   We'll prove the claim by strong induction on the number of nodes. If $n = 1$, then that node has rank equal to $0 = \\lfloor \\lg 1 \\rfloor$. Now suppose that the claim holds for $1, 2, \\ldots, n$ nodes.  Given $n + 1$ nodes, suppose we perform a $\\text{UNION}$ operation on two disjoint sets with $a$ and $b$ nodes respectively, where $a, b \\le n$. Then the root of the first set has rank at most $\\lfloor \\lg a \\rfloor$ and the root of the second set has rank at most $\\lfloor \\lg b\\rfloor$.  If the ranks are unequal, then the $\\text{UNION}$ operation preserves rank and we are done, so suppose the ranks are equal. Then the rank of the union increases by $1$, and the resulting set has rank $\\lfloor\\lg a\\rfloor + 1 \\le\\lfloor\\lg(n + 1) / 2\\rfloor + 1 = \\lfloor\\lg(n + 1)\\rfloor$.",
            "title": "21.4-2"
        },
        {
            "location": "/Chap21/21.4/#214-3",
            "text": "In light of Exercise 21.4-2, how many bits are necessary to store $x.rank$ for each node $x$?   Since their value is at most $\\lfloor \\lg n \\rfloor$, we can represent them using $\\Theta(\\lg(\\lg(n)))$ bits, and may need to use that many bits to represent a number that can take that many values.",
            "title": "21.4-3"
        },
        {
            "location": "/Chap21/21.4/#214-4",
            "text": "Using Exercise 21.4-2, give a simple proof that operations on a disjoint-set forest with union by rank but without path compression run in $O(m\\lg n)$ time.   Clearly, each $\\text{MAKE-SET}$ and $\\text{LINK}$ operation takes $O(1)$ time. Because the rank of a node is an upper bound on its height, each find path has length $O(\\lg n)$, which in turn implies that each $\\text{FIND-SET}$ takes $O(\\lg n)$ time. Thus, any sequence of $m$ $\\text{MAKE-SET}$, $\\text{LINK}$, and $\\text{FIND-SET}$ operations on $n$ elements takes $O(m\\lg n)$ time. It is easy to prove an analogue of Lemma 21.7 to show that if we convert a sequence of $m'$ $\\text{MAKE-SET}$, $\\text{UNION}$, and $\\text{FIND-SET}$ operations into a sequence of $m$ $\\text{MAKE-SET}$, $\\text{LINK}$, and $\\text{FIND-SET}$ operations that take $O(m\\lg n)$ time, then the sequence of $m'$ $\\text{MAKE-SET}$, $\\text{UNION}$, and $\\text{FIND-SET}$ operations takes $O(m'\\lg n)$ time.",
            "title": "21.4-4"
        },
        {
            "location": "/Chap21/21.4/#214-5",
            "text": "Professor Dante reasons that because node ranks increase strictly along a simple path to the root, node levels must monotonically increase along the path. In other words, if $x.rank > 0$ and $x.p$ is not a root, then $\\text{level}(x) \\le \\text{level}(x.p)$. Is the professor correct?   Professor Dante is mistaken. Take the following scenario. Let $n = 16$, and make $16$ separate singleton sets using $\\text{MAKE-SET}$. Then do $8$ $\\text{UNION}$ operations to link the sets into $8$ pairs, where each pair has a root with rank $0$ and a child with rank $1$. Now do $4$ $\\text{UNION}$s to link pairs of these trees, so that there are $4$ trees, each with a root of rank $2$, children of the root of ranks $1$ and $0$, and a node of rank $0$ that is the child of the rank-$1$ node. Now link pairs of these trees together, so that there are two resulting trees, each with a root of rank $3$ and each containing a path from a leaf to the root with ranks $0$, $1$, and $3$. Finally, link these two trees together, so that there is a path from a leaf to the root with ranks $0$, $1$, $3$, and $4$. Let $x$ and $y$ be the nodes on this path with ranks $1$ and $3$, respectively. Since $A_1(1) = 3$, $\\text{level}(x) = 1$, and since $A_0(3) = 4$, $\\text{level}(y) = 0$. Yet $y$ follows $x$ on the find path.",
            "title": "21.4-5"
        },
        {
            "location": "/Chap21/21.4/#214-6-star",
            "text": "Consider the function $\\alpha'(n) = \\min \\{k: A_k(1) \\ge \\lg(n + 1)\\}$. Show that $\\alpha'(n) \\le 3$ for all practical values of $n$ and, using Exercise 21.4-2, show how to modify the potential-function argument to prove that we can perform a sequence of $m$ $\\text{MAKESET}$, $\\text{UNION}$, and $\\text{FIND-SET}$ operations, $n$ of which are $\\text{MAKE-SET}$ operations, on a disjoint-set forest with union by rank and path compression in worst-case time $O(m \\alpha'(n))$.   First, $\\alpha'(2^{2047} - 1) = \\min\\{k: A_k(1) \\ge 2047\\} = 3$, and $2^{2047} - 1 \\gg 10^{80}$.  Second, we need that $0 \\le \\text{level}(x) \\le \\alpha'(n)$ for all nonroots $x$ with $x.rank \\ge 1$. With this definition of $\\alpha'(n)$, we have  $$A_{\\alpha'(n)}(x.rank) \\ge A_{\\alpha'(n)}(1) \\ge \\lg(n + 1) > \\lg n \\ge x.p.rank.$$  The rest of the proof goes through with $\\alpha'(n)$ replacing $\\alpha(n)$.",
            "title": "21.4-6 $\\star$"
        },
        {
            "location": "/Chap21/Problems/21-1/",
            "text": "The \noff-line minimum problem\n asks us to maintain a dynamic set $T$ of elements from the domain ${1, 2, \\ldots, n}$ under the operations $\\text{INSERT}$ and $\\text{EXTRACT-MIN}$. We are given a sequence $S$ of $n$ $\\text{INSERT}$ and $m$ $\\text{EXTRACT-MIN}$ calls, where each key in ${1, 2, \\ldots, n}$ is inserted exactly once. We wish to determine which key is returned by each $\\text{EXTRACT-MIN}$ call. Specifically, we wish to fill in an array $extracted[1 \\ldots m]$, where for $i = 1, 2, \\ldots, m$, $extracted[i]$ is the key returned by the $i$th $\\text{EXTRACT-MIN}$ call. The problem is \"off-line\" in the sense that we are allowed to process the entire sequence $S$ before determining any of the returned keys.\n\n\na.\n In the following instance of the off-line minimum problem, each operation $\\text{INSERT}(i)$ is represented by the value of $i$ and each $\\text{EXTRACT-MIN}$ is represented by the letter $E$:\n\n\n$$4, 8, \\text E, 3, \\text E, 9, 2, 6, \\text E, \\text E, \\text E, 1, 7, \\text E, 5.$$\n\n\nFill in the correct values in the \nextracted\n array.\n\n\nTo develop an algorithm for this problem, we break the sequence $S$ into homogeneous subsequences. That is, we represent $S$ by\n\n\n$$\\text I_1, \\text E, \\text I_2, \\text E, \\text I_3, \\ldots, \\text I_m,\\text E, \\text I_{m + 1},$$\n\n\nwhere each $\\text E$ represents a single $\\text{EXTRACT-MIN}$ call and each $\\text{I}_j$ represents a (possibly empty) sequence of $\\text{INSERT}$ calls. For each subsequence $\\text{I}_j$ , we initially place the keys inserted by these operations into a set $K_j$, which is empty if $\\text{I}_j$ is empty. We then do the following:\n\n\nOFF\n-\nLINE\n-\nMINIMUM\n(\nm\n,\n \nn\n)\n\n    \nfor\n \ni\n \n=\n \n1\n \nto\n \nn\n\n        \ndetermine\n \nj\n \nsuch\n \nthat\n \ni\n \nin\n \nK\n[\nj\n]\n\n        \nif\n \nj\n \n!=\n \nm\n \n+\n \n1\n\n            \nextracted\n[\nj\n]\n \n=\n \ni\n\n            \nlet\n \nl\n \nbe\n \nthe\n \nsmallest\n \nvalue\n \ngreater\n \nthan\n \nj\n \nfor\n \nwhich\n \nset\n \nK\n[\nl\n]\n \nexists\n\n            \nK\n[\nl\n]\n \n=\n \nK\n[\nj\n]\n \n\u222a\n \nK\n[\nl\n],\n \ndestroying\n \nK\n[\nj\n]\n\n    \nreturn\n \nextracted\n\n\n\n\n\nb.\n Argue that the array extracted returned by $\\text{OFF-LINE-MINIMUM}$ is correct.\n\n\nc.\n Describe how to implement $\\text{OFF-LINE-MINIMUM}$ efficiently with a disjoint-set data structure. Give a tight bound on the worst-case running time of your implementation.\n\n\n\n\na.\n For the input sequence\n\n\n$$\\text{4, 8, E, 3, E, 9, 2, 6, E, E, E, 1, 7, E, 5},$$\n\n\nthe values in the $extracted$ array would be $[4, 3, 2, 6, 8, 1]$.\n\n\nb.\n As we run the for loop, we are picking off the smallest of the possible elements to be removed, knowing for sure that it will be removed by the next unused $\\text{EXTRACT-MIN}$ operation. Then, since that $\\text{EXTRACT-MIN}$ operation is used up, we can pretend that it no longer exists, and combine the set of things that were inserted by that segment with those inserted by the next, since we know that the $\\text{EXTRACT-MIN}$ operation that had separated the two is now used up. Since we proceed to figure out what the various extract operations do one at a time, by the time we are done, we have figured them all out.\n\n\nThe following table shows the situation after the $i$th iteration of the \nfor\n loop when we use $\\text{OFF-LINE-MINIMUM}(6, 9)$ on the same input. ($i = 0$ denotes the initial state). Here we use $\\phi$ to represent the destroyed arrays and initialize $extracted$ with $0$s for easy reading. (Note that when $i = 5$ and $i = 7$ the state doesn't change since both $5$ and $7$ $\\in K_7$ and $7 = m + 1$)\n\n\n\\begin{array}{c|cccccccc}\ni & K_1 & K_2 & K_3 & K_4 & K_5 & K_6 & K_7 & extracted \\\\\n\\hline\n0 & {4, 8} & {3} & {9, 2, 6} & {}                 & {}                 & {1, 7} & {5}                         & [0, 0, 0, 0, 0, 0] \\\\\n1 & {4, 8} & {3} & {9, 2, 6} & {}                 & {}                 & \\phi     & {1, 7, 5}                   & [0, 0, 0, 0, 0, 1] \\\\\n2 & {4, 8} & {3} & \\phi        & {9, 2, 6}          & {}                 & \\phi     & {1, 7, 5}                   & [0, 0, 2, 0, 0, 1] \\\\\n3 & {4, 8} & \\phi  & \\phi        & {3, 9, 2, 6}       & {}                 & \\phi     & {1, 7, 5}                   & [0, 3, 2, 0, 0, 1] \\\\\n4 & \\phi     & \\phi  & \\phi        & {4, 8, 3, 9, 2, 6} & {}                 & \\phi     & {1, 7, 5}                   & [4, 3, 2, 0, 0, 1] \\\\\n5 & \\phi     & \\phi  & \\phi        & {4, 8, 3, 9, 2, 6} & {}                 & \\phi     & {1, 7, 5}                   & [4, 3, 2, 0, 0, 1] \\\\\n6 & \\phi     & \\phi  & \\phi        & \\phi                 & {4, 8, 3, 9, 2, 6} & \\phi     & {1, 7, 5}                   & [4, 3, 2, 6, 0, 1] \\\\\n7 & \\phi     & \\phi  & \\phi        & \\phi                 & {4, 8, 3, 9, 2, 6} & \\phi     & {1, 7, 5}                   & [4, 3, 2, 6, 0, 1] \\\\\n8 & \\phi     & \\phi  & \\phi        & \\phi                 & \\phi                 & \\phi     & {4, 8, 3, 9, 2, 6, 1, 7, 5} & [4, 3, 2, 6, 8, 1]\n\\end{array}\n\n\nc.\n We let each of the sets be represented by a disjoint set structure. To union them (as on line 6) just call $\\text{UNION}$. Checking that they exist is just a matter of keeping track of a linked list of which ones exist(needed for line 5), initially containing all of them, but then, when deleting the set on line 6, we delete it from the linked list that we were maintaining. The only other interaction with the sets that we have to worry about is on line 2, which just amounts to a call of $\\text{FIND-SET}(j)$. Since line 2 takes amortized time $\\alpha(n)$ and we call it exactly $n$ times, then, since the rest of the for loop only takes constant time, the total runtime is $O(n\\alpha(n))$.",
            "title": "21-1 Off-line minimum"
        },
        {
            "location": "/Chap21/Problems/21-2/",
            "text": "In the \ndepth-determination problem\n, we maintain a forest $\\mathcal F = {T_i}$ of rooted trees under three operations:\n\n\n$\\text{MAKE-TREE}(v)$ creates a tree whose only node is $v$.\n\n\n$\\text{FIND-DEPTH}(v)$ returns the depth of node $v$ within its tree.\n\n\n$\\text{GRAFT}(r, v)$ makes node $r$, which is assumed to be the root of a tree, become the child of node $v$, which is assumed to be in a different tree than $r$ but may or may not itself be a root.\n\n\na.\n Suppose that we use a tree representation similar to a disjoint-set forest: $v.p$ is the parent of node $v$, except that $v.p = v$ if $v$ is a root. Suppose further that we implement $\\text{GRAFT}(r, v)$ by setting $r.p = v$ and $\\text{FIND-DEPTH}(v)$ by following the find path up to the root, returning a count of all nodes other than $v$ encountered. Show that the worst-case running time of a sequence of $m$ $\\text{MAKE-TREE}$, $\\text{FIND-DEPTH}$, and $\\text{GRAFT}$ operations is $\\Theta(m^2)$.\n\n\nBy using the union-by-rank and path-compression heuristics, we can reduce the worst-case running time. We use the disjoint-set forest $\\mathcal S = {S_i}$, where each set $S_i$ (which is itself a tree) corresponds to a tree $T_i$ in the forest $\\mathcal F$. The tree structure within a set $S_i$, however, does not necessarily correspond to that of $T_i$. In fact, the implementation of $S_i$ does not record the exact parent-child relationships but nevertheless allows us to determine any node's depth in $T_i$.\n\n\nThe key idea is to maintain in each node $v$ a ''pseudodistance'' $v.d$, which is defined so that the sum of the pseudodistances along the simple path from $v$ to the root of its set $S_i$ equals the depth of $v$ in $T_i$. That is, if the simple path from $v$ to its root in $S_i$ is $v_0, v_1, \\ldots, v_k$, where $v_0 = v$ and $v_k$ is $S_i$'s root, then the depth of $v$ in $T_i$ is $\\sum_{j = 0}^k v_j.d$.\n\n\nb.\n Give an implementation of $\\text{MAKE-TREE}$.\n\n\nc.\n Show how to modify $\\text{FIND-SET}$ to implement $\\text{FIND-DEPTH}$. Your implementation should perform path compression, and its running time should be linear in the length of the find path. Make sure that your implementation updates pseudodistances correctly.\n\n\nd.\n Show how to implement $\\text{GRAFT}(r, v)$, which combines the sets containing $r$ and $v$, by modifying the $\\text{UNION}$ and $\\text{LINK}$ procedures. Make sure that your implementation updates pseudodistances correctly. Note that the root of a set $S_i$ is not necessarily the root of the corresponding tree $T_i$.\n\n\ne.\n Give a tight bound on the worst-case running time of a sequence of $m$ $\\text{MAKE-TREE}$, $\\text{FIND-DEPTH}$, and $\\text{GRAFT}$ operations, $n$ of which are $\\text{MAKE-TREE}$ operations.\n\n\n\n\na.\n Denote the number of nodes by $n$, and let $n = (m + 1) / 3$, so that $m = 3n - 1$. First, perform the $n$ operations $\\text{MAKE-TREE}(v_1)$, $\\text{MAKE-TREE}(v_2)$, $\\ldots$, $\\text{MAKE-TREE}(v_n)$. Then perform the sequence of $n - 1$ $\\text{GRAFT}$ operations $\\text{GRAFT}(v_1, v_2)$, $\\text{GRAFT}(v_2, v_3)$, $\\ldots$, $\\text{GRAFT}(v_n - 1, v_n)$; this sequence produces a single disjoint-set tree that is a linear chain of $n$ nodes with $v_n$ at the root and $v_1$ as the only leaf. Then perform $\\text{FIND-DEPTH}(v_1)$ repeatedly, $n$ times. The total number of operations is $n + (n - 1) + n = 3n - 1 = m$.\n\n\nEach $\\text{MAKE-TREE}$ and $\\text{GRAFT}$ operation takes $O(1)$ time. Each $\\text{FIND-DEPTH}$ operation has to follow an $n$-node find path, and so each of the $n$ $\\text{FIND-DEPTH}$ operations takes $\\Theta(n)$ time. The total time is $n \\cdot \\Theta(n) + (2n - 1) \\cdot O(1) = \\Theta(n^2) = \\Theta(m^2)$.\n\n\nb.\n $\\text{MAKE-TREE}$ is like $\\text{MAKE-SET}$, except that it also sets the $d$ value to $0$:\n\n\nMAKE\n-\nTREE\n(\nv\n)\n\n    \nv\n.\np\n \n=\n \nv\n\n    \nv\n.\nrank\n \n=\n \n0\n\n    \nv\n.\nd\n \n=\n \n0\n\n\n\nIt is correct to set $v.d$ to $0$, because the depth of the node in the single-node disjoint-set tree is $0$, and the sum of the depths on the find path for $v$ consists only of $v.d$.\n\n\nc.\n $\\text{FIND-DEPTH}$ will call a procedure $\\text{FIND-ROOT}$:\n\n\nFIND\n-\nROOT\n(\nv\n)\n\n    \nif\n \nv\n.\np\n \n!=\n \nv\n.\np\n.\np\n\n        \ny\n \n=\n \nv\n.\np\n\n        \nv\n.\np\n \n=\n \nFIND\n-\nROOT\n(\ny\n)\n\n        \nv\n.\nd\n \n=\n \nv\n.\nd\n \n+\n \ny\n.\nd\n\n    \nreturn\n \nv\n.\np\n\n\n\n\n\nFIND\n-\nDEPTH\n(\nv\n)\n\n    \nFIND\n-\nROOT\n(\nv\n)\n    \n// no need to save the return value\n\n    \nif\n \nv\n \n==\n \nv\n.\np\n\n        \nreturn\n \nv\n.\nd\n\n    \nelse\n \nreturn\n \nv\n.\nd\n \n+\n \nv\n.\np\n.\nd\n\n\n\n\n\n$\\text{FIND-ROOT}$ performs path compression and updates pseudodistances along the find path from $v$. It is similar to $\\text{FIND-SET}$ on page 571, but with three changes. First, when $v$ is either the root or a child of a root (one of these conditions holds if and only if $v.p = v.p.p$) in the disjoint-set forest, we don't have to recurse; instead, we just return $v.p$. Second, when we do recurse, we save the pointer $v.p$ into a new variable $y$. Third, when we recurse, we update $v.d$ by adding into it the $d$ values of all nodes on the find path that are no longer proper ancestors of $v$ after path compression; these nodes are precisely the proper ancestors of $v$ other than the root. Thus, as long as $v$ does not start out the $\\text{FIND-ROOT}$ call as either the root or a child of the root, we add $y.d$ into $v.d$. Note that $y.d$ has been updated prior to updating $v.d$, if $y$ is also neither the root nor a child of the root.\n\n\n$\\text{FIND-DEPTH}$ first calls $\\text{FIND-ROOT}$ to perform path compression and update pseudodistances. Afterward, the find path from $v$ consists of either just $v$ (if $v$ is a root) or just $v$ and $v.p$ (if $v$ is not a root, in which case it is a child of the root after path compression). In the former case, the depth of $v$ is just $v.d$, and in the latter case, the depth is $v.d + v.p.d$.\n\n\nd.\n Our procedure for $\\text{GRAFT}$ is a combination of $\\text{UNION}$ and $\\text{LINK}$:\n\n\nGRAPT\n(\nr\n,\n \nv\n)\n\n    \nr\n'\n \n=\n \nFIND\n-\nROOT\n(\nr\n)\n\n    \nv\n'\n \n=\n \nFIND\n-\nROOT\n(\nv\n)\n\n    \nz\n \n=\n \nFIND\n-\nDEPTH\n(\nv\n)\n\n    \nif\n \nr\n'\n.\nrank\n \n>\n \nv\n'\n.\nrank\n\n        \nv\n'\n.\np\n \n=\n \nr\n'\n\n        \nr\n'\n.\nd\n \n=\n \nr\n'\n.\nd\n \n+\n \nz\n \n+\n \n1\n\n        \nv\n'\n.\nd\n \n=\n \nv\n'\n.\nd\n \n-\n \nr\n'\n.\nd\n\n    \nelse\n \nr\n'\n.\np\n \n=\n \nv\n'\n\n        \nr\n'\n.\nd\n \n=\n \nr\n'\n.\nd\n \n+\n \nz\n \n+\n \n1\n \n-\n \nv\n'\n.\nd\n\n        \nif\n \nr\n'\n.\nrank\n \n==\n \nv\n'\n.\nrank\n\n            \nv\n'\n.\nrank\n \n=\n \nv\n'\n.\nrank\n \n+\n \n1\n\n\n\n\n\nThis procedure works as follows. First, we call $\\text{FIND-ROOT}$ on $r$ and $v$ in order to find the roots $r'$ and $v'$, respectively, of their trees in the disjoint-set forest. As we saw in part (c), these $\\text{FIND-ROOT}$ calls also perform path compression and update pseudodistances on the find paths from $r$ and $v$. We then call $\\text{FIND-DEPTH}(v)$, saving the depth of $v$ in the variable $z$. (Since we have just compressed $v$'s find path, this call of $\\text{FIND-DEPTH}$ takes $\\text{O(1)}$ time.) Next, we emulate the action of $\\text{LINK}$, by making the root ($r'$ or $v'$) of smaller rank a child of the root of larger rank; in case of a tie, we make $r'$ a child of $v'$.\n\n\nIf $v'$ has the smaller rank, then all nodes in $r$'s tree will have their depths increased by the depth of $v$ plus $1$ (because $r$ is to become a child of $v$). Altering the psuedodistance of the root of a disjoint-set tree changes the computed depth of all nodes in that tree, and so adding $z + 1$ to $r'.d$ accomplishes this update for all nodes in $r$'s disjoint-set tree. Since $v'$ will become a child of $r'$ in the disjoint-set forest, we have just increased the computed depth of all nodes in the disjoint-set tree rooted at $v'$ by $r'.d$. These computed depths should not have changed, however. Thus, we subtract off $r'.d$ from $v'.d$, so that the sum $v'.d + r'.d$ after making $v'$ a child of $r'$ equals $v'.d$ before making $v'$ a child of $r'$.\n\n\nOn the other hand, if $r'$ has the smaller rank, or if the ranks are equal, then $r'$ becomes a child of $v'$ in the disjoint-set forest. In this case, $v'$ remains a root in the disjoint-set forest afterward, and we can leave $v'.d$ alone. We have to update $r'.d$, however, so that after making $r'$ a child of $v'$, the depth of each node in $r$'s disjoint-set tree is increased by $z + 1$. We add $z + 1$ to $r'.d$, but we also subtract out $v'.d$, since we have just made $r'$ a child of $v'$. Finally, if the ranks of $r'$ and $v'$ are equal, we increment the rank of $v'$, as is done in the $\\text{LINK}$ procedure.\n\n\ne.\n The asymptotic running times of $\\text{MAKE-TREE}$, $\\text{FIND-DEPTH}$, and $\\text{GRAFT}$ are equivalent to those of $\\text{MAKE-SET}$, $\\text{FIND-SET}$, and $\\text{UNION}$, respectively. Thus, a sequence of $m$ operations, $n$ of which are $\\text{MAKE-TREE}$ operations, takes $\\Theta(m\\alpha(n))$ time in the worst case.",
            "title": "21-2 Depth determination"
        },
        {
            "location": "/Chap21/Problems/21-3/",
            "text": "The least common ancestor of two nodes $u$ and $v$ in a rooted tree $T$ is the node $w$ that is an ancestor of both $u$ and $v$ and that has the greatest depth in $T$. In the \noff-line least-common-ancestors problem\n, we are given a rooted tree $T$ and an arbitrary set $P = {{u, v}}$ of unordered pairs of nodes in $T$, and we wish to determine the least common ancestor of each pair in $P$.\n\n\nTo solve the off-line least-common-ancestors problem, the following procedure performs a tree walk of $T$ with the initial call $\\text{LCA}(T.root)$. We assume that each node is colored $\\text{WHITE}$ prior to the walk.\n\n\nLCA\n(\nu\n)\n\n    \nMAKE\n-\nSET\n(\nu\n)\n\n    \nFIND\n-\nSET\n(\nu\n).\nancestor\n \n=\n \nu\n\n    \nfor\n \neach\n \nchild\n \nv\n \nof\n \nu\n \nin\n \nT\n\n        \nLCA\n(\nv\n)\n\n        \nUNION\n(\nu\n,\n \nv\n)\n\n        \nFIND\n-\nSET\n(\nu\n).\nancestor\n \n=\n \nu\n\n    \nu\n.\ncolor\n \n=\n \nBLACK\n\n    \nfor\n \neach\n \nnode\n \nv\n \nsuch\n \nthat\n \n{\nu\n,\n \nv\n}\n \nin\n \nP\n\n        \nif\n \nv\n.\ncolor\n \n==\n \nBLACK\n\n            \nprint\n \n\"The least common ancestor of\"\n \nu\n\n            \n\"and\"\n \nv\n \n\"is\"\n \nFIND\n-\nSET\n(\nv\n).\nancestor\n\n\n\n\n\na.\n Argue that line 10 executes exactly once for each pair ${u, v} \\in P$.\n\n\nb.\n Argue that at the time of the call $\\text{LCA}(u)$, the number of sets in the disjoint-set data structure equals the depth of $u$ in $T$.\n\n\nc.\n Prove that $\\text{LCA}$ correctly prints the least common ancestor of $u$ and $v$ for each pair ${u, v} \\in P$.\n\n\nd.\n Analyze the running time of $\\text{LCA}$, assuming that we use the implementation of the disjoint-set data structure in Section 21.3.\n\n\n\n\na.\n Suppose that we let $\\le_{LCA}$ to be an ordering on the vertices so that $u \\le_{LCA} v$ if we run line 7 of $\\text{LCA}(u)$ before line 7 of $\\text{LCA}(v)$. Then, when we are running line 7 of $\\text{LCA}(u)$, we immediately go on to the \nfor\n loop on line 8.\n\n\nSo, while we are doing this \nfor\n loop, we still haven't called line 7 of $\\text{LCA}(v)$. This means that $v.color$ is white, and so, the pair ${u, v}$ is not considered during the run of $\\text{LCA}(u)$. However, during the \nfor\n loop of $\\text{LCA}(v)$, since line 7 of $\\text{LCA}(u)$ has already run, $u.color = black$. This means that we will consider the pair ${u, v}$ during the running of $\\text{LCA}(v)$.\n\n\nIt is not obvious what the ordering $\\le_{LCA}$ is, as it will be implementation dependent. It depends on the order in which child vertices are iterated in the \nfor\n loop on line 3. That is, it doesn't just depend on the graph structure.\n\n\nb.\n We suppose that it is true prior to a given call of $\\text{LCA}$, and show that this property is preserved throughout a run of the procedure, increasing the number of disjoint sets by one by the end of the procedure. So, supposing that $u$ has depth $d$ and there are $d$ items in the disjoint set data structure before it runs, it increases to $d + 1$ disjoint sets on line 1. So, by the time we get to line 4, and call $\\text{LCA}$ of a child of $u$, there are $d + 1$ disjoint sets, this is exactly the depth of the child. After line 4, there are now $d + 2$ disjoint sets, so, line 5 brings it back down to $d + 1$ disjoint sets for the subsequent times through the loop. After the loop, there are no more changes to the number of disjoint sets, so, the algorithm terminates with $\\text{d + 1}$ disjoint sets, as desired. Since this holds for any arbitrary run of $\\text{LCA}$, it holds for all runs of $\\text{LCA}$.\n\n\nc.\n Suppose that the pair $u$ and $v$ have the least common ancestor $w$. Then, when running $\\text{LCA}(w)$, $u$ will be in the subtree rooted at one of $w$'s children, and $v$ will be in another. WLOG, suppose that the subtree containing $u$ runs first.\n\n\nSo, when we are done with running that subtree, all of their ancestor values will point to $w$ and their colors will be black, and their ancestor values will not change until $\\text{LCA}(w)$ returns. However, we run $\\text{LCA}(v)$ before $\\text{LCA}(w)$ returns, so in the \nfor\n loop on line 8 of $\\text{LCA}(v)$, we will be considering the pair ${u, v}$, since $u.color = black$. Since $u.ancestor$ is still $w$, that is what will be output, which is the correct answer for their $\\text{LCA}$.\n\n\nd.\n The time complexity of lines 1 and 2 are just constant. Then, for each child, we have a call to the same procedure, a $\\text{UNION}$ operation which only takes constant time, and a $\\text{FIND-SET}$ operation which can take at most amortized inverse Ackerman's time. Since we check each and every thing that is adjacent to $u$ for being black, we are only checking each pair in $P$ at most twice in lines 8-10, among all the runs of $\\text{LCA}$. This means that the total runtime is $O(|T|\\alpha(|T|) + |P|)$.",
            "title": "21-3 Tarjan's off-line least-common-ancestors algorithm"
        },
        {
            "location": "/Chap22/22.1/",
            "text": "22.1-1\n\n\n\n\nGiven an adjacency-list representation of a directed graph, how long does it take to compute the $out\\text-degree$ of every vertex? How long does it take to compute the $in\\text-degrees$?\n\n\n\n\nSince it seems as though the list for the neighbors of each vertex $v$ is just an undecorated list, to find the length of each would take time $O(out\\text-degree(v))$. So, the total cost will be\n\n\n$$\\sum_{v \\in V}O(out\\text-degree(v)) = O(|E| + |V|).$$\n\n\nNote that the $|V|$ showing up in the asymptotics is necessary, because it still takes a constant amount of time to know that a list is empty. This time could be reduced to $O(|V|)$ if for each list in the adjacency list representation, we just also stored its length.\n\n\nTo compute the in degree of each vertex, we will have to scan through all of the adjacency lists and keep counters for how many times each vertex has appeared. As in the previous case, the time to scan through all of the adjacency lists takes time $O(|E| + |V|)$.\n\n\n22.1-2\n\n\n\n\nGive an adjacency-list representation for a complete binary tree on 7 vertices. Give an equivalent adjacency-matrix representation. Assume that vertices are numbered from 1 to 7 as in a binary heap.\n\n\n\n\n\n\n\n\nAdjacency-list representation\n\n\n\\begin{align}\n1 &: 2 \\rightarrow 3 \\\\\n2 &: 1 \\rightarrow 4 \\rightarrow 5 \\\\\n3 &: 1 \\rightarrow 6 \\rightarrow 7 \\\\\n4 &: 2 \\\\\n5 &: 2 \\\\\n6 &: 3 \\\\\n7 &: 3.\n\\end{align}\n\n\n\n\n\n\nAdjacency-matrix representation\n\n\n$$\n\\begin{pmatrix}\n0 & 1 & 1 & 0 & 0 & 0 & 0 \\\\\n1 & 0 & 0 & 1 & 1 & 0 & 0 \\\\\n1 & 0 & 0 & 0 & 0 & 1 & 1 \\\\\n0 & 1 & 0 & 0 & 0 & 0 & 0 \\\\\n0 & 1 & 0 & 0 & 0 & 0 & 0 \\\\\n0 & 0 & 1 & 0 & 0 & 0 & 0 \\\\\n0 & 0 & 1 & 0 & 0 & 0 & 0 \\\\\n\\end{pmatrix}.\n$$\n\n\n\n\n\n\n22.1-3\n\n\n\n\nThe \ntranspose\n of a directed graph $G = (V, E)$ is the graph $G^\\text T = (V, E^\\text T)$, where $E^\\text T = {(v, u) \\in V \\times V: (u, v) \\in E}$. Thus, $G^\\text T$ is $G$ with all its edges reversed. Describe efficient algorithms for computing $G^\\text T$ from $G$, for both the adjacency-list and adjacency-matrix representations of $G$. Analyze the running times of your algorithms.\n\n\n\n\n\n\nAdjacency-list representation:\n  For the adjacency list representation, we will maintain an initially empty adjacency list representation of the transpose. Then, we scan through every list in the original graph. If we are in the list corresponding to vertex $v$ and see $u$ as an entry in the list, then we add an entry of $v$ to the list in the transpose graph corresponding to vertex $u$. Since this only requires a scan through all of the lists, it only takes time $O(|E| + |V|)$.\n\n\nAdjacency-matrix representation:\n to compute the graph transpose, we just take the matrix transpose. This means looking along every entry above the diagonal, and swapping it with the entry that occurs below the diagonal. This takes time $O(|V|^2)$.\n\n\n\n\n22.1-4\n\n\n\n\nGiven an adjacency-list representation of a multigraph $G = (V, E)$, describe an $O(V + E)$-time algorithm to compute the adjacency-list representation of the ''equivalent'' undirected graph $G' = (V, E')$, where $E'$ consists of the edges in $E$ with all multiple edges between two vertices replaced by a single edge and with all self-loops removed.\n\n\n\n\nCreate an array $A$ of size $|V|$. For a list in the adjacency list corresponding to vertex $v$, examine items on the list one by one. If any item is equal to $v$, remove it. If vertex $u$ appears on the list, examine $A[u]$. If it's not equal to $v$, set it equal to $v$. If it's equal to $v$, remove $u$ from the list. Since we have constant time lookup in the array, the total runtime is $O(V + E)$.\n\n\n22.1-5\n\n\n\n\nThe \nsquare\n of a directed graph $G = (V, E)$ is the graph $G^2 = (V, E^2)$ such that $(u, v) \\in E$ if and only $G$ contains a path with at most two edges between $u$ and $v$. Describe efficient algorithms for computing $G^2$ from $G$ for both the adjacency-list and adjacency-matrix representations of $G$. Analyze the running times of your algorithms.\n\n\n\n\n\n\nAdjacency-list representation:\n To compute $G^2$ from the adjacency-list representation $Adj$ of $G$, we perform the following for each $Adj[u]$:\n\n\n\n\n    \nfor\n \neach\n \nvertex\n \nv\n \nin\n \nAdj\n[\nu\n]\n\n        \nfor\n \neach\n \nvertex\n \nw\n \nin\n \nAdj\n[\nv\n]\n\n            \nedge\n(\nu\n,\n \nw\n)\n \n\u2208\n \nE\n^\n2\n\n            \ninsert\n \nw\n \nin\n \nAdj2\n(\nu\n)\n\n\n\n\n\nwhere $Adj2$ is the adjacency-list representation of $G^2$. After we have computed $Adj2$, we have to remove any duplicate edges from the lists (there may be more than one two-edge path in $G$ between any two vertices). For every edge in $Adj$ we scan at most $|V|$ vertices, we compute $Adj2$ in time $O(VE)$. Removing duplicate edges is done in $O(V + E)$ as shown in exercise 22.1-4. Thus the total running time is\n\n\n$$O(VE) + O(V + E) = O(VE).$$\n\n\n\n\nAdjacency-matrix representation:\n Let $A$ denote the adjacency-matrix representation of $G$. The adjacency-matrix representation of $G^2$ is the square of $A$. Computing $A^2$ can be done in time $O(V^3)$ (and even faster, theoretically; Strassen's algorithm for example will compute $A^2$ in $O(V^{\\lg 7})$).\n\n\n\n\n22.1-6\n\n\n\n\nMost graph algorithms that take an adjacency-matrix representation as input require time $\\Omega(V^2)$, but there are some exceptions. Show how to determine whether a directed graph $G$ contains a \nuniversal sink\n $-$ a vertex with $in\\text-degree$ $|V| - 1$ and $out\\text-degree$ $0$ $-$ in time $O(V)$, given an adjacency matrix for $G$.\n\n\n\n\nWe start by observing that if $a_{ij} = 1$, so that $(i, j) \\in E$, then vertex $i$ cannot be a universal sink, for it has an outgoing edge. Thus, if row $i$ contains a $1$, then vertex $i$ cannot be a universal sink. This observation also means that if there is a $\\text{self-loop}(i, i)$, then vertex $i$ is not a universal sink. Now suppose that $a_{ij} = 0$, so that $(i, j) \\notin E$, and also that $i \\ne j$. Then vertex $j$ cannot be a universal sink, for either its $in\\text-degree$ must be strictly less than $|V| - 1$ or it has a self-loop. Thus if column $j$ contains a $0$ in any position other than the diagonal entry $(j, j)$, then vertex $j$ cannot be a universal sink.\n\n\nUsing the above observations, the following procedure returns $\\text{TRUE}$ if vertex $k$ is a universal sink, and $\\text{FALSE}$ otherwise. It takes as input a $|V| \\times |V|$ adjacency matrix $A = (a_{ij})$.\n\n\nIS\n-\nSINK\n(\nA\n,\n \nk\n)\n\n    \nlet\n \nA\n \nbe\n \n|\nV\n|\n \n\u00d7\n \n|\nV\n|\n\n    \nfor\n \nj\n \n=\n \n1\n \nto\n \n|\nV\n|\n      \n// Check for a 1 in row k\n\n        \nif\n \na\n[\nk\n][\nj\n]\n \n==\n \n1\n\n            \nreturn\n \nFALSE\n\n    \nfor\n \ni\n \n=\n \n1\n \nto\n \n|\nV\n|\n      \n// Check for an off-diagonal 0 in column k\n\n        \nif\n \na\n[\ni\n][\nk\n]\n \n==\n \n0\n \nand\n \ni\n \n!=\n \nk\n\n            \nreturn\n \nFALSE\n\n    \nreturn\n \nTRUE\n\n\n\n\n\nBecause this procedure runs in $O(V)$ time, we may call it only $O(1)$ times in order to achieve our $O(V)$-time bound for determining whether directed graph $G$ contains a universal sink.\n\n\nObserve also that a directed graph can have at most one universal sink. This property holds because if vertex $j$ is a universal sink, then we would have $(i, j) \\in E$ for all $i \\ne j$ and so no other vertex $i$ could be a universal sink.\n\n\nThe following procedure takes an adjacency matrix $A$ as input and returns either a message that there is no universal sink or a message containing the identity of the universal sink. It works by eliminating all but one vertex as a potential universal sink and then checking the remaining candidate vertex by a single call to $\\text{IS-SINK}$.\n\n\nUNIVERSAL\n-\nSINK\n(\nA\n)\n\n    \nlet\n \nA\n \nbe\n \n|\nV\n|\n \n\u00d7\n \n|\nV\n|\n\n    \ni\n \n=\n \nj\n \n=\n \n1\n\n    \nwhile\n \ni\n \n\u2264\n \n|\nV\n|\n \nand\n \nj\n \n\u2264\n \n|\nV\n|\n\n        \nif\n \na\n[\ni\n][\nj\n]\n \n==\n \n1\n\n            \ni\n \n=\n \ni\n \n+\n \n1\n\n        \nelse\n \nj\n \n=\n \nj\n \n+\n \n1\n\n    \ns\n \n=\n \n0\n\n    \nif\n \ni\n \n>\n \n|\nV\n|\n\n        \nreturn\n \n\"there is no universal sink\"\n\n    \nelse\n \nif\n \nIS\n-\nSINK\n(\nA\n,\n \ni\n)\n \n=\n \nFALSE\n\n        \nreturn\n \n\"there is no universal sink\"\n\n    \nelse\n \nreturn\n \ni\n \n\"is a universal sink\"\n\n\n\n\n\n$\\text{UNIVERSAL-SINK}$ walks through the adjacency matrix, starting at the upper left corner and always moving either right or down by one position, depending on whether the current entry $a_{ij}$ it is examining is $0$ or $1$. It stops once either $i$ or $j$ exceeds $|V|$.\n\n\nTo understand why $\\text{UNIVERSAL-SINK}$ works, we need to show that after the \nwhile\n loop terminates, the only vertex that might be a universal sink is vertex $i$. The call to $\\text{IS-SINK}$ then determines whether vertex $i$ is indeed a universal sink.\n\n\nLet us fix $i$ and $j$ to be values of these variables at the termination of the \nwhile\n loop. We claim that every vertex $k$ such that $1 \\le k < i$ cannot be a universal sink. That is because the way that $i$ achieved its final value at loop termination was by finding a $1$ in each row $k$ for which $1 \\le k < i$. As we observed above, any vertex $k$ whose row contains a $1$ cannot be a universal sink.\n\n\nIf $i > |V|$ at loop termination, then we have eliminated all vertices from consid- eration, and so there is no universal sink. If, on the other hand, $i \\le |V|$ at loop termination, we need to show that every vertex $k$ such that $i < k \\le |V|$ cannot be a universal sink. If $i \\le |V|$ at loop termination, then the \nwhile\n loop terminated because $j > |V|$. That means that we found a $0$ in every column. Recall our earlier observation that if column $k$ contains a $0$ in an off-diagonal position, then vertex $k$ cannot be a universal sink. Since we found a $0$ in every column, we found a $0$ in every column $k$ such that $i < k \\le |V|$. Moreover, we never examined any matrix entries in rows greater than $i$, and so we never examined the diagonal entry in any column $k$ such that $i < k \\le |V|$. Therefore, all the $0$s that we found in columns $k$ such that $i < k \\le |V|$ were off-diagonal. We conclude that every vertex $k$ such that $i < k \\le |V|$ cannot be a universal sink.\n\n\nThus, we have shown that every vertex less than $i$ and every vertex greater than $i$ cannot be a universal sink. The only remaining possibility is that vertex $i$ might be a universal sink, and the call to $\\text{IS-SINK}$ checks whether it is.\n\n\nTo see that $\\text{UNIVERSAL-SINK}$ runs in $O(V)$ time, observe that either $i$ or $j$ is incremented in each iteration of the \nwhile\n loop. Thus, the \nwhile\n loop makes at most $2|V| - 1$ iterations. Each iteration takes $O(1)$ time, for a total \nwhile\n loop time of $O(V)$ and, combined with the $O(V)$-time call to $\\text{IS-SINK}$, we get a total running time of $O(V)$.\n\n\n22.1-7\n\n\n\n\nThe \nincidence matrix\n of a directed graph $G = (V, E)$ with no self-loops is a $|V| \\times |E|$ matrix $B = (b_{ij})$ such that\n$$\nb_{ij} =\n\\begin{cases}\n-1 & \\text{if edge $j$ leaves vertex $i$}, \\\\\n 1 & \\text{if edge $j$ enters vertex $i$}, \\\\\n 0 & \\text{otherwise}.\n\\end{cases}\n$$\n\n\nDescribe what the entries of the matrix product $BB^\\text T$ represent, where $B^\\text T$ is the transpose of $B$.\n\n\n\n\n$$BB^\\text T(i, j) = \\sum\\limits_{e\\in E}b_{ie} b_{ej}^\\text T = \\sum\\limits_{e\\in E}b_{ie}b_{je}.$$\n\n\n\n\nIf $i = j$, then $b_{ie} b_{je} = 1$ (it is $1 \\cdot 1$ or $(-1) \\cdot (-1)$) whenever $e$ enters or leaves vertex $i$, and $0$ otherwise.\n\n\nIf $i \\ne j$, then $b_{ie} b_{je} = -1$ when $e = (i, j)$ or $e = (j, i)$, and $0$ otherwise.\n\n\n\n\nThus,\n\n\n$$\nBB^\\text T(i, j) =\n\\begin{cases}\n\\text{degree of $i$ = in-degree + out-degree}   & \\text{if $i = j$}, \\\\\n\\text{$-$(# of edges connecting $i$ and $j$)}  & \\text{if $i \\ne j$}.\n\\end{cases}\n$$\n\n\n22.1-8\n\n\n\n\nSuppose that instead of a linked list, each array entry $Adj[u]$ is a hash table containing the vertices $v$ for which $(u, v) \\in E$. If all edge lookups are equally likely, what is the expected time to determine whether an edge is in the graph? What disadvantages does this scheme have? Suggest an alternate data structure for each edge list that solves these problems. Does your alternative have disadvantages compared to the hash table?\n\n\n\n\nThe expected loopup time is $O(1)$, but in the worst case it could take $O(|V|)$. If we first sorted vertices in each adjacency list then we could perform a binary search so that the worst case lookup time is $O(\\lg |V|)$, but this has the disadvantage of having a much worse expected lookup time.",
            "title": "22.1 Representations of graphs"
        },
        {
            "location": "/Chap22/22.1/#221-1",
            "text": "Given an adjacency-list representation of a directed graph, how long does it take to compute the $out\\text-degree$ of every vertex? How long does it take to compute the $in\\text-degrees$?   Since it seems as though the list for the neighbors of each vertex $v$ is just an undecorated list, to find the length of each would take time $O(out\\text-degree(v))$. So, the total cost will be  $$\\sum_{v \\in V}O(out\\text-degree(v)) = O(|E| + |V|).$$  Note that the $|V|$ showing up in the asymptotics is necessary, because it still takes a constant amount of time to know that a list is empty. This time could be reduced to $O(|V|)$ if for each list in the adjacency list representation, we just also stored its length.  To compute the in degree of each vertex, we will have to scan through all of the adjacency lists and keep counters for how many times each vertex has appeared. As in the previous case, the time to scan through all of the adjacency lists takes time $O(|E| + |V|)$.",
            "title": "22.1-1"
        },
        {
            "location": "/Chap22/22.1/#221-2",
            "text": "Give an adjacency-list representation for a complete binary tree on 7 vertices. Give an equivalent adjacency-matrix representation. Assume that vertices are numbered from 1 to 7 as in a binary heap.     Adjacency-list representation  \\begin{align}\n1 &: 2 \\rightarrow 3 \\\\\n2 &: 1 \\rightarrow 4 \\rightarrow 5 \\\\\n3 &: 1 \\rightarrow 6 \\rightarrow 7 \\\\\n4 &: 2 \\\\\n5 &: 2 \\\\\n6 &: 3 \\\\\n7 &: 3.\n\\end{align}    Adjacency-matrix representation  $$\n\\begin{pmatrix}\n0 & 1 & 1 & 0 & 0 & 0 & 0 \\\\\n1 & 0 & 0 & 1 & 1 & 0 & 0 \\\\\n1 & 0 & 0 & 0 & 0 & 1 & 1 \\\\\n0 & 1 & 0 & 0 & 0 & 0 & 0 \\\\\n0 & 1 & 0 & 0 & 0 & 0 & 0 \\\\\n0 & 0 & 1 & 0 & 0 & 0 & 0 \\\\\n0 & 0 & 1 & 0 & 0 & 0 & 0 \\\\\n\\end{pmatrix}.\n$$",
            "title": "22.1-2"
        },
        {
            "location": "/Chap22/22.1/#221-3",
            "text": "The  transpose  of a directed graph $G = (V, E)$ is the graph $G^\\text T = (V, E^\\text T)$, where $E^\\text T = {(v, u) \\in V \\times V: (u, v) \\in E}$. Thus, $G^\\text T$ is $G$ with all its edges reversed. Describe efficient algorithms for computing $G^\\text T$ from $G$, for both the adjacency-list and adjacency-matrix representations of $G$. Analyze the running times of your algorithms.    Adjacency-list representation:   For the adjacency list representation, we will maintain an initially empty adjacency list representation of the transpose. Then, we scan through every list in the original graph. If we are in the list corresponding to vertex $v$ and see $u$ as an entry in the list, then we add an entry of $v$ to the list in the transpose graph corresponding to vertex $u$. Since this only requires a scan through all of the lists, it only takes time $O(|E| + |V|)$.  Adjacency-matrix representation:  to compute the graph transpose, we just take the matrix transpose. This means looking along every entry above the diagonal, and swapping it with the entry that occurs below the diagonal. This takes time $O(|V|^2)$.",
            "title": "22.1-3"
        },
        {
            "location": "/Chap22/22.1/#221-4",
            "text": "Given an adjacency-list representation of a multigraph $G = (V, E)$, describe an $O(V + E)$-time algorithm to compute the adjacency-list representation of the ''equivalent'' undirected graph $G' = (V, E')$, where $E'$ consists of the edges in $E$ with all multiple edges between two vertices replaced by a single edge and with all self-loops removed.   Create an array $A$ of size $|V|$. For a list in the adjacency list corresponding to vertex $v$, examine items on the list one by one. If any item is equal to $v$, remove it. If vertex $u$ appears on the list, examine $A[u]$. If it's not equal to $v$, set it equal to $v$. If it's equal to $v$, remove $u$ from the list. Since we have constant time lookup in the array, the total runtime is $O(V + E)$.",
            "title": "22.1-4"
        },
        {
            "location": "/Chap22/22.1/#221-5",
            "text": "The  square  of a directed graph $G = (V, E)$ is the graph $G^2 = (V, E^2)$ such that $(u, v) \\in E$ if and only $G$ contains a path with at most two edges between $u$ and $v$. Describe efficient algorithms for computing $G^2$ from $G$ for both the adjacency-list and adjacency-matrix representations of $G$. Analyze the running times of your algorithms.    Adjacency-list representation:  To compute $G^2$ from the adjacency-list representation $Adj$ of $G$, we perform the following for each $Adj[u]$:        for   each   vertex   v   in   Adj [ u ] \n         for   each   vertex   w   in   Adj [ v ] \n             edge ( u ,   w )   \u2208   E ^ 2 \n             insert   w   in   Adj2 ( u )   where $Adj2$ is the adjacency-list representation of $G^2$. After we have computed $Adj2$, we have to remove any duplicate edges from the lists (there may be more than one two-edge path in $G$ between any two vertices). For every edge in $Adj$ we scan at most $|V|$ vertices, we compute $Adj2$ in time $O(VE)$. Removing duplicate edges is done in $O(V + E)$ as shown in exercise 22.1-4. Thus the total running time is  $$O(VE) + O(V + E) = O(VE).$$   Adjacency-matrix representation:  Let $A$ denote the adjacency-matrix representation of $G$. The adjacency-matrix representation of $G^2$ is the square of $A$. Computing $A^2$ can be done in time $O(V^3)$ (and even faster, theoretically; Strassen's algorithm for example will compute $A^2$ in $O(V^{\\lg 7})$).",
            "title": "22.1-5"
        },
        {
            "location": "/Chap22/22.1/#221-6",
            "text": "Most graph algorithms that take an adjacency-matrix representation as input require time $\\Omega(V^2)$, but there are some exceptions. Show how to determine whether a directed graph $G$ contains a  universal sink  $-$ a vertex with $in\\text-degree$ $|V| - 1$ and $out\\text-degree$ $0$ $-$ in time $O(V)$, given an adjacency matrix for $G$.   We start by observing that if $a_{ij} = 1$, so that $(i, j) \\in E$, then vertex $i$ cannot be a universal sink, for it has an outgoing edge. Thus, if row $i$ contains a $1$, then vertex $i$ cannot be a universal sink. This observation also means that if there is a $\\text{self-loop}(i, i)$, then vertex $i$ is not a universal sink. Now suppose that $a_{ij} = 0$, so that $(i, j) \\notin E$, and also that $i \\ne j$. Then vertex $j$ cannot be a universal sink, for either its $in\\text-degree$ must be strictly less than $|V| - 1$ or it has a self-loop. Thus if column $j$ contains a $0$ in any position other than the diagonal entry $(j, j)$, then vertex $j$ cannot be a universal sink.  Using the above observations, the following procedure returns $\\text{TRUE}$ if vertex $k$ is a universal sink, and $\\text{FALSE}$ otherwise. It takes as input a $|V| \\times |V|$ adjacency matrix $A = (a_{ij})$.  IS - SINK ( A ,   k ) \n     let   A   be   | V |   \u00d7   | V | \n     for   j   =   1   to   | V |        // Check for a 1 in row k \n         if   a [ k ][ j ]   ==   1 \n             return   FALSE \n     for   i   =   1   to   | V |        // Check for an off-diagonal 0 in column k \n         if   a [ i ][ k ]   ==   0   and   i   !=   k \n             return   FALSE \n     return   TRUE   Because this procedure runs in $O(V)$ time, we may call it only $O(1)$ times in order to achieve our $O(V)$-time bound for determining whether directed graph $G$ contains a universal sink.  Observe also that a directed graph can have at most one universal sink. This property holds because if vertex $j$ is a universal sink, then we would have $(i, j) \\in E$ for all $i \\ne j$ and so no other vertex $i$ could be a universal sink.  The following procedure takes an adjacency matrix $A$ as input and returns either a message that there is no universal sink or a message containing the identity of the universal sink. It works by eliminating all but one vertex as a potential universal sink and then checking the remaining candidate vertex by a single call to $\\text{IS-SINK}$.  UNIVERSAL - SINK ( A ) \n     let   A   be   | V |   \u00d7   | V | \n     i   =   j   =   1 \n     while   i   \u2264   | V |   and   j   \u2264   | V | \n         if   a [ i ][ j ]   ==   1 \n             i   =   i   +   1 \n         else   j   =   j   +   1 \n     s   =   0 \n     if   i   >   | V | \n         return   \"there is no universal sink\" \n     else   if   IS - SINK ( A ,   i )   =   FALSE \n         return   \"there is no universal sink\" \n     else   return   i   \"is a universal sink\"   $\\text{UNIVERSAL-SINK}$ walks through the adjacency matrix, starting at the upper left corner and always moving either right or down by one position, depending on whether the current entry $a_{ij}$ it is examining is $0$ or $1$. It stops once either $i$ or $j$ exceeds $|V|$.  To understand why $\\text{UNIVERSAL-SINK}$ works, we need to show that after the  while  loop terminates, the only vertex that might be a universal sink is vertex $i$. The call to $\\text{IS-SINK}$ then determines whether vertex $i$ is indeed a universal sink.  Let us fix $i$ and $j$ to be values of these variables at the termination of the  while  loop. We claim that every vertex $k$ such that $1 \\le k < i$ cannot be a universal sink. That is because the way that $i$ achieved its final value at loop termination was by finding a $1$ in each row $k$ for which $1 \\le k < i$. As we observed above, any vertex $k$ whose row contains a $1$ cannot be a universal sink.  If $i > |V|$ at loop termination, then we have eliminated all vertices from consid- eration, and so there is no universal sink. If, on the other hand, $i \\le |V|$ at loop termination, we need to show that every vertex $k$ such that $i < k \\le |V|$ cannot be a universal sink. If $i \\le |V|$ at loop termination, then the  while  loop terminated because $j > |V|$. That means that we found a $0$ in every column. Recall our earlier observation that if column $k$ contains a $0$ in an off-diagonal position, then vertex $k$ cannot be a universal sink. Since we found a $0$ in every column, we found a $0$ in every column $k$ such that $i < k \\le |V|$. Moreover, we never examined any matrix entries in rows greater than $i$, and so we never examined the diagonal entry in any column $k$ such that $i < k \\le |V|$. Therefore, all the $0$s that we found in columns $k$ such that $i < k \\le |V|$ were off-diagonal. We conclude that every vertex $k$ such that $i < k \\le |V|$ cannot be a universal sink.  Thus, we have shown that every vertex less than $i$ and every vertex greater than $i$ cannot be a universal sink. The only remaining possibility is that vertex $i$ might be a universal sink, and the call to $\\text{IS-SINK}$ checks whether it is.  To see that $\\text{UNIVERSAL-SINK}$ runs in $O(V)$ time, observe that either $i$ or $j$ is incremented in each iteration of the  while  loop. Thus, the  while  loop makes at most $2|V| - 1$ iterations. Each iteration takes $O(1)$ time, for a total  while  loop time of $O(V)$ and, combined with the $O(V)$-time call to $\\text{IS-SINK}$, we get a total running time of $O(V)$.",
            "title": "22.1-6"
        },
        {
            "location": "/Chap22/22.1/#221-7",
            "text": "The  incidence matrix  of a directed graph $G = (V, E)$ with no self-loops is a $|V| \\times |E|$ matrix $B = (b_{ij})$ such that\n$$\nb_{ij} =\n\\begin{cases}\n-1 & \\text{if edge $j$ leaves vertex $i$}, \\\\\n 1 & \\text{if edge $j$ enters vertex $i$}, \\\\\n 0 & \\text{otherwise}.\n\\end{cases}\n$$  Describe what the entries of the matrix product $BB^\\text T$ represent, where $B^\\text T$ is the transpose of $B$.   $$BB^\\text T(i, j) = \\sum\\limits_{e\\in E}b_{ie} b_{ej}^\\text T = \\sum\\limits_{e\\in E}b_{ie}b_{je}.$$   If $i = j$, then $b_{ie} b_{je} = 1$ (it is $1 \\cdot 1$ or $(-1) \\cdot (-1)$) whenever $e$ enters or leaves vertex $i$, and $0$ otherwise.  If $i \\ne j$, then $b_{ie} b_{je} = -1$ when $e = (i, j)$ or $e = (j, i)$, and $0$ otherwise.   Thus,  $$\nBB^\\text T(i, j) =\n\\begin{cases}\n\\text{degree of $i$ = in-degree + out-degree}   & \\text{if $i = j$}, \\\\\n\\text{$-$(# of edges connecting $i$ and $j$)}  & \\text{if $i \\ne j$}.\n\\end{cases}\n$$",
            "title": "22.1-7"
        },
        {
            "location": "/Chap22/22.1/#221-8",
            "text": "Suppose that instead of a linked list, each array entry $Adj[u]$ is a hash table containing the vertices $v$ for which $(u, v) \\in E$. If all edge lookups are equally likely, what is the expected time to determine whether an edge is in the graph? What disadvantages does this scheme have? Suggest an alternate data structure for each edge list that solves these problems. Does your alternative have disadvantages compared to the hash table?   The expected loopup time is $O(1)$, but in the worst case it could take $O(|V|)$. If we first sorted vertices in each adjacency list then we could perform a binary search so that the worst case lookup time is $O(\\lg |V|)$, but this has the disadvantage of having a much worse expected lookup time.",
            "title": "22.1-8"
        },
        {
            "location": "/Chap22/22.2/",
            "text": "22.2-1\n\n\n\n\nShow the $d$ and $\\pi$ values that result from running breadth-first search on the directed graph of Figure 22.2(a), using vertex $3$ as the source.\n\n\n\n\n\\begin{array}{c|cccccc}\n\\text{vertex} & 1 & 2 & 3 & 4 & 5 & 6 \\\\\n\\hline\nd & \\infty & 3 & 0 & 2 & 1 & 1 \\\\\n\\pi & \\text{NIL} & 4 & \\text{NIL} & 5 & 3 & 3\n\\end{array}\n\n\n22.2-2\n\n\n\n\nShow the $d$ and $\\pi$ values that result from running breadth-first search on the undirected graph of Figure 22.3, using vertex $u$ as the source.\n\n\n\n\n\\begin{array}{c|cccccc}\n\\text{vertex} & r & s & t & u & v & w & x & y \\\\\n\\hline\nd & 4 & 3 & 1 & 0 & 5 & 2 & 1 & 1 \\\\\n\\pi & s & w & u & \\text{NIL} & r & t & u & u\n\\end{array}\n\n\n22.2-3\n\n\n\n\nShow that using a single bit to store each vertex color suffices by arguing that the $\\text{BFS}$ procedure would produce the same result if lines 5 and 14 were removed.\n\n\n\n\n$\\textit{Note:}$ This exercise changed in the third printing. This solution reflects the change.\n\n\nThe $\\text{BFS}$ procedure cares only whether a vertex is white or not. $A$ vertex $v$ must become non-white at the same time that $v.d$ is assigned a finite value so that we do not attempt to assign to $v.d$ again, and so we need to change vertex colors in lines 5 and 14. Once we have changed a vertex's color to non-white, we do not need to change it again.\n\n\n22.2-4\n\n\n\n\nWhat is the running time of $\\text{BFS}$ if we represent its input graph by an adjacency matrix and modify the algorithm to handle this form of input?\n\n\n\n\nThe correctness proof for the $\\text{BFS}$ algorithm shows that $d[u] = \\delta(s, u)$, and the algorithm doesn't assume that the adjacency lists are in any particular order.\n\n\nIn Figure 22.3, if t precedes $x$ in $Adj[w]$, we can get the breadth-first tree shown in the figure. But if $x$ precedes $t$ in $Adj[w]$ and $u$ precedes $y$ in $Adj[x]$, we can get edge $(x, u)$ in the breadth-first tree.\n\n\n22.2-5\n\n\n\n\nArgue that in a breadth-first search, the value $u.d$ assigned to a vertex $u$ is independent of the order in which the vertices appear in each adjacency list. Using Figure 22.3 as an example, show that the breadth-first tree computed by $\\text{BFS}$ can depend on the ordering within adjacency lists.\n\n\n\n\nThe correctness proof for the $\\text{BFS}$ algorithm shows that $\\delta.d = \\delta(s, u)$, and the algorithm doesn't assume that the adjacency lists are in any particular order.\n\n\nIn Figure 22.3, if $t$ precedes $x$ in $Adj[w]$\u008d, we can get the breadth-first tree shown in the figure. But if $x$ precedes $t$ in $Adj[w]$\u008d and $u$ precedes $y$ in $Adj[x]$\u008d, we can get edge $(x, u)$ in the breadth-first tree.\n\n\n22.2-6\n\n\n\n\nGive an example of a directed graph $G = (V, E)$, a source vertex $s \\in V$, and a set of tree edges $E_\\pi \\subseteq E$ such that for each vertex $v \\in V$, the unique simple path in the graph $(V, E_\\pi)$ from $s$ to $v$ is a shortest path in $G$, yet the set of edges $E_\\pi$ cannot be produced by running $\\text{BFS}$ on $G$, no matter how the vertices are ordered in each adjacency list.\n\n\n\n\nThe edges in $E_\\pi$ are shaded in the following graph:\n\n\n\n\nTo see that $E_\\pi$ cannot be a breadth-first tree, let's suppose that $Adj[s]$\u008d contains $u$ before $v$. $\\text{BFS}$ adds edges $(s, u)$ and $(s, v)$ to the breadth-first tree. Since $u$ is enqueued before $v$, $\\text{BFS}$ then adds edges $(u, w)$ and $(u, x)$. (The order of $w$ and $x$ in $Adj[u]$\u008d doesn't matter.) Symmetrically, if $Adj[s]$\u008d contains $v$ before $u$, then $\\text{BFS}$ adds edges $(s, v)$ and $(s, u)$ to the breadth-first tree, $v$ is enqueued before $u$, and $\\text{BFS}$ adds edges $(v, w)$ and $(v, x)$. (Again, the order of $w$ and $x$ in $Adj[v]$ doesn't matter.) $\\text{BFS}$ will never put both edges $(u, w)$ and $(v, x)$ into the breadth-first tree. In fact, it will also never put both edges $(u, x)$ and $(v, w)$ into the breadth-first tree.\n\n\n22.2-7\n\n\n\n\nThere are two types of professional wrestlers: ''babyfaces'' (''good guys'') and ''heels'' (''bad guys''). Between any pair of professional wrestlers, there may or may not be a rivalry. Suppose we have $n$ professional wrestlers and we have a list of $r$ pairs of wrestlers for which there are rivalries. Give an $O(n + r)$-time algorithm that determines whether it is possible to designate some of the wrestlers as babyfaces and the remainder as heels such that each rivalry is between a babyface and a heel. If it is possible to perform such a designation, your algorithm should produce it.\n\n\n\n\nCreate a graph $G$ where each vertex represents a wrestler and each edge represents a rivalry. The graph will contain $n$ vertices and $r$ edges.\n\n\nPerform as many $\\text{BFS}$'s as needed to visit all vertices. Assign all wrestlers whose distance is even to be babyfaces and all wrestlers whose distance is odd to be heels. Then check each edge to verify that it goes between a babyface and a heel. This solution would take $O(n + r)$ time for the $\\text{BFS}$, $O(n)$ time to designate each wrestler as a babyface or heel, and $O(r)$ time to check edges, which is $O(n + r)$ time overall.\n\n\n22.2-8 $\\star$\n\n\n\n\nThe \ndiameter\n of a tree $T = (V, E)$ is defined as $\\max_{u,v \\in V} \\delta(u, v)$, that is, the largest of all shortest-path distances in the tree. Give an efficient algorithm to compute the diameter of a tree, and analyze the running time of your algorithm.\n\n\n\n\nSuppose that a and b are the endpoints of the path in the tree which achieve the diameter, and without loss of generality assume that $a$ and $b$ are the unique pair which do so. Let $s$ be any vertex in $T$. We claim that the result of a single $\\text{BFS}$ will return either $a$ or $b$ (or both) as the vertex whose distance from $s$ is greatest.\n\n\nTo see this, suppose to the contrary that some other vertex $x$ is shown to be furthest from $s$. (Note that $x$ cannot be on the path from $a$ to $b$, otherwise we could extend). Then we have\n\n\n$$d(s, a) < d(s, x)$$\n\n\nand\n\n\n$$d(s, b) < d(s, x).$$\n\n\nLet $c$ denote the vertex on the path from $a$ to $b$ which minimizes $d(s, c)$. Since the graph is in fact a tree, we must have\n\n\n$$d(s, a) = d(s, c) + d(c, a)$$\n\n\nand\n\n\n$$d(s, b) = d(s, c) + d(c, b).$$\n\n\n(If there were another path, we could form a cycle). Using the triangle inequality and inequalities and equalities mentioned above we must have\n\n\n\\begin{align}\nd(a, b) + 2d(s, c) & = d(s, c) + d(c, b) + d(s, c) + d(c, a) \\\\\n                   & < d(s, x) + d(s, c) + d(c, b).\n\\end{align}\n\n\nI claim that $d(x, b) = d(s, c) + d(s, b)$. If not, then by the triangle inequality we must have a strict less-than. In other words, there is some path from $x$ to $b$ which does not go through $c$. This gives the contradiction, because it implies there is a cycle formed by concatenating these paths. Then we have\n\n\n$$d(a, b) < d(a, b) + 2d(s, c) < d(x, b).$$\n\n\nSince it is assumed that $d(a, b)$ is maximal among all pairs, we have a contradiction. Therefore, since trees have $|V| - 1$ edges, we can run $\\text{BFS}$ a single time in $O(V)$ to obtain one of the vertices which is the endpoint of the longest simple path contained in the graph. Running $\\text{BFS}$ again will show us where the other one is, so we can solve the diameter problem for trees in $O(V)$.\n\n\n22.2-9\n\n\n\n\nLet $G = (V, E)$ be a connected, undirected graph. Give an $O(V + E)$-time algorithm to compute a path in $G$ that traverses each edge in $E$ exactly once in each direction. Describe how you can find your way out of a maze if you are given a large supply of pennies.\n\n\n\n\nFirst, the algorithm computes a minimum spanning tree of the graph. Note that this can be done using the procedures of Chapter 23. It can also be done by performing a breadth first search, and restricting to the edges between $v$ and $v.\\pi$ for every $v$. To aide in not double counting edges, fix any ordering $\\le$ on the vertices before hand. Then, we will construct the sequence of steps by calling $\\text{MAKE-PATH}(s)$, where $s$ was the root used for the $\\text{BFS}$.\n\n\nMAKE\n-\nPATH\n(\nu\n)\n\n    \nfor\n \nv\n \nadjacent\n \nto\n \nu\n \nin\n \nthe\n \noriginal\n \ngraph\n,\n \nbut\n \nnot\n \nin\n \nthe\n \ntree\n \nsuch\n \nthat\n \nu\n \n\u2264\n \nv\n\n        \ngo\n \nto\n \nv\n \nand\n \nback\n \nto\n \nu\n\n    \nfor\n \nv\n \nadjacent\n \nto\n \nu\n \nin\n \nthe\n \ntree\n,\n \nbut\n \nnot\n \nequal\n \nto\n \nu\n.\nPI\n\n        \ngo\n \nto\n \nv\n\n        \nperform\n \nthe\n \npath\n \nproscribed\n \nby\n \nMAKE\n-\nPATH\n(\nv\n)\n\n    \ngo\n \nto\n \nu\n.\nPI",
            "title": "22.2 Breadth-first search"
        },
        {
            "location": "/Chap22/22.2/#222-1",
            "text": "Show the $d$ and $\\pi$ values that result from running breadth-first search on the directed graph of Figure 22.2(a), using vertex $3$ as the source.   \\begin{array}{c|cccccc}\n\\text{vertex} & 1 & 2 & 3 & 4 & 5 & 6 \\\\\n\\hline\nd & \\infty & 3 & 0 & 2 & 1 & 1 \\\\\n\\pi & \\text{NIL} & 4 & \\text{NIL} & 5 & 3 & 3\n\\end{array}",
            "title": "22.2-1"
        },
        {
            "location": "/Chap22/22.2/#222-2",
            "text": "Show the $d$ and $\\pi$ values that result from running breadth-first search on the undirected graph of Figure 22.3, using vertex $u$ as the source.   \\begin{array}{c|cccccc}\n\\text{vertex} & r & s & t & u & v & w & x & y \\\\\n\\hline\nd & 4 & 3 & 1 & 0 & 5 & 2 & 1 & 1 \\\\\n\\pi & s & w & u & \\text{NIL} & r & t & u & u\n\\end{array}",
            "title": "22.2-2"
        },
        {
            "location": "/Chap22/22.2/#222-3",
            "text": "Show that using a single bit to store each vertex color suffices by arguing that the $\\text{BFS}$ procedure would produce the same result if lines 5 and 14 were removed.   $\\textit{Note:}$ This exercise changed in the third printing. This solution reflects the change.  The $\\text{BFS}$ procedure cares only whether a vertex is white or not. $A$ vertex $v$ must become non-white at the same time that $v.d$ is assigned a finite value so that we do not attempt to assign to $v.d$ again, and so we need to change vertex colors in lines 5 and 14. Once we have changed a vertex's color to non-white, we do not need to change it again.",
            "title": "22.2-3"
        },
        {
            "location": "/Chap22/22.2/#222-4",
            "text": "What is the running time of $\\text{BFS}$ if we represent its input graph by an adjacency matrix and modify the algorithm to handle this form of input?   The correctness proof for the $\\text{BFS}$ algorithm shows that $d[u] = \\delta(s, u)$, and the algorithm doesn't assume that the adjacency lists are in any particular order.  In Figure 22.3, if t precedes $x$ in $Adj[w]$, we can get the breadth-first tree shown in the figure. But if $x$ precedes $t$ in $Adj[w]$ and $u$ precedes $y$ in $Adj[x]$, we can get edge $(x, u)$ in the breadth-first tree.",
            "title": "22.2-4"
        },
        {
            "location": "/Chap22/22.2/#222-5",
            "text": "Argue that in a breadth-first search, the value $u.d$ assigned to a vertex $u$ is independent of the order in which the vertices appear in each adjacency list. Using Figure 22.3 as an example, show that the breadth-first tree computed by $\\text{BFS}$ can depend on the ordering within adjacency lists.   The correctness proof for the $\\text{BFS}$ algorithm shows that $\\delta.d = \\delta(s, u)$, and the algorithm doesn't assume that the adjacency lists are in any particular order.  In Figure 22.3, if $t$ precedes $x$ in $Adj[w]$\u008d, we can get the breadth-first tree shown in the figure. But if $x$ precedes $t$ in $Adj[w]$\u008d and $u$ precedes $y$ in $Adj[x]$\u008d, we can get edge $(x, u)$ in the breadth-first tree.",
            "title": "22.2-5"
        },
        {
            "location": "/Chap22/22.2/#222-6",
            "text": "Give an example of a directed graph $G = (V, E)$, a source vertex $s \\in V$, and a set of tree edges $E_\\pi \\subseteq E$ such that for each vertex $v \\in V$, the unique simple path in the graph $(V, E_\\pi)$ from $s$ to $v$ is a shortest path in $G$, yet the set of edges $E_\\pi$ cannot be produced by running $\\text{BFS}$ on $G$, no matter how the vertices are ordered in each adjacency list.   The edges in $E_\\pi$ are shaded in the following graph:   To see that $E_\\pi$ cannot be a breadth-first tree, let's suppose that $Adj[s]$\u008d contains $u$ before $v$. $\\text{BFS}$ adds edges $(s, u)$ and $(s, v)$ to the breadth-first tree. Since $u$ is enqueued before $v$, $\\text{BFS}$ then adds edges $(u, w)$ and $(u, x)$. (The order of $w$ and $x$ in $Adj[u]$\u008d doesn't matter.) Symmetrically, if $Adj[s]$\u008d contains $v$ before $u$, then $\\text{BFS}$ adds edges $(s, v)$ and $(s, u)$ to the breadth-first tree, $v$ is enqueued before $u$, and $\\text{BFS}$ adds edges $(v, w)$ and $(v, x)$. (Again, the order of $w$ and $x$ in $Adj[v]$ doesn't matter.) $\\text{BFS}$ will never put both edges $(u, w)$ and $(v, x)$ into the breadth-first tree. In fact, it will also never put both edges $(u, x)$ and $(v, w)$ into the breadth-first tree.",
            "title": "22.2-6"
        },
        {
            "location": "/Chap22/22.2/#222-7",
            "text": "There are two types of professional wrestlers: ''babyfaces'' (''good guys'') and ''heels'' (''bad guys''). Between any pair of professional wrestlers, there may or may not be a rivalry. Suppose we have $n$ professional wrestlers and we have a list of $r$ pairs of wrestlers for which there are rivalries. Give an $O(n + r)$-time algorithm that determines whether it is possible to designate some of the wrestlers as babyfaces and the remainder as heels such that each rivalry is between a babyface and a heel. If it is possible to perform such a designation, your algorithm should produce it.   Create a graph $G$ where each vertex represents a wrestler and each edge represents a rivalry. The graph will contain $n$ vertices and $r$ edges.  Perform as many $\\text{BFS}$'s as needed to visit all vertices. Assign all wrestlers whose distance is even to be babyfaces and all wrestlers whose distance is odd to be heels. Then check each edge to verify that it goes between a babyface and a heel. This solution would take $O(n + r)$ time for the $\\text{BFS}$, $O(n)$ time to designate each wrestler as a babyface or heel, and $O(r)$ time to check edges, which is $O(n + r)$ time overall.",
            "title": "22.2-7"
        },
        {
            "location": "/Chap22/22.2/#222-8-star",
            "text": "The  diameter  of a tree $T = (V, E)$ is defined as $\\max_{u,v \\in V} \\delta(u, v)$, that is, the largest of all shortest-path distances in the tree. Give an efficient algorithm to compute the diameter of a tree, and analyze the running time of your algorithm.   Suppose that a and b are the endpoints of the path in the tree which achieve the diameter, and without loss of generality assume that $a$ and $b$ are the unique pair which do so. Let $s$ be any vertex in $T$. We claim that the result of a single $\\text{BFS}$ will return either $a$ or $b$ (or both) as the vertex whose distance from $s$ is greatest.  To see this, suppose to the contrary that some other vertex $x$ is shown to be furthest from $s$. (Note that $x$ cannot be on the path from $a$ to $b$, otherwise we could extend). Then we have  $$d(s, a) < d(s, x)$$  and  $$d(s, b) < d(s, x).$$  Let $c$ denote the vertex on the path from $a$ to $b$ which minimizes $d(s, c)$. Since the graph is in fact a tree, we must have  $$d(s, a) = d(s, c) + d(c, a)$$  and  $$d(s, b) = d(s, c) + d(c, b).$$  (If there were another path, we could form a cycle). Using the triangle inequality and inequalities and equalities mentioned above we must have  \\begin{align}\nd(a, b) + 2d(s, c) & = d(s, c) + d(c, b) + d(s, c) + d(c, a) \\\\\n                   & < d(s, x) + d(s, c) + d(c, b).\n\\end{align}  I claim that $d(x, b) = d(s, c) + d(s, b)$. If not, then by the triangle inequality we must have a strict less-than. In other words, there is some path from $x$ to $b$ which does not go through $c$. This gives the contradiction, because it implies there is a cycle formed by concatenating these paths. Then we have  $$d(a, b) < d(a, b) + 2d(s, c) < d(x, b).$$  Since it is assumed that $d(a, b)$ is maximal among all pairs, we have a contradiction. Therefore, since trees have $|V| - 1$ edges, we can run $\\text{BFS}$ a single time in $O(V)$ to obtain one of the vertices which is the endpoint of the longest simple path contained in the graph. Running $\\text{BFS}$ again will show us where the other one is, so we can solve the diameter problem for trees in $O(V)$.",
            "title": "22.2-8 $\\star$"
        },
        {
            "location": "/Chap22/22.2/#222-9",
            "text": "Let $G = (V, E)$ be a connected, undirected graph. Give an $O(V + E)$-time algorithm to compute a path in $G$ that traverses each edge in $E$ exactly once in each direction. Describe how you can find your way out of a maze if you are given a large supply of pennies.   First, the algorithm computes a minimum spanning tree of the graph. Note that this can be done using the procedures of Chapter 23. It can also be done by performing a breadth first search, and restricting to the edges between $v$ and $v.\\pi$ for every $v$. To aide in not double counting edges, fix any ordering $\\le$ on the vertices before hand. Then, we will construct the sequence of steps by calling $\\text{MAKE-PATH}(s)$, where $s$ was the root used for the $\\text{BFS}$.  MAKE - PATH ( u ) \n     for   v   adjacent   to   u   in   the   original   graph ,   but   not   in   the   tree   such   that   u   \u2264   v \n         go   to   v   and   back   to   u \n     for   v   adjacent   to   u   in   the   tree ,   but   not   equal   to   u . PI \n         go   to   v \n         perform   the   path   proscribed   by   MAKE - PATH ( v ) \n     go   to   u . PI",
            "title": "22.2-9"
        },
        {
            "location": "/Chap22/22.3/",
            "text": "22.3-1\n\n\n\n\nMake a 3-by-3 chart with row and column labels $\\text{WHITE}$, $\\text{GRAY}$, and $\\text{BLACK}$. In each cell $(i, j)$, indicate whether, at any point during a depth-first search of a directed graph, there can be an edge from a vertex of color $i$ to a vertex of color $j$. For each possible edge, indicate what edge types it can be. Make a second such chart for depth-first search of an undirected graph.\n\n\n\n\n\n\n\n\nDirected:\n\n\n\\begin{array}{c|ccc}\nfrom\\backslash to & \\text{BLACK}                & \\text{GRAY}                & \\text{WHITE} \\\\\n\\hline\n\\text{BLACK}      & \\text{Allkinds}             & \\text{Back, Cross}         & \\text{Back, Cross} \\\\\n\\text{GRAY}       & \\text{Tree, Forward, Cross} & \\text{Tree, Forward, Back} & \\text{Back, Cross} \\\\\n\\text{WHITE}      & \\text{Cross, Tree, Forward} & \\text{Cross, Back}         & \\text{Allkinds}\n\\end{array}\n\n\n\n\n\n\nUndirected:\n\n\n\\begin{array}{c|ccc}\nfrom\\backslash to & \\text{BLACK}    & \\text{GRAY}                & \\text{WHITE} \\\\\n\\hline\n\\text{BLACK}      & \\text{Allkinds} & \\text{Allkinds}            & \\text{Allkinds} \\\\\n\\text{GRAY}       & -               & \\text{Tree, Forward, Back} & \\text{Allkinds} \\\\\n\\text{WHITE}      & -               & -                          & \\text{Allkinds}\n\\end{array}\n\n\n\n\n\n\n22.3-2\n\n\n\n\nShow how depth-first search works on the graph of Figure 22.6. Assume that the \nfor\n loop of lines 5\u20137 of the $\\text{DFS}$ procedure considers the vertices in alphabetical order, and assume that each adjacency list is ordered alphabetically. Show the discovery and finishing times for each vertex, and show the classification of each edge.\n\n\n\n\nThe following table gives the discovery time and finish time for each vetex in the graph.\n\n\n\\begin{array}{ccc}\n\\text{Vertex} & \\text{Discovered} & \\text{Finished} \\\\\n\\hline\nq &  1 & 16 \\\\\nr & 17 & 20 \\\\\ns &  2 &  7 \\\\\nt &  8 & 15 \\\\\nu & 18 & 19 \\\\\nv &  3 &  6 \\\\\nw &  4 &  5 \\\\\nx &  9 & 12 \\\\\ny & 13 & 14 \\\\\nz & 10 & 11\n\\end{array}\n\n\n\n\nTree edges:\n $(q, s)$, $(s, v)$, $(v, w)$, $(q, t)$, $(t, x)$, $(x, z)$, $(t, y)$, $(r, u)$.\n\n\nBack edges:\n $(w, s)$, $(z, x)$, $(y, q)$. \n\n\nForward edges:\n $(q, w)$.\n\n\nCross edges:\n $(r, y)$, $(u, y)$.\n\n\n\n\n22.3-3\n\n\n\n\nShow the parenthesis structure of the depth-first search of Figure 22.4.\n\n\n\n\nAs pointed out in figure 22.5, the parentheses structure of the $\\text{DFS}$ of figure 22.4 is $(((())()))(()())$.\n\n\n22.3-4\n\n\n\n\nShow that using a single bit to store each vertex color suffices by arguing that the $\\text{DFS}$ procedure would produce the same result if line 3 of $\\text{DFS-VISIT}$ was removed.\n\n\n\n\n$\\textit{Note:}$ This exercise changed in the third printing. This solution reflects the change.\n\n\nThe $\\text{DFS}$ and $\\text{DFS-VISIT}$ procedures care only whether a vertex is white or not. By coloring vertex $u$ gray when it is first visited, in line 3 of $\\text{DFS-VISIT}$, we ensure that $u$ will not be visited again. Once we have changed a vertex's color to non-white, we do not need to change it again.\n\n\n22.3-5\n\n\n\n\nShow that edge $(u, v)$ is\n\n\na.\n a tree edge or forward edge if and only if $u.d < v.d < v.f < u.f$,\n\n\nb.\n a back edge if and only if $v.d \\le u.d < u.f \\le v.f$, and\n\n\nc.\n a cross edge if and only if $v.d < v.f < u.d < u.f$.\n\n\n\n\na.\n Edge $(u, v)$ is a tree edge or forward edge if and only if $v$ is a descendant of $u$ in the depth-first forest. (If $(u, v)$ is a back edge, then $u$ is a descendant of $v$, and if $(u, v)$ is a cross edge, then neither of $u$ or $v$ is a descendant of the other.) By Corollary 22.8, therefore, $(u, v)$ is a tree edge or forward edge if and only if $u.d < v.d < v.f < u.f$.\n\n\nb.\n First, suppose that $(u, v)$ is a back edge. A self-loop is by definition a back edge. If $(u, v)$ is a self-loop, then clearly $v.d = u.d < u.f = v.f$. If $(u, v)$ is not a self-loop, then $u$ is a descendant of $v$ in the depth-first forest, and by Corollary 22.8, $v.d < u.d < u.f < v.f$.\n\n\nNow, suppose that $v.d \\le u.d < u.f \\le v.f$. If $u$ and $v$ are the same vertex, then $v.d = u.d < u.f = v.f$, and $(u, v)$ is a self-loop and hence a back edge. If $u$ and $v$ are distinct, then $v.d < u.d < u.f < v.f$. By the parenthesis theorem, interval $[u.d, u.f]$\u008d is contained entirely within the interval $[v.d, v.f]$\u008d, and $u$ is a descendant of $v$ in a depth-first tree. Thus, $(u, v)$ is a back edge.\n\n\nc.\n First, suppose that $(u, v)$ is a cross edge. Since neither $u$ nor $v$ is an ancestor of the other, the parenthesis theorem says that the intervals $[u.d, u.f]$ and $[v.d, v.f]$ are entirely disjoint. Thus, we must have either $u.d < u.f < v.d < v.f$ or $v.d < v.f < u.d < u.f$. We claim that we cannot have $u.d < v.d$ if $(u, v)$ is a cross edge. Why? If $u.d < v.d$, then $v$ is white at time $u.d$. By the white-path theorem, $v$ is a descendant of $u$, which contradicts $(u, v)$ being a cross edge. Thus, we must have $v.d < v.f < u.d < u.f$.\n\n\nNow suppose that $v.d < v.f < u.d < u.f$. By the parenthesis theorem, neither $u$ nor $v$ is a descendant of the other, which means that $(u, v)$ must be a cross edge.\n\n\n22.3-6\n\n\n\n\nShow that in an undirected graph, classifying an edge $(u, v)$ as a tree edge or a back edge according to whether $(u, v)$ or $(v, u)$ is encountered first during the depth-first search is equivalent to classifying it according to the ordering of the four types in the classification scheme.\n\n\n\n\nBy Theorem 22.10, every edge of an undirected graph is either a tree edge or a back edge. First suppose that $v$ is first discovered by exploring edge $(u, v)$. Then by definition, $(u, v)$ is a tree edge. Moreover, $(u, v)$ must have been discovered before $(v, u)$ because once $(v, u)$ is explored, $v$ is necessarily discovered. Now suppose that $v$ isn't first discovered by $(u, v)$. Then it must be discovered by $(r, v)$ for some $r\\ne u$. If $u$ hasn't yet been discovered then if $(u, v)$ is explored first, it must be a back edge since $v$ is an ancestor of $u$. If $u$ has been discovered then $u$ is an ancestor of $v$, so $(v, u)$ is a back edge.\n\n\n22.3-7\n\n\n\n\nRewrite the procedure $\\text{DFS}$, using a stack to eliminate recursion.\n\n\n\n\nSee the algorithm $\\text{DFS-STACK}(G)$. Note that by a similar justification to 22.2-3, we may remove line 8 from the original $\\text{DFS-VISIT}$ algorithm without changing the final result of the program, that is just working with the colors white and gray.\n\n\n22.3-8\n\n\n\n\nGive a counterexample to the conjecture that if a directed graph $G$ contains a path from $u$ to $v$, and if $u.d < v.d$ in a depth-first search of $G$, then $v$ is a descendant of $u$ in the depth-first forest produced.\n\n\n\n\nLet us consider the example graph depth-first search below.\n\n\n\\begin{array}{c|cc}\n  & d & f \\\\\n\\hline\nw & 1 & 6 \\\\\nu & 2 & 3 \\\\\nv & 4 & 5\n\\end{array}\n\n\n\n\nClearly, there is a path from $u$ to $v$ in $G$. The bold edges are in the depth-first forest produced. We can see that $u.d < v.d$ in the depth-first search but $v$ is not a descendant of $u$ in the forest.\n\n\n22.3-9\n\n\n\n\nGive a counterexample to the conjecture that if a directed graph $G$ contains a path from $u$ to $v$, then any depth-first search must result in $v.d \\le u.f$.\n\n\n\n\nLet us consider the example graph depth-first search below.\n\n\n\\begin{array}{c|cc}\n  & d & f \\\\\n\\hline\nw & 1 & 6 \\\\\nu & 2 & 3 \\\\\nv & 4 & 5\n\\end{array}\n\n\n\n\nClearly, there is a path from $u$ to $v$ in $G$. The bold edges are in the depth-first forest produced by search. However, $v.d > u.f$ and the conjecture is false.\n\n\n22.3-10\n\n\n\n\nModify the pseudocode for depth-first search so that it prints out every edge in the directed graph $G$, together with its type. Show what modifications, if any, you need to make if $G$ is undirected.\n\n\n\n\nWe need only update $\\text{DFS-VISIT}$. If $G$ is undirected we don't need to make any modifications. We simply note that lines 11 through 16 will never be executed.\n\n\nDFS\n-\nVISIT\n-\nPRINT\n(\nG\n,\n \nu\n)\n\n  \ntime\n \n=\n \ntime\n \n+\n \n1\n\n  \nu\n.\nd\n \n=\n \ntime\n\n  \nu\n.\ncolor\n \n=\n \nGRAY\n\n  \nfor\n \neach\n \nv\n \nin\n \nG\n.\nAdj\n[\nu\n]\n\n      \nif\n \nv\n.\ncolor\n \n==\n \nwhite\n\n          \nprint\n \n\"(u,v) is a Tree edge.\"\n\n          \nv\n.\nPI\n \n=\n \nu\n\n          \nDFS\n-\nVISIT\n-\nPRINT\n(\nG\n,\n \nv\n)\n\n      \nelse\n \nif\n \nv\n.\ncolor\n \n==\n \ngray\n\n          \nprint\n \n\"(u, v) is a Back edge.\"\n\n      \nelse\n\n          \nif\n \nv\n.\nd\n \n>\n \nu\n.\nd\n\n              \nprint\n \n\"(u, v) is a Forward edge.\"\n\n          \nelse\n \nprint\n \n\"(u, v) is a Cross edge.\"\n\n\n\n\n\n22.3-11\n\n\n\n\nExplain how a vertex $u$ of a directed graph can end up in a depth-first tree containing only $u$, even though $u$ has both incoming and outgoing edges in $G$.\n\n\n\n\nLet us consider the example graph and depth-first search below.\n\n\n\\begin{array}{c|cc}\n  & d & f \\\\\n\\hline\nw & 1 & 2 \\\\\nu & 3 & 4 \\\\\nv & 5 & 6\n\\end{array}\n\n\n\n\nCleary $u$ has both incoming and outgoing edges in $G$ but a depth-first search of $G$ produced a depth-first forest where $u$ is in a tree by itself.\n\n\n22.3-12\n\n\n\n\nShow that we can use a depth-first search of an undirected graph $G$ to identify the connected components of $G$, and that the depth-first forest contains as many trees as $G$ has connected components. More precisely, show how to modify depth-first search so that it assigns to each vertex $v$ an integer label $v.cc$ between $1$ and $k$, where $k$ is the number of connected components of $G$, such that $u.cc = v.cc$ if and only if $u$ and $v$ are in the same connected component.\n\n\n\n\nThe following pseudocode modifies the $\\text{DFS}$ and $\\text{DFS-VISIT}$ procedures to assign values to the $cc$ attributes of vertices.\n\n\nDFS\n(\nG\n)\n\n    \nfor\n \neach\n \nvertex\n \nu\n \n\u2208\n \nG\n.\nV\n\n        \nu\n.\ncolor\n \n=\n \nWHITE\n\n        \nu\n.\nPI\n \n=\n \nNIL\n\n    \ntime\n \n=\n \n0\n\n    \ncounter\n \n=\n \n0\n\n    \nfor\n \neach\n \nvertex\n \nu\n \n\u2208\n \nG\n.\nV\n\n        \nif\n \nu\n.\ncolor\n \n==\n \nWHITE\n\n            \ncounter\n \n=\n \ncounter\n \n+\n \n1\n\n            \nDFS\n-\nVISIT\n(\nG\n,\n \nu\n,\n \ncounter\n)\n\n\n\n\n\nDFS\n-\nVISIT\n(\nG\n,\n \nu\n,\n \ncounter\n)\n\n    \nu\n.\ncc\n \n=\n \ncounter\n      \n// label the vertex\n\n    \ntime\n \n=\n \ntime\n \n+\n \n1\n\n    \nu\n.\nd\n \n=\n \ntime\n\n    \nu\n.\ncolor\n \n=\n \nGRAY\n\n    \nfor\n \neach\n \nv\n \n\u2208\n \nG\n.\nAdj\n[\nu\n]\n\n        \nif\n \nv\n.\ncolor\n \n==\n \nWHITE\n\n            \nv\n.\nPI\n \n=\n \nu\n\n            \nDFS\n-\nVISIT\n(\nG\n,\n \nv\n,\n \ncounter\n)\n\n    \nu\n.\ncolor\n \n=\n \nBLACK\n\n    \ntime\n \n=\n \ntime\n \n+\n \n1\n\n    \nu\n.\nf\n \n=\n \ntime\n\n\n\n\n\nThis $\\text{DFS}$ increments a counter each time $\\text{DFS-VISIT}$ is called to grow a new tree in the $\\text{DFS}$ forest. Every vertex visited (and added to the tree) by $\\text{DFS-VISIT}$ is labeled with that same counter value. Thus $u.vv = v.cc$ if and only if $u$ and $v$ are visited in the same call to $\\text{DFS-VISIT}$ from $\\text{DFS}$, and the final value of the counter is the number of calls that were made to $\\text{DFS-VISIT}$ by $\\text{DFS}$. Also, since every vertex is visited eventually, every vertex is labeled.\n\n\nThus all we need to show is that the vertices visited by each call to $\\text{DFS-VISIT}$ from $\\text{DFS}$ are exactly the vertices in one connected component of $G$.\n\n\n\n\n\n\nAll vertices in a connected component are visited by one call to $\\text{DFS-VISIT}$ from $\\text{DFS}$:\n\n\nLet $u$ be the first vertex in component $C$ visited by $\\text{DFS-VISIT}$. Since a vertex becomes non-white only when it is visited, all vertices in $C$ are white when $\\text{DFS-VISIT}$ is called for $u$. Thus, by the white-path theorem, all vertices in $C$ become descendants of $u$ in the forest, which means that all vertices in $C$ are visited (by recursive calls to $\\text{DFS-VISIT}$) before $\\text{DFS-VISIT}$ returns to $\\text{DFS}$.\n\n\n\n\n\n\nAll vertices visited by one call to $\\text{DFS-VISIT}$ from $\\text{DFS}$ are in the same connected component:\n\n\nIf two vertices are visited in the same call to $\\text{DFS-VISIT}$ from $\\text{DFS}$, they are in the same connected component, because vertices are visited only by following paths in $G$ (by following edges found in adjacency lists, starting from some vertex).\n\n\n\n\n\n\n22.3-13 $\\star$\n\n\n\n\nA directed graph $G = (V, E)$ is \nsingly connected\n if $u \\leadsto v$ implies that $G$ contains at most one simple path from $u$ to $v$ for all vertices $u, v \\in V$. Give an efficient algorithm to determine whether or not a directed graph is singly connected.\n\n\n\n\nThis can be done in time $O(|V||E|)$. To do this, first perform a topological sort of the vertices. Then, we will contain for each vertex a list of it's ancestors with $in\\text-degree$ $0$. We compute these lists for each vertex in the order starting from the earlier ones topologically. \n\n\nThen, if we ever have a vertex that has the same degree $0$ vertex appearing in the lists of two of its immediate parents, we know that the graph is not singly connected. however, if at each step we have that at each step all of the parents have disjoint sets of degree $0$ vertices as ancestors, the graph is singly connected. Since, for each vertex, the amount of time required is bounded by the number of vertices times the $in\\text-degree$ of the particular vertex, the total runtime is bounded by $O(|V||E|)$.",
            "title": "22.3 Depth-first search"
        },
        {
            "location": "/Chap22/22.3/#223-1",
            "text": "Make a 3-by-3 chart with row and column labels $\\text{WHITE}$, $\\text{GRAY}$, and $\\text{BLACK}$. In each cell $(i, j)$, indicate whether, at any point during a depth-first search of a directed graph, there can be an edge from a vertex of color $i$ to a vertex of color $j$. For each possible edge, indicate what edge types it can be. Make a second such chart for depth-first search of an undirected graph.     Directed:  \\begin{array}{c|ccc}\nfrom\\backslash to & \\text{BLACK}                & \\text{GRAY}                & \\text{WHITE} \\\\\n\\hline\n\\text{BLACK}      & \\text{Allkinds}             & \\text{Back, Cross}         & \\text{Back, Cross} \\\\\n\\text{GRAY}       & \\text{Tree, Forward, Cross} & \\text{Tree, Forward, Back} & \\text{Back, Cross} \\\\\n\\text{WHITE}      & \\text{Cross, Tree, Forward} & \\text{Cross, Back}         & \\text{Allkinds}\n\\end{array}    Undirected:  \\begin{array}{c|ccc}\nfrom\\backslash to & \\text{BLACK}    & \\text{GRAY}                & \\text{WHITE} \\\\\n\\hline\n\\text{BLACK}      & \\text{Allkinds} & \\text{Allkinds}            & \\text{Allkinds} \\\\\n\\text{GRAY}       & -               & \\text{Tree, Forward, Back} & \\text{Allkinds} \\\\\n\\text{WHITE}      & -               & -                          & \\text{Allkinds}\n\\end{array}",
            "title": "22.3-1"
        },
        {
            "location": "/Chap22/22.3/#223-2",
            "text": "Show how depth-first search works on the graph of Figure 22.6. Assume that the  for  loop of lines 5\u20137 of the $\\text{DFS}$ procedure considers the vertices in alphabetical order, and assume that each adjacency list is ordered alphabetically. Show the discovery and finishing times for each vertex, and show the classification of each edge.   The following table gives the discovery time and finish time for each vetex in the graph.  \\begin{array}{ccc}\n\\text{Vertex} & \\text{Discovered} & \\text{Finished} \\\\\n\\hline\nq &  1 & 16 \\\\\nr & 17 & 20 \\\\\ns &  2 &  7 \\\\\nt &  8 & 15 \\\\\nu & 18 & 19 \\\\\nv &  3 &  6 \\\\\nw &  4 &  5 \\\\\nx &  9 & 12 \\\\\ny & 13 & 14 \\\\\nz & 10 & 11\n\\end{array}   Tree edges:  $(q, s)$, $(s, v)$, $(v, w)$, $(q, t)$, $(t, x)$, $(x, z)$, $(t, y)$, $(r, u)$.  Back edges:  $(w, s)$, $(z, x)$, $(y, q)$.   Forward edges:  $(q, w)$.  Cross edges:  $(r, y)$, $(u, y)$.",
            "title": "22.3-2"
        },
        {
            "location": "/Chap22/22.3/#223-3",
            "text": "Show the parenthesis structure of the depth-first search of Figure 22.4.   As pointed out in figure 22.5, the parentheses structure of the $\\text{DFS}$ of figure 22.4 is $(((())()))(()())$.",
            "title": "22.3-3"
        },
        {
            "location": "/Chap22/22.3/#223-4",
            "text": "Show that using a single bit to store each vertex color suffices by arguing that the $\\text{DFS}$ procedure would produce the same result if line 3 of $\\text{DFS-VISIT}$ was removed.   $\\textit{Note:}$ This exercise changed in the third printing. This solution reflects the change.  The $\\text{DFS}$ and $\\text{DFS-VISIT}$ procedures care only whether a vertex is white or not. By coloring vertex $u$ gray when it is first visited, in line 3 of $\\text{DFS-VISIT}$, we ensure that $u$ will not be visited again. Once we have changed a vertex's color to non-white, we do not need to change it again.",
            "title": "22.3-4"
        },
        {
            "location": "/Chap22/22.3/#223-5",
            "text": "Show that edge $(u, v)$ is  a.  a tree edge or forward edge if and only if $u.d < v.d < v.f < u.f$,  b.  a back edge if and only if $v.d \\le u.d < u.f \\le v.f$, and  c.  a cross edge if and only if $v.d < v.f < u.d < u.f$.   a.  Edge $(u, v)$ is a tree edge or forward edge if and only if $v$ is a descendant of $u$ in the depth-first forest. (If $(u, v)$ is a back edge, then $u$ is a descendant of $v$, and if $(u, v)$ is a cross edge, then neither of $u$ or $v$ is a descendant of the other.) By Corollary 22.8, therefore, $(u, v)$ is a tree edge or forward edge if and only if $u.d < v.d < v.f < u.f$.  b.  First, suppose that $(u, v)$ is a back edge. A self-loop is by definition a back edge. If $(u, v)$ is a self-loop, then clearly $v.d = u.d < u.f = v.f$. If $(u, v)$ is not a self-loop, then $u$ is a descendant of $v$ in the depth-first forest, and by Corollary 22.8, $v.d < u.d < u.f < v.f$.  Now, suppose that $v.d \\le u.d < u.f \\le v.f$. If $u$ and $v$ are the same vertex, then $v.d = u.d < u.f = v.f$, and $(u, v)$ is a self-loop and hence a back edge. If $u$ and $v$ are distinct, then $v.d < u.d < u.f < v.f$. By the parenthesis theorem, interval $[u.d, u.f]$\u008d is contained entirely within the interval $[v.d, v.f]$\u008d, and $u$ is a descendant of $v$ in a depth-first tree. Thus, $(u, v)$ is a back edge.  c.  First, suppose that $(u, v)$ is a cross edge. Since neither $u$ nor $v$ is an ancestor of the other, the parenthesis theorem says that the intervals $[u.d, u.f]$ and $[v.d, v.f]$ are entirely disjoint. Thus, we must have either $u.d < u.f < v.d < v.f$ or $v.d < v.f < u.d < u.f$. We claim that we cannot have $u.d < v.d$ if $(u, v)$ is a cross edge. Why? If $u.d < v.d$, then $v$ is white at time $u.d$. By the white-path theorem, $v$ is a descendant of $u$, which contradicts $(u, v)$ being a cross edge. Thus, we must have $v.d < v.f < u.d < u.f$.  Now suppose that $v.d < v.f < u.d < u.f$. By the parenthesis theorem, neither $u$ nor $v$ is a descendant of the other, which means that $(u, v)$ must be a cross edge.",
            "title": "22.3-5"
        },
        {
            "location": "/Chap22/22.3/#223-6",
            "text": "Show that in an undirected graph, classifying an edge $(u, v)$ as a tree edge or a back edge according to whether $(u, v)$ or $(v, u)$ is encountered first during the depth-first search is equivalent to classifying it according to the ordering of the four types in the classification scheme.   By Theorem 22.10, every edge of an undirected graph is either a tree edge or a back edge. First suppose that $v$ is first discovered by exploring edge $(u, v)$. Then by definition, $(u, v)$ is a tree edge. Moreover, $(u, v)$ must have been discovered before $(v, u)$ because once $(v, u)$ is explored, $v$ is necessarily discovered. Now suppose that $v$ isn't first discovered by $(u, v)$. Then it must be discovered by $(r, v)$ for some $r\\ne u$. If $u$ hasn't yet been discovered then if $(u, v)$ is explored first, it must be a back edge since $v$ is an ancestor of $u$. If $u$ has been discovered then $u$ is an ancestor of $v$, so $(v, u)$ is a back edge.",
            "title": "22.3-6"
        },
        {
            "location": "/Chap22/22.3/#223-7",
            "text": "Rewrite the procedure $\\text{DFS}$, using a stack to eliminate recursion.   See the algorithm $\\text{DFS-STACK}(G)$. Note that by a similar justification to 22.2-3, we may remove line 8 from the original $\\text{DFS-VISIT}$ algorithm without changing the final result of the program, that is just working with the colors white and gray.",
            "title": "22.3-7"
        },
        {
            "location": "/Chap22/22.3/#223-8",
            "text": "Give a counterexample to the conjecture that if a directed graph $G$ contains a path from $u$ to $v$, and if $u.d < v.d$ in a depth-first search of $G$, then $v$ is a descendant of $u$ in the depth-first forest produced.   Let us consider the example graph depth-first search below.  \\begin{array}{c|cc}\n  & d & f \\\\\n\\hline\nw & 1 & 6 \\\\\nu & 2 & 3 \\\\\nv & 4 & 5\n\\end{array}   Clearly, there is a path from $u$ to $v$ in $G$. The bold edges are in the depth-first forest produced. We can see that $u.d < v.d$ in the depth-first search but $v$ is not a descendant of $u$ in the forest.",
            "title": "22.3-8"
        },
        {
            "location": "/Chap22/22.3/#223-9",
            "text": "Give a counterexample to the conjecture that if a directed graph $G$ contains a path from $u$ to $v$, then any depth-first search must result in $v.d \\le u.f$.   Let us consider the example graph depth-first search below.  \\begin{array}{c|cc}\n  & d & f \\\\\n\\hline\nw & 1 & 6 \\\\\nu & 2 & 3 \\\\\nv & 4 & 5\n\\end{array}   Clearly, there is a path from $u$ to $v$ in $G$. The bold edges are in the depth-first forest produced by search. However, $v.d > u.f$ and the conjecture is false.",
            "title": "22.3-9"
        },
        {
            "location": "/Chap22/22.3/#223-10",
            "text": "Modify the pseudocode for depth-first search so that it prints out every edge in the directed graph $G$, together with its type. Show what modifications, if any, you need to make if $G$ is undirected.   We need only update $\\text{DFS-VISIT}$. If $G$ is undirected we don't need to make any modifications. We simply note that lines 11 through 16 will never be executed.  DFS - VISIT - PRINT ( G ,   u ) \n   time   =   time   +   1 \n   u . d   =   time \n   u . color   =   GRAY \n   for   each   v   in   G . Adj [ u ] \n       if   v . color   ==   white \n           print   \"(u,v) is a Tree edge.\" \n           v . PI   =   u \n           DFS - VISIT - PRINT ( G ,   v ) \n       else   if   v . color   ==   gray \n           print   \"(u, v) is a Back edge.\" \n       else \n           if   v . d   >   u . d \n               print   \"(u, v) is a Forward edge.\" \n           else   print   \"(u, v) is a Cross edge.\"",
            "title": "22.3-10"
        },
        {
            "location": "/Chap22/22.3/#223-11",
            "text": "Explain how a vertex $u$ of a directed graph can end up in a depth-first tree containing only $u$, even though $u$ has both incoming and outgoing edges in $G$.   Let us consider the example graph and depth-first search below.  \\begin{array}{c|cc}\n  & d & f \\\\\n\\hline\nw & 1 & 2 \\\\\nu & 3 & 4 \\\\\nv & 5 & 6\n\\end{array}   Cleary $u$ has both incoming and outgoing edges in $G$ but a depth-first search of $G$ produced a depth-first forest where $u$ is in a tree by itself.",
            "title": "22.3-11"
        },
        {
            "location": "/Chap22/22.3/#223-12",
            "text": "Show that we can use a depth-first search of an undirected graph $G$ to identify the connected components of $G$, and that the depth-first forest contains as many trees as $G$ has connected components. More precisely, show how to modify depth-first search so that it assigns to each vertex $v$ an integer label $v.cc$ between $1$ and $k$, where $k$ is the number of connected components of $G$, such that $u.cc = v.cc$ if and only if $u$ and $v$ are in the same connected component.   The following pseudocode modifies the $\\text{DFS}$ and $\\text{DFS-VISIT}$ procedures to assign values to the $cc$ attributes of vertices.  DFS ( G ) \n     for   each   vertex   u   \u2208   G . V \n         u . color   =   WHITE \n         u . PI   =   NIL \n     time   =   0 \n     counter   =   0 \n     for   each   vertex   u   \u2208   G . V \n         if   u . color   ==   WHITE \n             counter   =   counter   +   1 \n             DFS - VISIT ( G ,   u ,   counter )   DFS - VISIT ( G ,   u ,   counter ) \n     u . cc   =   counter        // label the vertex \n     time   =   time   +   1 \n     u . d   =   time \n     u . color   =   GRAY \n     for   each   v   \u2208   G . Adj [ u ] \n         if   v . color   ==   WHITE \n             v . PI   =   u \n             DFS - VISIT ( G ,   v ,   counter ) \n     u . color   =   BLACK \n     time   =   time   +   1 \n     u . f   =   time   This $\\text{DFS}$ increments a counter each time $\\text{DFS-VISIT}$ is called to grow a new tree in the $\\text{DFS}$ forest. Every vertex visited (and added to the tree) by $\\text{DFS-VISIT}$ is labeled with that same counter value. Thus $u.vv = v.cc$ if and only if $u$ and $v$ are visited in the same call to $\\text{DFS-VISIT}$ from $\\text{DFS}$, and the final value of the counter is the number of calls that were made to $\\text{DFS-VISIT}$ by $\\text{DFS}$. Also, since every vertex is visited eventually, every vertex is labeled.  Thus all we need to show is that the vertices visited by each call to $\\text{DFS-VISIT}$ from $\\text{DFS}$ are exactly the vertices in one connected component of $G$.    All vertices in a connected component are visited by one call to $\\text{DFS-VISIT}$ from $\\text{DFS}$:  Let $u$ be the first vertex in component $C$ visited by $\\text{DFS-VISIT}$. Since a vertex becomes non-white only when it is visited, all vertices in $C$ are white when $\\text{DFS-VISIT}$ is called for $u$. Thus, by the white-path theorem, all vertices in $C$ become descendants of $u$ in the forest, which means that all vertices in $C$ are visited (by recursive calls to $\\text{DFS-VISIT}$) before $\\text{DFS-VISIT}$ returns to $\\text{DFS}$.    All vertices visited by one call to $\\text{DFS-VISIT}$ from $\\text{DFS}$ are in the same connected component:  If two vertices are visited in the same call to $\\text{DFS-VISIT}$ from $\\text{DFS}$, they are in the same connected component, because vertices are visited only by following paths in $G$ (by following edges found in adjacency lists, starting from some vertex).",
            "title": "22.3-12"
        },
        {
            "location": "/Chap22/22.3/#223-13-star",
            "text": "A directed graph $G = (V, E)$ is  singly connected  if $u \\leadsto v$ implies that $G$ contains at most one simple path from $u$ to $v$ for all vertices $u, v \\in V$. Give an efficient algorithm to determine whether or not a directed graph is singly connected.   This can be done in time $O(|V||E|)$. To do this, first perform a topological sort of the vertices. Then, we will contain for each vertex a list of it's ancestors with $in\\text-degree$ $0$. We compute these lists for each vertex in the order starting from the earlier ones topologically.   Then, if we ever have a vertex that has the same degree $0$ vertex appearing in the lists of two of its immediate parents, we know that the graph is not singly connected. however, if at each step we have that at each step all of the parents have disjoint sets of degree $0$ vertices as ancestors, the graph is singly connected. Since, for each vertex, the amount of time required is bounded by the number of vertices times the $in\\text-degree$ of the particular vertex, the total runtime is bounded by $O(|V||E|)$.",
            "title": "22.3-13 $\\star$"
        },
        {
            "location": "/Chap22/22.4/",
            "text": "22.4-1\n\n\n\n\nShow the ordering of vertices produced by $\\text{TOPOLOGICAL-SORT}$ when it is run on the dag of Figure 22.8, under the assumption of Exercise 22.3-2.\n\n\n\n\nOur start and finish times from performing the $\\text{DFS}$ are\n\n\n\\begin{array}{ccc}\n\\text{label} & d & f \\\\\n\\hline\nm & 1  & 20 \\\\\nq & 2  & 5  \\\\\nt & 3  & 4  \\\\\nr & 6  & 19 \\\\\nu & 7  & 8  \\\\\ny & 9  & 18 \\\\\nv & 10 & 17 \\\\\nw & 11 & 14 \\\\\nz & 12 & 13 \\\\\nx & 15 & 16 \\\\\nn & 21 & 26 \\\\\no & 22 & 25 \\\\\ns & 24 & 24 \\\\\np & 27 & 28\n\\end{array}\n\n\nAnd so, by reading off the entries in decreasing order of finish time, we have the sequence $p, n, o, s, m, r, y, v, x, w, z, u, q, t$.\n\n\n22.4-2\n\n\n\n\nGive a linear-time algorithm that takes as input a directed acyclic graph $G = (V, E)$ and two vertices $s$ and $t$, and returns the number of simple paths from $s$ to $t$ in $G$. For example, the directed acyclic graph of Figure 22.8 contains exactly four simple paths from vertex $p$ to vertex $v: pov$, $poryv$, $posryv$, and $psryv$. (Your algorithm needs only to count the simple paths, not list them.)\n\n\n\n\nThe algorithm works as follows. The attribute $u.paths$ of node $u$ tells the number of simple paths from $u$ to $v$, where we assume that $v$ is fixed throughout the entire process. To count the number of paths, we can sum the number of paths which leave from each of $u$'s neighbors. Since we have no cycles, we will never risk adding a partially completed number of paths. Moreover, we can never consider the same edge twice among the recursive calls. Therefore, the total number of executions of the for-loop over all recursive calls is $O(V + E)$. Calling $\\text{SIMPLE-PATHS}(s, t)$ yields the desired result.\n\n\nSIMPLE\n-\nPATHS\n(\nu\n,\n \nv\n)\n\n    \nif\n \nu\n \n==\n \nv\n\n        \nreturn\n \n1\n\n    \nelse\n \nif\n \nu\n.\npaths\n \n!=\n \nNIL\n\n        \nreturn\n \nu\n.\npaths\n\n    \nelse\n\n        \nfor\n \neach\n \nw\n \nin\n \nAdj\n[\nu\n]\n\n            \nu\n.\npahts\n \n=\n \nu\n.\npaths\n \n+\n \nSIMPLE\n-\nPATHS\n(\nw\n,\n \nv\n)\n\n        \nreturn\n \nu\n.\npaths\n\n\n\n\n\n22.4-3\n\n\n\n\nGive an algorithm that determines whether or not a given undirected graph $G = (V, E)$ contains a cycle. Your algorithm should run in $O(V)$ time, independent of $|E|$.\n\n\n\n\nAn undirected graph is acyclic (i.e., a forest) if and only if a $\\text{DFS}$ yields no back edges.\n\n\n\n\nIf there's a back edge, there's a cycle.\n\n\nIf there's no back edge, then by Theorem 22.10, there are only tree edges. Hence, the graph is acyclic.\n\n\n\n\nThus, we can run $\\text{DFS}$: if we find a back edge, there's a cycle.\n\n\n\n\nTime: $O(V)$. (Not $O(V + E)$!)\n\n\n\n\nIf we ever see $|V|$ distinct edges, we must have seen a back edge because (by Theorem B.2 on p. 1174) in an acyclic (undirected) forest, $|E| \\le |V| - 1$.\n\n\n22.4-4\n\n\n\n\nProve or disprove: If a directed graph $G$ contains cycles, then $\\text{TOPOLOGICAL-SORT}(G)$ produces a vertex ordering that minimizes the number of ''bad'' edges that are inconsistent with the ordering produced.\n\n\n\n\nThis is not true. Consider the graph $G$ consisting of vertices $a, b, c$, and $d$. Let the edges be $(a, b)$, $(b, c)$, $(a, d)$, $(d, c)$, and $(c, a)$. Suppose that we start the $\\text{DFS}$ of $\\text{TOPOLOGICAL-SORT}$ at vertex $c$. Assuming that $b$ appears before $d$ in the adjacency list of $a$, the order, from latest to earliest, of finish times is $c, a, d, b$. \n\n\nThe ''bad'' edges in this case are $(b, c)$ and $(d, c)$. However, if we had instead ordered them by $a, b, d, c$ then the only bad edges would be $(c, a)$. Thus $\\text{TOPOLOGICAL-SORT}$ doesn't always minimizes the number of ''bad'' edges\n\n\n22.4-5\n\n\n\n\nAnother way to perform topological sorting on a directed acyclic graph $G = (V, E)$ is to repeatedly find a vertex of $in\\text-degree$ $0$, output it, and remove it and all of its outgoing edges from the graph. Explain how to implement this idea so that it runs in time $O(V + E)$. What happens to this algorithm if $G$ has cycles?\n\n\n\n\nTOPOLOGICAL\n-\nSORT\n(\nG\n)\n\n    \n// Initialize in-degree, \u0398(V) time.\n\n    \nfor\n \neach\n \nvertex\n \nu\n \n\u2208\n \nG\n.\nV\n\n        \nu\n.\nin\n-\ndegree\n \n=\n \n0\n\n    \n// Compute in-degree, \u0398(V + E) time.\n\n    \nfor\n \neach\n \nvertex\n \nu\n \n\u2208\n \nG\n.\nV\n\n        \nfor\n \neach\n \nv\n \n\u2208\n \nG\n.\nAdj\n[\nu\n]\n\n            \nv\n.\nin\n-\ndegree\n \n=\n \nv\n.\nin\n-\ndegree\n \n+\n \n1\n\n    \n// Initialize Queue, \u0398(V) time.\n\n    \nQ\n \n=\n \n\u2205\n\n    \nfor\n \neach\n \nvertex\n \nu\n \n\u2208\n \nG\n.\nV\n\n        \nif\n \nu\n.\nin\n-\ndegree\n \n==\n \n0\n\n            \nENQUEUE\n(\nQ\n,\n \nu\n)\n\n    \n// while loop takes O(V + E) time.\n\n    \nwhile\n \nQ\n \n!=\n \n\u2205\n\n        \nu\n \n=\n \nDEQUEUE\n(\nQ\n)\n\n        \noutput\n \nu\n\n        \n// for loop executes O(E) times total.\n\n        \nfor\n \neach\n \nv\n \n\u2208\n \nG\n.\nAdj\n[\nu\n]\n\n            \nv\n.\nin\n-\ndegree\n \n=\n \nv\n.\nin\n-\ndegree\n \n-\n \n1\n\n            \nif\n \nv\n.\nin\n-\ndegree\n \n==\n \n0\n\n                \nENQUEUE\n(\nQ\n,\n \nv\n)\n\n    \n// Check for cycles, O(V) time.\n\n    \nfor\n \neach\n \nvertex\n \nu\n \n\u2208\n \nG\n.\nV\n\n        \nif\n \nu\n.\nin\n-\ndegree\n \n!=\n \n0\n\n            \nreport\n \nthat\n \nthere\n'\ns\n \na\n \ncycle\n\n    \n// Another way to check for cycles would be to count the vertices \n\n    \n// that are output and report a cycle if that number is < |V|.\n\n\n\n\n\nTo find and output vertices of $in\\text-degree$ $0$, we first compute all vertices' $in\\text-degree$s by making a pass through all the edges (by scanning the adjacency lists of all the vertices) and incrementing the $in\\text-degree$ of each vertex an edge enters.\n\n\n\n\nComputing all $in\\text-degree$s takes $\\Theta(V + E)$ time ($|V|$ adjacency lists accessed, $|E|$ edges total found in those lists, $\\Theta(1)$ work for each edge).\n\n\n\n\nWe keep the vertices with $in\\text-degree$ $0$ in a FIFO queue, so that they can be enqueued and dequeued in $O(1)$ time. (The order in which vertices in the queue are processed doesn't matter, so any kind of FIFO queue works.)\n\n\n\n\nInitializing the queue takes one pass over the vertices doing $\\Theta(1)$ work, for total time $\\Theta(V)$.\n\n\n\n\nAs we process each vertex from the queue, we effectively remove its outgoing edges from the graph by decrementing the $in\\text-degree$ of each vertex one of those edges enters, and we enqueue any vertex whose $in\\text-degree$ goes to $0$. We do not need to actually remove the edges from the adjacency list, because that adjacency list will never be processed again by the algorithm: Each vertex is enqueued/dequeued at most once because it is enqueued only if it starts out with $in\\text-degree$ $0$ or if its indegree becomes $0$ after being decremented (and never incremented) some number of times.\n\n\n\n\nThe processing of a vertex from the queue happens $O(V)$ times because no vertex can be enqueued more than once. The per-vertex work (dequeue and output) takes $O(1)$ time, for a total of $O(V)$ time.\n\n\nBecause the adjacency list of each vertex is scanned only when the vertex is dequeued, the adjacency list of each vertex is scanned at most once. Since the sum of the lengths of all the adjacency lists is $\\Theta(E)$, at most $O(E)$ time is spent in total scanning adjacency lists. For each edge in an adjacency list, $\\Theta(1)$ work is done, for a total of $O(E)$ time.\n\n\n\n\nThus the total time taken by the algorithm is $O(V + E)$.\n\n\nThe algorithm outputs vertices in the right order ($u$ before $v$ for every edge $(u, v)$) because vwill not be output until its $in\\text-degree$ becomes $0$, which happens only when every edge $(u, v)$ leading into $v$ has been ''removed'' due to the processing (including output) of $u$.\n\n\nIf there are no cycles, all vertices are output.\n\n\n\n\nProof: Assume that some vertex $v_0$ is not output. Vertex $v_0$ cannot start out with $in\\text-degree$ $0$ (or it would be output), so there are edges into $v_0$. Since $v_0$'s $in\\text-degree$ never becomes $0$, at least one edge $(v_1, v_0)$ is never removed, which means that at least one other vertex $v_1$ was not output. Similarly, $v_1$ not output means that some vertex $v_2$ such that $(v_2, v_1) \\in E$ was not output, and so on. Since the number of vertices is finite, this path ($\\cdots \\to v_2 \\to v_1 \\to v_0$) is finite, so we must have $v_i = v_j$ for some $i$ and $j$ in this sequence, which means there is a cycle.\n\n\n\n\nIf there are cycles, not all vertices will be output, because some $in\\text-degree$s never become $0$.\n\n\n\n\nProof: Assume that a vertex in a cycle is output (its $in\\text-degree$ becomes $0$). Let $v$ be the first vertex in its cycle to be output, and let $u$ be $v$'s predecessor in the cycle. In order for $v$'s $in\\text-degree$ to become $0$, the edge $(u, v)$ must have been ''removed,'' which happens only when $u$ is processed. But this cannot have happened, because $v$ is the first vertex in its cycle to be processed. Thus no vertices in cycles are output.",
            "title": "22.4 Topological sort"
        },
        {
            "location": "/Chap22/22.4/#224-1",
            "text": "Show the ordering of vertices produced by $\\text{TOPOLOGICAL-SORT}$ when it is run on the dag of Figure 22.8, under the assumption of Exercise 22.3-2.   Our start and finish times from performing the $\\text{DFS}$ are  \\begin{array}{ccc}\n\\text{label} & d & f \\\\\n\\hline\nm & 1  & 20 \\\\\nq & 2  & 5  \\\\\nt & 3  & 4  \\\\\nr & 6  & 19 \\\\\nu & 7  & 8  \\\\\ny & 9  & 18 \\\\\nv & 10 & 17 \\\\\nw & 11 & 14 \\\\\nz & 12 & 13 \\\\\nx & 15 & 16 \\\\\nn & 21 & 26 \\\\\no & 22 & 25 \\\\\ns & 24 & 24 \\\\\np & 27 & 28\n\\end{array}  And so, by reading off the entries in decreasing order of finish time, we have the sequence $p, n, o, s, m, r, y, v, x, w, z, u, q, t$.",
            "title": "22.4-1"
        },
        {
            "location": "/Chap22/22.4/#224-2",
            "text": "Give a linear-time algorithm that takes as input a directed acyclic graph $G = (V, E)$ and two vertices $s$ and $t$, and returns the number of simple paths from $s$ to $t$ in $G$. For example, the directed acyclic graph of Figure 22.8 contains exactly four simple paths from vertex $p$ to vertex $v: pov$, $poryv$, $posryv$, and $psryv$. (Your algorithm needs only to count the simple paths, not list them.)   The algorithm works as follows. The attribute $u.paths$ of node $u$ tells the number of simple paths from $u$ to $v$, where we assume that $v$ is fixed throughout the entire process. To count the number of paths, we can sum the number of paths which leave from each of $u$'s neighbors. Since we have no cycles, we will never risk adding a partially completed number of paths. Moreover, we can never consider the same edge twice among the recursive calls. Therefore, the total number of executions of the for-loop over all recursive calls is $O(V + E)$. Calling $\\text{SIMPLE-PATHS}(s, t)$ yields the desired result.  SIMPLE - PATHS ( u ,   v ) \n     if   u   ==   v \n         return   1 \n     else   if   u . paths   !=   NIL \n         return   u . paths \n     else \n         for   each   w   in   Adj [ u ] \n             u . pahts   =   u . paths   +   SIMPLE - PATHS ( w ,   v ) \n         return   u . paths",
            "title": "22.4-2"
        },
        {
            "location": "/Chap22/22.4/#224-3",
            "text": "Give an algorithm that determines whether or not a given undirected graph $G = (V, E)$ contains a cycle. Your algorithm should run in $O(V)$ time, independent of $|E|$.   An undirected graph is acyclic (i.e., a forest) if and only if a $\\text{DFS}$ yields no back edges.   If there's a back edge, there's a cycle.  If there's no back edge, then by Theorem 22.10, there are only tree edges. Hence, the graph is acyclic.   Thus, we can run $\\text{DFS}$: if we find a back edge, there's a cycle.   Time: $O(V)$. (Not $O(V + E)$!)   If we ever see $|V|$ distinct edges, we must have seen a back edge because (by Theorem B.2 on p. 1174) in an acyclic (undirected) forest, $|E| \\le |V| - 1$.",
            "title": "22.4-3"
        },
        {
            "location": "/Chap22/22.4/#224-4",
            "text": "Prove or disprove: If a directed graph $G$ contains cycles, then $\\text{TOPOLOGICAL-SORT}(G)$ produces a vertex ordering that minimizes the number of ''bad'' edges that are inconsistent with the ordering produced.   This is not true. Consider the graph $G$ consisting of vertices $a, b, c$, and $d$. Let the edges be $(a, b)$, $(b, c)$, $(a, d)$, $(d, c)$, and $(c, a)$. Suppose that we start the $\\text{DFS}$ of $\\text{TOPOLOGICAL-SORT}$ at vertex $c$. Assuming that $b$ appears before $d$ in the adjacency list of $a$, the order, from latest to earliest, of finish times is $c, a, d, b$.   The ''bad'' edges in this case are $(b, c)$ and $(d, c)$. However, if we had instead ordered them by $a, b, d, c$ then the only bad edges would be $(c, a)$. Thus $\\text{TOPOLOGICAL-SORT}$ doesn't always minimizes the number of ''bad'' edges",
            "title": "22.4-4"
        },
        {
            "location": "/Chap22/22.4/#224-5",
            "text": "Another way to perform topological sorting on a directed acyclic graph $G = (V, E)$ is to repeatedly find a vertex of $in\\text-degree$ $0$, output it, and remove it and all of its outgoing edges from the graph. Explain how to implement this idea so that it runs in time $O(V + E)$. What happens to this algorithm if $G$ has cycles?   TOPOLOGICAL - SORT ( G ) \n     // Initialize in-degree, \u0398(V) time. \n     for   each   vertex   u   \u2208   G . V \n         u . in - degree   =   0 \n     // Compute in-degree, \u0398(V + E) time. \n     for   each   vertex   u   \u2208   G . V \n         for   each   v   \u2208   G . Adj [ u ] \n             v . in - degree   =   v . in - degree   +   1 \n     // Initialize Queue, \u0398(V) time. \n     Q   =   \u2205 \n     for   each   vertex   u   \u2208   G . V \n         if   u . in - degree   ==   0 \n             ENQUEUE ( Q ,   u ) \n     // while loop takes O(V + E) time. \n     while   Q   !=   \u2205 \n         u   =   DEQUEUE ( Q ) \n         output   u \n         // for loop executes O(E) times total. \n         for   each   v   \u2208   G . Adj [ u ] \n             v . in - degree   =   v . in - degree   -   1 \n             if   v . in - degree   ==   0 \n                 ENQUEUE ( Q ,   v ) \n     // Check for cycles, O(V) time. \n     for   each   vertex   u   \u2208   G . V \n         if   u . in - degree   !=   0 \n             report   that   there ' s   a   cycle \n     // Another way to check for cycles would be to count the vertices  \n     // that are output and report a cycle if that number is < |V|.   To find and output vertices of $in\\text-degree$ $0$, we first compute all vertices' $in\\text-degree$s by making a pass through all the edges (by scanning the adjacency lists of all the vertices) and incrementing the $in\\text-degree$ of each vertex an edge enters.   Computing all $in\\text-degree$s takes $\\Theta(V + E)$ time ($|V|$ adjacency lists accessed, $|E|$ edges total found in those lists, $\\Theta(1)$ work for each edge).   We keep the vertices with $in\\text-degree$ $0$ in a FIFO queue, so that they can be enqueued and dequeued in $O(1)$ time. (The order in which vertices in the queue are processed doesn't matter, so any kind of FIFO queue works.)   Initializing the queue takes one pass over the vertices doing $\\Theta(1)$ work, for total time $\\Theta(V)$.   As we process each vertex from the queue, we effectively remove its outgoing edges from the graph by decrementing the $in\\text-degree$ of each vertex one of those edges enters, and we enqueue any vertex whose $in\\text-degree$ goes to $0$. We do not need to actually remove the edges from the adjacency list, because that adjacency list will never be processed again by the algorithm: Each vertex is enqueued/dequeued at most once because it is enqueued only if it starts out with $in\\text-degree$ $0$ or if its indegree becomes $0$ after being decremented (and never incremented) some number of times.   The processing of a vertex from the queue happens $O(V)$ times because no vertex can be enqueued more than once. The per-vertex work (dequeue and output) takes $O(1)$ time, for a total of $O(V)$ time.  Because the adjacency list of each vertex is scanned only when the vertex is dequeued, the adjacency list of each vertex is scanned at most once. Since the sum of the lengths of all the adjacency lists is $\\Theta(E)$, at most $O(E)$ time is spent in total scanning adjacency lists. For each edge in an adjacency list, $\\Theta(1)$ work is done, for a total of $O(E)$ time.   Thus the total time taken by the algorithm is $O(V + E)$.  The algorithm outputs vertices in the right order ($u$ before $v$ for every edge $(u, v)$) because vwill not be output until its $in\\text-degree$ becomes $0$, which happens only when every edge $(u, v)$ leading into $v$ has been ''removed'' due to the processing (including output) of $u$.  If there are no cycles, all vertices are output.   Proof: Assume that some vertex $v_0$ is not output. Vertex $v_0$ cannot start out with $in\\text-degree$ $0$ (or it would be output), so there are edges into $v_0$. Since $v_0$'s $in\\text-degree$ never becomes $0$, at least one edge $(v_1, v_0)$ is never removed, which means that at least one other vertex $v_1$ was not output. Similarly, $v_1$ not output means that some vertex $v_2$ such that $(v_2, v_1) \\in E$ was not output, and so on. Since the number of vertices is finite, this path ($\\cdots \\to v_2 \\to v_1 \\to v_0$) is finite, so we must have $v_i = v_j$ for some $i$ and $j$ in this sequence, which means there is a cycle.   If there are cycles, not all vertices will be output, because some $in\\text-degree$s never become $0$.   Proof: Assume that a vertex in a cycle is output (its $in\\text-degree$ becomes $0$). Let $v$ be the first vertex in its cycle to be output, and let $u$ be $v$'s predecessor in the cycle. In order for $v$'s $in\\text-degree$ to become $0$, the edge $(u, v)$ must have been ''removed,'' which happens only when $u$ is processed. But this cannot have happened, because $v$ is the first vertex in its cycle to be processed. Thus no vertices in cycles are output.",
            "title": "22.4-5"
        },
        {
            "location": "/Chap22/22.5/",
            "text": "22.5-1\n\n\n\n\nHow can the number of strongly connected components of a graph change if a new edge is added?\n\n\n\n\nIt can either stay the same or decrease. To see that it is possible to stay the same, just suppose you add some edge to a cycle. To see that it is possible to decrease, suppose that your original graph is on three vertices, and is just a path passing through all of them, and the edge added completes this path to a cycle. To see that it cannot increase, notice that adding an edge cannot remove any path that existed before. \n\n\nSo, if $u$ and $v$ are in the same connected component in the original graph, then there are a path from one to the other, in both directions. Adding an edge wont disturb these two paths, so we know that $u$ and $v$ will still be in the same $\\text{SCC}$ in the graph after adding the edge. Since no components can be split apart, this means that the number of them cannot increase since they form a partition of the set of vertices.\n\n\n22.5-2\n\n\n\n\nShow how the procedure $\\text{STRONGLY-CONNECTED-COMPONENTS}$ works on the graph of Figure 22.6. Specifically, show the finishing times computed in line 1 and the forest produced in line 3. Assume that the loop of lines 5\u20137 of $\\text{DFS}$ considers vertices in alphabetical order and that the adjacency lists are in alphabetical order.\n\n\n\n\nThe finishing times of each vertex were computed in exercise 22.3-2. The forest consists of 5 trees, each of which is a chain. We'll list the vertices of each tree in order from root to leaf: $r$, $u$, $q - y - t$, $x - z$, and $s - w - v$.\n\n\n22.5-3\n\n\n\n\nProfessor Bacon claims that the algorithm for strongly connected components would be simpler if it used the original (instead of the transpose) graph in the second depth-first search and scanned the vertices in order of \nincreasing\n finishing times. Does this simpler algorithm always produce correct results?\n\n\n\n\nProfessor Bacon's suggestion doesn't work out. As an example, suppose that our graph is on the three vertices $\\{1, 2, 3\\}$ and consists of the edges $(2, 1), (2, 3), (3, 2)$. Then, we should end up with $\\{2, 3\\}$ and $\\{1\\}$ as our $\\text{SCC}$'s. However, a possible $\\text{DFS}$ starting at $2$ could explore $3$ before $1$, this would mean that the finish time of $3$ is lower than of $1$ and $2$. This means that when we first perform the $\\text{DFS}$ starting at $3$. However, a $\\text{DFS}$ starting at $3$ will be able to reach all other vertices. This means that the algorithm would return that the entire graph is a single $\\text{SCC}$, even though this is clearly not the case since there is neither a path from $1$ to $2$ of from $1$ to $3$.\n\n\n22.5-4\n\n\n\n\nProve that for any directed graph $G$, we have $((G^\\text T)^{\\text{SCC}})^\\text T = G^{\\text{SCC}}$. That is, the transpose of the component graph of $G^\\text T$ is the same as the component graph of $G$.\n\n\n\n\nFirst observe that $C$ is a strongly connected component of $G$ if and only if it is a strongly connected component of $G^\\text T$. Thus the vertex sets of $G^{\\text{SCC}}$ and $(G^\\text T)^{\\text{SCC}}$ are the same, which implies the vertex sets of $((G^\\text T)^\\text{SCC})^\\text T$ and $G^{\\text{SCC}}$ are the same. It suffices to show that their edge sets are the same. Suppose $(v_i, v_j)$ is an edge in $((G^\\text T)^{\\text{SCC}})^\\text T$. Then $(v_j, v_i)$ is an edge in $(G^\\text T)^{\\text{SCC}}$. Thus there exist $x \\in C_j$ and $y \\in C_i$ such that $(x, y)$ is an edge of $G^\\text T$, which implies $(y, x)$ is an edge of $G$. Since components are preserved, this means that $(v_i, v_j)$ is an edge in $G^{\\text{SCC}}$. For the opposite implication we simply note that for any graph $G$ we have $(G^\\text T)^{\\text T} = G$.\n\n\n22.5-5\n\n\n\n\nGive an $O(V + E)$-time algorithm to compute the component graph of a directed graph $G = (V, E)$. Make sure that there is at most one edge between two vertices in the component graph your algorithm produces.\n\n\n\n\nWe have at our disposal an $O(V + E)$-time algorithm that computes strongly connected components. Let us assume that the output of this algorithm is a mapping $u.scc$, giving the number of the strongly connected component containing vertex $u$, for each vertex $u$. Without loss of generality, assume that $u.scc$ is an integer in the set $\\{1, 2, \\ldots, |V|\\}$.\n\n\nConstruct the multiset (a set that can contain the same object more than once) $T = \\{u.scc: u \\in V\\}$, and sort it by using counting sort. Since the values we are sorting are integers in the range $1$ to $|V|$, the time to sort is $O(V)$. Go through the sorted multiset $T$ and every time we find an element $x$ that is distinct from the one before it, add $x$ to $V^{\\text{SCC}}$. (Consider the first element of the sorted set as ''distinct from the one before it.'') It takes $O(V)$ time to construct $V^{\\text{SCC}}$.\n\n\nConstruct the set of ordered pairs\n\n\n$$\\text{$(x, y)$: there is an edge $(u, v) \\in E$, $x = u.scc$, and $y = v.scc$}.$$\n\n\nWe can easily construct this set in $\\Theta(E)$ time by going through all edges in $E$ and looking up $u.scc$ and $v.scc$ for each edge $(u, v) \\in E$.\n\n\nHaving constructed $S$, remove all elements of the form $(x, x)$. Alternatively, when we construct $S$, do not put an element in $S$ when we find an edge $(u, v)$ for which $u.scc = v.scc$. $S$ now has at most $|E|$ elements.\n\n\nNow sort the elements of $S$ using radix sort. Sort on one component at a time. The order does not matter. In other words, we are performing two passes of counting sort. The time to do so is $O(V + E)$, since the values we are sorting on are integers in the range $1$ to $|V|$.\n\n\nFinally, go through the sorted set $S$, and every time we find an element $(x, y)$ that is distinct from the element before it (again considering the first element of the sorted set as distinct from the one before it), add $(x, y)$ to $E^{\\text{SCC}}$. Sorting and then adding $(x, y)$ only if it is distinct from the element before it ensures that we add $(x, y)$ at most once. It takes $O(E)$ time to go through $S$ in this way, once $S$ has been sorted.\n\n\nThe total time is $O(V + E)$.\n\n\n22.5-6\n\n\n\n\nGiven a directed graph $G = (V, E)$, explain how to create another graph $G' = (V, E')$ such that (a) $G'$ has the same strongly connected components as $G$, (b) $G'$ has the same component graph as $G$, and (c) $E'$ is as small as possible. Describe a fast algorithm to compute $G'$.\n\n\n\n\nThe basic idea is to replace the edges within each $\\text{SCC}$ by one simple, directed cycle and then remove redundant edges between $\\text{SCC}$'s. Since there must be at least $k$ edges within an $\\text{SCC}$ that has $k$ vertices, a single directed cycle of $k$ edges gives the $k$-vertex $\\text{SCC}$ with the fewest possible edges.\n\n\nThe algorithm works as follows:\n\n\n\n\nIdentify all $\\text{SCC}$'s of $G$. Time: $\\Theta(V + E)$, using the $\\text{SCC}$ algorithm in Section 22.5.\n\n\nForm the component graph $G^{\\text{SCC}}$. Time: $O(V + E)$, by Exercise 22.5-5.\n\n\nStart with $E' = \\emptyset$. Time: $O(1)$.\n\n\nFor each $\\text{SCC}$ of $G$, let the vertices in the $\\text{SCC}$ be $v_1, v_2, \\ldots, v_k$, and add to $E'$ the directed edges $(v_1, v_2), (v_2, v_3), \\ldots, (v_{k - 1}, v_k), (v_k, v_1)$. These edges form a simple, directed cycle that includes all vertices of the $\\text{SCC}$. Time for all $\\text{SCC}$'s: $O(V)$.\n\n\nFor each edge $(u, v)$ in the component graph $G^{\\text{SCC}}$, select any vertex $x$ in $u$'s $\\text{SCC}$ and any vertex $y$ in $v$'s $\\text{SCC}$, and add the directed edge $(x, y)$ to $E'$. Time: $O(E)$.\n\n\n\n\n22.5-7\n\n\n\n\nA directed graph $G = (V, E)$ is \nsemiconnected\n if, for all pairs of vertices $u, v \\in V$, we have $u \\leadsto v$ or $v \\leadsto u$. Give an efficient algorithm to determine whether or not $G$ is semiconnected. Prove that your algorithm is correct, and analyze its running time.\n\n\n\n\nTo determine whether $G = (V, E)$ is semiconnected, do the following:\n\n\n\n\nCall $\\text{STRONGLY-CONNECTED-COMPONENTS}$.\n\n\nForm the component graph. (By Exercise 22.5-5, you may assume that this takes $O(V + E)$ time.)\n\n\nTopologically sort the component graph. (Recall that it's a dag.) Assuming that $G$ contains $k$ $\\text{SCC}$'s, the topological sort gives a linear ordering $\\langle v_1, v_2, \\ldots, v_k \\rangle$ of the vertices.\n\n\nVerify that the sequence of vertices $\\langle v_1, v_2, \\ldots, v_k \\rangle$ given by topological sort forms a linear chain in the component graph. That is, verify that the edges $(v_1, v_2), (v_2, v_3), \\ldots, (v_{k - 1}, v_k)$ exist in the component graph. If the vertices form a linear chain, then the original graph is semiconnected; otherwise it is not.\n\n\n\n\nBecause we know that all vertices in each $\\text{SCC}$ are mutually reachable from each other, it suffices to show that the component graph is semiconnected if and only if it contains a linear chain. We must also show that if there's a linear chain in the component graph, it's the one returned by topological sort.\n\n\nWe'll first show that if there's a linear chain in the component graph, then it's the one returned by topological sort. In fact, this is trivial. A topological sort has to respect every edge in the graph. So if there's a linear chain, a topological sort \nmust\n give us the vertices in order.\n\n\nNow we'll show that the component graph is semiconnected if and only if it contains a linear chain.\n\n\nFirst, suppose that the component graph contains a linear chain. Then for every pair of vertices $u$, $v$ in the component graph, there is a path between them. If $u$ precedes $v$ in the linear chain, then there's a path $u \\leadsto v$. Otherwise, $v$ precedes $u$, and there's a path $v \\leadsto u$.\n\n\nConversely, suppose that the component graph does not contain a linear chain. Then in the list returned by topological sort, there are two consecutive vertices $v_i$ and $v_{i + 1}$, but the edge$(v_i, v_{i + 1})$ is not in the component graph. Any edges out of $v_i$ are to vertices $v_j$, where $j > i + 1$, and so there is no path from $v_i$ to $v_{i + 1}$ in the component graph. And since $v_{i + 1}$ follows $v_i$ in the topological sort, there cannot be any paths at all from $v_{i + 1}$ to $v_i$. Thus, the component graph is not semiconnected.\n\n\nRunning time of each step:\n\n\n\n\n$\\Theta(V + E)$.\n\n\n$O(V + E)$.\n\n\nSince the component graph has at most $|V|$ vertices and at most $|E|$ edges, $O(V + E)$.\n\n\nAlso $O(V + E)$. We just check the adjacency list of each vertex $v_i$ in the component graph to verify that there's an edge $(v_i, v_{i + 1})$. We'll go through each adjacency list once.\n\n\n\n\nThus, the total running time is $\\Theta(V + E)$.",
            "title": "22.5 Strongly connected components"
        },
        {
            "location": "/Chap22/22.5/#225-1",
            "text": "How can the number of strongly connected components of a graph change if a new edge is added?   It can either stay the same or decrease. To see that it is possible to stay the same, just suppose you add some edge to a cycle. To see that it is possible to decrease, suppose that your original graph is on three vertices, and is just a path passing through all of them, and the edge added completes this path to a cycle. To see that it cannot increase, notice that adding an edge cannot remove any path that existed before.   So, if $u$ and $v$ are in the same connected component in the original graph, then there are a path from one to the other, in both directions. Adding an edge wont disturb these two paths, so we know that $u$ and $v$ will still be in the same $\\text{SCC}$ in the graph after adding the edge. Since no components can be split apart, this means that the number of them cannot increase since they form a partition of the set of vertices.",
            "title": "22.5-1"
        },
        {
            "location": "/Chap22/22.5/#225-2",
            "text": "Show how the procedure $\\text{STRONGLY-CONNECTED-COMPONENTS}$ works on the graph of Figure 22.6. Specifically, show the finishing times computed in line 1 and the forest produced in line 3. Assume that the loop of lines 5\u20137 of $\\text{DFS}$ considers vertices in alphabetical order and that the adjacency lists are in alphabetical order.   The finishing times of each vertex were computed in exercise 22.3-2. The forest consists of 5 trees, each of which is a chain. We'll list the vertices of each tree in order from root to leaf: $r$, $u$, $q - y - t$, $x - z$, and $s - w - v$.",
            "title": "22.5-2"
        },
        {
            "location": "/Chap22/22.5/#225-3",
            "text": "Professor Bacon claims that the algorithm for strongly connected components would be simpler if it used the original (instead of the transpose) graph in the second depth-first search and scanned the vertices in order of  increasing  finishing times. Does this simpler algorithm always produce correct results?   Professor Bacon's suggestion doesn't work out. As an example, suppose that our graph is on the three vertices $\\{1, 2, 3\\}$ and consists of the edges $(2, 1), (2, 3), (3, 2)$. Then, we should end up with $\\{2, 3\\}$ and $\\{1\\}$ as our $\\text{SCC}$'s. However, a possible $\\text{DFS}$ starting at $2$ could explore $3$ before $1$, this would mean that the finish time of $3$ is lower than of $1$ and $2$. This means that when we first perform the $\\text{DFS}$ starting at $3$. However, a $\\text{DFS}$ starting at $3$ will be able to reach all other vertices. This means that the algorithm would return that the entire graph is a single $\\text{SCC}$, even though this is clearly not the case since there is neither a path from $1$ to $2$ of from $1$ to $3$.",
            "title": "22.5-3"
        },
        {
            "location": "/Chap22/22.5/#225-4",
            "text": "Prove that for any directed graph $G$, we have $((G^\\text T)^{\\text{SCC}})^\\text T = G^{\\text{SCC}}$. That is, the transpose of the component graph of $G^\\text T$ is the same as the component graph of $G$.   First observe that $C$ is a strongly connected component of $G$ if and only if it is a strongly connected component of $G^\\text T$. Thus the vertex sets of $G^{\\text{SCC}}$ and $(G^\\text T)^{\\text{SCC}}$ are the same, which implies the vertex sets of $((G^\\text T)^\\text{SCC})^\\text T$ and $G^{\\text{SCC}}$ are the same. It suffices to show that their edge sets are the same. Suppose $(v_i, v_j)$ is an edge in $((G^\\text T)^{\\text{SCC}})^\\text T$. Then $(v_j, v_i)$ is an edge in $(G^\\text T)^{\\text{SCC}}$. Thus there exist $x \\in C_j$ and $y \\in C_i$ such that $(x, y)$ is an edge of $G^\\text T$, which implies $(y, x)$ is an edge of $G$. Since components are preserved, this means that $(v_i, v_j)$ is an edge in $G^{\\text{SCC}}$. For the opposite implication we simply note that for any graph $G$ we have $(G^\\text T)^{\\text T} = G$.",
            "title": "22.5-4"
        },
        {
            "location": "/Chap22/22.5/#225-5",
            "text": "Give an $O(V + E)$-time algorithm to compute the component graph of a directed graph $G = (V, E)$. Make sure that there is at most one edge between two vertices in the component graph your algorithm produces.   We have at our disposal an $O(V + E)$-time algorithm that computes strongly connected components. Let us assume that the output of this algorithm is a mapping $u.scc$, giving the number of the strongly connected component containing vertex $u$, for each vertex $u$. Without loss of generality, assume that $u.scc$ is an integer in the set $\\{1, 2, \\ldots, |V|\\}$.  Construct the multiset (a set that can contain the same object more than once) $T = \\{u.scc: u \\in V\\}$, and sort it by using counting sort. Since the values we are sorting are integers in the range $1$ to $|V|$, the time to sort is $O(V)$. Go through the sorted multiset $T$ and every time we find an element $x$ that is distinct from the one before it, add $x$ to $V^{\\text{SCC}}$. (Consider the first element of the sorted set as ''distinct from the one before it.'') It takes $O(V)$ time to construct $V^{\\text{SCC}}$.  Construct the set of ordered pairs  $$\\text{$(x, y)$: there is an edge $(u, v) \\in E$, $x = u.scc$, and $y = v.scc$}.$$  We can easily construct this set in $\\Theta(E)$ time by going through all edges in $E$ and looking up $u.scc$ and $v.scc$ for each edge $(u, v) \\in E$.  Having constructed $S$, remove all elements of the form $(x, x)$. Alternatively, when we construct $S$, do not put an element in $S$ when we find an edge $(u, v)$ for which $u.scc = v.scc$. $S$ now has at most $|E|$ elements.  Now sort the elements of $S$ using radix sort. Sort on one component at a time. The order does not matter. In other words, we are performing two passes of counting sort. The time to do so is $O(V + E)$, since the values we are sorting on are integers in the range $1$ to $|V|$.  Finally, go through the sorted set $S$, and every time we find an element $(x, y)$ that is distinct from the element before it (again considering the first element of the sorted set as distinct from the one before it), add $(x, y)$ to $E^{\\text{SCC}}$. Sorting and then adding $(x, y)$ only if it is distinct from the element before it ensures that we add $(x, y)$ at most once. It takes $O(E)$ time to go through $S$ in this way, once $S$ has been sorted.  The total time is $O(V + E)$.",
            "title": "22.5-5"
        },
        {
            "location": "/Chap22/22.5/#225-6",
            "text": "Given a directed graph $G = (V, E)$, explain how to create another graph $G' = (V, E')$ such that (a) $G'$ has the same strongly connected components as $G$, (b) $G'$ has the same component graph as $G$, and (c) $E'$ is as small as possible. Describe a fast algorithm to compute $G'$.   The basic idea is to replace the edges within each $\\text{SCC}$ by one simple, directed cycle and then remove redundant edges between $\\text{SCC}$'s. Since there must be at least $k$ edges within an $\\text{SCC}$ that has $k$ vertices, a single directed cycle of $k$ edges gives the $k$-vertex $\\text{SCC}$ with the fewest possible edges.  The algorithm works as follows:   Identify all $\\text{SCC}$'s of $G$. Time: $\\Theta(V + E)$, using the $\\text{SCC}$ algorithm in Section 22.5.  Form the component graph $G^{\\text{SCC}}$. Time: $O(V + E)$, by Exercise 22.5-5.  Start with $E' = \\emptyset$. Time: $O(1)$.  For each $\\text{SCC}$ of $G$, let the vertices in the $\\text{SCC}$ be $v_1, v_2, \\ldots, v_k$, and add to $E'$ the directed edges $(v_1, v_2), (v_2, v_3), \\ldots, (v_{k - 1}, v_k), (v_k, v_1)$. These edges form a simple, directed cycle that includes all vertices of the $\\text{SCC}$. Time for all $\\text{SCC}$'s: $O(V)$.  For each edge $(u, v)$ in the component graph $G^{\\text{SCC}}$, select any vertex $x$ in $u$'s $\\text{SCC}$ and any vertex $y$ in $v$'s $\\text{SCC}$, and add the directed edge $(x, y)$ to $E'$. Time: $O(E)$.",
            "title": "22.5-6"
        },
        {
            "location": "/Chap22/22.5/#225-7",
            "text": "A directed graph $G = (V, E)$ is  semiconnected  if, for all pairs of vertices $u, v \\in V$, we have $u \\leadsto v$ or $v \\leadsto u$. Give an efficient algorithm to determine whether or not $G$ is semiconnected. Prove that your algorithm is correct, and analyze its running time.   To determine whether $G = (V, E)$ is semiconnected, do the following:   Call $\\text{STRONGLY-CONNECTED-COMPONENTS}$.  Form the component graph. (By Exercise 22.5-5, you may assume that this takes $O(V + E)$ time.)  Topologically sort the component graph. (Recall that it's a dag.) Assuming that $G$ contains $k$ $\\text{SCC}$'s, the topological sort gives a linear ordering $\\langle v_1, v_2, \\ldots, v_k \\rangle$ of the vertices.  Verify that the sequence of vertices $\\langle v_1, v_2, \\ldots, v_k \\rangle$ given by topological sort forms a linear chain in the component graph. That is, verify that the edges $(v_1, v_2), (v_2, v_3), \\ldots, (v_{k - 1}, v_k)$ exist in the component graph. If the vertices form a linear chain, then the original graph is semiconnected; otherwise it is not.   Because we know that all vertices in each $\\text{SCC}$ are mutually reachable from each other, it suffices to show that the component graph is semiconnected if and only if it contains a linear chain. We must also show that if there's a linear chain in the component graph, it's the one returned by topological sort.  We'll first show that if there's a linear chain in the component graph, then it's the one returned by topological sort. In fact, this is trivial. A topological sort has to respect every edge in the graph. So if there's a linear chain, a topological sort  must  give us the vertices in order.  Now we'll show that the component graph is semiconnected if and only if it contains a linear chain.  First, suppose that the component graph contains a linear chain. Then for every pair of vertices $u$, $v$ in the component graph, there is a path between them. If $u$ precedes $v$ in the linear chain, then there's a path $u \\leadsto v$. Otherwise, $v$ precedes $u$, and there's a path $v \\leadsto u$.  Conversely, suppose that the component graph does not contain a linear chain. Then in the list returned by topological sort, there are two consecutive vertices $v_i$ and $v_{i + 1}$, but the edge$(v_i, v_{i + 1})$ is not in the component graph. Any edges out of $v_i$ are to vertices $v_j$, where $j > i + 1$, and so there is no path from $v_i$ to $v_{i + 1}$ in the component graph. And since $v_{i + 1}$ follows $v_i$ in the topological sort, there cannot be any paths at all from $v_{i + 1}$ to $v_i$. Thus, the component graph is not semiconnected.  Running time of each step:   $\\Theta(V + E)$.  $O(V + E)$.  Since the component graph has at most $|V|$ vertices and at most $|E|$ edges, $O(V + E)$.  Also $O(V + E)$. We just check the adjacency list of each vertex $v_i$ in the component graph to verify that there's an edge $(v_i, v_{i + 1})$. We'll go through each adjacency list once.   Thus, the total running time is $\\Theta(V + E)$.",
            "title": "22.5-7"
        },
        {
            "location": "/Chap22/Problems/22-1/",
            "text": "A depth-first forest classifies the edges of a graph into tree, back, forward, and cross edges. A breadth-first tree can also be used to classify the edges reachable from the source of the search into the same four categories.\n\n\na.\n Prove that in a breadth-first search of an undirected graph, the following properties hold:\n\n\n\n\nThere are no back edges and no forward edges.\n\n\nFor each tree edge $(u, v)$, we have $v.d = u.d + 1$.\n\n\nFor each cross edge $(u, v)$, we have $v.d = u.d$ or $v.d = u.d + 1$. \n\n\n\n\nb.\n Prove that in a breadth-first search of a directed graph, the following properties hold:\n\n\n\n\nThere are no forward edges.\n\n\nFor each tree edge $(u, v)$, we have $v.d = u.d + 1$.\n\n\nFor each cross edge $(u, v)$, we have $v.d \\le u.d + 1$.\n\n\nFor each back edge $(u, v)$, we have $0 \\le v.d \\le u.d$.\n\n\n\n\n\n\na.\n \n\n\n\n\nSuppose $(u, v)$ is a back edge or a forward edge in a $\\text{BFS}$ of an undirected graph. Then one of $u$ and $v$, say $u$, is a proper ancestor of the other ($v$) in the breadth-first tree. Since we explore all edges of $u$ before exploring any edges of any of $u$'s descendants, we must explore the edge $(u, v)$ at the time we explore $u$. But then $(u, v)$ must be a tree edge.\n\n\nIn $\\text{BFS}$, an edge $(u, v)$ is a tree edge when we set $v.\\pi \\leftarrow u$. But we only do so when we set $v.d \\leftarrow u.d + 1$. Since neither $u.d$ nor $v.d$ ever changes thereafter, we have $v.d=u.d+1$ when $\\text{BFS}$ completes.\n\n\nConsider a cross edge $(u, v)$ where, without loss of generality, $u$ is visited before $v$. At the time we visit $u$, vertex $v$ must already be on the queue, for otherwise $(u, v)$ would be a tree edge. Because $v$ is on the queue, we have $v.d \\le u.d + 1$ by Lemma 22.3. By Corollary 22.4, we have $v.d \\ge u.d$. Thus, either $v.d = u.d$ or $v.d = u.d + 1$.\n\n\n\n\nb.\n\n\n\n\nSuppose $(u, v)$ is a forward edge. Then we would have explored it while visiting $u$, and it would have been a tree edge.\n\n\nSame as for undirected graphs.\n\n\nFor any edge $(u, v)$, whether or not it's a cross edge, we cannot have $v.d > u.d + 1$, since we visit $v$ at the latest when we explore edge $(u, v)$. Thus, $v.d \\le u.d + 1$.\n\n\nClearly, $v.d \\ge 0$ for all vertices $v$. For a back edge $(u, v)$, $v$ is an ancestor of $u$ in the breadth-first tree, which means that $v.d\\le u.d$. (Note that since self-loops are considered to be back edges, we could have $u = v$.)",
            "title": "22-1 Classifying edges by breadth-first search"
        },
        {
            "location": "/Chap22/Problems/22-2/",
            "text": "Let $G = (V, E)$ be a connected, undirected graph. An \narticulation point\n of $G$ is a vertex whose removal disconnects $G$. A \nbridge\n of $G$ is an edge whose removal disconnects $G$. A \nbiconnected component\n of $G$ is a maximal set of edges such that any two edges in the set lie on a common simple cycle. Figure 22.10 illustrates these definitions. We can determine articulation points, bridges, and biconnected components using depth-first search. Let $G_\\pi = (V, E_\\pi)$ be a depth-first tree of $G$.\n\n\na.\n Prove that the root of $G_\\pi$ is an articulation point of $G$ if and only if it has at least two children in $G_\\pi$.\n\n\nb.\n Let $v$ be a nonroot vertex of $G_\\pi$. Prove that $v$ is an articulation point of $G$ if and only if $v$ has a child $s$ such that there is no back edge from $s$ or any descendant of $s$ to a proper ancestor of $v$.\n\n\nc.\n Let\n\n\n$$\nv.low = \\min\n\\begin{cases}\nv.d, \\\\\nw.d:(u,w) \\text{ is a back edge for some descendant } u \\text{ of } v.\n\\end{cases}\n$$\n\n\nShow how to computer $v.low$ for all vertices $v \\in V$ in $O(E)$ time.\n\n\nd.\n Show how to compute all articulation points in $O(E)$ time.\n\n\ne.\n Prove that an edge of $G$ is a bridge if and only if it does not lie on any simple cycle of $G$.\n\n\nf.\n Show how to compute all the bridges of $G$ in $O(E)$ time.\n\n\ng.\n Prove that the biconnected components of $G$ partition the nonbridge edges of $G$.\n\n\nh.\n Give an $O(E)$-time algorithm to label each edge $e$ of $G$ with a positive integer $e.bcc$ such that $e.bcc = e'.bcc$ if and only if $e$ and $e'$ are in the same biconnected component.\n\n\n\n\na.\n First suppose the root $r$ of $G_\\pi$ is an articulation point. Then the removal of $r$ from $G$ would cause the graph to disconnect, so $r$ has at least $2$ children in $G$. If $r$ has only one child $v$ in $G_\\pi$ then it must be the case that there is a path from $v$ to each of $r$'s other children. Since removing $r$ disconnects the graph, there must exist vertices $u$ and $w$ such that the only paths from $u$ to $w$ contain $r$. \n\n\nTo reach $r$ from $u$, the path must first reach one of $r$'s children. This child is connect to $v$ via a path which doesn't contain $r$. \n\n\nTo reach $w$, the path must also leave $r$ through one of its children, which is also reachable by $v$. This implies that there is a path from $u$ to $w$ which doesn't contain $r$, a contradiction.\n\n\nNow suppose $r$ has at least two children $u$ and $v$ in $G_\\pi$. Then there is no path from $u$ to $v$ in $G$ which doesn't go through $r$, since otherwise $u$ would be an ancestor of $v$. Thus, removing $r$ disconnects the component containing $u$ and the component containing $v$, so $r$ is an articulation point.\n\n\nb.\n Suppose that $v$ is a nonroot vertex of $G_\\pi$ and that $v$ has a child $s$ such that neither $s$ nor any of $s$'s descendants have back edges to a proper ancestor of $v$. Let $r$ be an ancestor of $v$, and remove $v$ from $G$. Since we are in the undirected case, the only edges in the graph are tree edges or back edges, which means that every edge incident with $s$ takes us to a descendant of $s$, and no descendants have back edges, so at no point can we move up the tree by taking edges. Therefore $r$ is unreachable from $s$, so the graph is disconnected and $v$ is an articulation point.\n\n\nNow suppose that for every child of $v$ there exists a descendant of that child which has a back edge to a proper ancestor of $v$. Remove $v$ from $G$. Every subtree of $v$ is a connected component. Within a given subtree, find the vertex which has a back edge to a proper ancestor of $v$. Since the set $T$ of vertices which aren't descendants of $v$ form a connected component, we have that every subtree of $v$ is connected to $T$. Thus, the graph remains connected after the deletion of $v$ so $v$ is not an articulation point.\n\n\nc.\n Since $v$ is discovered before all of its descendants, the only back edges which could affect $v.low$ are ones which go from a descendant of $v$ to a proper ancestor of $v$. If we know $u.low$ for every child $u$ of $v$, then we can compute $v.low$ easily since all the information is coded in its descendants. \n\n\nThus, we can write the algorithm recursively: If $v$ is a leaf in $G_\\pi$ then $v.low$ is the minimum of $v.d$ and $w.d$ where $(v, w)$ is a back edge. If $v$ is not a leaf, $v$ is the minimum of $v.d$, $w.d$ where $w$ is a back edge, and $u.low$, where $u$ is a child of $v$. Computing $v.low$ for a vertex is linear in its degree. The sum of the vertices' degrees gives twice the number of edges, so the total runtime is $O(E)$.\n\n\nd.\n First apply the algorithm of part (c) in $O(E)$ to compute $v.low$ for all $v \\in V$. If $v.low$ = $v.d$ if and only if no descendant of $v$ has a back edge to a proper ancestor of $v$, if and only if $v$ is not an articulation point. \n\n\nThus, we need only check $v.low$ versus $v.d$ to decide in constant time whether or not $v$ is an articulation point, so the runtime is $O(E)$.\n\n\ne.\n An edge $(u, v)$ lies on a simple cycle if and only if there exists at least one path from $u$ to $v$ which doesn't contain the edge $(u, v)$, if and only if removing $(u, v)$ doesn't disconnect the graph, if and only if $(u, v)$ is not a bridge.\n\n\nf.\n A edge $(u, v)$ lies on a simple cycle in an undirected graph if and only if either both of its endpoints are articulation points, or one of its endpoints is an articulation point and the other is a vertex of degree $1$. Since we can compute all articulation points in $O(E)$ and we can decide whether or not a vertex has degree $1$ in constant time, we can run the algorithm in part (d) and then decide whether each edge is a bridge in constant time, so we can find all bridges in $O(E)$ time.\n\n\ng.\n It is clear that every nonbridge edge is in some biconnected component, so we need to show that if $C_1$ and $C_2$ are distinct biconnected components, then they contain no common edges. Suppose to the contrary that $(u, v)$ is in both $C_1$ and $C_2$. \n\n\nLet $(a, b)$ be any edge in $C_1$ and $(c, d)$ be any edge in $C_2$.\n\n\nThen $(a, b)$ lies on a simple cycle with $(u, v)$, consisting of the path\n\n\n$$a, b, p_1, \\ldots, p_k, u, v, p_{k + 1}, \\ldots, p_n, a.$$\n\n\nSimilarly, $(c, d)$ lies on a simple cycle with $(u, v)$ consisting of the path\n\n\n$$c, d, q_1, \\ldots, q_m, u, v, q_{m + 1}, \\ldots, q_l, c.$$\n\n\nThis means\n\n\n$$a, b, p_1, \\ldots, p_k, u, q_m, \\ldots, q_1, d, c, q_l , \\ldots, q_{m + 1}, v, p_{k + 1}, \\ldots, p_n,$$\n\n\nis a simple cycle containing $(a, b)$ and $(c, d)$, a contradiction. Thus, the biconnected components form a partition.\n\n\nh.\n Locate all bridge edges in $O(E)$ time using the algorithm described in part (f). Remove each bridge from $E$. The biconnected components are now simply the edges in the connected components. Assuming this has been done, run the following algorithm, which clearly runs in $O(|E|)$ where $|E|$ is the number of edges originally in $G$.",
            "title": "22-2 Articulation points, bridges, and biconnected components"
        },
        {
            "location": "/Chap22/Problems/22-3/",
            "text": "An \nEuler tour\n of a strongly connected, directed graph $G = (V, E)$ is a cycle that traverses each edge of $G$ exactly once, although it may visit a vertex more than once.\n\n\na.\n Show that $G$ has an Euler tour if and only if $in\\text-degree(v) = out\\text-degree(v)$ for each vertex $v \\in V$.\n\n\nb.\n Describe an $O(E)$-time algorithm to find an Euler tour of $G$ if one exists. ($\\textit{Hint:}$ Merge edge-disjoint cycles.)\n\n\n\n\na.\n An Euler tour is a single cycle that traverses each edge of $G$ exactly once, but it might not be a simple cycle. An Euler tour can be decomposed into a set of edge-disjoint simple cycles, however.\n\n\nIf $G$ has an Euler tour, therefore, we can look at the simple cycles that, together, form the tour. In each simple cycle, each vertex in the cycle has one entering edge and one leaving edge. In each simple cycle, therefore, each vertex $v$ has $in\\text-degree(v) = out\\text-degree(v)$, where the degrees are either $1$ (if $v$ is on the simple cycle) or $0$ (if $v$ is not on the simple cycle). Adding the in- and out- degrees over all edges proves that if $G$ has an Euler tour, then $in\\text-degree(v) = out\\text-degree(v)$ for all vertices $v$.\n\n\nWe prove the converse\u2014that if $in\\text-degree(v) = out\\text-degree(v)$ for all vertices $v$, then $G$ has an Euler tour\u2014in two different ways. One proof is nonconstructive, and the other proof will help us design the algorithm for part (b).\n\n\nFirst, we claim that if $in\\text-degree(v) = out\\text-degree(v)$ for all vertices $v$, then we can pick any vertex $u$ for which $in\\text-degree(u) = out\\text-degree(u) \\ge 1$ and create a cycle (not necessarily simple) that contains $u$. To prove this claim, let us start by placing vertex $u$ on the cycle, and choose any leaving edge of $u$, say ($u, v$). Now we put $v$ on the cycle. Since $in\\text-degree(v) = out\\text-degree(v) \\ge 1$, we can pick some leaving edge of $v$ and continue visiting edges and vertices. Each time we pick an edge, we can remove it from further consideration. At each vertex other than $u$, at the time we visit an entering edge, there must be an unvisited leaving edge, since $in\\text-degree(v) = out\\text-degree(v)$ for all vertices $v$. The only vertex for which there might not be an unvisited leaving edge is $u$, since we started the cycle by visiting one of $u$'s leaving edges. Since there's always a leaving edge we can visit from all vertices other than $u$, eventually the cycle must return to $u$, thus proving the claim.\n\n\nThe nonconstructive proof proves the contrapositive\u2014that if $G$ does not have an Euler tour, then $in\\text-degree(v) \\ne out\\text-degree(v)$ for some vertex $v$\u2014by contradiction. Choose a graph $G = (V, E)$ that does not have an Euler tour but has at least one edge and for which $in\\text-degree(v) = out\\text-degree(v)$ for all vertices $v$, and let $G$ have the fewest edges of any such graph. By the above claim, $G$ contains a cycle. Let $C$ be a cycle of $G$ with the greatest number of edges, and let $V_C$ be the set of vertices visited by cycle $C$. By our assumption, $C$ is not an Euler tour, and so the set of edges $E' = E - C$ is nonempty. If we use the set $V$ of vertices and the set $E'$ of edges, we get the graph $G' = (V, E')$; this graph has $in\\text-degree(v) = out\\text-degree(v)$ for all vertices $v$, since we have removed one entering edge and one leaving edge for each vertex on cycle $C$. Consider any component $G'' = (V'' , E'')$ of $G'$, and observe that $G''$ also has $in\\text-degree(v) = out\\text-degree(v)$ for all vertices $v$. Since $E'' \\subseteq E' \\subsetneq E$, it follows from how we chose $G$ that $G''$  must have an Euler tour, say $C'$. Because the original graph G is connected, there must be some vertex $x \\in V'' \\cup V_C$ and, without loss of generality, consider $x$ to be the first and last vertex on both $C$ and $C'$. But then the cycle $C''$ formed by first traversing $C$ and then traversing $C'$ is a cycle of $G$ with more edges than $C$, contradicting our choice of $C$. We conclude that $C$ must have been an Euler tour.\n\n\nThe constructive proof uses the same ideas. Let us start at a vertex $u$ and, via random traversal of edges, create a cycle. We know that once we take any edge entering a vertex $v \\ne u$, we can find an edge leaving $v$ that we have not yet taken. Eventually, we get back to vertex $u$, and if there are still edges leaving $u$ that we have not taken, we can continue the cycle. Eventually, we get back to vertex $u$ and there are no untaken edges leaving $u$. If we have visited every edge in the graph $G$, we are done. Otherwise, since $G$ is connected, there must be some unvisited edge leaving a vertex, say $v$, on the cycle. We can traverse a new cycle starting at $v$, visiting only previously unvisited edges, and we can splice this cycle into the cycle we already know. That is, if the original cycle is $\\langle u, \\ldots, v, w, \\ldots, u \\rangle$, and the new cycle is $\\langle v, x, \\ldots, v\\rangle$, then we can create the cycle $\\langle u, \\ldots, v, x, \\ldots, v, w, \\ldots, u \\rangle$. We continue this process of finding a vertex with an unvisited leaving edge on a visited cycle, visiting a cycle starting and ending at this vertex, and splicing in the newly visited cycle, until we have visited every edge.\n\n\nb.\n The algorithm is based on the idea in the constructive proof above.\n\n\nWe assume that $G$ is represented by adjacency lists, and we work with a copy of the adjacency lists, so that as we visit each edge, we can remove it from its adjacency list. The singly linked form of adjacency list will suffice. The output of this algorithm is a doubly linked list $T$ of vertices which, read in list order, will give an Euler tour. The algorithm constructs $T$ by finding cycles (also represented by doubly linked lists) and splicing them into $T$. By using doubly linked lists for cycles and the Euler tour, splicing a cycle into the Euler tour takes constant time.\n\n\nWe also maintain a singly linked list $L$, in which each list element consists of two parts:\n\n\n\n\na vertex $v$, and\n\n\na pointer to some appearance of $v$ in $T$.\n\n\n\n\nInitially, $L$ contains one vertex, which may be any vertex of $G$.\n\n\nHere is the algorithm.\n\n\nEULER\n-\nTOUR\n(\nG\n)\n\n    \nT\n \n=\n \nempty\n \nlist\n\n    \nL\n \n=\n \n(\nany\n \nvertex\n \nv\n \n\u2208\n \nG\n.\nV\n,\n \nNIL\n)\n\n    \nwhile\n \nL\n \nis\n \nnot\n \nempty\n\n        \nremore\n \n(\nv\n,\n \nlocation\n \n-\n \nin\n-\nT\n)\n \nfrom\n \nL\n\n        \nC\n \n=\n \nVISIT\n(\nG\n,\n \nL\n,\n \nv\n)\n\n        \nif\n \nlocation\n \n-\n \nin\n-\nT\n \n==\n \nNIL\n\n            \nT\n \n=\n \nC\n\n        \nelse\n \nsplice\n \nC\n \ninto\n \nT\n \njust\n \nbefore\n \nlocation\n \n-\n \nin\n-\nT\n\n    \nreturn\n \nT\n\n\n\n\n\nVISIT\n(\nG\n,\n \nL\n,\n \nv\n)\n\n    \nC\n \n=\n \nempty\n \nsequence\n \nof\n \nvertices\n\n    \nu\n \n=\n \nv\n\n    \nwhile\n \nout\n-\ndegree\n(\nu\n)\n \n>\n \n0\n\n        \nlet\n \nw\n \nbe\n \nthe\n \nfirst\n \nvertex\n \nin\n \nG\n.\nAdj\n[\nu\n]\n\n        \nremove\n \nw\n \nfrom\n \nG\n.\nAdj\n[\nu\n],\n \ndecrementing\n \nout\n-\ndegree\n(\nu\n)\n\n        \nadd\n \nu\n \nonto\n \nthe\n \nend\n \nof\n \nC\n\n        \nif\n \nout\n-\ndegree\n(\nu\n)\n \n>\n \n0\n\n            \nadd\n \n(\nu\n,\n \nu\n'\ns\n \nlocation\n \nin\n \nC\n)\n \nto\n \nL\n\n        \nu\n \n=\n \nw\n\n    \nreturn\n \nC\n\n\n\n\n\nThe use of $\\text{NIL}$ in the initial assignment to $L$ ensures that the first cycle $C$ returned by $\\text{VISIT}$ becomes the current version of the Euler tour $T$. All cycles returned by $\\text{VISIT}$ thereafter are spliced into $T$. We assume that whenever an empty cycle is returned by $\\text{VISIT}$, splicing it into $T$ leaves $T$ unchanged.\n\n\nEach time that $\\text{EULER-TOUR}$ removes a vertex $v$ from the list $L$, it calls $\\text{VISIT}(G, L, v)$ to find a cycle $C$, possibly empty and possibly not simple, that starts and ends at $v$; the cycle $C$ is represented by a list that starts with $v$ and ends with the last vertex on the cycle before the cycle ends at $v$. $\\text{EULER-TOUR}$ then splices this cycle $C$ into the Euler tour $T$ just before some appearance of $v$ in $T$.\n\n\nWhen $\\text{VISIT}$ is at a vertex $u$, it looks for some vertex $w$ such that the edge $(u, w)$ has not yet been visited. Removing $w$ from $Adj[u]$\u008d ensures that we will never visit $(u, w)$ again. $\\text{VISIT}$ adds $u$ onto the cycle $C$ that it constructs. If, after removing edge $(u, w)$, vertex $u$ still has any leaving edges, then $u$, along with its location in $C$, is added to $L$. The cycle construction continues from $w$, and it ceases once a vertex with no unvisited leaving edges is found. Using the argument from part (a), at that point, this vertex must close up a cycle. At that point, therefore, the cycle $C$ is returned.\n\n\nIt is possible that a vertex $u$ has unvisited leaving edges at the time it is added to list $L$ in $\\text{VISIT}$, but that by the time that $u$ is removed from $L$ in $\\text{EULER-TOUR}$, all of its leaving edges have been visited. In this case, the \nwhile\n loop of $\\text{VISIT}$ executes $0$ iterations, and $\\text{VISIT}$ returns an empty cycle.\n\n\nOnce the list $L$ is empty, every edge has been visited. The resulting cycle $T$ is then an Euler tour.\n\n\nTo see that $\\text{EULER-TOUR}$ takes $O(E)$ time, observe that because we remove each edge from its adjacency list as it is visited, no edge is visited more than once. Since each edge is visited at some time, the number of times that a vertex is added to $L$, and thus removed from $L$, is at most $|E|$. Thus, the \nwhile\n loop in $\\text{EULER-TOUR}$ executes at most $E$ iterations. The \nwhile\n loop in $\\text{VISIT}$ executes one iteration per edge in the graph, and so it executes at most $E$ iterations as well. Since adding vertex $u$ to the doubly linked list $C$ takes constant time and splicing $C$ into $T$ takes constant time, the entire algorithm takes $O(E)$ time.",
            "title": "22-3 Euler tour"
        },
        {
            "location": "/Chap22/Problems/22-4/",
            "text": "Let $G = (V, E)$ be a directed graph in which each vertex $u \\in V$ is labeled with a unique integer $L(U)$ from the set $\\{1, 2, \\ldots, |V|\\}$. For each vertex $u \\in V$, let $R(u) = \\{v \\in V: u \\leadsto v \\}$ be the set of vertices that are reachable from $u$. Define $\\min(u)$ to be the vertex in $R(u)$ whose label is minimum, i.e., $\\min(u)$ is the vertex $v$ such that $L(v) = \\min \\{L(w): w \\in R(u) \\}$. Give an $O(V + E)$-time algorithm that computes $\\min(u)$ for all vertices $u \\in V$.\n\n\n\n\nCompute $G^\\text T$ in the usual way, so that $G^\\text T$ is $G$ with its edges reversed. Then do a depth-first search on $G^\\text T$ , but in the main loop of $\\text{DFS}$, consider the vertices in order of increasing values of $L(v)$. If vertex $u$ is in the depth-first tree with root $v$, then $\\min(u) = v$. Clearly, this algorithm takes $O(V + E)$ time.\n\n\nTo show correctness, first note that if $u$ is in the depth-first tree rooted at $v$ in $G^\\text T$, then there is a path $v \\leadsto u$ in $G^\\text T$, and so there is a path $u \\leadsto v$ in $G$. Thus, the minimum vertex label of all vertices reachable from $u$ is at most $L(v)$, or in other words, $L(v) \\ge \\min \\{L(w): w \\in R(u)\\}$.\n\n\nNow suppose that $L(v) > \\min \\{L(w): w \\in R(u) \\}$, so that there is a vertex $w \\in R(u)$ such that $L(w) < L(v)$. At the time $v.d$ that we started the depthfirst search from $v$, we would have already discovered $w$, so that $w.d < v.d$. By the parenthesis theorem, either the intervals $[v.d, v.f]$\u008d, and $[w.d, w.f]$\u008d are disjoint and neither $v$ nor $w$ is a descendant of the other, or we have the ordering $w.d < v.d < v.f < w.f$ and $v$ is a descendant of $w$. The latter case cannot occur, since $v$ is a root in the depth-first forest (which means that $v$ cannot be a descendant of any other vertex). In the former case, since $w.d < v.d$, we must have $w.d < w.f < v.d < v.f$. In this case, since $u$ is reachable from $w$ in $G^\\text T$ , we would have discovered $u$ by the time $w.f$, so that $u.d < w.f$. Since we discovered $u$ during a search that started at $v$, we have $v.d \\le u.d$. Thus, $v.d \\le u.d < w.f < v.d$, which is a contradiction. We conclude that no such vertex $w$ can exist.",
            "title": "22-4 Reachability"
        },
        {
            "location": "/Chap23/23.1/",
            "text": "23.1-1\n\n\n\n\nLet $(u, v)$ be a minimum-weight edge in a connected graph $G$. Show that $(u, v)$ belongs to some minimum spanning tree of $G$.\n\n\n\n\nTheorem 23.1 shows this.\n\n\nLet $A$ be the empty set and $S$ be any set containing $u$ but not $v$.\n\n\n23.1-2\n\n\n\n\nProfessor Sabatier conjectures the following converse of Theorem 23.1. Let $G = (V, E)$ be a connected, undirected graph with a real-valued weight function $w$ defined on $E$. Let $A$ be a subset of $E$ that is included in some minimum spanning tree for $G$, let $(S, V - S)$ be any cut of $G$ that respects $A$, and let $(u, v)$ be a safe edge for $A$ crossing $(S, V - S)$. Then, $(u, v)$ is a light edge for the cut. Show that the professor's conjecture is incorrect by giving a counterexample.\n\n\n\n\nLet $G$ be the graph with $4$ vertices: $u, v, w, z$. Let the edges of the graph be $(u, v), (u, w), (w, z)$ with weights $3$, $1$, and $2$ respectively. \n\n\nSuppose $A$ is the set $\\{(u, w)\\}$. Let $S = A$. Then $S$ clearly respects $A$. Since $G$ is a tree, its minimum spanning tree is itself, so $A$ is trivially a subset of a minimum spanning tree.\n\n\nMoreover, every edge is safe. In particular, $(u, v)$ is safe but not a light edge for the cut. Therefore Professor Sabatier's conjecture is false.\n\n\n23.1-3\n\n\n\n\nShow that if an edge $(u, v)$ is contained in some minimum spanning tree, then it is a light edge crossing some cut of the graph.\n\n\n\n\nLet $T_0$ and $T_1$ be the two trees that are obtained by removing edge $(u, v)$ from a $\\text{MST}$. Suppose that $V_0$ and $V_1$ are the vertices of $T_0$ and $T_1$ respectively.\n\n\nConsider the cut which separates $V_0$ from $V_1$. Suppose to a contradiction that there is some edge that has weight less than that of $(u, v)$ in this cut. Then, we could construct a minimum spanning tree of the whole graph by adding that edge to $T_1 \\cup T_0$. This would result in a minimum spanning tree that has weight less than the original minimum spanning tree that contained $(u, v)$.\n\n\n23.1-4\n\n\n\n\nGive a simple example of a connected graph such that the set of edges $\\{(u, v):$ there exists a cut $(S, V - S)$ such that $(u, v)$ is a light edge crossing $(S, V - S)\\}$ does not form a minimum spanning tree.\n\n\n\n\nA triangle whose edge weights are all equal is a graph in which every edge is a light edge crossing some cut. But the triangle is cyclic, so it is not a minimum spanning tree.\n\n\n23.1-5\n\n\n\n\nLet $e$ be a maximum-weight edge on some cycle of connected graph $G = (V, E)$. Prove that there is a minimum spanning tree of $G' = (V, E - \\{e\\})$ that is also a minimum spanning tree of $G$. That is, there is a minimum spanning tree of $G$ that does not include $e$.\n\n\n\n\nLet $A$ be any cut that causes some vertices in the cycle on once side of the cut, and some vertices in the cycle on the other. For any of these cuts, we know that the edge $e$ is not a light edge for this cut. Since all the other cuts won't have the edge $e$ crossing it, we won't have that the edge is light for any of those cuts either. This means that we have that e is not safe.\n\n\n23.1-6\n\n\n\n\nShow that a graph has a unique minimum spanning tree if, for every cut of the graph, there is a unique light edge crossing the cut. Show that the converse is not true by giving a counterexample.\n\n\n\n\nSuppose that for every cut of $G$, there is a unique light edge crossing the cut. Let us consider two distinct minimum spanning trees, $T$ and $T'$, of $G$. Because $T$ and $T'$are distinct, $T$ contains some edge $(u, v)$ that is not in $T'$. If we remove $(u, v)$ from $T$, then $T$ becomes disconnected, resulting in a cut $(S, V - S)$. The edge $(u, v)$ is a light edge crossing the cut $(S, V - S)$ (by Exercise 23.1-3) and, by our assumption, it's the only light edge crossing this cut. Because $(u, v)$ is the only light edge crossing $(S, V - S)$ and $(u, v)$ is not in $T'$, each edge in $T'$ that crosses $(S, V - S)$ must have weight strictly greater than w$(u, v)$. As in the proof of Theorem 23.1, we can identify the unique edge $(x, y)$ in $T'$ that crosses $(S, V - S)$ and lies on the cycle that results if we add $(u, v)$ to $T'$. By our assumption, we know that $w(u, v) < w(x, y)$. Then, we can then remove $(x, y)$ from $T'$ and replace it by $(u, v)$, giving a spanning tree with weight strictly less than $w(T')$. Thus, $T'$ was not a minimum spanning tree, contradicting the assumption that the graph had two unique minimum spanning trees.\n\n\nHere's a counterexample for the converse:\n\n\n\n\nHere, the graph is its own minimum spanning tree, and so the minimum spanning tree is unique. Consider the cut $(\\{x\\}, \\{y, z\\})$. Both of the edges $(x, y)$ and $(x, z)$ are light edges crossing the cut, and they are both light edges.\n\n\n23.1-7\n\n\n\n\nArgue that if all edge weights of a graph are positive, then any subset of edges that connects all vertices and has minimum total weight must be a tree. Give an example to show that the same conclusion does not follow if we allow some weights to be nonpositive.\n\n\n\n\nFirst, we show that the subset of edges of minimum total weight that connects all the vertices is a tree. To see this, suppose not, that it had a cycle. This would mean that removing any of the edges in this cycle would mean that the remaining edges would still connect all the vertices, but would have a total weight that's less by the weight of the edge that was removed. This would contradict the minimality of the total weight of the subset of vertices. Since the subset of edges forms a tree, and has minimal total weight, it must also be a minimum spanning tree.\n\n\nTo see that this conclusion is not true if we allow negative edge weights, we provide a construction. Consider the graph $K_3$ with all edge weights equal to $-1$. The only minimum weight set of edges that connects the graph has total weight $-3$, and consists of all the edges. This is clearly not a $\\text{MST}$ because it is not a tree, which can be easily seen because it has one more edge than a tree on three vertices should have. Any $\\text{MST}$ of this weighted graph must have weight that is at least $-2$.\n\n\n23.1-8\n\n\n\n\nLet $T$ be a minimum spanning tree of a graph $G$, and let $L$ be the sorted list of the edge weights of $T$. Show that for any other minimum spanning tree $T'$ of $G$, the list $L$ is also the sorted list of edge weights of $T'$.\n\n\n\n\nSuppose that $L'$ is another sorted list of edge weights of a minimum spanning tree. If $L' \\ne L$, there must be a first edge $(u, v)$ in $T$ or $T'$ which is of smaller weight than the corresponding edge $(x, y)$ in the other set. Without loss of generality, assume $(u, v)$ is in $T$. \n\n\nLet $C$ be the graph obtained by adding $(u, v)$ to $L'$. Then we must have introduced a cycle. If there exists an edge on that cycle which is of larger weight than $(u, v)$, we can remove it to obtain a tree $C'$ of weight strictly smaller than the weight of $T'$, contradicting the fact that $T'$ is a minimum spanning tree. \n\n\nThus, every edge on the cycle must be of lesser or equal weight than $(u, v)$. Suppose that every edge is of strictly smaller weight. Remove $(u, v)$ from $T$ to disconnect it into two components. There must exist some edge besides $(u, v)$ on the cycle which would connect these, and since it has smaller weight we can use that edge instead to create a spanning tree with less weight than $T$, a contradiction. Thus, some edge on the cycle has the same weight as $(u, v)$. Replace that edge by $(u, v)$. The corresponding lists $L$ and $L'$ remain unchanged since we have swapped out an edge of equal weight, but the number of edges which $T$ and $T'$ have in common has increased by $1$.\n\n\nIf we continue in this way, eventually they must have every edge in common, contradicting the fact that their edge weights differ somewhere. Therefore all minimum spanning trees have the same sorted list of edge weights.\n\n\n23.1-9\n\n\n\n\nLet $T$ be a minimum spanning tree of a graph $G = (V, E)$, and let $V'$ be a subset of $V$. Let $T'$ be the subgraph of $T$ induced by $V'$, and let $G'$ be the subgraph of $G$ induced by $V'$. Show that if $T'$ is connected, then $T'$ is a minimum spanning tree of $G'$.\n\n\n\n\nSuppose that there was some cheaper spanning tree than $T'$. That is, we have that there is some $T''$ so that $w(T'') < w(T')$. Then, let $S$ be the edges in $T$ but not in $T'$. We can then construct a minimum spanning tree of $G$ by considering $S \\cup T''$. This is a spanning tree since $S \\cup T'$ is, and $T''$ makes all the vertices in $V'$ connected just like $T'$ does.\n\n\nHowever, we have that\n\n\n$$w(S \\cup T'') = w(S) + w(T'') < w(S) + w(T') = w(S \\cup T') = w(T).$$\n\n\nThis means that we just found a spanning tree that has a lower total weight than a minimum spanning tree. This is a contradiction, and so our assumption that there was a spanning tree of $V'$ cheaper than $T'$ must be false.\n\n\n23.1-10\n\n\n\n\nGiven a graph $G$ and a minimum spanning tree $T$, suppose that we decrease the weight of one of the edges in $T$. Show that $T$ is still a minimum spanning tree for $G$. More formally, let $T$ be a minimum spanning tree for $G$ with edge weights given by weight function $w$. Choose one edge $(x, y) \\in T$ and a positive number $k$, and define the weight function $w'$ by\n\n\n$$\nw'(u, v) =\n\\begin{cases}\nw(u, v)     & \\text{ if }(u, v) \\ne (x, y), \\\\\nw(x, y) - k & \\text{ if }(u, v) =   (x, y).\n\\end{cases}\n$$\n\n\nShow that $T$ is a minimum spanning tree for $G$ with edge weights given by $w'$.\n\n\n\n\nLet $x(T) = \\sum_{(x, y) \\in T} w(x, y)$. We have $w'(T) = w(T) - k$. Consider any other spanning tree $T'$, so that $w(T) \\le w(T')$.\n\n\nIf $(x, y) \\ne T'$, then $w'(T') = w(T') \\ge w(T) > w'(T)$.\n\n\nIf $(x, y) \\in T'$, then $w'(T') = w(T') - k \\ge w(T) - k = w'(T)$.\n\n\nEither way, $w'(T) \\le w'(T')$, and so $T$ is a minimum spanning tree for weight function $w'$.\n\n\n23.1-11 $\\star$\n\n\n\n\nGiven a graph $G$ and a minimum spanning tree $T$, suppose that we decrease the weight of one of the edges not in $T$. Give an algorithm for finding the minimum spanning tree in the modified graph.\n\n\n\n\nIf we were to add in this newly decreased edge to the given tree, we would be creating a cycle. Then, if we were to remove any one of the edges along this cycle, we would still have a spanning tree. This means that we look at all the weights along this cycle formed by adding in the decreased edge, and remove the edge in the cycle of maximum weight. This does exactly what we want since we could only possibly want to add in the single decreased edge, and then, from there we change the graph back to a tree in the way that makes its total weight minimized.",
            "title": "23.1 Growing a minimum spanning tree"
        },
        {
            "location": "/Chap23/23.1/#231-1",
            "text": "Let $(u, v)$ be a minimum-weight edge in a connected graph $G$. Show that $(u, v)$ belongs to some minimum spanning tree of $G$.   Theorem 23.1 shows this.  Let $A$ be the empty set and $S$ be any set containing $u$ but not $v$.",
            "title": "23.1-1"
        },
        {
            "location": "/Chap23/23.1/#231-2",
            "text": "Professor Sabatier conjectures the following converse of Theorem 23.1. Let $G = (V, E)$ be a connected, undirected graph with a real-valued weight function $w$ defined on $E$. Let $A$ be a subset of $E$ that is included in some minimum spanning tree for $G$, let $(S, V - S)$ be any cut of $G$ that respects $A$, and let $(u, v)$ be a safe edge for $A$ crossing $(S, V - S)$. Then, $(u, v)$ is a light edge for the cut. Show that the professor's conjecture is incorrect by giving a counterexample.   Let $G$ be the graph with $4$ vertices: $u, v, w, z$. Let the edges of the graph be $(u, v), (u, w), (w, z)$ with weights $3$, $1$, and $2$ respectively.   Suppose $A$ is the set $\\{(u, w)\\}$. Let $S = A$. Then $S$ clearly respects $A$. Since $G$ is a tree, its minimum spanning tree is itself, so $A$ is trivially a subset of a minimum spanning tree.  Moreover, every edge is safe. In particular, $(u, v)$ is safe but not a light edge for the cut. Therefore Professor Sabatier's conjecture is false.",
            "title": "23.1-2"
        },
        {
            "location": "/Chap23/23.1/#231-3",
            "text": "Show that if an edge $(u, v)$ is contained in some minimum spanning tree, then it is a light edge crossing some cut of the graph.   Let $T_0$ and $T_1$ be the two trees that are obtained by removing edge $(u, v)$ from a $\\text{MST}$. Suppose that $V_0$ and $V_1$ are the vertices of $T_0$ and $T_1$ respectively.  Consider the cut which separates $V_0$ from $V_1$. Suppose to a contradiction that there is some edge that has weight less than that of $(u, v)$ in this cut. Then, we could construct a minimum spanning tree of the whole graph by adding that edge to $T_1 \\cup T_0$. This would result in a minimum spanning tree that has weight less than the original minimum spanning tree that contained $(u, v)$.",
            "title": "23.1-3"
        },
        {
            "location": "/Chap23/23.1/#231-4",
            "text": "Give a simple example of a connected graph such that the set of edges $\\{(u, v):$ there exists a cut $(S, V - S)$ such that $(u, v)$ is a light edge crossing $(S, V - S)\\}$ does not form a minimum spanning tree.   A triangle whose edge weights are all equal is a graph in which every edge is a light edge crossing some cut. But the triangle is cyclic, so it is not a minimum spanning tree.",
            "title": "23.1-4"
        },
        {
            "location": "/Chap23/23.1/#231-5",
            "text": "Let $e$ be a maximum-weight edge on some cycle of connected graph $G = (V, E)$. Prove that there is a minimum spanning tree of $G' = (V, E - \\{e\\})$ that is also a minimum spanning tree of $G$. That is, there is a minimum spanning tree of $G$ that does not include $e$.   Let $A$ be any cut that causes some vertices in the cycle on once side of the cut, and some vertices in the cycle on the other. For any of these cuts, we know that the edge $e$ is not a light edge for this cut. Since all the other cuts won't have the edge $e$ crossing it, we won't have that the edge is light for any of those cuts either. This means that we have that e is not safe.",
            "title": "23.1-5"
        },
        {
            "location": "/Chap23/23.1/#231-6",
            "text": "Show that a graph has a unique minimum spanning tree if, for every cut of the graph, there is a unique light edge crossing the cut. Show that the converse is not true by giving a counterexample.   Suppose that for every cut of $G$, there is a unique light edge crossing the cut. Let us consider two distinct minimum spanning trees, $T$ and $T'$, of $G$. Because $T$ and $T'$are distinct, $T$ contains some edge $(u, v)$ that is not in $T'$. If we remove $(u, v)$ from $T$, then $T$ becomes disconnected, resulting in a cut $(S, V - S)$. The edge $(u, v)$ is a light edge crossing the cut $(S, V - S)$ (by Exercise 23.1-3) and, by our assumption, it's the only light edge crossing this cut. Because $(u, v)$ is the only light edge crossing $(S, V - S)$ and $(u, v)$ is not in $T'$, each edge in $T'$ that crosses $(S, V - S)$ must have weight strictly greater than w$(u, v)$. As in the proof of Theorem 23.1, we can identify the unique edge $(x, y)$ in $T'$ that crosses $(S, V - S)$ and lies on the cycle that results if we add $(u, v)$ to $T'$. By our assumption, we know that $w(u, v) < w(x, y)$. Then, we can then remove $(x, y)$ from $T'$ and replace it by $(u, v)$, giving a spanning tree with weight strictly less than $w(T')$. Thus, $T'$ was not a minimum spanning tree, contradicting the assumption that the graph had two unique minimum spanning trees.  Here's a counterexample for the converse:   Here, the graph is its own minimum spanning tree, and so the minimum spanning tree is unique. Consider the cut $(\\{x\\}, \\{y, z\\})$. Both of the edges $(x, y)$ and $(x, z)$ are light edges crossing the cut, and they are both light edges.",
            "title": "23.1-6"
        },
        {
            "location": "/Chap23/23.1/#231-7",
            "text": "Argue that if all edge weights of a graph are positive, then any subset of edges that connects all vertices and has minimum total weight must be a tree. Give an example to show that the same conclusion does not follow if we allow some weights to be nonpositive.   First, we show that the subset of edges of minimum total weight that connects all the vertices is a tree. To see this, suppose not, that it had a cycle. This would mean that removing any of the edges in this cycle would mean that the remaining edges would still connect all the vertices, but would have a total weight that's less by the weight of the edge that was removed. This would contradict the minimality of the total weight of the subset of vertices. Since the subset of edges forms a tree, and has minimal total weight, it must also be a minimum spanning tree.  To see that this conclusion is not true if we allow negative edge weights, we provide a construction. Consider the graph $K_3$ with all edge weights equal to $-1$. The only minimum weight set of edges that connects the graph has total weight $-3$, and consists of all the edges. This is clearly not a $\\text{MST}$ because it is not a tree, which can be easily seen because it has one more edge than a tree on three vertices should have. Any $\\text{MST}$ of this weighted graph must have weight that is at least $-2$.",
            "title": "23.1-7"
        },
        {
            "location": "/Chap23/23.1/#231-8",
            "text": "Let $T$ be a minimum spanning tree of a graph $G$, and let $L$ be the sorted list of the edge weights of $T$. Show that for any other minimum spanning tree $T'$ of $G$, the list $L$ is also the sorted list of edge weights of $T'$.   Suppose that $L'$ is another sorted list of edge weights of a minimum spanning tree. If $L' \\ne L$, there must be a first edge $(u, v)$ in $T$ or $T'$ which is of smaller weight than the corresponding edge $(x, y)$ in the other set. Without loss of generality, assume $(u, v)$ is in $T$.   Let $C$ be the graph obtained by adding $(u, v)$ to $L'$. Then we must have introduced a cycle. If there exists an edge on that cycle which is of larger weight than $(u, v)$, we can remove it to obtain a tree $C'$ of weight strictly smaller than the weight of $T'$, contradicting the fact that $T'$ is a minimum spanning tree.   Thus, every edge on the cycle must be of lesser or equal weight than $(u, v)$. Suppose that every edge is of strictly smaller weight. Remove $(u, v)$ from $T$ to disconnect it into two components. There must exist some edge besides $(u, v)$ on the cycle which would connect these, and since it has smaller weight we can use that edge instead to create a spanning tree with less weight than $T$, a contradiction. Thus, some edge on the cycle has the same weight as $(u, v)$. Replace that edge by $(u, v)$. The corresponding lists $L$ and $L'$ remain unchanged since we have swapped out an edge of equal weight, but the number of edges which $T$ and $T'$ have in common has increased by $1$.  If we continue in this way, eventually they must have every edge in common, contradicting the fact that their edge weights differ somewhere. Therefore all minimum spanning trees have the same sorted list of edge weights.",
            "title": "23.1-8"
        },
        {
            "location": "/Chap23/23.1/#231-9",
            "text": "Let $T$ be a minimum spanning tree of a graph $G = (V, E)$, and let $V'$ be a subset of $V$. Let $T'$ be the subgraph of $T$ induced by $V'$, and let $G'$ be the subgraph of $G$ induced by $V'$. Show that if $T'$ is connected, then $T'$ is a minimum spanning tree of $G'$.   Suppose that there was some cheaper spanning tree than $T'$. That is, we have that there is some $T''$ so that $w(T'') < w(T')$. Then, let $S$ be the edges in $T$ but not in $T'$. We can then construct a minimum spanning tree of $G$ by considering $S \\cup T''$. This is a spanning tree since $S \\cup T'$ is, and $T''$ makes all the vertices in $V'$ connected just like $T'$ does.  However, we have that  $$w(S \\cup T'') = w(S) + w(T'') < w(S) + w(T') = w(S \\cup T') = w(T).$$  This means that we just found a spanning tree that has a lower total weight than a minimum spanning tree. This is a contradiction, and so our assumption that there was a spanning tree of $V'$ cheaper than $T'$ must be false.",
            "title": "23.1-9"
        },
        {
            "location": "/Chap23/23.1/#231-10",
            "text": "Given a graph $G$ and a minimum spanning tree $T$, suppose that we decrease the weight of one of the edges in $T$. Show that $T$ is still a minimum spanning tree for $G$. More formally, let $T$ be a minimum spanning tree for $G$ with edge weights given by weight function $w$. Choose one edge $(x, y) \\in T$ and a positive number $k$, and define the weight function $w'$ by  $$\nw'(u, v) =\n\\begin{cases}\nw(u, v)     & \\text{ if }(u, v) \\ne (x, y), \\\\\nw(x, y) - k & \\text{ if }(u, v) =   (x, y).\n\\end{cases}\n$$  Show that $T$ is a minimum spanning tree for $G$ with edge weights given by $w'$.   Let $x(T) = \\sum_{(x, y) \\in T} w(x, y)$. We have $w'(T) = w(T) - k$. Consider any other spanning tree $T'$, so that $w(T) \\le w(T')$.  If $(x, y) \\ne T'$, then $w'(T') = w(T') \\ge w(T) > w'(T)$.  If $(x, y) \\in T'$, then $w'(T') = w(T') - k \\ge w(T) - k = w'(T)$.  Either way, $w'(T) \\le w'(T')$, and so $T$ is a minimum spanning tree for weight function $w'$.",
            "title": "23.1-10"
        },
        {
            "location": "/Chap23/23.1/#231-11-star",
            "text": "Given a graph $G$ and a minimum spanning tree $T$, suppose that we decrease the weight of one of the edges not in $T$. Give an algorithm for finding the minimum spanning tree in the modified graph.   If we were to add in this newly decreased edge to the given tree, we would be creating a cycle. Then, if we were to remove any one of the edges along this cycle, we would still have a spanning tree. This means that we look at all the weights along this cycle formed by adding in the decreased edge, and remove the edge in the cycle of maximum weight. This does exactly what we want since we could only possibly want to add in the single decreased edge, and then, from there we change the graph back to a tree in the way that makes its total weight minimized.",
            "title": "23.1-11 $\\star$"
        },
        {
            "location": "/Chap23/23.2/",
            "text": "23.2-1\n\n\n\n\nKruskal's algorithm can return different spanning trees for the same input graph $G$, depending on how it breaks ties when the edges are sorted into order. Show that for each minimum spanning tree $T$ of $G$, there is a way to sort the edges of $G$ in Kruskal's algorithm so that the algorithm returns $T$.\n\n\n\n\nSuppose that we wanted to pick $T$ as our minimum spanning tree. Then, to obtain this tree with Kruskal's algorithm, we will order the edges first by their weight, but then will resolve ties in edge weights by picking an edge first if it is contained in the minimum spanning tree, and treating all the edges that aren't in $T$ as being slightly larger, even though they have the same actual weight.\n\n\nWith this ordering, we will still be finding a tree of the same weight as all the minimum spanning trees $w(T)$. However, since we prioritize the edges in $T$, we have that we will pick them over any other edges that may be in other minimum spanning trees.\n\n\n23.2-2\n\n\n\n\nSuppose that we represent the graph $G = (V, E)$ as an adjacency matrix. Give a simple implementation of Prim's algorithm for this case that runs in $O(V^2)$ time.\n\n\n\n\nAt each step of the algorithm we will add an edge from a vertex in the tree created so far to a vertex not in the tree, such that this edge has minimum weight. Thus, it will be useful to know, for each vertex not in the tree, the edge from that vertex to some vertex in the tree of minimal weight. We will store this information in an array $A$, where $A[u] = (v, w)$ if $w$ is the weight of $(u, v)$ and is minimal among the weights of edges from $u$ to some vertex $v$ in the tree built so far. We'll use $A[u].1$ to access $v$ and $A[u].2$ to access $w$.\n\n\nPRIM\n-\nADJ\n(\nG\n,\n \nw\n,\n \nr\n)\n\n    \ninitialize\n \nA\n \nwith\n \nevery\n \nentry\n \n=\n \n(\nNIL\n,\n \n\u221e\n)\n\n    \nT\n \n=\n \n{\nr\n}\n\n    \nfor\n \ni\n \n=\n \n1\n \nto\n \nV\n\n        \nif\n \nAdj\n[\nr\n,\n \ni\n]\n \n!=\n \n0\n\n            \nA\n[\ni\n]\n \n=\n \n(\nr\n,\n \nw\n(\nr\n,\n \ni\n))\n\n    \nfor\n \neach\n \nu\n \nin\n \nV\n \n-\n \nT\n\n        \nk\n \n=\n \nmin\n(\nA\n[\ni\n]\n.2\n)\n\n        \nT\n \n=\n \nT\n \n\u222a\n \n{\nk\n}\n\n        \nk\n.\nPI\n \n=\n \nA\n[\nk\n]\n.1\n\n        \nfor\n \ni\n \n=\n \n1\n \nto\n \nV\n\n            \nif\n \nAdf\n[\nk\n,\n \ni\n]\n \n!=\n \n0\n \nand\n \nAdj\n[\nk\n,\n \ni\n]\n \n<\n \nA\n[\ni\n]\n.2\n\n                \nA\n[\ni\n]\n \n=\n \n(\nk\n,\n \nAdj\n[\nk\n,\n \ni\n])\n\n\n\n\n\n23.2-3\n\n\n\n\nFor a sparse graph $G = (V, E)$, where $|E| = \\Theta(V)$, is the implementation of Prim's algorithm with a Fibonacci heap asymptotically faster than the binary-heap implementation? What about for a dense graph, where $|E| = \\Theta(V^2)$? How must the sizes $|E|$ and $|V|$ be related for the Fibonacci-heap implementation to be asymptotically faster than the binary-heap implementation?\n\n\n\n\nPrim's algorithm implemented with a Binary heap has runtime $O((V + E)\\lg V)$, which in the sparse case, is just $O(V\\lg V)$. The implementation with Fibonacci heaps is\n\n\n$$O(E + V\\lg V) = O(V + V\\lg V) = O(V \\lg V).$$\n\n\n\n\nIn the sparse case, the two algorithms have the same asymptotic runtimes.\n\n\n\n\nIn the dense case.\n\n\n\n\n\n\nThe binary heap implementation has a runtime of \n\n\n$$O((V + E)\\lg V) = O((V + V^2)\\lg V) = O(V^2\\lg V).$$\n\n\n\n\n\n\nThe Fibonacci heap implementation has a runtime of\n\n\n$$O(E + V\\lg V) = O(V^2 + V\\lg V) = O(V^2).$$\n\n\n\n\n\n\nSo, in the dense case, we have that the Fibonacci heap implementation is asymptotically faster.\n\n\n\n\n\n\nThe Fibonacci heap implementation will be asymptotically faster so long as $E = \\omega(V)$. Suppose that we have some function that grows more quickly than linear, say $f$, and $E = f(V)$. \n\n\n\n\nThe binary heap implementation will have runtime of\n\n\n\n\n$$O((V + E)\\lg V) = O((V + f(V))\\lg V) = O(f(V)\\lg V).$$\n\n\nHowever, we have that the runtime of the Fibonacci heap implementation will have runtime of\n\n\n$$O(E + V\\lg V) = O(f(V) + V\\lg V).$$\n\n\nThis runtime is either $O(f(V))$ or $O(V\\lg V)$ depending on if $f(V)$ grows more or less quickly than $V\\lg V$ respectively.\n\n\nIn either case, we have that the runtime is faster than $O(f(V)\\lg V)$.\n\n\n23.2-4\n\n\n\n\nSuppose that all edge weights in a graph are integers in the range from $1$ to $|V|$. How fast can you make Kruskal's algorithm run? What if the edge weights are integers in the range from $1$ to $W$ for some constant $W$?\n\n\n\n\nWe know that Kruskal's algorithm takes $O(V)$ time for initialization, $O(E\\lg E)$ time to sort the edges, and $O(E\\alpha(V))$ time for the disjoint-set operations, for a total running time of $O(V + E\\lg E + E\\alpha(V)) = O(E\\lg E)$.\n\n\nIf we knew that all of the edge weights in the graph were integers in the range from $1$ to $|V|$, then we could sort the edges in $O(V + E)$ time using counting sort. Since the graph is connected, $V = O(E)$, and so the sorting time is reduced to $O(E)$. This would yield a total running time of $O(V + E + E\\alpha(V)) = O(E\\alpha(V))$, again since $V = O(E)$, and since $E = O(E\\alpha(V))$. The time to process the edges, not the time to sort them, is now the dominant term. Knowledge about the weights won't help speed up any other part of the algorithm, since nothing besides the sort uses the weight values.\n\n\nIf the edge weights were integers in the range from $1$ to $W$ for some constant $W$, then we could again use counting sort to sort the edges more quickly. This time, sorting would take $O(E + W) = O(E)$ time, since $W$ is a constant. As in the first part, we get a total running time of $O(E\\alpha(V))$.\n\n\n23.2-5\n\n\n\n\nSuppose that all edge weights in a graph are integers in the range from $1$ to $|V|$. How fast can you make Prim's algorithm run? What if the edge weights are integers in the range from $1$ to $W$ for some constant $W$?\n\n\n\n\nThe time taken by Prim's algorithm is determined by the speed of the queue operations. With the queue implemented as a Fibonacci heap, it takes $O(E + V\\lg V)$ time.\n\n\nSince the keys in the priority queue are edge weights, it might be possible to implement the queue even more efficiently when there are restrictions on the possible edge weights.\n\n\nWe can improve the running time of Prim's algorithm if $W$ is a constant by implementing the queue as an array $Q[0..W + 1]$\u008d (using the $W + 1$ slot for $\\text{key} = \\infty$), where each slot holds a doubly linked list of vertices with that weight as their key. Then $\\text{EXTRACT-MIN}$ takes only $O(W) = O(1)$ time (just scan for the first nonempty slot), and $\\text{DECREASE-KEY}$ takes only $O(1)$ time (just remove the vertex from the list it's in and insert it at the front of the list indexed by the new key). This gives a total running time of $O(E)$, which is the best possible asymptotic time (since $\\Omega(E)$ edges must be processed).\n\n\nHowever, if the range of edge weights is $1$ to $|V|$, then $\\text{EXTRACT-MIN}$ takes $\\Theta(V)$ time with this data structure. So the total time spent doing $\\text{EXTRACT-MIN}$ is $\\Theta(V^2)$, slowing the algorithm to $\\Theta(E + V^2) = \\Theta(V^2)$. In this case, it is better to keep the Fibonacci-heap priority queue, which gave the $\\Theta(E + V\\lg V)$ time.\n\n\nOther data structures yield better running times:\n\n\n\n\nvan Emde Boas trees (see Chapter 20) give an upper bound of $O(E + V\\lg\\lg V)$ time for Prim's algorithm.\n\n\nA redistributive heap (used in the single-source shortest-paths algorithm of Ahuja, Mehlhorn, Orlin, and Tarjan, and mentioned in the chapter notes for Chapter 24) gives an upper bound of $O(E + V \\sqrt{\\lg V})$ for Prim's algorithm.\n\n\n\n\n23.2-6 $\\star$\n\n\n\n\nSuppose that the edge weights in a graph are uniformly distributed over the halfopen interval $[0, 1)$. Which algorithm, Kruskal's or Prim's, can you make run faster?\n\n\n\n\nFor input drawn from a uniform distribution I would use bucket sort with Kruskal's algorithm, for expected linear time sorting of edges by weight. This would achieve expected runtime $O(E\\alpha(V))$.\n\n\n23.2-7 $\\star$\n\n\n\n\nSuppose that a graph $G$ has a minimum spanning tree already computed. How quickly can we update the minimum spanning tree if we add a new vertex and incident edges to $G$?\n\n\n\n\nWe start with the following lemma.\n\n\nLemma\n\n\nLet $T$ be a minimum spanning tree of $G = (V, E)$, and consider a graph $G' = (V', E')$ for which $G$ is a subgraph, i.e., $V \\subseteq V'$ and $E \\subseteq E'$. Let $\\overline T = E - T$ be the edges of $G$ that are not in $T$. Then there is a minimum spanning tree of $G'$ that includes no edges in $\\overline T$.\n\n\nProof\n \n\n\nBy Exercise 23.2-1, there is a way to order the edges of $E$ so that Kruskal's algorithm, when run on $G$, produces the minimum spanning tree $T$. We will show that Kruskal's algorithm, run on $G'$, produces a minimum spanning tree $T'$ that includes no edges in $\\overline T$. We assume that the edges in $E$ are considered in the same relative order when Kruskal's algorithm is run on $G$ and on $G'$. We first state and prove the following claim.\n\n\nClaim\n \n\n\nFor any pair of vertices $u, v \\in V$, if these vertices are in the same set after Kruskal's algorithm run on $G$ considers any edge $(x, y) \\in E$, then they are in the same set after Kruskal's algorithm run on $G'$ considers $(x, y)$.\n\n\nProof of claim\n \n\n\nLet us order the edges of $E$ by nondecreasing weight as $\\langle (x_1, y_1), (x_2, y_2), \\ldots, (x_k, y_k) \\rangle$, where $k = |E|$. This sequence gives the order in which the edges of $E$ are considered by Kruskal's algorithm, whether it is run on $G$ or on $G'$. We will use induction, with the inductive hypothesis that if $u$ and $v$ are in the same set after Kruskal's algorithm run on $G$ considers an edge $(x_i, y_i)$, then they are in the same set after Kruskal's algorithm run on $G'$ considers the same edge. We use induction on $i$.\n\n\nBasis:\n For the basis, $i = 0$. Kruskal's algorithm run on $G$ has not considered any edges, and so all vertices are in different sets. The inductive hypothesis holds trivially.\n\n\nInductive step:\n We assume that any vertices that are in the same set after Kruskal's algorithm run on $G$ has considered edges $\\langle (x_1, y_1), (x_2, y_2), \\ldots, (x_{i - 1}, y_{i - 1}) \\rangle$ are in the same set after Kruskal's algorithm run on $G'$ has considered the same edges. When Kruskal's algorithm runs on $G'$, after it considers $(x_{i - 1}, y_{i - 1})$, it may consider some edges in $E' - E$ before considering $(x_i, y_i)$. The edges in $E' - E$ may cause $\\text{UNION}$ operations to occur, but sets are never divided. Hence, any vertices that are in the same set after Kruskal's algorithm run on $G'$ considers $(x_{i - 1}, y_{i - 1})$ are still in the same set when $(x_i, y_i)$ is considered.\n\n\nWhen Kruskal's algorithm run on $G$ considers $(x_i, y_i)$, either $x_i$ and $y_i$ are found to be in the same set or they are not.\n\n\n\n\nIf Kruskal's algorithm run on $G$ finds $x_i$ and $y_i$ to be in the same set, then no $\\text{UNION}$ operation occurs. The sets of vertices remain the same, and so the inductive hypothesis continues to hold after considering $(x_i, y_i)$.\n\n\nIf Kruskal's algorithm run on $G$ finds $x_i$ and $y_i$ to be in different sets, then the operation $\\text{UNION}(x_i, y_i)$ will occur. Kruskal's algorithm run on $G'$ will find that either $x_i$ and $y_i$ are in the same set or they are not. By the inductive hypothesis, when edge $(x_i, y_i)$ is considered, all vertices in $x_i$'s set when Kruskal's algorithm runs on $G$ are in $x_i$'s set when Kruskal's algorithm runs on $G'$, and the same holds for $y_i$. Regardless of whether Kruskal's algorithm run on $G'$ finds $x_i$ and $y_i$ to already be in the same set, their sets are united after considering $(x_i, y_i)$, and so the inductive hypothesis continues to hold after considering $(x_i, y_i)$. (#claim)\n\n\n\n\nWith the claim in hand, we suppose that some edge $(u, v) \\in \\overline T$ is placed into $T'$. That means that Kruskal's algorithm run on $G$ found $u$ and $v$ to be in the same set (since $(u, v) \\in \\overline T$ ) but Kruskal's algorithm run on $G'$ found $u$ and $v$ to be in different sets (since $(u, v)$ is placed into $T'$). This fact contradicts the claim, and we conclude that no edge in $\\overline T$ is placed into $T'$. Thus, by running Kruskal's algorithm on $G$ and $G'$, we demonstrate that there exists a minimum spanning tree of $G'$ that includes no edges in $\\overline T$. (#lemma)\n\n\nWe use this lemma as follows. Let $G' = (V', E')$ be the graph $G = (V, E)$ with the one new vertex and its incident edges added. Suppose that we have a minimum spanning tree $T$ for $G$. We compute a minimum spanning tree for $G'$ by creating the graph $G'' = (V', E'')$, where $E''$ consists of the edges of $T$ and the edges in $E' - E$ (i.e., the edges added to $G$ that made $G'$), and then finding a minimum spanning tree $T'$ for $G''$. By the lemma, there is a minimum spanning tree for $G'$ that includes no edges of $E - T$. In other words, $G'$ has a minimum spanning tree that includes only edges in $T$ and $E' - E$ ; these edges comprise exactly the set $E''$. Thus, the the minimum spanning tree $T'$ of $G''$ is also a minimum spanning tree of $G'$.\n\n\nEven though the proof of the lemma uses Kruskal's algorithm, we are not required to use this algorithm to find $T'$. We can find a minimum spanning tree by any means we choose. Let us use Prim's algorithm with a Fibonacci-heap priority queue. Since $|V'| = |V| + 1$ and $|E''| \\le 2|V| - 1$ ($E''$ contains the $|V| - 1$ edges of $T$ and at most $|V|$ edges in $E' - E$ ), it takes $O(V)$ time to construct $G''$, and the run of Prim's algorithm with a Fibonacci-heap priority queue takes time $O(E'' + V'\\lg V) = O(V\\lg V)$. Thus, if we are given a minimum spanning tree of $G$, we can compute a minimum spanning tree of $G'$ in $O(V\\lg V)$ time.\n\n\n23.2-8\n\n\n\n\nProfessor Borden proposes a new divide-and-conquer algorithm for computing minimum spanning trees, which goes as follows. Given a graph $G = (V, E)$, partition the set $V$ of vertices into two sets $V_1$ and $V_2$ such that $|V_1|$ and $|V_2|$ differ by at most $1$. Let $E_1$ be the set of edges that are incident only on vertices in $V_1$, and let $E_2$ be the set of edges that are incident only on vertices in $V_2$. Recursively solve a minimum-spanning-tree problem on each of the two subgraphs $G_1 = (V_1, E_1)$ and $G_2 = (V_2, E_2)$. Finally, select the minimum-weight edge in $E$ that crosses the cut $(V_1, V_2)$, and use this edge to unite the resulting two minimum spanning trees into a single spanning tree.\n\n\nEither argue that the algorithm correctly computes a minimum spanning tree of $G$, or provide an example for which the algorithm fails.\n\n\n\n\nThe algorithm fails. Suppose $E = \\{(u, v), (u, w), (v, w)\\}$, the weight of $(u, v)$ and $(u, w)$ is $1$, and the weight of $(v, w)$ is $1000$, partition the set into two sets $V_1 = \\{u\\}$ and $V_2 = \\{v, w\\}$.",
            "title": "23.2 The algorithms of Kruskal and Prim"
        },
        {
            "location": "/Chap23/23.2/#232-1",
            "text": "Kruskal's algorithm can return different spanning trees for the same input graph $G$, depending on how it breaks ties when the edges are sorted into order. Show that for each minimum spanning tree $T$ of $G$, there is a way to sort the edges of $G$ in Kruskal's algorithm so that the algorithm returns $T$.   Suppose that we wanted to pick $T$ as our minimum spanning tree. Then, to obtain this tree with Kruskal's algorithm, we will order the edges first by their weight, but then will resolve ties in edge weights by picking an edge first if it is contained in the minimum spanning tree, and treating all the edges that aren't in $T$ as being slightly larger, even though they have the same actual weight.  With this ordering, we will still be finding a tree of the same weight as all the minimum spanning trees $w(T)$. However, since we prioritize the edges in $T$, we have that we will pick them over any other edges that may be in other minimum spanning trees.",
            "title": "23.2-1"
        },
        {
            "location": "/Chap23/23.2/#232-2",
            "text": "Suppose that we represent the graph $G = (V, E)$ as an adjacency matrix. Give a simple implementation of Prim's algorithm for this case that runs in $O(V^2)$ time.   At each step of the algorithm we will add an edge from a vertex in the tree created so far to a vertex not in the tree, such that this edge has minimum weight. Thus, it will be useful to know, for each vertex not in the tree, the edge from that vertex to some vertex in the tree of minimal weight. We will store this information in an array $A$, where $A[u] = (v, w)$ if $w$ is the weight of $(u, v)$ and is minimal among the weights of edges from $u$ to some vertex $v$ in the tree built so far. We'll use $A[u].1$ to access $v$ and $A[u].2$ to access $w$.  PRIM - ADJ ( G ,   w ,   r ) \n     initialize   A   with   every   entry   =   ( NIL ,   \u221e ) \n     T   =   { r } \n     for   i   =   1   to   V \n         if   Adj [ r ,   i ]   !=   0 \n             A [ i ]   =   ( r ,   w ( r ,   i )) \n     for   each   u   in   V   -   T \n         k   =   min ( A [ i ] .2 ) \n         T   =   T   \u222a   { k } \n         k . PI   =   A [ k ] .1 \n         for   i   =   1   to   V \n             if   Adf [ k ,   i ]   !=   0   and   Adj [ k ,   i ]   <   A [ i ] .2 \n                 A [ i ]   =   ( k ,   Adj [ k ,   i ])",
            "title": "23.2-2"
        },
        {
            "location": "/Chap23/23.2/#232-3",
            "text": "For a sparse graph $G = (V, E)$, where $|E| = \\Theta(V)$, is the implementation of Prim's algorithm with a Fibonacci heap asymptotically faster than the binary-heap implementation? What about for a dense graph, where $|E| = \\Theta(V^2)$? How must the sizes $|E|$ and $|V|$ be related for the Fibonacci-heap implementation to be asymptotically faster than the binary-heap implementation?   Prim's algorithm implemented with a Binary heap has runtime $O((V + E)\\lg V)$, which in the sparse case, is just $O(V\\lg V)$. The implementation with Fibonacci heaps is  $$O(E + V\\lg V) = O(V + V\\lg V) = O(V \\lg V).$$   In the sparse case, the two algorithms have the same asymptotic runtimes.   In the dense case.    The binary heap implementation has a runtime of   $$O((V + E)\\lg V) = O((V + V^2)\\lg V) = O(V^2\\lg V).$$    The Fibonacci heap implementation has a runtime of  $$O(E + V\\lg V) = O(V^2 + V\\lg V) = O(V^2).$$    So, in the dense case, we have that the Fibonacci heap implementation is asymptotically faster.    The Fibonacci heap implementation will be asymptotically faster so long as $E = \\omega(V)$. Suppose that we have some function that grows more quickly than linear, say $f$, and $E = f(V)$.    The binary heap implementation will have runtime of   $$O((V + E)\\lg V) = O((V + f(V))\\lg V) = O(f(V)\\lg V).$$  However, we have that the runtime of the Fibonacci heap implementation will have runtime of  $$O(E + V\\lg V) = O(f(V) + V\\lg V).$$  This runtime is either $O(f(V))$ or $O(V\\lg V)$ depending on if $f(V)$ grows more or less quickly than $V\\lg V$ respectively.  In either case, we have that the runtime is faster than $O(f(V)\\lg V)$.",
            "title": "23.2-3"
        },
        {
            "location": "/Chap23/23.2/#232-4",
            "text": "Suppose that all edge weights in a graph are integers in the range from $1$ to $|V|$. How fast can you make Kruskal's algorithm run? What if the edge weights are integers in the range from $1$ to $W$ for some constant $W$?   We know that Kruskal's algorithm takes $O(V)$ time for initialization, $O(E\\lg E)$ time to sort the edges, and $O(E\\alpha(V))$ time for the disjoint-set operations, for a total running time of $O(V + E\\lg E + E\\alpha(V)) = O(E\\lg E)$.  If we knew that all of the edge weights in the graph were integers in the range from $1$ to $|V|$, then we could sort the edges in $O(V + E)$ time using counting sort. Since the graph is connected, $V = O(E)$, and so the sorting time is reduced to $O(E)$. This would yield a total running time of $O(V + E + E\\alpha(V)) = O(E\\alpha(V))$, again since $V = O(E)$, and since $E = O(E\\alpha(V))$. The time to process the edges, not the time to sort them, is now the dominant term. Knowledge about the weights won't help speed up any other part of the algorithm, since nothing besides the sort uses the weight values.  If the edge weights were integers in the range from $1$ to $W$ for some constant $W$, then we could again use counting sort to sort the edges more quickly. This time, sorting would take $O(E + W) = O(E)$ time, since $W$ is a constant. As in the first part, we get a total running time of $O(E\\alpha(V))$.",
            "title": "23.2-4"
        },
        {
            "location": "/Chap23/23.2/#232-5",
            "text": "Suppose that all edge weights in a graph are integers in the range from $1$ to $|V|$. How fast can you make Prim's algorithm run? What if the edge weights are integers in the range from $1$ to $W$ for some constant $W$?   The time taken by Prim's algorithm is determined by the speed of the queue operations. With the queue implemented as a Fibonacci heap, it takes $O(E + V\\lg V)$ time.  Since the keys in the priority queue are edge weights, it might be possible to implement the queue even more efficiently when there are restrictions on the possible edge weights.  We can improve the running time of Prim's algorithm if $W$ is a constant by implementing the queue as an array $Q[0..W + 1]$\u008d (using the $W + 1$ slot for $\\text{key} = \\infty$), where each slot holds a doubly linked list of vertices with that weight as their key. Then $\\text{EXTRACT-MIN}$ takes only $O(W) = O(1)$ time (just scan for the first nonempty slot), and $\\text{DECREASE-KEY}$ takes only $O(1)$ time (just remove the vertex from the list it's in and insert it at the front of the list indexed by the new key). This gives a total running time of $O(E)$, which is the best possible asymptotic time (since $\\Omega(E)$ edges must be processed).  However, if the range of edge weights is $1$ to $|V|$, then $\\text{EXTRACT-MIN}$ takes $\\Theta(V)$ time with this data structure. So the total time spent doing $\\text{EXTRACT-MIN}$ is $\\Theta(V^2)$, slowing the algorithm to $\\Theta(E + V^2) = \\Theta(V^2)$. In this case, it is better to keep the Fibonacci-heap priority queue, which gave the $\\Theta(E + V\\lg V)$ time.  Other data structures yield better running times:   van Emde Boas trees (see Chapter 20) give an upper bound of $O(E + V\\lg\\lg V)$ time for Prim's algorithm.  A redistributive heap (used in the single-source shortest-paths algorithm of Ahuja, Mehlhorn, Orlin, and Tarjan, and mentioned in the chapter notes for Chapter 24) gives an upper bound of $O(E + V \\sqrt{\\lg V})$ for Prim's algorithm.",
            "title": "23.2-5"
        },
        {
            "location": "/Chap23/23.2/#232-6-star",
            "text": "Suppose that the edge weights in a graph are uniformly distributed over the halfopen interval $[0, 1)$. Which algorithm, Kruskal's or Prim's, can you make run faster?   For input drawn from a uniform distribution I would use bucket sort with Kruskal's algorithm, for expected linear time sorting of edges by weight. This would achieve expected runtime $O(E\\alpha(V))$.",
            "title": "23.2-6 $\\star$"
        },
        {
            "location": "/Chap23/23.2/#232-7-star",
            "text": "Suppose that a graph $G$ has a minimum spanning tree already computed. How quickly can we update the minimum spanning tree if we add a new vertex and incident edges to $G$?   We start with the following lemma.  Lemma  Let $T$ be a minimum spanning tree of $G = (V, E)$, and consider a graph $G' = (V', E')$ for which $G$ is a subgraph, i.e., $V \\subseteq V'$ and $E \\subseteq E'$. Let $\\overline T = E - T$ be the edges of $G$ that are not in $T$. Then there is a minimum spanning tree of $G'$ that includes no edges in $\\overline T$.  Proof    By Exercise 23.2-1, there is a way to order the edges of $E$ so that Kruskal's algorithm, when run on $G$, produces the minimum spanning tree $T$. We will show that Kruskal's algorithm, run on $G'$, produces a minimum spanning tree $T'$ that includes no edges in $\\overline T$. We assume that the edges in $E$ are considered in the same relative order when Kruskal's algorithm is run on $G$ and on $G'$. We first state and prove the following claim.  Claim    For any pair of vertices $u, v \\in V$, if these vertices are in the same set after Kruskal's algorithm run on $G$ considers any edge $(x, y) \\in E$, then they are in the same set after Kruskal's algorithm run on $G'$ considers $(x, y)$.  Proof of claim    Let us order the edges of $E$ by nondecreasing weight as $\\langle (x_1, y_1), (x_2, y_2), \\ldots, (x_k, y_k) \\rangle$, where $k = |E|$. This sequence gives the order in which the edges of $E$ are considered by Kruskal's algorithm, whether it is run on $G$ or on $G'$. We will use induction, with the inductive hypothesis that if $u$ and $v$ are in the same set after Kruskal's algorithm run on $G$ considers an edge $(x_i, y_i)$, then they are in the same set after Kruskal's algorithm run on $G'$ considers the same edge. We use induction on $i$.  Basis:  For the basis, $i = 0$. Kruskal's algorithm run on $G$ has not considered any edges, and so all vertices are in different sets. The inductive hypothesis holds trivially.  Inductive step:  We assume that any vertices that are in the same set after Kruskal's algorithm run on $G$ has considered edges $\\langle (x_1, y_1), (x_2, y_2), \\ldots, (x_{i - 1}, y_{i - 1}) \\rangle$ are in the same set after Kruskal's algorithm run on $G'$ has considered the same edges. When Kruskal's algorithm runs on $G'$, after it considers $(x_{i - 1}, y_{i - 1})$, it may consider some edges in $E' - E$ before considering $(x_i, y_i)$. The edges in $E' - E$ may cause $\\text{UNION}$ operations to occur, but sets are never divided. Hence, any vertices that are in the same set after Kruskal's algorithm run on $G'$ considers $(x_{i - 1}, y_{i - 1})$ are still in the same set when $(x_i, y_i)$ is considered.  When Kruskal's algorithm run on $G$ considers $(x_i, y_i)$, either $x_i$ and $y_i$ are found to be in the same set or they are not.   If Kruskal's algorithm run on $G$ finds $x_i$ and $y_i$ to be in the same set, then no $\\text{UNION}$ operation occurs. The sets of vertices remain the same, and so the inductive hypothesis continues to hold after considering $(x_i, y_i)$.  If Kruskal's algorithm run on $G$ finds $x_i$ and $y_i$ to be in different sets, then the operation $\\text{UNION}(x_i, y_i)$ will occur. Kruskal's algorithm run on $G'$ will find that either $x_i$ and $y_i$ are in the same set or they are not. By the inductive hypothesis, when edge $(x_i, y_i)$ is considered, all vertices in $x_i$'s set when Kruskal's algorithm runs on $G$ are in $x_i$'s set when Kruskal's algorithm runs on $G'$, and the same holds for $y_i$. Regardless of whether Kruskal's algorithm run on $G'$ finds $x_i$ and $y_i$ to already be in the same set, their sets are united after considering $(x_i, y_i)$, and so the inductive hypothesis continues to hold after considering $(x_i, y_i)$. (#claim)   With the claim in hand, we suppose that some edge $(u, v) \\in \\overline T$ is placed into $T'$. That means that Kruskal's algorithm run on $G$ found $u$ and $v$ to be in the same set (since $(u, v) \\in \\overline T$ ) but Kruskal's algorithm run on $G'$ found $u$ and $v$ to be in different sets (since $(u, v)$ is placed into $T'$). This fact contradicts the claim, and we conclude that no edge in $\\overline T$ is placed into $T'$. Thus, by running Kruskal's algorithm on $G$ and $G'$, we demonstrate that there exists a minimum spanning tree of $G'$ that includes no edges in $\\overline T$. (#lemma)  We use this lemma as follows. Let $G' = (V', E')$ be the graph $G = (V, E)$ with the one new vertex and its incident edges added. Suppose that we have a minimum spanning tree $T$ for $G$. We compute a minimum spanning tree for $G'$ by creating the graph $G'' = (V', E'')$, where $E''$ consists of the edges of $T$ and the edges in $E' - E$ (i.e., the edges added to $G$ that made $G'$), and then finding a minimum spanning tree $T'$ for $G''$. By the lemma, there is a minimum spanning tree for $G'$ that includes no edges of $E - T$. In other words, $G'$ has a minimum spanning tree that includes only edges in $T$ and $E' - E$ ; these edges comprise exactly the set $E''$. Thus, the the minimum spanning tree $T'$ of $G''$ is also a minimum spanning tree of $G'$.  Even though the proof of the lemma uses Kruskal's algorithm, we are not required to use this algorithm to find $T'$. We can find a minimum spanning tree by any means we choose. Let us use Prim's algorithm with a Fibonacci-heap priority queue. Since $|V'| = |V| + 1$ and $|E''| \\le 2|V| - 1$ ($E''$ contains the $|V| - 1$ edges of $T$ and at most $|V|$ edges in $E' - E$ ), it takes $O(V)$ time to construct $G''$, and the run of Prim's algorithm with a Fibonacci-heap priority queue takes time $O(E'' + V'\\lg V) = O(V\\lg V)$. Thus, if we are given a minimum spanning tree of $G$, we can compute a minimum spanning tree of $G'$ in $O(V\\lg V)$ time.",
            "title": "23.2-7 $\\star$"
        },
        {
            "location": "/Chap23/23.2/#232-8",
            "text": "Professor Borden proposes a new divide-and-conquer algorithm for computing minimum spanning trees, which goes as follows. Given a graph $G = (V, E)$, partition the set $V$ of vertices into two sets $V_1$ and $V_2$ such that $|V_1|$ and $|V_2|$ differ by at most $1$. Let $E_1$ be the set of edges that are incident only on vertices in $V_1$, and let $E_2$ be the set of edges that are incident only on vertices in $V_2$. Recursively solve a minimum-spanning-tree problem on each of the two subgraphs $G_1 = (V_1, E_1)$ and $G_2 = (V_2, E_2)$. Finally, select the minimum-weight edge in $E$ that crosses the cut $(V_1, V_2)$, and use this edge to unite the resulting two minimum spanning trees into a single spanning tree.  Either argue that the algorithm correctly computes a minimum spanning tree of $G$, or provide an example for which the algorithm fails.   The algorithm fails. Suppose $E = \\{(u, v), (u, w), (v, w)\\}$, the weight of $(u, v)$ and $(u, w)$ is $1$, and the weight of $(v, w)$ is $1000$, partition the set into two sets $V_1 = \\{u\\}$ and $V_2 = \\{v, w\\}$.",
            "title": "23.2-8"
        },
        {
            "location": "/Chap23/Problems/23-1/",
            "text": "Let $G = (V, E)$ be an undirected, connected graph whose weight function is $w: E \\rightarrow \\mathbb R$, and suppose that $|E| \\ge |V|$ and all edge weights are distinct.\n\n\nWe define a second-best minimum spanning tree as follows. Let $\\mathcal T$ be the set of all spanning trees of $G$, and let $T'$ be a minimum spanning tree of $G$. Then a \nsecond-best minimum spanning tree\n is a spanning tree $T$ such that $W(T) = \\min_{T'' \\in \\mathcal T - \\{T'\\}} \\{w(T'')\\}$.\n\n\na.\n Show that the minimum spanning tree is unique, but that the second-best minimum spanning tree need not be unique.\n\n\nb.\n Let $T$ be the minimum spanning tree of $G$. Prove that $G$ contains edges $(u, v) \\in T$ and $(x, y) \\notin T$ such that $T - \\{(u, v)\\} \\cup \\{(x, y)\\}$ is a second-best minimum spanning tree of $G$.\n\n\nc.\n Let $T$ be a spanning tree of $G$ and, for any two vertices $u, v \\in V$, let $max[u, v]$ denote an edge of maximum weight on the unique simple path between $u$ and $v$ in $T$. Describe an $O(V^2)$-time algorithm that, given $T$, computes $max[u, v]$ for all $u, v \\in V$.\n\n\nd.\n Give an efficient algorithm to compute the second-best minimum spanning tree of $G$.\n\n\n\n\na.\n To see that the minimum spanning tree is unique, observe that since the graph is connected and all edge weights are distinct, then there is a unique light edge crossing every cut. By Exercise 23.1-6, the minimum spanning tree is unique.\n\n\nTo see that the second-best minimum spanning tree need not be unique, here is a weighted, undirected graph with a unique minimum spanning tree of weight $7$ and two second-best minimum spanning trees of weight $8$:\n\n\n\n\nb.\n Since any spanning tree has exactly $|V| - 1$ edges, any second-best minimum spanning tree must have at least one edge that is not in the (best) minimum spanning tree. If a second-best minimum spanning tree has exactly one edge, say $(x, y)$, that is not in the minimum spanning tree, then it has the same set of edges as the minimum spanning tree, except that $(x, y)$ replaces some edge, say $(u, v)$, of the minimum spanning tree. In this case, $T' = T - \\{(u, v)\\} \\cup \\{(x, y)\\}$, as we wished to show.\n\n\nThus, all we need to show is that by replacing two or more edges of the minimum spanning tree, we cannot obtain a second-best minimum spanning tree. Let $T$ be the minimum spanning tree of $G$, and suppose that there exists a second-best minimum spanning tree $T'$ that differs from $T$ by two or more edges. There are at least two edges in $T - T'$, and let $(u, v)$ be the edge in $T - T'$ with minimum weight. If we were to add $(u, v)$ to $T'$, we would get a cycle $c$. This cycle contains some edge $(x, y)$ in $T' - T$ (since otherwise, $T$ would contain a cycle).\n\n\nWe claim that $w(x, y) > w(u, v)$. We prove this claim by contradiction, so let us assume that $w(x, y) < w(u, v)$. (Recall the assumption that edge weights are distinct, so that we do not have to concern ourselves with $w(x, y) = w(u, v)$.) If we add $(x, y)$ to $T$, we get a cycle $c'$, which contains some edge$(u', v')$ in $T - T'$ (since otherwise, $T'$ would contain a cycle). Therefore, the set of edges $T'' = T - \\{(u', v')\\} \\cup \\{(x, y)\\}$ forms a spanning tree, and we must also have $w(u', v') < w(x, y)$, since otherwise $T''$ would be a spanning tree with weight less than $w(T)$. Thus, $w(u', v') < w(x, y) < w(u, v)$, which contradicts our choice of $(u, v)$ as the edge in $T - T'$ of minimum weight.\n\n\nSince the edges $(u, v)$ and $(x, y)$ would be on a common cycle $c$ if we were to add $(u, v)$ to $T'$, the set of edges $T' - \\{(x, y)\\} \\cup \\{(u, v)\\}$ is a spanning tree, and its weight is less than $w(T')$. Moreover, it differs from $T$ (because it differs from $T'$ by only one edge). Thus, we have formed a spanning tree whose weight is less than $w(T')$ but is not $T$. Hence, $T'$ was not a second-best minimum spanning tree.\n\n\nc.\n We can fill in $max[u, v]$ for all $u, v \\in V$ in $O(V^2)$ time by simply doing a search from each vertex $u$, having restricted the edges visited to those of the spanning tree $T$. It doesn't matter what kind of search we do: breadth-first, depth-first, or any other kind.\n\n\nWe'll give pseudocode for both breadth-first and depth-first approaches. Each approach differs from the pseudocode given in Chapter 22 in that we don't need to compute $d$ or $f$ values, and we'll use the $max$ table itself to record whether a vertex has been visited in a given search. In particular, $max[u, v] = \\text{NIL}$ if and only if $u = v$ or we have not yet visited vertex $v$ in a search from vertex $u$. Note also that since we're visiting via edges in a spanning tree of an undirected graph, we are guaranteed that the search from each vertex $u$\u2014whether breadth-first or depth-first\u2014will visit all vertices. There will be no need to ''restart'' the search as is done in the $\\text{DFS}$ procedure of Section 22.3. Our pseudocode assumes that the adjacency list of each vertex consists only of edges in the spanning tree $T$.\n\n\nHere's the breadth-first search approach:\n\n\nBFS\n-\nFILL\n-\nMAX\n(\nG\n,\n \nT\n,\n \nw\n)\n\n    \nlet\n \nmax\n \nbe\n \na\n \nnew\n \ntable\n \nwith\n \nan\n \nentry\n \nmax\n[\nu\n,\n \nv\n]\n \nfor\n \neach\n \nu\n,\n \nv\n \n\u2208\n \nG\n.\nV\n\n    \nfor\n \neach\n \nvertex\n \nu\n \n\u2208\n \nG\n.\nV\n\n        \nfor\n \neach\n \nvertex\n \nv\n \n\u2208\n \nG\n.\nV\n\n            \nmax\n[\nu\n,\n \nv\n]\n \n=\n \nNIL\n\n        \nQ\n \n=\n \n\u2205\n\n        \nENQUEUE\n(\nQ\n,\n \nu\n)\n\n        \nwhile\n \nQ\n \n!=\n \n\u2205\n\n            \nx\n \n=\n \nDEQUEUE\n(\nQ\n)\n\n            \nfor\n \neach\n \nv\n \n\u2208\n \nG\n.\nAdj\n[\nx\n]\n\n                \nif\n \nmax\n[\nu\n,\n \nv\n]\n \n==\n \nNIL\n \nand\n \nv\n \n!=\n \nu\n\n                    \nif\n \nx\n \n==\n \nu\n \nor\n \nw\n(\nx\n,\n \nv\n)\n \n>\n \nmax\n[\nu\n,\n \nx\n]\n\n                        \nmax\n[\nu\n,\n \nv\n]\n \n=\n \n(\nx\n,\n \nv\n)\n\n                    \nelse\n \nmax\n[\nu\n,\n \nv\n]\n \n=\n \nmax\n[\nu\n,\n \nx\n]\n\n                    \nENQUEUE\n(\nQ\n,\n \nv\n)\n\n    \nreturn\n \nmax\n\n\n\n\n\nHere's the depth-first search approach:\n\n\nDFS\n-\nFILL\n-\nMAX\n(\nG\n,\n \nT\n,\n \nw\n)\n\n    \nlet\n \nmax\n \nbe\n \na\n \nnew\n \ntable\n \nwith\n \nan\n \nentry\n \nmax\n[\nu\n,\n \nv\n]\n \nfor\n \neach\n \nu\n,\n \nv\n \n\u2208\n \nG\n.\nV\n \n    \nfor\n \neach\n \nvertex\n \nu\n \n\u2208\n \nG\n.\nV\n\n        \nfor\n \neach\n \nvertex\n \nv\n \n\u2208\n \nG\n.\nV\n\n            \nmax\n[\nu\n,\n \nv\n]\n \n=\n \nNIL\n\n        \nDFS\n-\nFILL\n-\nMAX\n-\nVISIT\n(\nG\n,\n \nu\n,\n \nu\n,\n \nmax\n)\n\n    \nreturn\n \nmax\n\n\n\n\n\nDFS\n-\nFILL\n-\nMAX\n-\nVISIT\n(\nG\n,\n \nu\n,\n \nx\n,\n \nmax\n)\n\n    \nfor\n \neach\n \nvertex\n \nv\n \n\u2208\n \nG\n.\nAdj\n[\nx\n]\n\n        \nif\n \nmax\n[\nu\n,\n \nv\n]\n \n==\n \nNIL\n \nand\n \nv\n \n!=\n \nu\n\n            \nif\n \nx\n \n==\n \nu\n \nor\n \nw\n(\nx\n,\n \nv\n)\n \n>\n \nmax\n[\nu\n,\n \nx\n]\n\n                \nmax\n[\nu\n,\n \nv\n]\n \n=\n \n(\nx\n,\n \nv\n)\n\n            \nelse\n \nmax\n[\nu\n,\n \nv\n]\n \n=\n \nmax\n[\nu\n,\n \nx\n]\n\n            \nDFS\n-\nFILL\n-\nMAX\n-\nVISIT\n(\nG\n,\n \nu\n,\n \nv\n,\n \nmax\n)\n\n\n\n\n\nFor either approach, we are filling in $|V|$ rows of the $max$ table. Since the number of edges in the spanning tree is $|V| - 1$, each row takes $O(V)$ time to fill in. Thus, the total time to fill in the $max$ table is $O(V^2)$.\n\n\nd.\n In part (b), we established that we can find a second-best minimum spanning tree by replacing just one edge of the minimum spanning tree $T$ by some edge $(u, v)$ not in $T$. As we know, if we create spanning tree $T'$ by replacing edge $(x, y) \\in T$ by edge $(u, v) \\ne T$, then $w(T') = w(T) - w(x, y) + w(u, v)$. For a given edge $(u, v)$, the edge $(x, y) \\in T$ that minimizes $w(T')$ is the edge of maximum weight on the unique path between $u$ and $v$ in $T$. If we have already computed the $max$ table from part (c) based on $T$, then the identity of this edge is precisely what is stored in $max[u, v]$\u008d. All we have to do is determine an edge $(u, v) \\ne T$ for which $w(max[u, v]) - w(u, v)$ is minimum.\n\n\nThus, our algorithm to find a second-best minimum spanning tree goes as follows:\n\n\n\n\nCompute the minimum spanning tree $T$. Time: $O(E + V\\lg V)$, using Prim's algorithm with a Fibonacci-heap implementation of the priority queue. Since $|E| < |V|^2$, this running time is $O(V^2)$.\n\n\nGiven the minimum spanning tree $T$, compute the $max$ table, as in part (c). Time: $O(V^2)$.\n\n\nFind an edge $(u, v) \\ne T$ that minimizes $w(max[u, v]) - w(u, v)$. Time: $O(E)$, which is $O(V^2)$.\n\n\nHaving found an edge $(u, v)$ in step 3, return $T' = T - \\{max[u, v]\\} \\cup \\{(u, v)\\}$ as a second-best minimum spanning tree.\n\n\n\n\nThe total time is $O(V^2)$.",
            "title": "23-1 Second-best minimum spanning tree"
        },
        {
            "location": "/Chap23/Problems/23-2/",
            "text": "For a very sparse connected graph $G = (V, E)$, we can further improve upon the $O(E + V\\lg V)$ running time of Prim's algorithm with Fibonacci heaps by preprocessing $G$ to decrease the number of vertices before running Prim's algorithm. In particular, we choose, for each vertex $u$, the minimum-weight edge $(u, v)$ incident on $u$, and we put $(u, v)$ into the minimum spanning tree under construction. We then contract all chosen edges (see Section B.4). Rather than contracting these edges one at a time, we first identify sets of vertices that are united into the same new vertex. Then we create the graph that would have resulted from contracting these edges one at a time, but we do so by ''renaming'' edges according to the sets into which their endpoints were placed. Several edges from the original graph may be renamed the same as each other. In such a case, only one edge results, and its weight is the minimum of the weights of the corresponding original edges.\n\n\nInitially, we set the minimum spanning tree $T$ being constructed to be empty, and for each edge $(u, v) \\in E$, we initialize the attributes $(u, v).orig = (u, v)$ and $(u, v).c = w(u, v)$. We use the $orig$ attribute to reference the edge from the initial graph that is associated with an edge in the contracted graph. The $c$ attribute holds the weight of an edge, and as edges are contracted, we update it according to the above scheme for choosing edge weights. The procedure $\\text{MST-REDUCE}$ takes inputs $G$ and $T$, and it returns a contracted graph $G'$ with updated attributes $orig'$ and $c'$. The procedure also accumulates edges of $G$ into the minimum spanning tree $T$.\n\n\nMST\n-\nREDUCE\n(\nG\n,\n \nT\n)\n\n    \nfor\n \neach\n \nv\n \nin\n \nG\n.\nV\n\n        \nv\n.\nmark\n \n=\n \nFALSE\n\n        \nMAKE\n-\nSET\n(\nv\n)\n\n    \nfor\n \neach\n \nu\n \nin\n \nG\n.\nV\n\n        \nif\n \nu\n.\nmark\n \n==\n \nFALSE\n\n            \nchoose\n \nv\n \nin\n \nG\n.\nAdj\n[\nu\n]\n \nsuch\n \nthat\n \n(\nu\n,\n \nv\n).\nc\n \nis\n \nminimized\n\n                \nUNION\n(\nu\n,\n \nv\n)\n\n                \nT\n \n=\n \nT\n \n\u222a\n \n{(\nu\n,\n \nv\n).\norig\n}\n\n                \nu\n.\nmark\n \n=\n \nv\n.\nmark\n \n=\n \nTRUE\n\n    \nG\n'\n.\nV\n \n=\n \n{\nFIND\n-\nSET\n(\nv\n)\n \n:\n \nv\n \n\u2208\n \nG\n.\nV\n}\n\n    \nG\n'\n.\nE\n \n=\n \n\u2205\n\n    \nfor\n \neach\n \n(\nx\n,\n \ny\n)\n \n\u2208\n \nG\n.\nE\n\n        \nu\n \n=\n \nFIND\n-\nSET\n(\nx\n)\n\n        \nv\n \n=\n \nFIND\n-\nSET\n(\ny\n)\n\n        \nif\n \n(\nu\n,\n \nv\n)\n \n\u2209\n \nin\n \nG\n'\n.\nE\n\n             \nG\n'\n.\nE\n \n=\n \nG\n'\n.\nE\n \n\u222a\n \n{(\nu\n,\n \nv\n)}\n\n             \n(\nu\n,\n \nv\n).\norig\n'\n \n=\n \n(\nx\n,\n \ny\n).\norig\n\n             \n(\nu\n,\n \nv\n).\nc\n'\n \n=\n \n(\nx\n,\n \ny\n).\nc\n\n        \nelse\n \nif\n \n(\nx\n,\n \ny\n).\nc\n \n<\n \n(\nu\n,\nv\n).\nc\n'\n\n             \n(\nu\n,\n \nv\n).\norig\n'\n \n=\n \n(\nx\n,\n \ny\n).\norig\n\n             \n(\nu\n,\n \nv\n).\nc\n'\n \n=\n \n(\nx\n,\n \ny\n).\nc\n\n    \nconstruct\n \nadjacency\n \nlists\n \nG\n'\n.\nAdj\n \nfor\n \nG\n'\n\n    \nreturn\n \nG\n'\n \nand\n \nT\n\n\n\n\n\na.\n Let $T$ be the set of edges returned by $\\text{MST-REDUCE}$, and let $A$ be the minimum spanning tree of the graph $G'$ formed by the call $\\text{MST-PRIM}(G', c', r)$, where $c'$ is the weight attribute on the edges of $G'.E$ and $r$ is any vertex in $G'.V$. Prove that $T \\cup \\{(x,y).orig': (x, y) \\in A\\}$ is a minimum spanning tree of $G$.\n\n\nb.\n Argue that $|G'.V| \\le |V| / 2$.\n\n\nc.\n Show how to implement $\\text{MST-REDUCE}$ so that it runs in $O(E)$ time. ($\\textit{Hint:}$ Use simple data structures.)\n\n\nd.\n Suppose that we run $k$ phases of $\\text{MST-REDUCE}$, using the output $G'$ produced by one phase as the input $G$ to the next phase and accumulating edges in $T$. Argue that the overall running time of the $k$ phases is $O(kE)$.\n\n\ne.\n Suppose that after running $k$ phases of $\\text{MST-REDUCE}$, as in part (d), we run Prim's algorithm by calling $\\text{MST-PRIM}(G', c', r)$, where $G'$, with weight attribute $c'$, is returned by the last phase and $r$ is any vertex in $G'.V$. Show how to pick $k$ so that the overall running time is $O(E\\lg\\lg V)$. Argue that your choice of $k$ minimizes the overall asymptotic running time.\n\n\nf.\n For what values of $|E|$ (in terms of $|V|$) does Prim's algorithm with preprocessing asymptotically beat Prim's algorithm without preprocessing?\n\n\n\n\na.\n We'll show that the edges added at each step are safe. Consider an unmarked vertex $u$. Set $S = {u}$ and let $A$ be the set of edges in the tree so far. Then the cut respects $A$, and the next edge we add is a light edge, so it is safe for $A$. Thus, every edge in $T$ before we run Prim's algorithm is safe for $T$. Any edge that Prim's would normally add at this point would have to connect two of the trees already created, and it would be chosen as minimal. Moreover, we choose exactly one between any two trees. Thus, the fact that we only have the smallest edges available to us is not a problem. The resulting tree must be minimal.\n\n\nb.\n We argue by induction on the number of vertices in $G$. We'll assume that $|V| > 1$, since otherwise $\\text{MST-REDUCE}$ will encounter an error on line 6 because there is no way to choose $v$. Let $|V| = 2$. Since $G$ is connected, there must be an edge between $u$ and $v$, and it is trivially of minimum weight. They are joined, and $|G'.V| = 1 = |V| / 2$.\n\n\nSuppose the claim holds for $|V| = n$. Let $G$ be a connected graph on $n + 1$ vertices. Then $G'.V \\le n / 2$ prior to the final vertex $v$ being examined in the for-loop of line 4. If $v$ is marked then we're done, and if $v$ isn't marked then we'll connect it to some other vertex, which must be marked since $v$ is the last to be processed.\n\n\nEither way, $v$ can't contribute an additional vertex to $G'.V$. so\n\n\n$$|G'.V| \\le n / 2 \\le (n + 1) / 2.$$\n\n\nc.\n Rather than using the disjoint set structures of chapter 21, we can simply use an array to keep track of which component a vertex is in. Let $A$ be an array of length $|V|$ such that $A[u] = v$ if $v = \\text{FIND-SET}(u)$. Then $\\text{FIND-SET}(u)$ can now be replaced with $A[u]$ and $\\text{UNION}(u, v)$ can be replaced by $A[v] = A[u]$. Since these operations run in constant time, the runtime is $O(E)$.\n\n\nd.\n The number of edges in the output is monotonically decreasing, so each call is $O(E)$. Thus, $k$ calls take $O(kE)$ time.\n\n\ne.\n The runtime of Prim's algorithm is $O(E + V\\lg V)$. Each time we run $\\text{MST-REDUCE}$, we cut the number of vertices at least in half. Thus, after $k$ calls, the number of vertices is at most $|V| / 2^k$. We need to minimize\n\n\n$$E + V / 2^k\\lg(V / 2^k) + kE = E + \\frac{V\\lg V}{2^k} - \\frac{Vk}{2^k} + kE$$\n\n\nwith respect to $k$. If we choose $k = \\lg\\lg V$ then we achieve the overall running time of $O(E\\lg\\lg V)$ as desired. \n\n\nTo see that this value of $k$ minimizes, note that the $\\frac{Vk}{2^k}$ term is always less than the $kE$ term since $E \\ge V$. As $k$ decreases, the contribution of $kE$ decreases, and the contribution of $\\frac{V\\lg V}{2^k}$ increases. Thus, we need to find the value of $k$ which makes them approximately equal in the worst case, when $E = V$. To do this, we set $\\frac{\\lg V}{2^k} = k$. Solving this exactly would involve the Lambert W function, but the nicest elementary function which gets close is $k = \\lg\\lg V$.\n\n\nf.\n We simply set up the inequality\n\n\n$$E\\lg\\lg V < E + V\\lg V$$\n\n\nto find that we need\n\n\n$$E < \\frac{V\\lg V}{\\lg\\lg V-1} = O(\\frac{V\\lg V}{\\lg\\lg V}).$$",
            "title": "23-2 Minimum spanning tree in sparse graphs"
        },
        {
            "location": "/Chap23/Problems/23-3/",
            "text": "A bottleneck spanning tree $T$ of an undirected graph $G$ is a spanning tree of $G$ whose largest edge weight is minimum over all spanning trees of $G$. We say that the value of the bottleneck spanning tree is the weight of the maximum-weight edge in $T$.\n\n\na.\n Argue that a minimum spanning tree is a bottleneck spanning tree. \n\n\nPart (a) shows that finding a bottleneck spanning tree is no harder than finding a minimum spanning tree. In the remaining parts, we will show how to find a bottleneck spanning tree in linear time.\n\n\nb.\n Give a linear-time algorithm that given a graph $G$ and an integer $b$, determines whether the value of the bottleneck spanning tree is at most $b$.\n\n\nc.\n Use your algorithm for part (b) as a subroutine in a linear-time algorithm for the bottleneck-spanning-tree problem. ($\\textit{Hint:}$ You may want to use a subroutine that contracts sets of edges, as in the $\\text{MST-REDUCE}$ procedure described in Problem 23-2.)\n\n\n\n\na.\n To see that every minimum spanning tree is also a bottleneck spanning tree. Suppose that $T$ is a minimum spanning tree. Suppose there is some edge in it $(u, v)$ that has a weight that's greater than the weight of the bottleneck spanning tree. Then, let $V_1$ be the subset of vertices of $V$ that are reachable from $u$ in $T$, without going though $v$. Define $V_2$ symmetrically. Then, consider the cut that separates $V_1$ from $V_2$. The only edge that we could add across this cut is the one of minimum weight, so we know that there are no edge across this cut of weight less than $w(u, v)$.\n\n\nHowever, we have that there is a bottleneck spanning tree with less than that weight. This is a contradiction because a bottleneck spanning tree, since it is a spanning tree, must have an edge across this cut.\n\n\nb.\n To do this, we first process the entire graph, and remove any edges that have weight greater than $b$. If the remaining graph is selected, we can just arbitrarily select any tree in it, and it will be a bottleneck spanning tree of weight at most $b$. Testing connectivity of a graph can be done in linear time by running a breadth first search and then making sure that no vertices remain white at the end.\n\n\nc.\n Write down all of the edge weights of vertices. Use the algorithm from section 9.3 to find the median of this list of numbers in time $O(E)$. Then, run the procedure from part b with this median value as the one that you are testing for there to be a bottleneck spanning tree with weight at most. Then there are two cases: \n\n\nFirst, we could have that there is a bottleneck spanning tree with weight at most this median. Then just throw the edges with weight more than the median, and repeat the procedure on this new graph with half the edges.\n\n\nSecond, we could have that there is no bottleneck spanning tree with at most that weight. Then, we should run the procedure from problem 23-2 to contract all of the edges that have weight at most this median weight. This takes time $O(E\\lg\\lg V)$ and then we are left solving the problem on a graph that now has half the vertices.",
            "title": "23-3 Bottleneck spanning tree"
        },
        {
            "location": "/Chap23/Problems/23-4/",
            "text": "In this problem, we give pseudocode for three different algorithms. Each one takes a connected graph and a weight function as input and returns a set of edges $T$. For each algorithm, either prove that $T$ is a minimum spanning tree or prove that $T$ is not a minimum spanning tree. Also describe the most efficient implementation of each algorithm, whether or not it computes a minimum spanning tree.\n\n\na.\n \n\n\nMAYBE\n-\nMST\n-\nA\n(\nG\n,\n \nw\n)\n\n    \nsort\n \nthe\n \nedges\n \ninto\n \nnonincreasing\n \norder\n \nof\n \nedge\n \nweights\n \nw\n\n    \nT\n \n=\n \nE\n\n    \nfor\n \neach\n \nedge\n \ne\n,\n \ntaken\n \nin\n \nnonincreasing\n \norder\n \nby\n \nweight\n\n        \nif\n \nT\n \n-\n \n{\ne\n}\n \nis\n \na\n \nconnected\n \ngraph\n\n            \nT\n \n=\n \nT\n \n-\n \n{\ne\n}\n\n    \nreturn\n \nT\n\n\n\n\n\nb.\n \n\n\nMAYBE\n-\nMST\n-\nB\n(\nG\n,\n \nw\n)\n\n    \nT\n \n=\n \nemptyset\n\n    \nfor\n \neach\n \nedge\n \ne\n,\n \ntaken\n \nin\n \narbitrary\n \norder\n\n        \nif\n \nT\n \n\u222a\n \n{\ne\n}\n \nhas\n \nno\n \ncycles\n\n            \nT\n \n=\n \nT\n \n\u222a\n \n{\ne\n}\n\n    \nreturn\n \nT\n\n\n\n\n\nc.\n \n\n\nMAYBE\n-\nMST\n-\nC\n(\nG\n,\n \nw\n)\n\n    \nT\n \n=\n \nemptyset\n\n    \nfor\n \neach\n \nedge\n \ne\n,\n \ntaken\n \nin\n \narbitrary\n \norder\n\n        \nT\n \n=\n \nT\n \n\u222a\n \n{\ne\n}\n\n        \nif\n \nT\n \nhas\n \na\n \ncycle\n \nc\n\n            \nlet\n \ne\n'\n \nbe\n \na\n \nmaximum\n-\nweight\n \nedge\n \non\n \nc\n\n            \nT\n \n=\n \nT\n \n-\n \n{\ne\n}\n\n    \nreturn\n \nT\n\n\n\n\n\n\n\na.\n This does return an $\\text{MST}$. To see this, we'll show that we never remove an edge which must be part of a minimum spanning tree. If we remove $e$, then $e$ cannot be a bridge, which means that e lies on a simple cycle of the graph. Since we remove edges in nonincreasing order, the weight of every edge on the cycle must be less than or equal to that of $e$. By exercise 23.1-5, there is a minimum spanning tree on $G$ with edge $e$ removed.\n\n\nTo implement this, we begin by sorting the edges in $O(E \\lg E)$ time. For each edge we need to check whether or not $T - {e}$ is connected, so we'll need to run a $\\text{DFS}$. Each one takes $O(V + E)$, so doing this for all edges takes $O(E(V + E))$. This dominates the running time, so the total time is $O(E^2)$.\n\n\nb.\n This doesn't return an $\\text{MST}$. To see this, let $G$ be the graph on 3 vertices $a$, $b$, and $c$. Let the eges be $(a, b)$, $(b, c)$, and $(c, a)$ with weights $3, 2$, and $1$ respectively. If the algorithm examines the edges in their order listed, it will take the two heaviest edges instead of the two lightest. \n\n\nAn efficient implementation will use disjoint sets to keep track of connected components, as in $\\text{MST-REDUCE}$ in problem 23-2. Trying to union within the same component will create a cycle. Since we make $|V|$ calls to $\\text{MAKESET}$ and at most $3|E|$ calls to $\\text{FIND-SET}$ and $\\text{UNION}$, the runtime is $O(E\\alpha(V))$.\n\n\nc.\n This does return an $\\text{MST}$. To see this, we simply quote the result from exercise 23.1-5. The only edges we remove are the edges of maximum weight on some cycle, and there always exists a minimum spanning tree which doesn't include these edges. Moreover, if we remove an edge from every cycle then the resulting graph cannot have any cycles, so it must be a tree.\n\n\nTo implement this, we use the approach taken in part (b), except now we also need to find the maximum weight edge on a cycle. For each edge which introduces a cycle we can perform a $\\text{DFS}$ to find the cycle and max weight edge. Since the tree at that time has at most one cycle, it has at most $|V|$ edges, so we can run $\\text{DFS}$ in $O(V)$. The runtime is thus $O(EV)$.",
            "title": "23-4 Alternative minimum-spanning-tree algorithms"
        },
        {
            "location": "/Chap24/24.1/",
            "text": "24.1-1\n\n\n\n\nRun the Bellman-Ford algorithm on the directed graph of Figure 24.4, using vertex $z$ as the source. In each pass, relax edges in the same order as in the figure, and show the $d$ and $\\pi$ values after each pass. Now, change the weight of edge $(z, x)$ to $4$ and run the algorithm again, using $s$ as the source.\n\n\n\n\n\\begin{array}{c|ccccc}\n  & s & t & x & y & z \\\\\n\\hline\nd & 2 & 4 & 6 & 9 & 0 \\\\\n\\pi & z & x & y & z & \\text{NIL}\n\\end{array}\n\n\n\\begin{array}{c|ccccc}\n  & s & t & x & y & z \\\\\n\\hline\nd & 0 & 0 & 2 & 7 & -2 \\\\\n\\pi & \\text{NIL} & x & z & s & t\n\\end{array}\n\n\n24.1-2\n\n\n\n\nProve Corollary 24.3.\n\n\n\n\nSuppose there is a path from $s$ to $v$. Then there must be a shortest such path of length $\\delta(s, v)$. It must have finite length since it contains at most $|V| - 1$ edges and each edge has finite length. By Lemma 24.2, $v.d = \\delta(s, v) < \\infty$ upon termination. \n\n\nOn the other hand, suppose $v.d < \\infty$ when $\\text{BELLMAN-FORD}$ terminates. Recall that $v.d$ is monotonically decreasing throughout the algorithm, and $\\text{RELAX}$ will update $v.d$ only if $u.d + w(u, v) < v.d$ for some $u$ adjacent to $v$. Moreover, we update $v.\\pi = u$ at this point, so $v$ has an ancestor in the predecessor subgraph. Since this is a tree rooted at $s$, there must be a path from $s$ to $v$ in this tree. Every edge in the tree is also an edge in $G$, so there is also a path in $G$ from $s$ to $v$.\n\n\n24.1-3\n\n\n\n\nGiven a weighted, directed graph $G = (V, E)$ with no negative-weight cycles, let $m$ be the maximum over all vertices $v \\in V$ of the minimum number of edges in a shortest path from the source $s$ to $v$. (Here, the shortest path is by weight, not the number of edges.) Suggest a simple change to the Bellman-Ford algorithm that allows it to terminate in $m + 1$ passes, even if $m$ is not known in advance.\n\n\n\n\nIf the greatest number of edges on any shortest path from the source is $m$, then the path-relaxation property tells us that after $m$ iterations of $\\text{BELLMAN-FORD}$, every vertex $v$ has achieved its shortest-path weight in $v.d$. By the upper-bound property, after $m$ iterations, no $d$ values will ever change. Therefore, no $d$ values will change in the $(m + 1)$st iteration. Because we do not know $m$ in advance, we cannot make the algorithm iterate exactly $m$ times and then terminate. But if we just make the algorithm stop when nothing changes any more, it will stop after $m + 1$ iterations.\n\n\nBELLMAN\n-\nFORD\n-\n(\nM\n \n+\n \n1\n)(\nG\n,\n \nw\n,\n \ns\n)\n\n    \nINITIALIZE\n-\nSINGLE\n-\nSOURCE\n(\nG\n,\n \ns\n)\n\n    \nchanges\n \n=\n \nTRUE\n\n    \nwhile\n \nchanges\n \n==\n \nTRUE\n\n        \nchanges\n \n=\n \nFALSE\n\n        \nfor\n \neach\n \nedge\n(\nu\n,\n \nv\n)\n \n\u2208\n \nG\n.\nE\n\n            \nRELAX\n-\nM\n(\nu\n,\n \nv\n,\n \nw\n)\n\n\n\n\n\nRELAX\n-\nM\n(\nu\n,\n \nv\n,\n \nw\n)\n\n    \nif\n \nv\n.\nd\n \n>\n \nu\n.\nd\n \n+\n \nw\n(\nu\n,\n \nv\n)\n\n        \nv\n.\nd\n \n=\n \nu\n.\nd\n \n+\n \nw\n(\nu\n,\n \nv\n)\n\n        \nv\n.\nPI\n \n=\n \nu\n\n        \nchanges\n \n=\n \nTRUE\n\n\n\n\n\nThe test for a negative-weight cycle (based on there being a $d$ value that would change if another relaxation step was done) has been removed above, because this version of the algorithm will never get out of the \nwhile\n loop unless all $d$ values stop changing.\n\n\n24.1-4\n\n\n\n\nModify the Bellman-Ford algorithm so that it sets $v.d$ to $-\\infty$ for all vertices $v$ for which there is a negative-weight cycle on some path from the source to $v$.\n\n\n\n\nIn particular, replace line 7 with $v.d = -\\infty$.\n\n\nif\n \nv\n.\nd\n \n>\n \nu\n.\nd\n \n+\n \nw\n(\nu\n,\n \nv\n)\n\n    \nv\n.\nd\n \n=\n \n-\n\u221e\n\n\n\n\n\n24.1-5 $\\star$\n\n\n\n\nLet $G = (V, E)$ be a weighted, directed graph with weight function $w : E \\rightarrow \\mathbb R$. Give an $O(VE)$-time algorithm to find, for each vertex $v \\in V$, the value $\\delta^*(v) = \\min_{u \\in V} {\\delta(u, v)}$.\n\n\n\n\nRELAX\n(\nu\n,\n \nv\n,\n \nw\n)\n\n    \nif\n \nv\n.\nd\n \n>\n \nmin\n(\nw\n(\nu\n,\n \nv\n),\n \nw\n(\nu\n,\n \nv\n)\n \n+\n \nu\n.\nd\n)\n\n        \nv\n.\nd\n \n>\n \nmin\n(\nw\n(\nu\n,\n \nv\n),\n \nw\n(\nu\n,\n \nv\n)\n \n+\n \nu\n.\nd\n)\n\n        \nv\n.\nPI\n \n=\n \nu\n.\nPI\n\n\n\n\n\n24.1-6 $\\star$\n\n\n\n\nSuppose that a weighted, directed graph $G = (V, E)$ has a negative-weight cycle. Give an efficient algorithm to list the vertices of one such cycle. Prove that your algorithm is correct.\n\n\n\n\nBased on exercise 24.1-4, $\\text{DFS}$ from a vertex $u$ that $u.d = -\\infty$, if the weight sum on the search path is negative and the next vertex is $\\text{BLACK}$, then the search path forms a negative-weight cycle.",
            "title": "24.1 The Bellman-Ford algorithm"
        },
        {
            "location": "/Chap24/24.1/#241-1",
            "text": "Run the Bellman-Ford algorithm on the directed graph of Figure 24.4, using vertex $z$ as the source. In each pass, relax edges in the same order as in the figure, and show the $d$ and $\\pi$ values after each pass. Now, change the weight of edge $(z, x)$ to $4$ and run the algorithm again, using $s$ as the source.   \\begin{array}{c|ccccc}\n  & s & t & x & y & z \\\\\n\\hline\nd & 2 & 4 & 6 & 9 & 0 \\\\\n\\pi & z & x & y & z & \\text{NIL}\n\\end{array}  \\begin{array}{c|ccccc}\n  & s & t & x & y & z \\\\\n\\hline\nd & 0 & 0 & 2 & 7 & -2 \\\\\n\\pi & \\text{NIL} & x & z & s & t\n\\end{array}",
            "title": "24.1-1"
        },
        {
            "location": "/Chap24/24.1/#241-2",
            "text": "Prove Corollary 24.3.   Suppose there is a path from $s$ to $v$. Then there must be a shortest such path of length $\\delta(s, v)$. It must have finite length since it contains at most $|V| - 1$ edges and each edge has finite length. By Lemma 24.2, $v.d = \\delta(s, v) < \\infty$ upon termination.   On the other hand, suppose $v.d < \\infty$ when $\\text{BELLMAN-FORD}$ terminates. Recall that $v.d$ is monotonically decreasing throughout the algorithm, and $\\text{RELAX}$ will update $v.d$ only if $u.d + w(u, v) < v.d$ for some $u$ adjacent to $v$. Moreover, we update $v.\\pi = u$ at this point, so $v$ has an ancestor in the predecessor subgraph. Since this is a tree rooted at $s$, there must be a path from $s$ to $v$ in this tree. Every edge in the tree is also an edge in $G$, so there is also a path in $G$ from $s$ to $v$.",
            "title": "24.1-2"
        },
        {
            "location": "/Chap24/24.1/#241-3",
            "text": "Given a weighted, directed graph $G = (V, E)$ with no negative-weight cycles, let $m$ be the maximum over all vertices $v \\in V$ of the minimum number of edges in a shortest path from the source $s$ to $v$. (Here, the shortest path is by weight, not the number of edges.) Suggest a simple change to the Bellman-Ford algorithm that allows it to terminate in $m + 1$ passes, even if $m$ is not known in advance.   If the greatest number of edges on any shortest path from the source is $m$, then the path-relaxation property tells us that after $m$ iterations of $\\text{BELLMAN-FORD}$, every vertex $v$ has achieved its shortest-path weight in $v.d$. By the upper-bound property, after $m$ iterations, no $d$ values will ever change. Therefore, no $d$ values will change in the $(m + 1)$st iteration. Because we do not know $m$ in advance, we cannot make the algorithm iterate exactly $m$ times and then terminate. But if we just make the algorithm stop when nothing changes any more, it will stop after $m + 1$ iterations.  BELLMAN - FORD - ( M   +   1 )( G ,   w ,   s ) \n     INITIALIZE - SINGLE - SOURCE ( G ,   s ) \n     changes   =   TRUE \n     while   changes   ==   TRUE \n         changes   =   FALSE \n         for   each   edge ( u ,   v )   \u2208   G . E \n             RELAX - M ( u ,   v ,   w )   RELAX - M ( u ,   v ,   w ) \n     if   v . d   >   u . d   +   w ( u ,   v ) \n         v . d   =   u . d   +   w ( u ,   v ) \n         v . PI   =   u \n         changes   =   TRUE   The test for a negative-weight cycle (based on there being a $d$ value that would change if another relaxation step was done) has been removed above, because this version of the algorithm will never get out of the  while  loop unless all $d$ values stop changing.",
            "title": "24.1-3"
        },
        {
            "location": "/Chap24/24.1/#241-4",
            "text": "Modify the Bellman-Ford algorithm so that it sets $v.d$ to $-\\infty$ for all vertices $v$ for which there is a negative-weight cycle on some path from the source to $v$.   In particular, replace line 7 with $v.d = -\\infty$.  if   v . d   >   u . d   +   w ( u ,   v ) \n     v . d   =   - \u221e",
            "title": "24.1-4"
        },
        {
            "location": "/Chap24/24.1/#241-5-star",
            "text": "Let $G = (V, E)$ be a weighted, directed graph with weight function $w : E \\rightarrow \\mathbb R$. Give an $O(VE)$-time algorithm to find, for each vertex $v \\in V$, the value $\\delta^*(v) = \\min_{u \\in V} {\\delta(u, v)}$.   RELAX ( u ,   v ,   w ) \n     if   v . d   >   min ( w ( u ,   v ),   w ( u ,   v )   +   u . d ) \n         v . d   >   min ( w ( u ,   v ),   w ( u ,   v )   +   u . d ) \n         v . PI   =   u . PI",
            "title": "24.1-5 $\\star$"
        },
        {
            "location": "/Chap24/24.1/#241-6-star",
            "text": "Suppose that a weighted, directed graph $G = (V, E)$ has a negative-weight cycle. Give an efficient algorithm to list the vertices of one such cycle. Prove that your algorithm is correct.   Based on exercise 24.1-4, $\\text{DFS}$ from a vertex $u$ that $u.d = -\\infty$, if the weight sum on the search path is negative and the next vertex is $\\text{BLACK}$, then the search path forms a negative-weight cycle.",
            "title": "24.1-6 $\\star$"
        },
        {
            "location": "/Chap24/24.2/",
            "text": "24.2-1\n\n\n\n\nRun $\\text{DAG-SHORTEST-PATHS}$ on the directed graph of Figure 24.5, using vertex $r$ as the source.\n\n\n\n\n\n\n\n\n$d$ values:\n\n\n\\begin{array}{cccccc}\nr & s & t & x & y & z \\\\\n\\hline\n0 & \\infty & \\infty & \\infty & \\infty & \\infty \\\\\n0 & 5 & 3 & \\infty & \\infty & \\infty \\\\\n0 & 5 & 3 & 11 & \\infty & \\infty \\\\\n0 & 5 & 3 & 10 & 7 & 5 \\\\\n0 & 5 & 3 & 10 & 7 & 5 \\\\\n0 & 5 & 3 & 10 & 7 & 5\n\\end{array}\n\n\n\n\n\n\n$\\pi$ values:\n\n\n\\begin{array}{cccccc}\nr & s & t & x & y & z \\\\\n\\hline\n\\text{NIL} & \\text{NIL} & \\text{NIL} & \\text{NIL} & \\text{NIL} & \\text{NIL} \\\\\n\\text{NIL} & r & r & \\text{NIL} & \\text{NIL} & \\text{NIL} \\\\\n\\text{NIL} & r & r & s & \\text{NIL} & \\text{NIL} \\\\\n\\text{NIL} & r & r & t & t & t \\\\\n\\text{NIL} & r & r & t & t & t \\\\\n\\text{NIL} & r & r & t & t & t \n\\end{array}\n\n\n\n\n\n\n24.2-2\n\n\n\n\nSuppose we change line 3 of $\\text{DAG-SHORTEST-PATHS}$ to read \n\n\n \n3\n  \nfor\n \nthe\n \nfirst\n \n|\nV\n|\n \n-\n \n1\n \nvertices\n,\n \ntaken\n \nin\n \ntopologically\n \nsorted\n \norder\n\n\n\n\n\nShow that the procedure would remain correct.\n\n\n\n\nWhen we reach vertex $v$, the last vertex in the topological sort, it must have $out\\text-degree$ $0$. Otherwise there would be an edge pointing from a later vertex to an earlier vertex in the ordering, a contradiction. Thus, the body of the for-loop of line 4 is never entered for this final vertex, so we may as well not consider it.\n\n\n24.2-3\n\n\n\n\nThe PERT chart formulation given above is somewhat unnatural. In a more natural structure, vertices would represent jobs and edges would represent sequencing constraints; that is, edge $(u, v)$ would indicate that job $u$ must be performed before job $v$. We would then assign weights to vertices, not edges. Modify the $\\text{DAG-SHORTEST-PATHS}$ procedure so that it finds a longest path in a directed acyclic graph with weighted vertices in linear time.\n\n\n\n\nInstead of modifying the $\\text{DAG-SHORTEST-PATHS}$ procedure, we'll modify the structure of the graph so that we can run $\\text{DAG-SHORTEST-PATHS}$ on it. In fact, we'll give two ways to transform a PERT chart $G = (V, E)$ with weights on vertices to a PERT chart $G' = (V', E')$ with weights on edges. In each way, we'll have that $|V'| \\le 2|V|$ and $|E'| \\le |V| + |E|$. We can then run on $G'$ the same algorithm to find a longest path through a dag as is given in Section 24.2 of the text.\n\n\nIn the first way, we transform each vertex $v \\in V$ into two vertices $v'$ and $v''$ in $V'$. All edges in $E$ that enter $v$ will enter $v'$ in $E'$, and all edges in $E$ that leave $v$ will leave $v''$ in $E'$. In other words, if $(u, v) \\in E$, then $(u'', v') \\in E'$. All such edges have weight $0$. We also put edges $(v', v'')$ into $E'$ for all vertices $v \\in V$, and these edges are given the weight of the corresponding vertex $v$ in $G$. Thus, $|V'| = 2|V|$, $|E'| = |V| + |E|$, and the edge weight of each path in $G'$ equals the vertex weight of the corresponding path in $G$.\n\n\nIn the second way, we leave vertices in $V$ alone, but we add one new source vertex $s$ to $V'$, so that $V' = V \\cup {s}$. All edges of $E$ are in $E'$, and $E'$ also includes an edge $(s, v)$ for every vertex $v \\in V$ that has $in\\text-degree$ $0$ in $G$. Thus, the only vertex with $in\\text-degree$ $0$ in $G'$ is the new source $s$. The weight of edge $(u, v) \\in E'$ is the weight of vertex $v$ in $G$. In other words, the weight of each entering edge in $G'$ is the weight of the vertex it enters in $G$. In effect, we have ''pushed back'' the weight of each vertex onto the edges that enter it. Here, $|V'| = |V| + 1$, $|E'| \\le |V| + |E|$ (since no more than $|V|$ vertices have $in\\text-degree$ $0$ in $G$), and again the edge weight of each path in $G'$ equals the vertex weight of the corresponding path in $G$.\n\n\n24.2-4\n\n\n\n\nGive an efficient algorithm to count the total number of paths in a directed acyclic graph. Analyze your algorithm.\n\n\n\n\nWe will compute the total number of paths by counting the number of paths whose start point is at each vertex $v$, which will be stored in an attribute $v.paths$. Assume that initial we have $v.paths = 0$ for all $v \\in V$. Since all vertices adjacent to $u$ occur later in the topological sort and the final vertex has no neighbors, line 4 is well-defined. Topological sort takes $O(V + E)$ and the nested for-loops take $O(V + E)$ so the total runtime is $O(V + E)$.\n\n\nPATHS\n(\nG\n)\n\n    \ntopologically\n \nsort\n \nthe\n \nvertices\n \nof\n \nG\n\n    \nfor\n \neach\n \nvertex\n \nu\n,\n \ntaken\n \nin\n \nreverse\n \ntopologically\n \nsorted\n \norder\n\n        \nfor\n \neach\n \nvertex\n \nv\n \n\u2208\n \nG\n.\nAdj\n[\nu\n]\n\n            \nu\n.\npaths\n \n=\n \nu\n.\npaths\n \n+\n \n1\n \n+\n \nv\n.\npaths",
            "title": "24.2 Single-source shortest paths in directed acyclic graphs"
        },
        {
            "location": "/Chap24/24.2/#242-1",
            "text": "Run $\\text{DAG-SHORTEST-PATHS}$ on the directed graph of Figure 24.5, using vertex $r$ as the source.     $d$ values:  \\begin{array}{cccccc}\nr & s & t & x & y & z \\\\\n\\hline\n0 & \\infty & \\infty & \\infty & \\infty & \\infty \\\\\n0 & 5 & 3 & \\infty & \\infty & \\infty \\\\\n0 & 5 & 3 & 11 & \\infty & \\infty \\\\\n0 & 5 & 3 & 10 & 7 & 5 \\\\\n0 & 5 & 3 & 10 & 7 & 5 \\\\\n0 & 5 & 3 & 10 & 7 & 5\n\\end{array}    $\\pi$ values:  \\begin{array}{cccccc}\nr & s & t & x & y & z \\\\\n\\hline\n\\text{NIL} & \\text{NIL} & \\text{NIL} & \\text{NIL} & \\text{NIL} & \\text{NIL} \\\\\n\\text{NIL} & r & r & \\text{NIL} & \\text{NIL} & \\text{NIL} \\\\\n\\text{NIL} & r & r & s & \\text{NIL} & \\text{NIL} \\\\\n\\text{NIL} & r & r & t & t & t \\\\\n\\text{NIL} & r & r & t & t & t \\\\\n\\text{NIL} & r & r & t & t & t \n\\end{array}",
            "title": "24.2-1"
        },
        {
            "location": "/Chap24/24.2/#242-2",
            "text": "Suppose we change line 3 of $\\text{DAG-SHORTEST-PATHS}$ to read     3    for   the   first   | V |   -   1   vertices ,   taken   in   topologically   sorted   order   Show that the procedure would remain correct.   When we reach vertex $v$, the last vertex in the topological sort, it must have $out\\text-degree$ $0$. Otherwise there would be an edge pointing from a later vertex to an earlier vertex in the ordering, a contradiction. Thus, the body of the for-loop of line 4 is never entered for this final vertex, so we may as well not consider it.",
            "title": "24.2-2"
        },
        {
            "location": "/Chap24/24.2/#242-3",
            "text": "The PERT chart formulation given above is somewhat unnatural. In a more natural structure, vertices would represent jobs and edges would represent sequencing constraints; that is, edge $(u, v)$ would indicate that job $u$ must be performed before job $v$. We would then assign weights to vertices, not edges. Modify the $\\text{DAG-SHORTEST-PATHS}$ procedure so that it finds a longest path in a directed acyclic graph with weighted vertices in linear time.   Instead of modifying the $\\text{DAG-SHORTEST-PATHS}$ procedure, we'll modify the structure of the graph so that we can run $\\text{DAG-SHORTEST-PATHS}$ on it. In fact, we'll give two ways to transform a PERT chart $G = (V, E)$ with weights on vertices to a PERT chart $G' = (V', E')$ with weights on edges. In each way, we'll have that $|V'| \\le 2|V|$ and $|E'| \\le |V| + |E|$. We can then run on $G'$ the same algorithm to find a longest path through a dag as is given in Section 24.2 of the text.  In the first way, we transform each vertex $v \\in V$ into two vertices $v'$ and $v''$ in $V'$. All edges in $E$ that enter $v$ will enter $v'$ in $E'$, and all edges in $E$ that leave $v$ will leave $v''$ in $E'$. In other words, if $(u, v) \\in E$, then $(u'', v') \\in E'$. All such edges have weight $0$. We also put edges $(v', v'')$ into $E'$ for all vertices $v \\in V$, and these edges are given the weight of the corresponding vertex $v$ in $G$. Thus, $|V'| = 2|V|$, $|E'| = |V| + |E|$, and the edge weight of each path in $G'$ equals the vertex weight of the corresponding path in $G$.  In the second way, we leave vertices in $V$ alone, but we add one new source vertex $s$ to $V'$, so that $V' = V \\cup {s}$. All edges of $E$ are in $E'$, and $E'$ also includes an edge $(s, v)$ for every vertex $v \\in V$ that has $in\\text-degree$ $0$ in $G$. Thus, the only vertex with $in\\text-degree$ $0$ in $G'$ is the new source $s$. The weight of edge $(u, v) \\in E'$ is the weight of vertex $v$ in $G$. In other words, the weight of each entering edge in $G'$ is the weight of the vertex it enters in $G$. In effect, we have ''pushed back'' the weight of each vertex onto the edges that enter it. Here, $|V'| = |V| + 1$, $|E'| \\le |V| + |E|$ (since no more than $|V|$ vertices have $in\\text-degree$ $0$ in $G$), and again the edge weight of each path in $G'$ equals the vertex weight of the corresponding path in $G$.",
            "title": "24.2-3"
        },
        {
            "location": "/Chap24/24.2/#242-4",
            "text": "Give an efficient algorithm to count the total number of paths in a directed acyclic graph. Analyze your algorithm.   We will compute the total number of paths by counting the number of paths whose start point is at each vertex $v$, which will be stored in an attribute $v.paths$. Assume that initial we have $v.paths = 0$ for all $v \\in V$. Since all vertices adjacent to $u$ occur later in the topological sort and the final vertex has no neighbors, line 4 is well-defined. Topological sort takes $O(V + E)$ and the nested for-loops take $O(V + E)$ so the total runtime is $O(V + E)$.  PATHS ( G ) \n     topologically   sort   the   vertices   of   G \n     for   each   vertex   u ,   taken   in   reverse   topologically   sorted   order \n         for   each   vertex   v   \u2208   G . Adj [ u ] \n             u . paths   =   u . paths   +   1   +   v . paths",
            "title": "24.2-4"
        },
        {
            "location": "/Chap24/24.3/",
            "text": "24.3-1\n\n\n\n\nRun Dijkstra's algorithm on the directed graph of Figure 24.2, first using vertex $s$ as the source and then using vertex $z$ as the source. In the style of Figure 24.6, show the $d$ and $\\pi$ values and the vertices in set $S$ after each iteration of the \nwhile\n loop.\n\n\n\n\n\n\n\n\n$s$ as the source:\n\n\n\n\n$d$ values:\n\n\n\n\n\\begin{array}{ccccc}\ns & t & x & y & z \\\\\n\\hline\n0 & 3 & \\infty & 5 & \\infty \\\\\n0 & 3 & 9 & 5 & \\infty \\\\\n0 & 3 & 9 & 5 & 11 \\\\\n0 & 3 & 9 & 5 & 11 \\\\\n0 & 3 & 9 & 5 & 11\n\\end{array}\n\n\n\n\n$\\pi$ values:\n\n\n\n\n\\begin{array}{ccccc}\ns & t & x & y & z \\\\\n\\hline\n\\text{NIL} & s & \\text{NIL} & \\text{NIL} & \\text{NIL} \\\\\n\\text{NIL} & s & t & s & \\text{NIL} \\\\\n\\text{NIL} & s & t & s & y \\\\\n\\text{NIL} & s & t & s & y \\\\\n\\text{NIL} & s & t & s & y\n\\end{array}\n\n\n\n\n\n\n$z$ as the source:\n\n\n\n\n$d$ values:\n\n\n\n\n\\begin{array}{ccccc}\ns & t & x & y & z \\\\\n\\hline\n3 & \\infty & 7 & \\infty & 0 \\\\\n3 & 6 & 7 & 8 & 0           \\\\\n3 & 6 & 7 & 8 & 0           \\\\\n3 & 6 & 7 & 8 & 0           \\\\\n3 & 6 & 7 & 8 & 0\n\\end{array}\n\n\n\n\n$\\pi$ values:\n\n\n\n\n\\begin{array}{ccccc}\ns & t & x & y & z \\\\\n\\hline\nz & \\text{NIL} & z & \\text{NIL} & \\text{NIL} \\\\\nz & s & z & s & \\text{NIL}     \\\\\nz & s & z & s & \\text{NIL}     \\\\\nz & s & z & s & \\text{NIL}     \\\\\nz & s & z & s & \\text{NIL}\n\\end{array}\n\n\n\n\n\n\n24.3-2\n\n\n\n\nGive a simple example of a directed graph with negative-weight edges for which Dijkstra's algorithm produces incorrect answers. Why doesn't the proof of Theorem 24.6 go through when negative-weight edges are allowed?\n\n\n\n\nConsider any graph with a negative cycle. $\\text{RELAX}$ is called a finite number of times but the distance to any vertex on the cycle is $-\\infty$, so Dijkstra's algorithm cannot possibly be correct here. The proof of theorem 24.6 doesn't go through because we can no longer guarantee that\n\n\n$$\\delta(s, y) \\le \\delta(s, u).$$\n\n\n24.3-3\n\n\n\n\nSuppose we change line 4 of Dijkstra's algorithm to the following. \n\n\n \n4\n  \nwhile\n \n|\nQ\n|\n \n>\n \n1\n\n\n\n\n\nThis change causes the \nwhile\n loop to execute $|V| - 1$ times instead of $|V|$ times. Is this proposed algorithm correct?\n\n\n\n\nYes, the algorithm still works. Let $u$ be the leftover vertex that does not get extracted from the priority queue $Q$. If $u$ is not reachable from $s$, then $u.d = \\delta(s, u) = \\infty$. If $u$ is reachable from $s$, then there is a shortest path $p = s \\leadsto x \\to u$. When the vertex $x$ was extracted, $x.d = \\delta(s, x)$ and then the edge $(x, u)$ was relaxed; thus, $u.d = \\delta(s, u)$.\n\n\n24.3-4\n\n\n\n\nProfessor Gaedel has written a program that he claims implements Dijkstra's algorithm. The program produces $v.d$ and $v.\\pi$ for each vertex $v \\in V$. Give an $O(V + E)$-time algorithm to check the output of the professor's program. It should determine whether the $d$ and $\\pi$ attributes match those of some shortest-paths tree. You may assume that all edge weights are nonnegative.\n\n\n\n\n\n\nVerify that $s.d = 0$ and $s.\\pi = \\text{NIL}$\n\n\nVerify that $v.d = v.\\pi + w(v.\\pi, v)$ for all $v \\in s$.\n\n\nVerify that $v.d = \\infty$ if and only if $v.\\beta = \\text{NIL}$ for all $v \\in s$.\n\n\nIf any of the above verification tests fail, declare the output to be incorrect. Otherwise, run one pass of Bellman-Ford, i.e., relax each edge $(u, v) \\in E$ one time. If any values of $v.d$ change, then declare the output to be incorrect; otherwise, declare the output to be correct.\n\n\n\n\n24.3-5\n\n\n\n\nProfessor Newman thinks that he has worked out a simpler proof of correctness for Dijkstra's algorithm. He claims that Dijkstra's algorithm relaxes the edges of every shortest path in the graph in the order in which they appear on the path, and therefore the path-relaxation property applies to every vertex reachable from the source. Show that the professor is mistaken by constructing a directed graph for which Dijkstra's algorithm could relax the edges of a shortest path out of order.\n\n\n\n\nLet the graph have vertices $s$, $x$, $y$, $z$ and edges $(s, x)$, $(x, y)$, $(y, z)$, $(s, y)$, and let every edge have weight $0$. Dijkstra's algorithm could relax edges in the order $(s, y)$, $(s, x)$, $(y, z)$, $(x, y)$. The graph has two shortest paths from $s$ to $z: \\langle s, x, y, z \\rangle$ and $\\langle s, y, z \\rangle$, both with weight $0$. The edges on the shortest path $\\langle s, x, y, z \\rangle$ are relaxed out of order, because $(x, y)$ is relaxed after $(y, z)$.\n\n\n24.3-6\n\n\n\n\nWe are given a directed graph $G = (V, E)$ on which each edge $(u, v) \\in E$ has an associated value $r(u, v)$, which is a real number in the range $0 \\le r(u, v) \\le 1$ that represents the reliability of a communication channel from vertex $u$ to vertex $v$. We interpret $r(u, v)$ as the probability that the channel from $u$ to $v$ will not fail, and we assume that these probabilities are independent. Give an efficient algorithm to find the most reliable path between two given vertices.\n\n\n\n\nTo find the most reliable path between $s$ and $t$, run Dijkstra's algorithm with edge weights $w(u, v) = -\\lg r(u, v)$ to find shortest paths from $s$ in $O(E + V\\lg V)$ time. The most reliable path is the shortest path from $s$ to $t$, and that path's reliability is the product of the reliabilities of its edges.\n\n\nHere's why this method works. Because the probabilities are independent, the probability that a path will not fail is the product of the probabilities that its edges will not fail. We want to find a path $s \\overset{p}{\\leadsto} t$ such that $\\prod_{(u, v) \\in p} r(u, v)$ is maximized. This is equivalent to maximizing $\\lg(\\prod_{(u, v) \\in p} r(u, v)) = \\sum_{(u, v) \\in p} \\lg r(u, v)$, which is in turn equivalent to minimizing $\\sum_{(u, v) \\in p} -\\lg r(u, v)$. (Note: $r(u, v)$ can be $0$, and $\\lg 0$ is undefined. So in this algorithm, define $\\lg 0 = -\\infty$.) Thus if we assign weights $w(u, v) = -\\lg r(u, v)$, we have a shortest-path problem.\n\n\nSince $\\lg 1 = 0$, $\\lg x < 0$ for $0 < x < 1$, and we have defined $\\lg 0 = -\\infty$, all the weights $w$ are nonnegative, and we can use Dijkstra's algorithm to find the shortest paths from $s$ in $O(E + V\\lg V)$ time.\n\n\nAlternative solution\n\n\nYou can also work with the original probabilities by running a modified version of Dijkstra's algorithm that maximizes the product of reliabilities along a path instead of minimizing the sum of weights along a path.\n\n\nIn Dijkstra's algorithm, use the reliabilities as edge weights and substitute\n\n\n\n\nmax (and $\\text{EXTRACT-MAX}$) for min (and $\\text{EXTRACT-MIN}$) in relaxation and the queue,\n\n\n$\\cdot$ for $+$ in relaxation, \n\n\n$1$ (identity for $\\cdot$) for $0$ (identity for $+$) and $-\\infty$ (identity for min) for $\\infty$ (identity for max).\n\n\n\n\nFor example, we would use the following instead of the usual $\\text{RELAX}$ procedure:\n\n\nRELAX\n-\nRELIABILITY\n(\nu\n,\n \nv\n,\n \nr\n)\n\n    \nif\n \nv\n.\nd\n \n<\n \nu\n.\nd\n\uff0e\nr\n(\nu\n,\n \nv\n)\n\n        \nv\n.\nd\n \n=\n \nu\n.\nd\n\uff0e\nr\n(\nu\n,\n \nv\n)\n\n        \nv\n.\nPI\n \n=\n \nu\n\n\n\n\n\nThis algorithm is isomorphic to the one above: it performs the same operations except that it is working with the original probabilities instead of the transformed ones.\n\n\n24.3-7\n\n\n\n\nLet $G = (V, E)$ be a weighted, directed graph with positive weight function $w: E \\rightarrow \\{1, 2, \\ldots, W\\}$ for some positive integer $W$, and assume that no two vertices have the same shortest-path weights from source vertex $s$. Now suppose that we define an unweighted, directed graph $G' = (V \\cup V', E')$ by replacing each edge $(u, v) \\in E$ with $w(u, v)$ unit-weight edges in series. How many vertices does $G'$ have? Now suppose that we run a breadth-first search on $G'$. Show that the order in which the breadth-first search of $G'$ colors vertices in $V$ black is the same as the order in which Dijkstra's algorithm extracts the vertices of $V$ from the priority queue when it runs on $G$.\n\n\n\n\n$V + \\sum_{(u, v) \\in E} w(u, v) - E$.\n\n\n24.3-8\n\n\n\n\nLet $G = (V, E)$ be a weighted, directed graph with nonnegative weight function $w: E \\rightarrow \\{0, 1, \\ldots, W\\}$ for some nonnegative integer $W$. Modify Dijkstra's algorithm to compute the shortest paths from a given source vertex s in $O(WV + E)$ time.\n\n\n\n\nObserve that if a shortest-path estimate is not $\\infty$, then it's at most $(|V| - 1)W$. Why? In order to have $v.d < 1$, we must have relaxed an edge $(u, v)$ with $u.d < \\infty$. By induction, we can show that if we relax $(u, v)$, then $v.d$ is at most the number of edges on a path from $s$ to $v$ times the maximum edge weight. Since any acyclic path has at most $|V| - 1$ edges and the maximum edge weight is $W$, we see that $v.d \\le (|V| - 1)W$. Note also that $v.d$ must also be an integer, unless it is $\\infty$.\n\n\nWe also observe that in Dijkstra's algorithm, the values returned by the $\\text{EXTRACT-MIN}$ calls are monotonically increasing over time. Why? After we do our initial $|V|$ $\\text{INSERT}$ operations, we never do another. The only other way that a key value can change is by a $\\text{DECREASE-KEY}$ operation. Since edge weights are nonnegative, when we relax an edge $(u, v)$, we have that $u.d \\le v.d$. Since $u$ is the minimum vertex that we just extracted, we know that any other vertex we extract later has a key value that is at least $u.d$.\n\n\nWhen keys are known to be integers in the range $0$ to $k$ and the key values extracted are monotonically increasing over time, we can implement a min-priority queue so that any sequence of $m$ $\\text{INSERT}$, $\\text{EXTRACT-MIN}$, and $\\text{DECREASE-KEY}$ operations takes $O(m + k)$ time. Here's how. We use an array, say $A[0..k]$\u008d, where $A[j]$ is a linked list of each element whose key is $j$. Think of $A[j]$ as a bucket for all elements with key $j$. We implement each bucket by a circular, doubly linked list with a sentinel, so that we can insert into or delete from each bucket in $O(1)$ time. We perform the min-priority queue operations as follows:\n\n\n\n\n$\\text{INSERT}$: To insert an element with key $j$, just insert it into the linked list in $A[j]$\u008d. Time: $O(1)$ per $\\text{INSERT}$.\n\n\n$\\text{EXTRACT-MIN}$: We maintain an index $min$ of the value of the smallest key extracted. Initially, $min$ is $0$. To find the smallest key, look in $A[min]$ and, if this list is nonempty, use any element in it, removing the element from the list and returning it to the caller. Otherwise, we rely on the monotonicity property and increment $min$ until we either find a list $A[min]$ that is nonempty (using any element in $A[min]$ as before) or we run off the end of the array $A$ (in which case the min-priority queue is empty).\n\n    Since there are at most $m$ $\\text{INSERT}$ operations, there are at most $m$ elements in the min-priority queue. We increment $min$ at most $k$ times, and we remove and return some element at most $m$ times. Thus, the total time over all $\\text{EXTRACT-MIN}$ operations is $O(m + k)$.  \n\n\n$\\text{DECREASE-KEY}$: To decrease the key of an element from $j$ to $i$, first check whether $i \\le j$, \ufb02agging an error if not. Otherwise, we remove the element from its list $A[j]$ in $O(1)$ time and insert it into the list $A[i]$ in $O(1)$ time. Time: $O(1)$ per $\\text{DECREASE-KEY}$.\n\n    To apply this kind of min-priority queue to Dijkstra's algorithm, we need to let $k = (|V| - 1)W$, and we also need a separate list for keys with value $\\infty$. The number of operations $m$ is $O(V + E)$ (since there are $|V|$ $\\text{INSERT}$ and $|V|$ $\\text{EXTRACT-MIN}$ operations and at most $|E|$ $\\text{DECREASE-KEY}$ operations), and so the total time is $O(V + E + VW) = O(VW + E)$.\n\n\n\n\n24.3-9\n\n\n\n\nModify your algorithm from Exercise 24.3-8 to run in $O((V + E) \\lg W)$ time. ($\\textit{Hint:}$ How many distinct shortest-path estimates can there be in $V - S$ at any point in time?)\n\n\n\n\nFirst, observe that at any time, there are at most $W + 2$ distinct key values in the priority queue. Why? A key value is either $1$ or it is not. Consider what happens whenever a key value $v.d$ becomes finite. It must have occurred due to the relaxation of an edge $(u, v)$. At that time, $u$ was being placed into $S$, and $u.d \\le y.d$ for all vertices $y \\in V - S$. After relaxing edge $(u, v)$, we have $v.d \\le u.d + W$. Since any other vertex $y \\in V - S$ with $y.d < \\infty$ also had its estimate changed by a relaxation of some edge $x$ with $x.d \\le u.d$, we must have $y.d \\le x.d + W \\le u.d + W$. Thus, at the time that we are relaxing edges from a vertex $u$, we must have, for all vertices $v \\in V - S$, that $u.d \\le v.d \\le u.d + W$ or $v.d = \\infty$. Since shortest-path estimates are integer values (except for $\\infty$), at any given moment we have at most $W + 2$ different ones: $u.d$, $u.d + 1$, $u.d + 2$, $\\ldots$, $u.d + W$ and $\\infty$.\n\n\nTherefore, we can maintain the min-priorty queue as a binary min-heap in which each node points to a doubly linked list of all vertices with a given key value. There are at most $W + 2$ nodes in the heap, and so $\\text{EXTRACT-MIN}$ runs in $O(\\lg W)$ time. To perform $\\text{DECREASE-KEY}$, we need to be able to find the heap node corresponding to a given key in $O(\\lg W)$ time. We can do so in $O(1)$ time as follows. First, keep a pointer $inf$ to the node containing all the $\\infty$ keys. Second, maintain an array $loc[0..W]$\u008d, where $loc[i]$ points to the unique heap entry whose key value is congruent to $i(\\mod(W + 1))$. As keys move around in the heap, we can update this array in $O(1)$ time per movement.\n\n\nAlternatively, instead of using a binary min-heap, we could use a red-black tree. Now $\\text{INSERT}$, $\\text{DELETE}$, $\\text{MINIMUM}$, and $\\text{SEARCH}$\u2014from which we can construct the priority-queue operations\u2014each run in $O(\\lg W)$ time.\n\n\n24.3-10\n\n\n\n\nSuppose that we are given a weighted, directed graph $G = (V, E)$ in which edges that leave the source vertex $s$ may have negative weights, all other edge weights are nonnegative, and there are no negative-weight cycles. Argue that Dijkstra's algorithm correctly finds shortest paths from $s$ in this graph.\n\n\n\n\nThe proof of correctness, Theorem 24.6, goes through exactly as stated in the text. The key fact was that $\\delta(s, y) \\le \\delta(s, u)$. It is claimed that this holds because there are no negative edge weights, but in fact that is stronger than is needed. This always holds if $y$ occurs on a shortest path from $s$ to $u$ and $y \\ne s$ because all edges on the path from $y$ to $u$ have nonnegative weight. If any had negative weight, this would imply that we had ''gone back'' to an edge incident with $s$, which implies that a cycle is involved in the path, which would only be the case if it were a negative-weight cycle. However, these are still forbidden.",
            "title": "24.3 Dijkstra's algorithm"
        },
        {
            "location": "/Chap24/24.3/#243-1",
            "text": "Run Dijkstra's algorithm on the directed graph of Figure 24.2, first using vertex $s$ as the source and then using vertex $z$ as the source. In the style of Figure 24.6, show the $d$ and $\\pi$ values and the vertices in set $S$ after each iteration of the  while  loop.     $s$ as the source:   $d$ values:   \\begin{array}{ccccc}\ns & t & x & y & z \\\\\n\\hline\n0 & 3 & \\infty & 5 & \\infty \\\\\n0 & 3 & 9 & 5 & \\infty \\\\\n0 & 3 & 9 & 5 & 11 \\\\\n0 & 3 & 9 & 5 & 11 \\\\\n0 & 3 & 9 & 5 & 11\n\\end{array}   $\\pi$ values:   \\begin{array}{ccccc}\ns & t & x & y & z \\\\\n\\hline\n\\text{NIL} & s & \\text{NIL} & \\text{NIL} & \\text{NIL} \\\\\n\\text{NIL} & s & t & s & \\text{NIL} \\\\\n\\text{NIL} & s & t & s & y \\\\\n\\text{NIL} & s & t & s & y \\\\\n\\text{NIL} & s & t & s & y\n\\end{array}    $z$ as the source:   $d$ values:   \\begin{array}{ccccc}\ns & t & x & y & z \\\\\n\\hline\n3 & \\infty & 7 & \\infty & 0 \\\\\n3 & 6 & 7 & 8 & 0           \\\\\n3 & 6 & 7 & 8 & 0           \\\\\n3 & 6 & 7 & 8 & 0           \\\\\n3 & 6 & 7 & 8 & 0\n\\end{array}   $\\pi$ values:   \\begin{array}{ccccc}\ns & t & x & y & z \\\\\n\\hline\nz & \\text{NIL} & z & \\text{NIL} & \\text{NIL} \\\\\nz & s & z & s & \\text{NIL}     \\\\\nz & s & z & s & \\text{NIL}     \\\\\nz & s & z & s & \\text{NIL}     \\\\\nz & s & z & s & \\text{NIL}\n\\end{array}",
            "title": "24.3-1"
        },
        {
            "location": "/Chap24/24.3/#243-2",
            "text": "Give a simple example of a directed graph with negative-weight edges for which Dijkstra's algorithm produces incorrect answers. Why doesn't the proof of Theorem 24.6 go through when negative-weight edges are allowed?   Consider any graph with a negative cycle. $\\text{RELAX}$ is called a finite number of times but the distance to any vertex on the cycle is $-\\infty$, so Dijkstra's algorithm cannot possibly be correct here. The proof of theorem 24.6 doesn't go through because we can no longer guarantee that  $$\\delta(s, y) \\le \\delta(s, u).$$",
            "title": "24.3-2"
        },
        {
            "location": "/Chap24/24.3/#243-3",
            "text": "Suppose we change line 4 of Dijkstra's algorithm to the following.     4    while   | Q |   >   1   This change causes the  while  loop to execute $|V| - 1$ times instead of $|V|$ times. Is this proposed algorithm correct?   Yes, the algorithm still works. Let $u$ be the leftover vertex that does not get extracted from the priority queue $Q$. If $u$ is not reachable from $s$, then $u.d = \\delta(s, u) = \\infty$. If $u$ is reachable from $s$, then there is a shortest path $p = s \\leadsto x \\to u$. When the vertex $x$ was extracted, $x.d = \\delta(s, x)$ and then the edge $(x, u)$ was relaxed; thus, $u.d = \\delta(s, u)$.",
            "title": "24.3-3"
        },
        {
            "location": "/Chap24/24.3/#243-4",
            "text": "Professor Gaedel has written a program that he claims implements Dijkstra's algorithm. The program produces $v.d$ and $v.\\pi$ for each vertex $v \\in V$. Give an $O(V + E)$-time algorithm to check the output of the professor's program. It should determine whether the $d$ and $\\pi$ attributes match those of some shortest-paths tree. You may assume that all edge weights are nonnegative.    Verify that $s.d = 0$ and $s.\\pi = \\text{NIL}$  Verify that $v.d = v.\\pi + w(v.\\pi, v)$ for all $v \\in s$.  Verify that $v.d = \\infty$ if and only if $v.\\beta = \\text{NIL}$ for all $v \\in s$.  If any of the above verification tests fail, declare the output to be incorrect. Otherwise, run one pass of Bellman-Ford, i.e., relax each edge $(u, v) \\in E$ one time. If any values of $v.d$ change, then declare the output to be incorrect; otherwise, declare the output to be correct.",
            "title": "24.3-4"
        },
        {
            "location": "/Chap24/24.3/#243-5",
            "text": "Professor Newman thinks that he has worked out a simpler proof of correctness for Dijkstra's algorithm. He claims that Dijkstra's algorithm relaxes the edges of every shortest path in the graph in the order in which they appear on the path, and therefore the path-relaxation property applies to every vertex reachable from the source. Show that the professor is mistaken by constructing a directed graph for which Dijkstra's algorithm could relax the edges of a shortest path out of order.   Let the graph have vertices $s$, $x$, $y$, $z$ and edges $(s, x)$, $(x, y)$, $(y, z)$, $(s, y)$, and let every edge have weight $0$. Dijkstra's algorithm could relax edges in the order $(s, y)$, $(s, x)$, $(y, z)$, $(x, y)$. The graph has two shortest paths from $s$ to $z: \\langle s, x, y, z \\rangle$ and $\\langle s, y, z \\rangle$, both with weight $0$. The edges on the shortest path $\\langle s, x, y, z \\rangle$ are relaxed out of order, because $(x, y)$ is relaxed after $(y, z)$.",
            "title": "24.3-5"
        },
        {
            "location": "/Chap24/24.3/#243-6",
            "text": "We are given a directed graph $G = (V, E)$ on which each edge $(u, v) \\in E$ has an associated value $r(u, v)$, which is a real number in the range $0 \\le r(u, v) \\le 1$ that represents the reliability of a communication channel from vertex $u$ to vertex $v$. We interpret $r(u, v)$ as the probability that the channel from $u$ to $v$ will not fail, and we assume that these probabilities are independent. Give an efficient algorithm to find the most reliable path between two given vertices.   To find the most reliable path between $s$ and $t$, run Dijkstra's algorithm with edge weights $w(u, v) = -\\lg r(u, v)$ to find shortest paths from $s$ in $O(E + V\\lg V)$ time. The most reliable path is the shortest path from $s$ to $t$, and that path's reliability is the product of the reliabilities of its edges.  Here's why this method works. Because the probabilities are independent, the probability that a path will not fail is the product of the probabilities that its edges will not fail. We want to find a path $s \\overset{p}{\\leadsto} t$ such that $\\prod_{(u, v) \\in p} r(u, v)$ is maximized. This is equivalent to maximizing $\\lg(\\prod_{(u, v) \\in p} r(u, v)) = \\sum_{(u, v) \\in p} \\lg r(u, v)$, which is in turn equivalent to minimizing $\\sum_{(u, v) \\in p} -\\lg r(u, v)$. (Note: $r(u, v)$ can be $0$, and $\\lg 0$ is undefined. So in this algorithm, define $\\lg 0 = -\\infty$.) Thus if we assign weights $w(u, v) = -\\lg r(u, v)$, we have a shortest-path problem.  Since $\\lg 1 = 0$, $\\lg x < 0$ for $0 < x < 1$, and we have defined $\\lg 0 = -\\infty$, all the weights $w$ are nonnegative, and we can use Dijkstra's algorithm to find the shortest paths from $s$ in $O(E + V\\lg V)$ time.  Alternative solution  You can also work with the original probabilities by running a modified version of Dijkstra's algorithm that maximizes the product of reliabilities along a path instead of minimizing the sum of weights along a path.  In Dijkstra's algorithm, use the reliabilities as edge weights and substitute   max (and $\\text{EXTRACT-MAX}$) for min (and $\\text{EXTRACT-MIN}$) in relaxation and the queue,  $\\cdot$ for $+$ in relaxation,   $1$ (identity for $\\cdot$) for $0$ (identity for $+$) and $-\\infty$ (identity for min) for $\\infty$ (identity for max).   For example, we would use the following instead of the usual $\\text{RELAX}$ procedure:  RELAX - RELIABILITY ( u ,   v ,   r ) \n     if   v . d   <   u . d \uff0e r ( u ,   v ) \n         v . d   =   u . d \uff0e r ( u ,   v ) \n         v . PI   =   u   This algorithm is isomorphic to the one above: it performs the same operations except that it is working with the original probabilities instead of the transformed ones.",
            "title": "24.3-6"
        },
        {
            "location": "/Chap24/24.3/#243-7",
            "text": "Let $G = (V, E)$ be a weighted, directed graph with positive weight function $w: E \\rightarrow \\{1, 2, \\ldots, W\\}$ for some positive integer $W$, and assume that no two vertices have the same shortest-path weights from source vertex $s$. Now suppose that we define an unweighted, directed graph $G' = (V \\cup V', E')$ by replacing each edge $(u, v) \\in E$ with $w(u, v)$ unit-weight edges in series. How many vertices does $G'$ have? Now suppose that we run a breadth-first search on $G'$. Show that the order in which the breadth-first search of $G'$ colors vertices in $V$ black is the same as the order in which Dijkstra's algorithm extracts the vertices of $V$ from the priority queue when it runs on $G$.   $V + \\sum_{(u, v) \\in E} w(u, v) - E$.",
            "title": "24.3-7"
        },
        {
            "location": "/Chap24/24.3/#243-8",
            "text": "Let $G = (V, E)$ be a weighted, directed graph with nonnegative weight function $w: E \\rightarrow \\{0, 1, \\ldots, W\\}$ for some nonnegative integer $W$. Modify Dijkstra's algorithm to compute the shortest paths from a given source vertex s in $O(WV + E)$ time.   Observe that if a shortest-path estimate is not $\\infty$, then it's at most $(|V| - 1)W$. Why? In order to have $v.d < 1$, we must have relaxed an edge $(u, v)$ with $u.d < \\infty$. By induction, we can show that if we relax $(u, v)$, then $v.d$ is at most the number of edges on a path from $s$ to $v$ times the maximum edge weight. Since any acyclic path has at most $|V| - 1$ edges and the maximum edge weight is $W$, we see that $v.d \\le (|V| - 1)W$. Note also that $v.d$ must also be an integer, unless it is $\\infty$.  We also observe that in Dijkstra's algorithm, the values returned by the $\\text{EXTRACT-MIN}$ calls are monotonically increasing over time. Why? After we do our initial $|V|$ $\\text{INSERT}$ operations, we never do another. The only other way that a key value can change is by a $\\text{DECREASE-KEY}$ operation. Since edge weights are nonnegative, when we relax an edge $(u, v)$, we have that $u.d \\le v.d$. Since $u$ is the minimum vertex that we just extracted, we know that any other vertex we extract later has a key value that is at least $u.d$.  When keys are known to be integers in the range $0$ to $k$ and the key values extracted are monotonically increasing over time, we can implement a min-priority queue so that any sequence of $m$ $\\text{INSERT}$, $\\text{EXTRACT-MIN}$, and $\\text{DECREASE-KEY}$ operations takes $O(m + k)$ time. Here's how. We use an array, say $A[0..k]$\u008d, where $A[j]$ is a linked list of each element whose key is $j$. Think of $A[j]$ as a bucket for all elements with key $j$. We implement each bucket by a circular, doubly linked list with a sentinel, so that we can insert into or delete from each bucket in $O(1)$ time. We perform the min-priority queue operations as follows:   $\\text{INSERT}$: To insert an element with key $j$, just insert it into the linked list in $A[j]$\u008d. Time: $O(1)$ per $\\text{INSERT}$.  $\\text{EXTRACT-MIN}$: We maintain an index $min$ of the value of the smallest key extracted. Initially, $min$ is $0$. To find the smallest key, look in $A[min]$ and, if this list is nonempty, use any element in it, removing the element from the list and returning it to the caller. Otherwise, we rely on the monotonicity property and increment $min$ until we either find a list $A[min]$ that is nonempty (using any element in $A[min]$ as before) or we run off the end of the array $A$ (in which case the min-priority queue is empty). \n    Since there are at most $m$ $\\text{INSERT}$ operations, there are at most $m$ elements in the min-priority queue. We increment $min$ at most $k$ times, and we remove and return some element at most $m$ times. Thus, the total time over all $\\text{EXTRACT-MIN}$ operations is $O(m + k)$.    $\\text{DECREASE-KEY}$: To decrease the key of an element from $j$ to $i$, first check whether $i \\le j$, \ufb02agging an error if not. Otherwise, we remove the element from its list $A[j]$ in $O(1)$ time and insert it into the list $A[i]$ in $O(1)$ time. Time: $O(1)$ per $\\text{DECREASE-KEY}$. \n    To apply this kind of min-priority queue to Dijkstra's algorithm, we need to let $k = (|V| - 1)W$, and we also need a separate list for keys with value $\\infty$. The number of operations $m$ is $O(V + E)$ (since there are $|V|$ $\\text{INSERT}$ and $|V|$ $\\text{EXTRACT-MIN}$ operations and at most $|E|$ $\\text{DECREASE-KEY}$ operations), and so the total time is $O(V + E + VW) = O(VW + E)$.",
            "title": "24.3-8"
        },
        {
            "location": "/Chap24/24.3/#243-9",
            "text": "Modify your algorithm from Exercise 24.3-8 to run in $O((V + E) \\lg W)$ time. ($\\textit{Hint:}$ How many distinct shortest-path estimates can there be in $V - S$ at any point in time?)   First, observe that at any time, there are at most $W + 2$ distinct key values in the priority queue. Why? A key value is either $1$ or it is not. Consider what happens whenever a key value $v.d$ becomes finite. It must have occurred due to the relaxation of an edge $(u, v)$. At that time, $u$ was being placed into $S$, and $u.d \\le y.d$ for all vertices $y \\in V - S$. After relaxing edge $(u, v)$, we have $v.d \\le u.d + W$. Since any other vertex $y \\in V - S$ with $y.d < \\infty$ also had its estimate changed by a relaxation of some edge $x$ with $x.d \\le u.d$, we must have $y.d \\le x.d + W \\le u.d + W$. Thus, at the time that we are relaxing edges from a vertex $u$, we must have, for all vertices $v \\in V - S$, that $u.d \\le v.d \\le u.d + W$ or $v.d = \\infty$. Since shortest-path estimates are integer values (except for $\\infty$), at any given moment we have at most $W + 2$ different ones: $u.d$, $u.d + 1$, $u.d + 2$, $\\ldots$, $u.d + W$ and $\\infty$.  Therefore, we can maintain the min-priorty queue as a binary min-heap in which each node points to a doubly linked list of all vertices with a given key value. There are at most $W + 2$ nodes in the heap, and so $\\text{EXTRACT-MIN}$ runs in $O(\\lg W)$ time. To perform $\\text{DECREASE-KEY}$, we need to be able to find the heap node corresponding to a given key in $O(\\lg W)$ time. We can do so in $O(1)$ time as follows. First, keep a pointer $inf$ to the node containing all the $\\infty$ keys. Second, maintain an array $loc[0..W]$\u008d, where $loc[i]$ points to the unique heap entry whose key value is congruent to $i(\\mod(W + 1))$. As keys move around in the heap, we can update this array in $O(1)$ time per movement.  Alternatively, instead of using a binary min-heap, we could use a red-black tree. Now $\\text{INSERT}$, $\\text{DELETE}$, $\\text{MINIMUM}$, and $\\text{SEARCH}$\u2014from which we can construct the priority-queue operations\u2014each run in $O(\\lg W)$ time.",
            "title": "24.3-9"
        },
        {
            "location": "/Chap24/24.3/#243-10",
            "text": "Suppose that we are given a weighted, directed graph $G = (V, E)$ in which edges that leave the source vertex $s$ may have negative weights, all other edge weights are nonnegative, and there are no negative-weight cycles. Argue that Dijkstra's algorithm correctly finds shortest paths from $s$ in this graph.   The proof of correctness, Theorem 24.6, goes through exactly as stated in the text. The key fact was that $\\delta(s, y) \\le \\delta(s, u)$. It is claimed that this holds because there are no negative edge weights, but in fact that is stronger than is needed. This always holds if $y$ occurs on a shortest path from $s$ to $u$ and $y \\ne s$ because all edges on the path from $y$ to $u$ have nonnegative weight. If any had negative weight, this would imply that we had ''gone back'' to an edge incident with $s$, which implies that a cycle is involved in the path, which would only be the case if it were a negative-weight cycle. However, these are still forbidden.",
            "title": "24.3-10"
        },
        {
            "location": "/Chap24/24.4/",
            "text": "24.4-1\n\n\n\n\nFind a feasible solution or determine that no feasible solution exists for the following system of difference constraints:\n\n\n\\begin{align}\nx_1 - x_2 & \\le & 1,  \\\\\nx_1 - x_4 & \\le & -4, \\\\\nx_2 - x_3 & \\le & 2,  \\\\\nx_2 - x_5 & \\le & 7,  \\\\\nx_2 - x_6 & \\le & 5,  \\\\\nx_3 - x_6 & \\le & 10, \\\\\nx_4 - x_2 & \\le & 2,  \\\\\nx_5 - x_1 & \\le & -1, \\\\\nx_5 - x_4 & \\le & 3,  \\\\\nx_6 - x_3 & \\le & 8\n\\end{align}\n\n\n\n\nOur vertices of the constraint graph will be \n\n\n$$\\{v_0, v_1, v_2, v_3, v_4, v_5, v_6\\}.$$\n\n\nThe edges will be\n\n\n$$(v_0, v_1), (v_0, v_2), (v_0, v_3), (v_0, v_4), (v_0, v_5), (v_0, v_6), (v_2, v_1), (v_4, v_1), (v_3, v_2), (v_5, v_2), (v_6, v_2), (v_6, v_3),$$\n\n\nwith edge weights \n\n\n$$0, 0, 0, 0, 0, 0, 1, -4, 2, 7, 5, 10, 2, -1, 3, -8$$\n\n\nrespectively. Then, computing \n\n\n$$(\\delta(v_0, v_1), \\delta(v_0, v_2), \\delta(v_0, v_3), \\delta(v_0, v_4), \\delta(v_0, v_5), \\delta(v_0, v_6)),$$\n\n\nwe get \n\n\n$$(-5, -3, 0, -1, -6, -8),$$\n\n\nwhich is a feasible solution by Theorem 24.9.\n\n\n24.4-2\n\n\n\n\nFind a feasible solution or determine that no feasible solution exists for the following system of difference constraints:\n\n\n\\begin{align}\nx_1 - x_2 & \\le &4, \\\\\nx_1 - x_5 & \\le &5, \\\\\nx_2 - x_4 & \\le &-6, \\\\\nx_3 - x_2 & \\le &1, \\\\\nx_4 - x_1 & \\le &3, \\\\\nx_4 - x_3 & \\le &5, \\\\\nx_4 - x_5 & \\le &10, \\\\\nx_5 - x_3 & \\le &-4, \\\\\nx_5 - x_4 & \\le &-8.\n\\end{align}\n\n\n\n\nThere is no feasible solution because the constraint graph contains a negative-weight cycle: $(v_1, v_4, v_2, v_3, v_5, v_1)$ has weight $-1$.\n\n\n24.4-3\n\n\n\n\nCan any shortest-path weight from the new vertex $v_0$ in a constraint graph be positive? Explain.\n\n\n\n\nNo, it cannot be positive. This is because for every vertex $v \\ne v_0$, there is an edge $(v_0, v)$ with weight zero. So, there is some path from the new vertex to every other of weight zero. Since $\\delta(v_0, v)$ is a minimum weight of all paths, it cannot be greater than the weight of this weight zero path that consists of a single edge.\n\n\n24.4-4\n\n\n\n\nExpress the single-pair shortest-path problem as a linear program.\n\n\n\n\nLet $\\delta(u)$ be the shortest-path weight from $s$ to $u$. Then we want to find $\\delta(t)$. $\\delta$ must satisfy\n\n\n\\begin{align}\n            \\delta(s) & =   0 \\\\\n\\delta(v) - \\delta(u) & \\le w(u, v) \\text{ for all $(u, v) \\in E$} & \\text{(Lemma 24.10)},\n\\end{align}\n\n\nwhere $w(u, v)$ is the weight of edge $(u, v)$.\n\n\nThus $x_v = \\delta(v)$ is a solution to\n\n\n\\begin{align}\n      x_s & = 0 \\\\\nx_v - x_u & \\le w(u, v).\n\\end{align}\n\n\nTo turn this into a set of inequalities of the required form, replace $x_s = 0$ by $x_s \\le 0$ and $-x_s \\le 0$ (i.e., $x_s \\ge$). The constraints are now\n\n\n\\begin{align}\n      x_s & \\le 0, \\\\\n     -x_s & \\le 0. \\\\\nx_v - x_u & \\le w(u, v),\n\\end{align}\n\n\nwhich still has $x_v = \\delta(v)$ as a solution.\n\n\nHowever, $\\delta$ isn't the only solution to this set of inequalities. (For example, if all edge weights are nonnegative, all $x_i = 0$ is a solution.) To force $x_t = \\delta(t)$ as required by the shortest-path problem, add the requirement to maximize (the objective function) $x_t$. This is correct because\n\n\n\n\n$\\max(x_t) \\ge \\delta(t)$ because $x_t = \\delta(t)$ is part of one solution to the set of inequalities,\n\n\n\n\n$\\max(x_t) \\le \\delta(t)$ can be demonstrated by a technique similar to the proof of Theorem 24.9:\n\n    Let $p$ be a shortest path from $s$ to $t$. Then by definition, \n\n\n$$\\delta(t) = \\sum_{(u, v) \\in p} w(u, v).$$\n\n\nBut for each edge $(u, v)$ we have the inequality $x_v - x_u \\le w(u, v)$, so \n\n\n$$\\delta(t) = \\sum_{(u, v) \\in p} w(u, v) \\ge \\sum_{(u, v) \\in p} (x_v - x_u) = x_t - x_s.$$\n\n\nBut $x_s = 0$, so $x_t \\le \\delta(t)$.\n\n\n\n\n\n\nNote: Maximizing $x_t$ subject to the above inequalities solves the single-pair shortest-path problem when $t$ is reachable from $s$ and there are no negative-weight cycles. But if there's a negative-weight cycle, the inequalities have no feasible solution (as demonstrated in the proof of Theorem 24.9); and if $t$ is not reachable from $s$, then $x_t$ is unbounded.\n\n\n24.4-5\n\n\n\n\nShow how to modify the Bellman-Ford algorithm slightly so that when we use it to solve a system of difference constraints with $m$ inequalities on $n$ unknowns, the running time is $O(nm)$.\n\n\n\n\nWe can follow the advice of problem 14.4-7 and solve the system of constraints on a modified constraint graph in which there is no new vertex $v_0$. This is simply done by initializing all of the vertices to have a $d$ value of $0$ before running the iterated relaxations of Bellman Ford. Since we don't add a new vertex and the $n$ edges going from it to to vertex corresponding to each variable, we are just running Bellman Ford on a graph with $n$ vertices and $m$ edges, and so it will have a runtime of $O(mn)$.\n\n\n24.4-6\n\n\n\n\nSuppose that in addition to a system of difference constraints, we want to handle \nequality constraints\n of the form $x_i = x_j + b_k$. Show how to adapt the Bellman-Ford algorithm to solve this variety of constraint system.\n\n\n\n\nTo obtain the equality constraint $x_i = x_j + b_k$ we simply use the inequalities $x_i - x_j \\le b_k$ and $x_j - x_i \\le -bk$, then solve the problem as usual.\n\n\n24.4-7\n\n\n\n\nShow how to solve a system of difference constraints by a Bellman-Ford-like algorithm that runs on a constraint graph without the extra vertex $v_0$.\n\n\n\n\nObserve that after the first pass, all $d$ values are at most $0$, and that relaxing edges $(v_0, v_i)$ will never again change a $d$ value. Therefore, we can eliminate $v_0$ by running the Bellman-Ford algorithm on the constraint graph without the $v_0$ vertex but initializing all shortest path estimates to $0$ instead of $\\infty$.\n\n\n24.4-8 $\\star$\n\n\n\n\nLet $Ax \\le b$ be a system of $m$ difference constraints in $n$ unknowns. Show that the Bellman-Ford algorithm, when run on the corresponding constraint graph, maximizes $\\sum_{i = 1}^n x_i$ subject to $Ax \\le b$ and $x_i \\le 0$ for all $x_i$.\n\n\n\n\nBellman-Ford correctly solves the system of difference constraints so $Ax \\le b$ is always satisfied. We also have that $x_i = \\delta(v_0, v_i) \\le w(v_0, v_i) = 0$ so $x_i \\le 0$ for all $i$. To show that $\\sum x_i$ is maximized, we'll show that for any feasible solution $(y_1, y_2, \\ldots, y_n)$ which satisfies the constraints we have $yi \\le \\delta(v_0, v_i) = x_i$. Let $v_0, v_{i_1}, \\ldots, v_{i_k}$ be a shortest path from $v_0$ to $v_i$ in the constraint graph. Then we must have the constraints $y_{i_2} - y_{i_1} \\le w(v_{i_1}, v_{i_2}), \\ldots, y_{i_k} - y_{i_{k - 1}} \\le w(v_{i_{k - 1}},v_{i_k})$. Summing these up we have\n\n\n$$y_i \\le y_i - y_1 \\le \\sum_{m = 2}^k w(v_{i_m}, v_{i_{m - 1}}) = \\delta(v_0, v_i) = x_i.$$\n\n\n24.4-9 $\\star$\n\n\n\n\nShow that the Bellman-Ford algorithm, when run on the constraint graph for a system $Ax \\le b$ of difference constraints, minimizes the quantity $(\\max{x_i} - \\min{x_i})$ subject to $Ax \\le b$. Explain how this fact might come in handy if the algorithm is used to schedule construction jobs.\n\n\n\n\nWe can see that the Bellman-Ford algorithm run on the graph whose construction is described in this section causes the quantity $\\max{x_i} - \\min{x_i}$ to be minimized. We know that the largest value assigned to any of the vertices in the constraint graph is a $0$. It is clear that it won't be greater than zero, since just the single edge path to each of the vertices has cost zero. We also know that we cannot have every vertex having a shortest path with negative weight. To see this, notice that this would mean that the pointer for each vertex has it's $p$ value going to some other vertex that is not the source. This means that if we follow the procedure for reconstructing the shortest path for any of the vertices, we have that it can never get back to the source, a contradiction to the fact that it is a shortest path from the source to that vertex.\n\n\nNext, we note that when we run Bellman-Ford, we are maximizing $\\min{x_i}$. The shortest distance in the constraint graphs is the bare minimum of what is required in order to have all the constraints satisfied, if we were to increase any of the values we would be violating a constraint.\n\n\nThis could be in handy when scheduling construction jobs because the quantity $\\max{x_i} - \\min{x_i}$ is equal to the difference in time between the last task and the first task. Therefore, it means that minimizing it would mean that the total time that all the jobs takes is also minimized. And, most people want the entire process of construction to take as short of a time as possible.\n\n\n24.4-10\n\n\n\n\nSuppose that every row in the matrix $A$ of a linear program $Ax \\le b$ corresponds to a difference constraint, a single-variable constraint of the form $x_i \\le b_k$, or a singlevariable constraint of the form $-x_i \\le b_k$. Show how to adapt the Bellman-Ford algorithm to solve this variety of constraint system.\n\n\n\n\nTo allow for single-variable constraints, we add the variable $x_0$ and let it correspond to the source vertex $v_0$ of the constraint graph. The idea is that, if there are no negative-weight cycles containing $v_0$, we will find that $\\delta(v_0, v_0) = 0$. In this case, we set $x_0 = 0$, and so we can treat any single-variable constraint using $x_i$ as if it were a $2$-variable constraint with $x_0$ as the other variable.\n\n\nSpecifically, we treat the constraint $x_i \\le b_k$ as if it were $x_i - x_0 \\le b_k$, and we add the edge $(v_0, v_i)$ with weight $b_k$ to the constraint graph. We treat the constraint $-x_i \\le b_k$ as if it were $x_0 - x_i \\le b_k$, and we add the edge $(v_i, v_0)$ with weight $b_k$ to the constraint graph.\n\n\nOnce we find shortest-path weights from $v_0$, we set $x_i = \\delta(v_0, v_i)$ for all $i = 0, 1, \\ldots, n$; that is, we do as before but also include $x_0$ as one of the variables that we set to a shortest-path weight. Since $v_0$ is the source vertex, either $x_0 = 0$ or $x_0 < 0$.\n\n\nIf $\\delta(v_0, v_0) = 0$, so that $x_0 = 0$, then setting $x_i = \\delta(v_0, v_i)$ for all $i = 0, 1, \\ldots, n$ gives a feasible solution for the system. The only new constraints beyond those in the text are those involving $x_0$. For constraints $x_i \\le b_k$, we use $x_i - x_0 \\le b_k$. By the triangle inequality, $\\delta(v_0, v_i) \\le \\delta(v_0, v_0) + w(v_0, v_i) = b_k$, and so $x_i \\le b_k$. For constraints $x_i \\le b_k$, we use $x_0 - x_i \\le b_k$. By the triangle inequality, $0 = \\delta(v_0, v_0) \\le \\delta(v_0, v_i) + w(v_i, v_0)$; thus, $0 \\le x_i + b_k$ or, equivalently, $-x_i \\le b_k$.\n\n\nIf $\\delta(v_0, v_0) < 0$, so that $x_0 < 0$, then there is a negative-weight cycle containing $v_0$. The portion of the proof of Theorem 24.9 that deals with negative-weight cycles carries through but with $v_0$ on the negative-weight cycle, and we see that there is no feasible solution.\n\n\n24.4-11\n\n\n\n\nGive an efficient algorithm to solve a system $Ax \\le b$ of difference constraints when all of the elements of $b$ are real-valued and all of the unknowns $x_i$ must be integers.\n\n\n\n\nTo do this, just take the floor of (largest integer that is less than or equal to) each of the $b$ values and solve the resulting integer difference problem. These modified constraints will be admitting exactly the same set of assignments since we required that the solution have integer values assigned to the variables. This is because since the variables are integers, all of their differences will also be integers. For an integer to be less than or equal to a real number, it is necessary and sufficient for it to be less than or equal to the floor of that real number.\n\n\n24.4-12 $\\star$\n\n\n\n\nGive an efficient algorithm to solve a system $Ax \\le b$ of difference constraints when all of the elements of $b$ are real-valued and a specified subset of some, but not necessarily all, of the unknowns $x_i$ must be integers.\n\n\n\n\nTo solve the problem of $Ax \\le b$ where the elements of $b$ are real-valued we carry out the same procedure as before, running Bellman-Ford, but allowing our edge weights to be real-valued. To impose the integer condition on the $x_i$'s, we modify the $\\text{RELAX}$ procedure. Suppose we call $\\text{RELAX}(v_i, v_j, w)$ where $v_j$ is required to be integral valued. If $v_j.d > \\lfloor v_i.d + w(v_i, v_j) \\rfloor$, set $v_j.d = \\lfloor v_i.d + w(v_i, v_j) \\rfloor$. This guarantees that the condition that $v_j.d - v_i.d \\le w(v_i, v_j)$ as desired. It also ensures that $v_j$ is integer valued. Since the triangle inequality still holds, $x = (v_1.d, v_2.d, \\ldots, v_n.d)$ is a feasible solution for the system, provided that $G$ contains no negative weight cycles.",
            "title": "24.4 Difference constraints and shortest paths"
        },
        {
            "location": "/Chap24/24.4/#244-1",
            "text": "Find a feasible solution or determine that no feasible solution exists for the following system of difference constraints:  \\begin{align}\nx_1 - x_2 & \\le & 1,  \\\\\nx_1 - x_4 & \\le & -4, \\\\\nx_2 - x_3 & \\le & 2,  \\\\\nx_2 - x_5 & \\le & 7,  \\\\\nx_2 - x_6 & \\le & 5,  \\\\\nx_3 - x_6 & \\le & 10, \\\\\nx_4 - x_2 & \\le & 2,  \\\\\nx_5 - x_1 & \\le & -1, \\\\\nx_5 - x_4 & \\le & 3,  \\\\\nx_6 - x_3 & \\le & 8\n\\end{align}   Our vertices of the constraint graph will be   $$\\{v_0, v_1, v_2, v_3, v_4, v_5, v_6\\}.$$  The edges will be  $$(v_0, v_1), (v_0, v_2), (v_0, v_3), (v_0, v_4), (v_0, v_5), (v_0, v_6), (v_2, v_1), (v_4, v_1), (v_3, v_2), (v_5, v_2), (v_6, v_2), (v_6, v_3),$$  with edge weights   $$0, 0, 0, 0, 0, 0, 1, -4, 2, 7, 5, 10, 2, -1, 3, -8$$  respectively. Then, computing   $$(\\delta(v_0, v_1), \\delta(v_0, v_2), \\delta(v_0, v_3), \\delta(v_0, v_4), \\delta(v_0, v_5), \\delta(v_0, v_6)),$$  we get   $$(-5, -3, 0, -1, -6, -8),$$  which is a feasible solution by Theorem 24.9.",
            "title": "24.4-1"
        },
        {
            "location": "/Chap24/24.4/#244-2",
            "text": "Find a feasible solution or determine that no feasible solution exists for the following system of difference constraints:  \\begin{align}\nx_1 - x_2 & \\le &4, \\\\\nx_1 - x_5 & \\le &5, \\\\\nx_2 - x_4 & \\le &-6, \\\\\nx_3 - x_2 & \\le &1, \\\\\nx_4 - x_1 & \\le &3, \\\\\nx_4 - x_3 & \\le &5, \\\\\nx_4 - x_5 & \\le &10, \\\\\nx_5 - x_3 & \\le &-4, \\\\\nx_5 - x_4 & \\le &-8.\n\\end{align}   There is no feasible solution because the constraint graph contains a negative-weight cycle: $(v_1, v_4, v_2, v_3, v_5, v_1)$ has weight $-1$.",
            "title": "24.4-2"
        },
        {
            "location": "/Chap24/24.4/#244-3",
            "text": "Can any shortest-path weight from the new vertex $v_0$ in a constraint graph be positive? Explain.   No, it cannot be positive. This is because for every vertex $v \\ne v_0$, there is an edge $(v_0, v)$ with weight zero. So, there is some path from the new vertex to every other of weight zero. Since $\\delta(v_0, v)$ is a minimum weight of all paths, it cannot be greater than the weight of this weight zero path that consists of a single edge.",
            "title": "24.4-3"
        },
        {
            "location": "/Chap24/24.4/#244-4",
            "text": "Express the single-pair shortest-path problem as a linear program.   Let $\\delta(u)$ be the shortest-path weight from $s$ to $u$. Then we want to find $\\delta(t)$. $\\delta$ must satisfy  \\begin{align}\n            \\delta(s) & =   0 \\\\\n\\delta(v) - \\delta(u) & \\le w(u, v) \\text{ for all $(u, v) \\in E$} & \\text{(Lemma 24.10)},\n\\end{align}  where $w(u, v)$ is the weight of edge $(u, v)$.  Thus $x_v = \\delta(v)$ is a solution to  \\begin{align}\n      x_s & = 0 \\\\\nx_v - x_u & \\le w(u, v).\n\\end{align}  To turn this into a set of inequalities of the required form, replace $x_s = 0$ by $x_s \\le 0$ and $-x_s \\le 0$ (i.e., $x_s \\ge$). The constraints are now  \\begin{align}\n      x_s & \\le 0, \\\\\n     -x_s & \\le 0. \\\\\nx_v - x_u & \\le w(u, v),\n\\end{align}  which still has $x_v = \\delta(v)$ as a solution.  However, $\\delta$ isn't the only solution to this set of inequalities. (For example, if all edge weights are nonnegative, all $x_i = 0$ is a solution.) To force $x_t = \\delta(t)$ as required by the shortest-path problem, add the requirement to maximize (the objective function) $x_t$. This is correct because   $\\max(x_t) \\ge \\delta(t)$ because $x_t = \\delta(t)$ is part of one solution to the set of inequalities,   $\\max(x_t) \\le \\delta(t)$ can be demonstrated by a technique similar to the proof of Theorem 24.9: \n    Let $p$ be a shortest path from $s$ to $t$. Then by definition,   $$\\delta(t) = \\sum_{(u, v) \\in p} w(u, v).$$  But for each edge $(u, v)$ we have the inequality $x_v - x_u \\le w(u, v)$, so   $$\\delta(t) = \\sum_{(u, v) \\in p} w(u, v) \\ge \\sum_{(u, v) \\in p} (x_v - x_u) = x_t - x_s.$$  But $x_s = 0$, so $x_t \\le \\delta(t)$.    Note: Maximizing $x_t$ subject to the above inequalities solves the single-pair shortest-path problem when $t$ is reachable from $s$ and there are no negative-weight cycles. But if there's a negative-weight cycle, the inequalities have no feasible solution (as demonstrated in the proof of Theorem 24.9); and if $t$ is not reachable from $s$, then $x_t$ is unbounded.",
            "title": "24.4-4"
        },
        {
            "location": "/Chap24/24.4/#244-5",
            "text": "Show how to modify the Bellman-Ford algorithm slightly so that when we use it to solve a system of difference constraints with $m$ inequalities on $n$ unknowns, the running time is $O(nm)$.   We can follow the advice of problem 14.4-7 and solve the system of constraints on a modified constraint graph in which there is no new vertex $v_0$. This is simply done by initializing all of the vertices to have a $d$ value of $0$ before running the iterated relaxations of Bellman Ford. Since we don't add a new vertex and the $n$ edges going from it to to vertex corresponding to each variable, we are just running Bellman Ford on a graph with $n$ vertices and $m$ edges, and so it will have a runtime of $O(mn)$.",
            "title": "24.4-5"
        },
        {
            "location": "/Chap24/24.4/#244-6",
            "text": "Suppose that in addition to a system of difference constraints, we want to handle  equality constraints  of the form $x_i = x_j + b_k$. Show how to adapt the Bellman-Ford algorithm to solve this variety of constraint system.   To obtain the equality constraint $x_i = x_j + b_k$ we simply use the inequalities $x_i - x_j \\le b_k$ and $x_j - x_i \\le -bk$, then solve the problem as usual.",
            "title": "24.4-6"
        },
        {
            "location": "/Chap24/24.4/#244-7",
            "text": "Show how to solve a system of difference constraints by a Bellman-Ford-like algorithm that runs on a constraint graph without the extra vertex $v_0$.   Observe that after the first pass, all $d$ values are at most $0$, and that relaxing edges $(v_0, v_i)$ will never again change a $d$ value. Therefore, we can eliminate $v_0$ by running the Bellman-Ford algorithm on the constraint graph without the $v_0$ vertex but initializing all shortest path estimates to $0$ instead of $\\infty$.",
            "title": "24.4-7"
        },
        {
            "location": "/Chap24/24.4/#244-8-star",
            "text": "Let $Ax \\le b$ be a system of $m$ difference constraints in $n$ unknowns. Show that the Bellman-Ford algorithm, when run on the corresponding constraint graph, maximizes $\\sum_{i = 1}^n x_i$ subject to $Ax \\le b$ and $x_i \\le 0$ for all $x_i$.   Bellman-Ford correctly solves the system of difference constraints so $Ax \\le b$ is always satisfied. We also have that $x_i = \\delta(v_0, v_i) \\le w(v_0, v_i) = 0$ so $x_i \\le 0$ for all $i$. To show that $\\sum x_i$ is maximized, we'll show that for any feasible solution $(y_1, y_2, \\ldots, y_n)$ which satisfies the constraints we have $yi \\le \\delta(v_0, v_i) = x_i$. Let $v_0, v_{i_1}, \\ldots, v_{i_k}$ be a shortest path from $v_0$ to $v_i$ in the constraint graph. Then we must have the constraints $y_{i_2} - y_{i_1} \\le w(v_{i_1}, v_{i_2}), \\ldots, y_{i_k} - y_{i_{k - 1}} \\le w(v_{i_{k - 1}},v_{i_k})$. Summing these up we have  $$y_i \\le y_i - y_1 \\le \\sum_{m = 2}^k w(v_{i_m}, v_{i_{m - 1}}) = \\delta(v_0, v_i) = x_i.$$",
            "title": "24.4-8 $\\star$"
        },
        {
            "location": "/Chap24/24.4/#244-9-star",
            "text": "Show that the Bellman-Ford algorithm, when run on the constraint graph for a system $Ax \\le b$ of difference constraints, minimizes the quantity $(\\max{x_i} - \\min{x_i})$ subject to $Ax \\le b$. Explain how this fact might come in handy if the algorithm is used to schedule construction jobs.   We can see that the Bellman-Ford algorithm run on the graph whose construction is described in this section causes the quantity $\\max{x_i} - \\min{x_i}$ to be minimized. We know that the largest value assigned to any of the vertices in the constraint graph is a $0$. It is clear that it won't be greater than zero, since just the single edge path to each of the vertices has cost zero. We also know that we cannot have every vertex having a shortest path with negative weight. To see this, notice that this would mean that the pointer for each vertex has it's $p$ value going to some other vertex that is not the source. This means that if we follow the procedure for reconstructing the shortest path for any of the vertices, we have that it can never get back to the source, a contradiction to the fact that it is a shortest path from the source to that vertex.  Next, we note that when we run Bellman-Ford, we are maximizing $\\min{x_i}$. The shortest distance in the constraint graphs is the bare minimum of what is required in order to have all the constraints satisfied, if we were to increase any of the values we would be violating a constraint.  This could be in handy when scheduling construction jobs because the quantity $\\max{x_i} - \\min{x_i}$ is equal to the difference in time between the last task and the first task. Therefore, it means that minimizing it would mean that the total time that all the jobs takes is also minimized. And, most people want the entire process of construction to take as short of a time as possible.",
            "title": "24.4-9 $\\star$"
        },
        {
            "location": "/Chap24/24.4/#244-10",
            "text": "Suppose that every row in the matrix $A$ of a linear program $Ax \\le b$ corresponds to a difference constraint, a single-variable constraint of the form $x_i \\le b_k$, or a singlevariable constraint of the form $-x_i \\le b_k$. Show how to adapt the Bellman-Ford algorithm to solve this variety of constraint system.   To allow for single-variable constraints, we add the variable $x_0$ and let it correspond to the source vertex $v_0$ of the constraint graph. The idea is that, if there are no negative-weight cycles containing $v_0$, we will find that $\\delta(v_0, v_0) = 0$. In this case, we set $x_0 = 0$, and so we can treat any single-variable constraint using $x_i$ as if it were a $2$-variable constraint with $x_0$ as the other variable.  Specifically, we treat the constraint $x_i \\le b_k$ as if it were $x_i - x_0 \\le b_k$, and we add the edge $(v_0, v_i)$ with weight $b_k$ to the constraint graph. We treat the constraint $-x_i \\le b_k$ as if it were $x_0 - x_i \\le b_k$, and we add the edge $(v_i, v_0)$ with weight $b_k$ to the constraint graph.  Once we find shortest-path weights from $v_0$, we set $x_i = \\delta(v_0, v_i)$ for all $i = 0, 1, \\ldots, n$; that is, we do as before but also include $x_0$ as one of the variables that we set to a shortest-path weight. Since $v_0$ is the source vertex, either $x_0 = 0$ or $x_0 < 0$.  If $\\delta(v_0, v_0) = 0$, so that $x_0 = 0$, then setting $x_i = \\delta(v_0, v_i)$ for all $i = 0, 1, \\ldots, n$ gives a feasible solution for the system. The only new constraints beyond those in the text are those involving $x_0$. For constraints $x_i \\le b_k$, we use $x_i - x_0 \\le b_k$. By the triangle inequality, $\\delta(v_0, v_i) \\le \\delta(v_0, v_0) + w(v_0, v_i) = b_k$, and so $x_i \\le b_k$. For constraints $x_i \\le b_k$, we use $x_0 - x_i \\le b_k$. By the triangle inequality, $0 = \\delta(v_0, v_0) \\le \\delta(v_0, v_i) + w(v_i, v_0)$; thus, $0 \\le x_i + b_k$ or, equivalently, $-x_i \\le b_k$.  If $\\delta(v_0, v_0) < 0$, so that $x_0 < 0$, then there is a negative-weight cycle containing $v_0$. The portion of the proof of Theorem 24.9 that deals with negative-weight cycles carries through but with $v_0$ on the negative-weight cycle, and we see that there is no feasible solution.",
            "title": "24.4-10"
        },
        {
            "location": "/Chap24/24.4/#244-11",
            "text": "Give an efficient algorithm to solve a system $Ax \\le b$ of difference constraints when all of the elements of $b$ are real-valued and all of the unknowns $x_i$ must be integers.   To do this, just take the floor of (largest integer that is less than or equal to) each of the $b$ values and solve the resulting integer difference problem. These modified constraints will be admitting exactly the same set of assignments since we required that the solution have integer values assigned to the variables. This is because since the variables are integers, all of their differences will also be integers. For an integer to be less than or equal to a real number, it is necessary and sufficient for it to be less than or equal to the floor of that real number.",
            "title": "24.4-11"
        },
        {
            "location": "/Chap24/24.4/#244-12-star",
            "text": "Give an efficient algorithm to solve a system $Ax \\le b$ of difference constraints when all of the elements of $b$ are real-valued and a specified subset of some, but not necessarily all, of the unknowns $x_i$ must be integers.   To solve the problem of $Ax \\le b$ where the elements of $b$ are real-valued we carry out the same procedure as before, running Bellman-Ford, but allowing our edge weights to be real-valued. To impose the integer condition on the $x_i$'s, we modify the $\\text{RELAX}$ procedure. Suppose we call $\\text{RELAX}(v_i, v_j, w)$ where $v_j$ is required to be integral valued. If $v_j.d > \\lfloor v_i.d + w(v_i, v_j) \\rfloor$, set $v_j.d = \\lfloor v_i.d + w(v_i, v_j) \\rfloor$. This guarantees that the condition that $v_j.d - v_i.d \\le w(v_i, v_j)$ as desired. It also ensures that $v_j$ is integer valued. Since the triangle inequality still holds, $x = (v_1.d, v_2.d, \\ldots, v_n.d)$ is a feasible solution for the system, provided that $G$ contains no negative weight cycles.",
            "title": "24.4-12 $\\star$"
        },
        {
            "location": "/Chap24/24.5/",
            "text": "24.5-1\n\n\n\n\nGive two shortest-paths trees for the directed graph of Figure 24.2 (on page 648) other than the two shown.\n\n\n\n\nSince the induced shortest path trees on $\\{s, t, y\\}$ and on $\\{t, x, y, z\\}$ are independent and have to possible configurations each, there are four total arising from that. So, we have the two not shown in the figure are the one consisting of the edges $\\{(s, t), (s, y), (y, x), (x, z)\\}$ and the one consisting of the edges $\\{(s, t), (t, y), (t, x), (y, z)\\}$.\n\n\n24.5-2\n\n\n\n\nGive an example of a weighted, directed graph $G = (V, E)$ with weight function $w: E \\rightarrow \\mathbb R$ and source vertex $s$ such that $G$ satisfies the following property: For every edge $(u, v) \\in E$, there is a shortest-paths tree rooted at $s$ that contains $(u, v)$ and another shortest-paths tree rooted at $s$ that does not contain $(u, v)$.\n\n\n\n\nLet $G$ have $3$ vertices $s$, $x$, and $y$. Let the edges be $(s, x)$, $(s, y)$, and $(x, y)$ with weights $1$, $1$, and $0$ respectively. There are $3$ possible trees on these vertices rooted at $s$, and each is a shortest paths tree which gives $\\delta(s, x) = \\delta(s, y) = 1$.\n\n\n24.5-3\n\n\n\n\nEmbellish the proof of Lemma 24.10 to handle cases in which shortest-path weights are $\\infty$ or $-\\infty$.\n\n\n\n\nTo modify Lemma 24.10 to allow for possible shortest path weights of $\\infty$ and $-\\infty$, we need to define our addition as $\\infty + c = \\infty$, and $-\\infty + c = -\\infty$. This will make the statement behave correctly, that is, we can take the shortest path from $s$ to $u$ and tack on the edge $(u, v)$ to the end. That is, if there is a negative weight cycle on your way to $u$ and there is an edge from $u$ to $v$, there is a negative weight cycle on our way to $v$. Similarly, if we cannot reach $v$ and there is an edge from $u$ to $v$, we cannot reach $u$.\n\n\n24.5-4\n\n\n\n\nLet $G = (V, E)$ be a weighted, directed graph with source vertex $s$, and let $G$ be initialized by $\\text{INITIALIZE-SINGLE-SOURCE}(G, s)$. Prove that if a sequence of relaxation steps sets $s.\\pi$ to a non-$\\text{NIL}$ value, then $G$ contains a negative-weight cycle.\n\n\n\n\nWhenever $\\text{RELAX}$ sets $\\pi$ for some vertex, it also reduces the vertex's $d$ value. Thus if $s.\\pi$ gets set to a non-$\\text{NIL}$ value, $s.d$ is reduced from its initial value of $0$ to a negative number. But $s.d$ is the weight of some path from $s$ to $s$, which is a cycle including $s$. Thus, there is a negative-weight cycle.\n\n\n24.5-5\n\n\n\n\nLet $G = (V, E)$ be a weighted, directed graph with no negative-weight edges. Let $s \\in V$ be the source vertex, and suppose that we allow $v.\\pi$ to be the predecessor of $v$ on any shortest path to $v$ from source $s$ if $v \\in V - \\{s\\}$ is reachable from $s$, and $\\text{NIL}$ otherwise. Give an example of such a graph $G$ and an assignment of $\\pi$ values that produces a cycle in $G_\\pi$. (By Lemma 24.16, such an assignment cannot be produced by a sequence of relaxation steps.)\n\n\n\n\nSuppose that we have a grap hon three vertices $\\{s, u, v\\}$ and containing edges $(s, u), (s, v), (u, v), (v, u)$ all with weight $0$. Then, there is a shortest path from $s$ to $v$ of $s$, $u$, $v$ and a shortest path from $s$ to $u$ of $s$ $v$, $u$. Based off of these, we could set $v.\\pi = u$ and $u.\\pi = v$. This then means that there is a cycle consisting of $u, v$ in $G_\\pi$.\n\n\n24.5-6\n\n\n\n\nLet $G = (V, E)$ be a weighted, directed graph with weight function $w: E \\rightarrow \\mathbb R$ and no negative-weight cycles. Let $s \\in V$ be the source vertex, and let $G$ be initialized by $\\text{INITIALIZE-SINGLE-SOURCE}(G, s)$. Prove that for every vertex $v \\in V_\\pi$, there exists a path from $s$ to $v$ in $G_\\pi$ and that this property is maintained as an invariant over any sequence of relaxations.\n\n\n\n\nWe will prove this by induction on the number of relaxations performed. For the base-case, we have just called $\\text{INITIALIZE-SINGLE-SOURCE}(G, s)$. The only vertex in $V_\\pi$ is $s$, and there is trivially a path from $s$ to itself. Now suppose that after any sequence of $n$ relaxations, for every vertex $v \\in V_\\pi$ there exists a path from $s$ to $v$ in $G_\\pi$. Consider the $(n + 1)$th relaxation. Suppose it is such that $v.d > u.d + w(u, v)$. When we relax $v$, we update $v.\\pi = u.\\pi$. By the induction hypothesis, there was a path from $s$ to $u$ in $G_\\pi$. Now $v$ is in $V_\\pi$, and the path from $s$ to $u$, followed by the edge $(u,v) = (v.\\pi, v)$ is a path from s to $v$ in $G_\\pi$, so the claim holds.\n\n\n24.5-7\n\n\n\n\nLet $G = (V, E)$ be a weighted, directed graph that contains no negative-weight cycles. Let $s \\in V$ be the source vertex, and let $G$ be initialized by $\\text{INITIALIZE-SINGLE-SOURCE}(G, s)$. Prove that there exists a sequence of $|V| - 1$ relaxation steps that produces $v.d = \\delta(s, v)$ for all $v \\in V$.\n\n\n\n\nSuppose we have a shortest-paths tree $G_\\pi$. Relax edges in $G_\\pi$ according to the order in which a BFS would visit them. Then we are guaranteed that the edges along each shortest path are relaxed in order. By the path-relaxation property, we would then have $v.d = \\delta(s, v)$ for all $v \\in V$. Since $G_\\pi$ contains at most $|V| - 1$ edges, we need to relax only $|V| - 1$ edges to get $v.d = \\delta(s, v)$ for all $v \\in V$.\n\n\n24.5-8\n\n\n\n\nLet $G$ be an arbitrary weighted, directed graph with a negative-weight cycle reachable from the source vertex $s$. Show how to construct an infinite sequence of relaxations of the edges of $G$ such that every relaxation causes a shortest-path estimate to change.\n\n\n\n\nSuppose that there is a negative-weight cycle $c = \\langle v_0, v_1, \\ldots, v_k \\rangle$, where $v_0 = v_k$, that is reachable from the source vertex $s$; thus, $w(c) < 0$. Without loss of generality, $c$ is simple. There must be an acyclic path from $s$ to some vertex of $c$ that uses no other vertices in $c$. Without loss of generality let this vertex of $c$ be $v_0$, and let this path from $s$ to $v_0$ be $p = \\langle u_0, u_1, \\ldots, u_l \\rangle$, where $u_0 = s$ and $u_l = v_0 = v_k$. (It may be the case that $u_l = s$, in which case path $p$ has no edges.) \n\n\nAfter the call to $\\text{INITIALIZE-SINGLE-SOURCE}$ sets $v.d = \\infty$ for all $v \\in V - \\{s\\}$, perform the following sequence of relaxations. First, relax every edge in path $p$, in order. Then relax every edge in cycle $c$, in order, and repeatedly relax the cycle. That is, we relax the edges $(u_0, u_1)$, $(u_1, u_2)$, $\\ldots$, $(u_{l - 1}, v_0)$, $(v_0, v_1)$, $(v_1, v_2)$, $\\ldots$, $(v_{k - 1}, v_0)$, $(v_0, v_1)$, $(v_1, v_2)$, $\\ldots$, $(v_{k - 1}, v_0)$, $(v_0, v_1)$, $(v_1, v_2)$, $\\ldots$, $(v_{k - 1}, v_0)$, $\\ldots$\n\n\nWe claim that every edge relaxation in this sequence reduces a shortest-path estimate. Clearly, the first time we relax an edge $(u_{i - 1}, u_i)$ or $(v_{j - 1}, v_j)$, for $i = 1, 2, \\ldots, l$ and $j = 1, 2, \\ldots, k - 1$ (note that we have not yet relaxed the last edge of cycle $c$), we reduce $u_i.d$ or $v_j.d$ from $\\infty$ to a finite value. Now consider the relaxation of any edge $(v_{j - 1}, v_j)$ after this opening sequence of relaxations. We use induction on the number of edge relaxations to show that this relaxation reduces $v_j.d$.\n\n\nBasis:\n The next edge relaxed after the opening sequence is $(v_{k - 1}, v_k)$. Before relaxation, $v_k.d = w(p)$, and after relaxation, $v_k.d = w(p) + w(c) < w(p)$, since $w(c) < 0$.\n\n\nInductive step:\n Consider the relaxation of edge $(v_{j - 1}, v_j)$. Since $c$ is a simple cycle, the last time $v_j.d$ was updated was by a relaxation of this same edge. By the inductive hypothesis, $v_{j - 1}.d$ has just been reduced. Thus, $v_{j - 1}.d + w(v_{j - 1}, v_j) < v_j.d$, and so the relaxation will reduce the value of $v_j.d$.",
            "title": "24.5 Proofs of shortest-paths properties"
        },
        {
            "location": "/Chap24/24.5/#245-1",
            "text": "Give two shortest-paths trees for the directed graph of Figure 24.2 (on page 648) other than the two shown.   Since the induced shortest path trees on $\\{s, t, y\\}$ and on $\\{t, x, y, z\\}$ are independent and have to possible configurations each, there are four total arising from that. So, we have the two not shown in the figure are the one consisting of the edges $\\{(s, t), (s, y), (y, x), (x, z)\\}$ and the one consisting of the edges $\\{(s, t), (t, y), (t, x), (y, z)\\}$.",
            "title": "24.5-1"
        },
        {
            "location": "/Chap24/24.5/#245-2",
            "text": "Give an example of a weighted, directed graph $G = (V, E)$ with weight function $w: E \\rightarrow \\mathbb R$ and source vertex $s$ such that $G$ satisfies the following property: For every edge $(u, v) \\in E$, there is a shortest-paths tree rooted at $s$ that contains $(u, v)$ and another shortest-paths tree rooted at $s$ that does not contain $(u, v)$.   Let $G$ have $3$ vertices $s$, $x$, and $y$. Let the edges be $(s, x)$, $(s, y)$, and $(x, y)$ with weights $1$, $1$, and $0$ respectively. There are $3$ possible trees on these vertices rooted at $s$, and each is a shortest paths tree which gives $\\delta(s, x) = \\delta(s, y) = 1$.",
            "title": "24.5-2"
        },
        {
            "location": "/Chap24/24.5/#245-3",
            "text": "Embellish the proof of Lemma 24.10 to handle cases in which shortest-path weights are $\\infty$ or $-\\infty$.   To modify Lemma 24.10 to allow for possible shortest path weights of $\\infty$ and $-\\infty$, we need to define our addition as $\\infty + c = \\infty$, and $-\\infty + c = -\\infty$. This will make the statement behave correctly, that is, we can take the shortest path from $s$ to $u$ and tack on the edge $(u, v)$ to the end. That is, if there is a negative weight cycle on your way to $u$ and there is an edge from $u$ to $v$, there is a negative weight cycle on our way to $v$. Similarly, if we cannot reach $v$ and there is an edge from $u$ to $v$, we cannot reach $u$.",
            "title": "24.5-3"
        },
        {
            "location": "/Chap24/24.5/#245-4",
            "text": "Let $G = (V, E)$ be a weighted, directed graph with source vertex $s$, and let $G$ be initialized by $\\text{INITIALIZE-SINGLE-SOURCE}(G, s)$. Prove that if a sequence of relaxation steps sets $s.\\pi$ to a non-$\\text{NIL}$ value, then $G$ contains a negative-weight cycle.   Whenever $\\text{RELAX}$ sets $\\pi$ for some vertex, it also reduces the vertex's $d$ value. Thus if $s.\\pi$ gets set to a non-$\\text{NIL}$ value, $s.d$ is reduced from its initial value of $0$ to a negative number. But $s.d$ is the weight of some path from $s$ to $s$, which is a cycle including $s$. Thus, there is a negative-weight cycle.",
            "title": "24.5-4"
        },
        {
            "location": "/Chap24/24.5/#245-5",
            "text": "Let $G = (V, E)$ be a weighted, directed graph with no negative-weight edges. Let $s \\in V$ be the source vertex, and suppose that we allow $v.\\pi$ to be the predecessor of $v$ on any shortest path to $v$ from source $s$ if $v \\in V - \\{s\\}$ is reachable from $s$, and $\\text{NIL}$ otherwise. Give an example of such a graph $G$ and an assignment of $\\pi$ values that produces a cycle in $G_\\pi$. (By Lemma 24.16, such an assignment cannot be produced by a sequence of relaxation steps.)   Suppose that we have a grap hon three vertices $\\{s, u, v\\}$ and containing edges $(s, u), (s, v), (u, v), (v, u)$ all with weight $0$. Then, there is a shortest path from $s$ to $v$ of $s$, $u$, $v$ and a shortest path from $s$ to $u$ of $s$ $v$, $u$. Based off of these, we could set $v.\\pi = u$ and $u.\\pi = v$. This then means that there is a cycle consisting of $u, v$ in $G_\\pi$.",
            "title": "24.5-5"
        },
        {
            "location": "/Chap24/24.5/#245-6",
            "text": "Let $G = (V, E)$ be a weighted, directed graph with weight function $w: E \\rightarrow \\mathbb R$ and no negative-weight cycles. Let $s \\in V$ be the source vertex, and let $G$ be initialized by $\\text{INITIALIZE-SINGLE-SOURCE}(G, s)$. Prove that for every vertex $v \\in V_\\pi$, there exists a path from $s$ to $v$ in $G_\\pi$ and that this property is maintained as an invariant over any sequence of relaxations.   We will prove this by induction on the number of relaxations performed. For the base-case, we have just called $\\text{INITIALIZE-SINGLE-SOURCE}(G, s)$. The only vertex in $V_\\pi$ is $s$, and there is trivially a path from $s$ to itself. Now suppose that after any sequence of $n$ relaxations, for every vertex $v \\in V_\\pi$ there exists a path from $s$ to $v$ in $G_\\pi$. Consider the $(n + 1)$th relaxation. Suppose it is such that $v.d > u.d + w(u, v)$. When we relax $v$, we update $v.\\pi = u.\\pi$. By the induction hypothesis, there was a path from $s$ to $u$ in $G_\\pi$. Now $v$ is in $V_\\pi$, and the path from $s$ to $u$, followed by the edge $(u,v) = (v.\\pi, v)$ is a path from s to $v$ in $G_\\pi$, so the claim holds.",
            "title": "24.5-6"
        },
        {
            "location": "/Chap24/24.5/#245-7",
            "text": "Let $G = (V, E)$ be a weighted, directed graph that contains no negative-weight cycles. Let $s \\in V$ be the source vertex, and let $G$ be initialized by $\\text{INITIALIZE-SINGLE-SOURCE}(G, s)$. Prove that there exists a sequence of $|V| - 1$ relaxation steps that produces $v.d = \\delta(s, v)$ for all $v \\in V$.   Suppose we have a shortest-paths tree $G_\\pi$. Relax edges in $G_\\pi$ according to the order in which a BFS would visit them. Then we are guaranteed that the edges along each shortest path are relaxed in order. By the path-relaxation property, we would then have $v.d = \\delta(s, v)$ for all $v \\in V$. Since $G_\\pi$ contains at most $|V| - 1$ edges, we need to relax only $|V| - 1$ edges to get $v.d = \\delta(s, v)$ for all $v \\in V$.",
            "title": "24.5-7"
        },
        {
            "location": "/Chap24/24.5/#245-8",
            "text": "Let $G$ be an arbitrary weighted, directed graph with a negative-weight cycle reachable from the source vertex $s$. Show how to construct an infinite sequence of relaxations of the edges of $G$ such that every relaxation causes a shortest-path estimate to change.   Suppose that there is a negative-weight cycle $c = \\langle v_0, v_1, \\ldots, v_k \\rangle$, where $v_0 = v_k$, that is reachable from the source vertex $s$; thus, $w(c) < 0$. Without loss of generality, $c$ is simple. There must be an acyclic path from $s$ to some vertex of $c$ that uses no other vertices in $c$. Without loss of generality let this vertex of $c$ be $v_0$, and let this path from $s$ to $v_0$ be $p = \\langle u_0, u_1, \\ldots, u_l \\rangle$, where $u_0 = s$ and $u_l = v_0 = v_k$. (It may be the case that $u_l = s$, in which case path $p$ has no edges.)   After the call to $\\text{INITIALIZE-SINGLE-SOURCE}$ sets $v.d = \\infty$ for all $v \\in V - \\{s\\}$, perform the following sequence of relaxations. First, relax every edge in path $p$, in order. Then relax every edge in cycle $c$, in order, and repeatedly relax the cycle. That is, we relax the edges $(u_0, u_1)$, $(u_1, u_2)$, $\\ldots$, $(u_{l - 1}, v_0)$, $(v_0, v_1)$, $(v_1, v_2)$, $\\ldots$, $(v_{k - 1}, v_0)$, $(v_0, v_1)$, $(v_1, v_2)$, $\\ldots$, $(v_{k - 1}, v_0)$, $(v_0, v_1)$, $(v_1, v_2)$, $\\ldots$, $(v_{k - 1}, v_0)$, $\\ldots$  We claim that every edge relaxation in this sequence reduces a shortest-path estimate. Clearly, the first time we relax an edge $(u_{i - 1}, u_i)$ or $(v_{j - 1}, v_j)$, for $i = 1, 2, \\ldots, l$ and $j = 1, 2, \\ldots, k - 1$ (note that we have not yet relaxed the last edge of cycle $c$), we reduce $u_i.d$ or $v_j.d$ from $\\infty$ to a finite value. Now consider the relaxation of any edge $(v_{j - 1}, v_j)$ after this opening sequence of relaxations. We use induction on the number of edge relaxations to show that this relaxation reduces $v_j.d$.  Basis:  The next edge relaxed after the opening sequence is $(v_{k - 1}, v_k)$. Before relaxation, $v_k.d = w(p)$, and after relaxation, $v_k.d = w(p) + w(c) < w(p)$, since $w(c) < 0$.  Inductive step:  Consider the relaxation of edge $(v_{j - 1}, v_j)$. Since $c$ is a simple cycle, the last time $v_j.d$ was updated was by a relaxation of this same edge. By the inductive hypothesis, $v_{j - 1}.d$ has just been reduced. Thus, $v_{j - 1}.d + w(v_{j - 1}, v_j) < v_j.d$, and so the relaxation will reduce the value of $v_j.d$.",
            "title": "24.5-8"
        },
        {
            "location": "/Chap24/Problems/24-1/",
            "text": "Suppose that we order the edge relaxations in each pass of the Bellman-Ford algorithm as follows. Before the first pass, we assign an arbitrary linear order $v_1, v_2, \\ldots, v_{|V|}$ to the vertices of the input graph $G = (V, E)$. Then, we partition the edge set $E$ into $E_f \\cup E_b$, where $E_f = {(v_i, v_j) \\in E: i < j}$ and $E_b = \\{(v_i, v_j) \\in E: i > j\\}$. (Assume that $G$ contains no self-loops, so that every edge is in either $E_f$ or $E_b$.) Define $G_f = (V, E_f)$ and $G_b = (V, E_b)$.\n\n\na.\n Prove that $G_f$ is acyclic with topological sort $\\langle v_1, v_2, \\ldots, v_{|V|} \\rangle$ and that $G_b$ is acyclic with topological sort $\\langle v_{|V|}, v_{|V| - 1}, \\ldots, v_1 \\rangle$.\n\n\nSuppose that we implement each pass of the Bellman-Ford algorithm in the following way. We visit each vertex in the order $v_1, v_2, \\ldots, v_{|V|}$, relaxing edges of $E_f$ that leave the vertex. We then visit each vertex in the order $v_{|V|}, v_{|V| - 1}, \\ldots, v_1$, relaxing edges of $E_b$ that leave the vertex.\n\n\nb.\n Prove that with this scheme, if $G$ contains no negative-weight cycles that are reachable from the source vertex $s$, then after only $\\lceil |V| / 2 \\rceil$ passes over the edges, $v.d = \\delta(s, v)$ for all vertices $v \\in V$.\n\n\nc.\n Does this scheme improve the asymptotic running time of the Bellman-Ford algorithm?\n\n\n\n\na.\n Assume for the purpose contradiction that $G_f$ is not acyclic; thus $G_f$ has a cycle. A cycle must have at least one edge $(u, v)$ in which $u$ has higher index than $v$. This edge is not in $E_f$ (by the definition of $E_f$), in contradition to the assumption that $G_f$ has a cycle. Thus $G_f$ is acyclic.\n\n\nThe sequence $\\langle v_1, v_2, \\ldots, v_{|V|} \\rangle$ is a topological sort for $G_f$, because from the definition of $E_f$ we know that all edges are directed from smaller indices to larger indices.\n\n\nThe proof for $E_b$ is similar.\n\n\nb.\n For all vertices $v \\in V$, we know that either $\\delta(s, v) = \\infty$ or $\\delta(s, v)$ is finite. If $\\delta(s, v) = \\infty$, then $v.d$ will be $\\infty$. Thus, we need to consider only the case where $v.d$ is finite. There must be some shortest path from $s$ to $v$. Let $p = \\langle v_0, v_1, \\ldots, v_{k - 1}, v_k \\rangle$ be that path, where $v_0 = s$ and $v_k = v$. Let us now consider how many times there is a change in direction in $p$, that is, a situation in which $(v_{i - 1}, v_i) \\in E_f$ and $(v_i, v_{i + 1} \\in E_b$ or vice versa. There can be at most $|V| - 1$ edges in $p$, so there can be at most $|V| - 2$ changes in direction. Any portion of the path where there is no change in direction is computed with the correct $d$ values in the first or second half of a single pass once the vertex that begins the no-change-in-direction sequence has the correct $d$ value, because the edges are relaxed in the order of the direction of the sequence. Each change in direction requires a half pass in the new direction of the path. The following table shows the maximum number of passes needed depending on the parity of $|V| - 1$ and the direction of the first edge:\n\n\n\\begin{array}{lll}\n|V| - 1 & \\text{first edge direction} & \\text{passes} \\\\\n\\hline\n\\text{even} & \\text{forward}  & (|V| - 1) / 2       \\\\\n\\text{even} & \\text{backward} & (|V| - 1) / 2 + 1   \\\\\n\\text{odd}  & \\text{forward}  & |V| / 2             \\\\\n\\text{odd}  & \\text{backward} & |V| / 2\n\\end{array}\n\n\nIn any case, the maximum number of passes that we will need is $\\lceil |V| / 2 \\rceil$.\n\n\nc.\n This scheme does not affect the asymptotic running time of the algorithm because even though we perform only $\\lceil |V| / 2 \\rceil$ passes instead of $|V| - 1$ passes, it is still $O(V)$ passes. Each pass still takes $\\Theta(E)$ time, so the running time remains $O(VE)$.",
            "title": "24-1 Yen's improvement to Bellman-Ford"
        },
        {
            "location": "/Chap24/Problems/24-2/",
            "text": "A $d$-dimensional box with dimensions $(x_1, x_2, \\ldots, x_d)$ \nnests\n within another box with dimensions $(y_1, y_2, \\ldots, y_d)$ if there exists a permutation $\\pi$ on $\\{1, 2, \\ldots, d\\}$ such that $x_{\\pi(1)} < y_1$, $x_{\\pi(2)} < y_2$, $\\ldots$, $x_{\\pi(d)} < y_d$.\n\n\na.\n Argue that the nesting relation is transitive.\n\n\nb.\n Describe an efficient method to determine whether or not one $d$-dimensional box nests inside another.\n\n\nc.\n Suppose that you are given a set of $n$ $d$-dimensional boxes $\\{B_1, B_2, \\ldots, B_n\\}$. Give an efficient algorithm to find the longest sequence $\\langle B_{i_1}, B_{i_2}, \\ldots, B_{i_k} \\rangle$ of boxes such that $B_{i_j}$ nests within $B_{i_{j + 1}}$ for $j = 1, 2, \\ldots, k - 1$. Express the running time of your algorithm in terms of $n$ and $d$.\n\n\n\n\na.\n Consider boxes with dimensions $x = (x_1, \\ldots, x_d)$, $y = (y_1, \\ldots, y_d)$, and $z = (z_1, \\ldots, z_d)$. Suppose there exists a permutation $\\pi$ such that $x_{\\pi(i)} < y_i$ for $i = 1, \\ldots, d$ and there exists a permutation $\\pi'$ such that $y_{\\pi'(i)} < z_i$ for $i = 1, \\ldots, d$, so that $x$ nests inside $y$ and $y$ nests inside $z$. Construct a permutation $\\pi''$, where $\\pi''(i) = \\pi'(\\pi(i))$. Then for $i = 1, \\ldots, d$, we have $x_{\\pi''(i)} = x_{\\pi'(\\pi(i))} < y_{\\pi'(i)} < z_i$, and so $x$ nests inside $z$.\n\n\nb.\n Sort the dimensions of each box from longest to shortest. A box $X$ with sorted dimensions $(x_1, x_2, \\ldots, x_d)$ nests inside a box $Y$ with sorted dimensions $(y_1, y_2, \\ldots, y_d)$ if and only if $x_i < y_i$ for $i = 1, 2, \\ldots, d$. The sorting can be done in $O(d\\lg d)$ time, and the test for nesting can be done in $O(d)$ time, and so the algorithm runs in $O(d\\lg d)$ time. This algorithm works because a $d$-dimensional box can be oriented so that every permutation of its dimensions is possible. (Experiment with a $3$-dimensional box if you are unsure of this).\n\n\nc.\n Construct a dag $G = (V, E)$, where each vertex $v_i$ corresponds to box $B_i$, and $(v_i, v_j) \\in E$ if and only if box $B_i$ nests inside box $B_j$. Graph $G$ is indeed a dag, because nesting is transitive and antireflexive (i.e., no box nests inside itself). The time to construct the dag is $O(dn^2 + dn\\lg d)$, from comparing each of the $\\binom{n}{2}$ pairs of boxes after sorting the dimensions of each.\n\n\nAdd a supersource vertex $s$ and a supersink vertex $t$ to $G$, and add edges $(s, v_i)$ for all vertices $v_i$ with $in\\text-degree$ $0$ and $(v_j, t)$ for all vertices $v_j$ with outdegree $0$. Call the resulting dag $G'$. The time to do so is $O(n)$.\n\n\nFind a longest path from $s$ to $t$ in $G'$. (Section 24.2 discusses how to find a longest path in a dag.) This path corresponds to a longest sequence of nesting boxes. The time to find a longest path is $O(n^2)$, since $G'$ has $n + 2$ vertices and $O(n^2)$ edges.\n\n\nOverall, this algorithm runs in $O(dn^2 + dn\\lg d)$ time.",
            "title": "24-2 Nesting boxes"
        },
        {
            "location": "/Chap24/Problems/24-3/",
            "text": "Arbitrage\n is the use of discrepancies in currency exchange rates to transform one unit of a currency into more than one unit of the same currency. For example, suppose that $1$ U.S. dollar buys $49$ Indian rupees, $1$ Indian rupee buys $2$ Japanese yen, and $1$ Japanese yen buys $0.0107$ U.S. dollars. Then, by converting currencies, a trader can start with $1$ U.S. dollar and buy $49 \\times 2 \\times 0.0107 = 1.0486$ U.S. dollars, thus turning a profit of $4.86$ percent.\n\n\nSuppose that we are given $n$ currencies $c_1, c_2, \\ldots, c_n$ and an $n \\times n$ table $R$ of exchange rates, such that one unit of currency $c_i$ buys $R[i, j]$ units of currency $c_j$.\n\n\na.\n Give an efficient algorithm to determine whether or not there exists a sequence of currencies $\\langle c_{i_1}, c_{i_2}, \\ldots, c_{i_k} \\rangle$ such that\n\n\n$$R[i_1, i_2] \\cdot R[i_2, i_3] \\ldots R[i_{k - 1}, i_k] \\cdot R[i_k, i_1] > 1.$$\n\n\nAnalyze the running time of your algorithm.\n\n\nb.\n Give an efficient algorithm to print out such a sequence if one exists. Analyze the running time of your algorithm.\n\n\n\n\na.\n We can use the Bellman-Ford algorithm on a suitable weighted, directed graph $G = (V, E)$, which we form as follows. There is one vertex in $V$ for each currency, and for each pair of currencies $c_i$ and $c_j$, there are directed edges $(v_i, v_j)$ and $(v_j , v_i)$. (Thus, $|V| = n$ and $|E| = n(n - 1)$.)\n\n\nWe are looking for a cycle $\\langle i_1, i_2, i_3, \\ldots, i_k, i_1 \\rangle$ such that\n\n\n$$R[i_1, i_2] \\cdot R[i_2, i_3] \\ldots R[i_{k - 1}, i_k] \\cdot R[i_k, i_1] > 1.$$\n\n\nTaking logarithms of both sides of this inequality gives\n\n\n$$\\lg R[i_1, i_2] + \\lg R[i_2, i_3] + \\cdots + \\lg R[i_{k - 1}, i_k] + \\lg R[i_k, i_1] > 0.$$\n\n\nIf we negate both sides, we get\n\n\n$$(-\\lg R[i_1, i_2]) + (-\\lg R[i_2, i_3]) + \\cdots + (-\\lg R[i_{k - 1}, i_k]) + (-\\lg R[i_k, i_1]) < 0,$$\n\n\nand so we want to determine whether $G$ contains a negative-weight cycle with these edge weights.\n\n\nWe can determine whether there exists a negative-weight cycle in $G$ by adding an extra vertex $v_0$ with $0$-weight edges $(v_0, v_i)$ for all $v_i \\in V$, running $\\text{BELLMAN-FORD}$ from $v_0$, and using the boolean result of $\\text{BELLMAN-FORD}$ (which is $\\text{TRUE}$ if there are no negative-weight cycles and $\\text{FALSE}$ if there is a negative-weight cycle) to guide our answer. That is, we invert the boolean result of $\\text{BELLMAN-FORD}$.\n\n\nThis method works because adding the new vertex $v_0$ with $0$-weight edges from $v_0$ to all other vertices cannot introduce any new cycles, yet it ensures that all negative-weight cycles are reachable from $v_0$ .\n\n\nIt takes $\\Theta(n^2)$ time to create $G$, which has $\\Theta(n^2)$ edges. Then it takes $O(n^3)$ time to run $\\text{BELLMAN-FORD}$. Thus, the total time is $O(n^3)$.\n\n\nAnother way to determine whether a negative-weight cycle exists is to create $G$ and, without adding $v_0$ and its incident edges, run either of the all-pairs shortestpaths algorithms. If the resulting shortest-path distance matrix has any negative values on the diagonal, then there is a negative-weight cycle.\n\n\nb.\n Note: The solution to this part also serves as a solution to Exercise 24.1-6.\n\n\nAssuming that we ran $\\text{BELLMAN-FORD}$ to solve part (a), we only need to find the vertices of a negative-weight cycle. We can do so as follows. Go through the edges once again. Once we find an edge $(u, v)$ for which $u.d + w(u, v) < v.d$, then we know that either vertex $v$ is on a negative-weight cycle or is reachable from one. We can find a vertex on the negative-weight cycle by tracing back the $v$ values from $v$, keeping track of which vertices we've visited until we reach a vertex $x$ that we've visited before. Then we can trace back $v$ values from $x$ until we get back to $x$, and all vertices in between, along with $x$, will constitute a negative-weight cycle. We can use the recursive method given by the $\\text{PRINTPATH}$ procedure of Section 22.2, but stop it when it returns to vertex $x$.\n\n\nThe running time is $O(n^3)$ to run $\\text{BELLMAN-FORD}$, plus $O(m)$ to check all the edges and $O(n)$ to print the vertices of the cycle, for a total of $O(n^3)$ time.",
            "title": "24-3 Arbitrage"
        },
        {
            "location": "/Chap24/Problems/24-4/",
            "text": "A \nscaling\n algorithm solves a problem by initially considering only the highestorder bit of each relevant input value (such as an edge weight). It then refines the initial solution by looking at the two highest-order bits. It progressively looks at more and more high-order bits, refining the solution each time, until it has examined all bits and computed the correct solution.\n\n\nIn this problem, we examine an algorithm for computing the shortest paths from a single source by scaling edge weights. We are given a directed graph $G = (V, E)$ with nonnegative integer edge weights $w$. Let $W = \\max_{(u, v) \\in E} \\{w(u, v)\\}$. Our goal is to develop an algorithm that runs in $O(E\\lg W)$ time. We assume that all vertices are reachable from the source.\n\n\nThe algorithm uncovers the bits in the binary representation of the edge weights one at a time, from the most significant bit to the least significant bit. Specifically, let $k = \\lceil \\lg(W + 1) \\rceil$ be the number of bits in the binary representation of $W$, and for $i = 1, 2, \\ldots, k$, let $w_i(u, v) = \\lfloor w(u, v) / 2^{k - i} \\rfloor$. That is, $w_i(u, v)$ is the ''scaled-down'' version of $w(u, v)$ given by the $i$ most significant bits of $w(u, v)$. (Thus, $w_k(u, v) = w(u, v)$ for all $(u, v) \\in E$.) For example, if $k = 5$ and $w(u, v) = 25$, which has the binary representation $\\langle 11001 \\rangle$, then $w_3(u, v) = \\langle 110 \\rangle = 6$. As another example with $k = 5$, if $w(u, v) = \\langle 00100 \\rangle = 4$, then $w_3(u, v) = \\langle 001 \\rangle = 1$. Let us define $\\delta_i(u, v)$ as the shortest-path weight from vertex $u$ to vertex $v$ using weight function $w_i$. Thus, $\\delta_k(u, v) = \\delta(u, v)$ for all $u, v \\in V$. For a given source vertex $s$, the scaling algorithm first computes the shortest-path weights $\\delta_1(s, v)$ for all $v \\in V$, then computes $\\delta_2(s, v)$ for all $v \\in V$, and so on, until it computes $\\delta_k(s, v)$ for all $v \\in V$. We assume throughout that $|E| \\ge |V| - 1$, and we shall see that computing $\\delta_i$ from $\\delta_{i - 1}$ takes $O(E)$ time, so that the entire algorithm takes $O(kE) = O(E\\lg W)$ time.\n\n\na.\n Suppose that for all vertices $v \\in V$, we have $\\delta(s, v) \\le |E|$. Show that we can compute $\\delta(s, v)$ for all $v \\in V$ in $O(E)$ time.\n\n\nb.\n Show that we can compute $\\delta_1(s, v)$ for all $v \\in V$ in $O(E)$ time. \n\n\nLet us now focus on computing $\\delta_i$ from $\\delta_{i - 1}$.\n\n\nc.\n Prove that for $i = 2, 3, \\ldots, k$, we have either $w_i(u, v) = 2w_{i - 1}(u, v)$ or $w_i(u, v) = 2w_{i - 1}(u, v) + 1$. Then, prove that \n\n\n$$2\\delta_{i - 1}(s, v) \\le \\delta_i(s, v) \\le 2\\delta_{i - 1}(s, v) + |V| - 1$$\n\n\nfor all $v \\in V$.\n\n\nd.\n Define for $i = 2, 3, \\ldots, k$ and all $(u, v) \\in E$, \n\n\n$$\\hat w_i = w_i(u, v) + 2\\delta_{i - 1}(s, u) - 2\\delta_{i - 1}(s, v).$$\n\n\nProve that for $i = 2, 3, \\ldots, k$ and all $u, v \\in V$, the ''reweighted'' value $\\hat w_i(u, v)$ of edge $(u, v)$ is a nonnegative integer.\n\n\ne.\n Now, define $\\delta_i(s, v)$ as the shortest-path weight from $s$ to $v$ using the weight function $\\hat w_i$. Prove that for $i = 2, 3, \\ldots, k$ and all $v \\in V$, \n\n\n$$\\delta_i(s, v) = \\hat\\delta_i(s, v) + 2\\delta_{i - 1}(s, v)$$\n\n\nand that $\\hat\\delta_i(s, v) \\le |E|$.\n\n\nf.\n Show how to compute $\\delta_i(s, v)$ from $\\delta_{i - 1}(s, v)$ for all $v \\in V$ in $O(E)$ time, and conclude that we can compute $\\delta(s, v)$ for all $v \\in V$ in $O(E\\lg W)$ time.\n\n\n\n\na.\n Since all weights are nonnegative, use Dijkstra's algorithm. Implement the priority queue as an array $Q[0..|E| + 1]$, where $Q[i]$ is a list of vertices $v$ for which $v.d = i$. Initialize $v.d$ for $v \\ne s$ to $|E| + 1$ instead of to $\\infty$, so that all vertices have a place in $Q$. (Any initial $v.d > \\delta(s, v)$ works in the algorithm, since $v.d$ decreases until it reaches $\\delta(s, v)$.)\n\n\nThe $|V|$ $\\text{EXTRACT-MIN}$s can be done in $O(E)$ total time, and decreasing a $d$ value during relaxation can be done in $O(1)$ time, for a total running time of $O(E)$.\n\n\n\n\nWhen $v.d$ decreases, just add $v$ to the front of the list in $Q[v.d]$.\n\n\n$\\text{EXTRACT-MIN}$ removes the head of the list in the first nonempty slot of $Q$. To do $\\text{EXTRACT-MIN}$ without scanning all of $Q$, keep track of the smallest $i$ for which $Q[i]$ is not empty. The key point is that when $v.d$ decreases due to relaxation of edge $(u, v)$, $v.d$ remains $u.d$, so it never moves to an earlier slot of $Q$ than the one that had $u$, the previous minimum. Thus $\\text{EXTRACT-MIN}$ can always scan upward in the array, taking a total of $O(E)$ time for all $\\text{EXTRACT-MIN}$s.\n\n\n\n\nb.\n For all $(u, v) \\in E$, we have $w_1(u, v) \\in \\{0, 1\\}$, so $\\delta_1(s, v) \\le |V| - 1 \\le |E|$. Use part (a) to get the $O(E)$ time bound.\n\n\nc.\n To show that $w_i(u, v) = 2w_{i - 1}(u, v)$ or $w_i(u, v) = 2w_{i - 1}(u, v) + 1$, observe that the $i$ bits of $w_i(u, v)$ consist of the $i - 1$ bits of $w_{i - 1}(u, v)$ followed by one more bit. If that low-order bit is $0$, then $w_i(u, v) = 2w_{i - 1}(u, v)$; if it is $1$, then $w_i(u, v) = 2w_{i - 1}(u, v) + 1$.\n\n\nNotice the following two properties of shortest paths:\n\n\n\n\nIf all edge weights are multiplied by a factor of $c$, then all shortest-path weights are multiplied by $c$.\n\n\nIf all edge weights are increased by at most $c$, then all shortest-path weights are increased by at most $c(|V| - 1)$, since all shortest paths have at most $|V| - 1$ edges.\n\n\n\n\nThe lowest possible value for $w_i(u, v)$ is $2w_{i - 1}(u, v)$, so by the first observation, the lowest possible value for $\\delta_i(s, v)$ is $2\\delta_{i - 1}(s, v)$.\n\n\nThe highest possible value for $w_i(u, v)$ is $2w_{i - 1}(u, v) + 1$. Therefore, using the two observations together, the highest possible value for $\\delta_i(s, v)$ is $2\\delta_{i - 1}(s, v) + |V| - 1$\n\n\nd.\n We have \n\n\n\\begin{align}\n\\hat w_i(u, v)\n    & =   w_i(u, v) + 2\\delta_{i - 1}(s, u) - 2\\delta_{i - 1}(s, v) \\\\\n    & \\ge 2w_{i - 1}(u, v) + 2\\delta_{i - 1}(s, u) - 2\\delta_{i - 1}(s, v) \\\\\n    & \\ge 0.\n\\end{align}\n\n\nThe second line follows from part (c), and the third line follows from Lemma 24.10: $\\delta_{i - 1}(s, v) \\le \\delta_{i - 1}(s, u) + w_{i - 1}(u, v)$.\n\n\ne.\n Observe that if we compute $\\hat w_i(p)$ for any path $p:u \\leadsto v$, the terms $\\delta_{i - 1}(s, t)$ cancel for every intermediate vertex $t$ on the path. Thus,\n\n\n$$\\hat w_i(p) = w_i(p) + 2\\delta_{i - 1}(s, u) - 2\\delta_{i - 1}(s, v).$$\n\n\n(This relationship will be shown in detail in equation ($\\text{25.10}$) within the proof of Lemma 25.1.) The $\\delta_{i - 1}$ terms depend only on $u$, $v$, and $s$, but not on the path $p$; therefore the same paths will be of minimum $w_i$ weight and of minimum $\\hat w_i$ weight between $u$ and $v$. Letting $u = s$, we get \n\n\n\\begin{align}\n\\hat\\delta_i(s, v)\n    & = \\delta_i(s, v) + 2\\delta_{i - 1}(s, s) - 2\\delta_{i - 1}(s, v) \\\\\n    & = \\delta_i(s, v) - 2\\delta_{i - 1}(s, v).\n\\end{align}\n\n\nRewriting this result as $\\delta_i(s, v) = \\hat\\delta_i(s, v) + 2\\delta_{i - 1}(s, v)$ and combining it with $\\delta_i(s, v) \\le 2\\delta_{i - 1}(s, v) + |V| - 1$ (from part (c)) gives us $\\hat\\delta_i(s, v) \\le |V| - 1 \\le |E|$.\n\n\nf.\n To compute $\\delta_i(s, v)$ from $\\delta_{i - 1}(s, v)$ for all $v \\in V$ in $O(E)$ time:\n\n\n\n\nCompute the weights $\\hat w_i(u, v)$ in $O(E)$ time, as shown in part (d).\n\n\nBy part (e), $\\hat\\delta_i(s, v) \\le |E|$, so use part (a) to compute all $\\hat\\delta_i(s, v)$ in $O(E)$ time.\n\n\nCompute all $\\delta_i(s, v)$ from $\\hat\\delta_i(s, v)$ and $\\delta_{i - 1}(s, v)$ as shown in part (e), in $O(V)$ time.\n\n\n\n\nTo compute all $\\delta(s, v)$ in $O(E\\lg W)$ time:\n\n\n\n\nCompute $\\delta_1(s, v)$ for all $v \\in V$. As shown in part (b), this takes $O(E)$ time.\n\n\nFor each $i = 2, 3, \\ldots, k$, compute all $\\delta_i(s, v)$ from $\\delta_{i - 1}(s, v)$ in $O(E)$ time as shown above. This procedure computes $\\delta(s, v) = \\delta_k(u, v)$ in time $O(Ek) = O(E\\lg W)$.",
            "title": "24-4 Gabow's scaling algorithm for single-source shortest paths"
        },
        {
            "location": "/Chap24/Problems/24-5/",
            "text": "Let $G = (V, E)$ be a directed graph with weight function $w: E \\to \\mathbb R$, and let $n = |V|$. We define the \nmean weight\n of a cycle $c = \\langle e_1, e_2, \\ldots, e_k \\rangle$ of edges in $E$ to be\n\n\n$$\\mu(c) = \\frac{1}{k} \\sum_{i = 1}^k w(e_i).$$\n\n\nLet $\\mu^* = \\min_c \\mu(c)$, where $c$ ranges over all directed cycles in $G$. We call a cycle $c$ for which $\\mu(c) = \\mu^*$ a  \nminimum mean-weight cycle\n. This problem investigates an efficient algorithm for computing $\\mu^*$.\n\n\nAssume without loss of generality that every vertex $v \\in V$ is reachable from a source vertex $s \\in V$. Let $\\delta(s, v)$ be the weight of a shortest path from $s$ to $v$, and let $\\delta_k(s, v)$ be the weight of a shortest path from $s$ to $v$ consisting of \nexactly\n $k$ edges. If there is no path from $s$ to $v$ with exactly $k$ edges, then $\\delta_k(s, v) = \\infty$.\n\n\na.\n Show that if $\\mu^* = 0$, then $G$ contains no negative-weight cycles and $\\delta(s, v) = \\min_{0 \\le k \\le n - 1} \\delta_k(s, v)$ for all vertices $v \\in V$.\n\n\nb.\n Show that if $\\mu^* = 0$, then\n\n\n$$\\max_{0 \\le k \\le n - 1} \\frac{\\delta_n(s, v) - \\delta_k(s, v)}{n - k} \\ge 0$$\n\n\nfor all vertices $v \\in V$. ($\\textit{Hint:}$ Use both properties from part (a).)\n\n\nc.\n Let $c$ be a $0$-weight cycle, and let $u$ and $v$ be any two vertices on $c$. Suppose that $\\mu^* = 0$ and that the weight of the simple path from $u$ to $v$ along the cycle is $x$. Prove that $\\delta(s, v) = \\delta(s, u) + x$. ($\\textit{Hint:}$ The weight of the simple path from $v$ to $u$ along the cycle is $-x$.)\n\n\nd.\n Show that if $\\mu^* = 0$, then on each minimum mean-weight cycle there exists a vertex $v$ such that\n\n\n$$\\max_{0 \\le k \\le n - 1} \\frac{\\delta_n(s, v) - \\delta_k(s, v)}{n - k} = 0.$$\n\n\n($\\textit{Hint:}$ Show how to extend a shortest path to any vertex on a minimum meanweight cycle along the cycle to make a shortest path to the next vertex on the cycle.)\n\n\ne.\n Show that if $\\mu^* = 0$, then\n\n\n$$\\min_{v \\in V} \\max_{0 \\le k \\le n - 1} \\frac{\\delta_n(s, v) - \\delta_k(s, v)}{n - k} = 0.$$\n\n\nf.\n Show that if we add a constant $t$ to the weight of each edge of $G$, then $\\mu^*$ increases by $t$. Use this fact to show that\n\n\n$$\\mu^* = \\min_{v \\in V} \\max_{0 \\le k \\le n - 1} \\frac{\\delta_n(s, v) - \\delta_k(s, v)}{n - k}.$$\n\n\ng.\n Give an $O(VE)$-time algorithm to compute $\\mu^*$.\n\n\n\n\na.\n If $\\mu^* = 0$, then we have that the lowest that $\\frac{1}{k}\n{i = 1}^k w(e_i)$ can be zero. This means that the lowest $\\sum\n{i = 1}^k w(e_i)$ can be $0$. This means that no cycle can have negative weight. Also, we know that for any path from $s$ to $v$, we can make it simple by removing any cycles that occur. This means that it had a weight equal to some path that has at most $n - 1$ edges in it. Since we take the minimum over all possible number of edges, we have the minimum over all paths.\n\n\nb.\n To show that\n\n\n$$\\max_{0 \\le k \\le n - 1} \\frac{\\delta_n(s, v) - \\delta_k(s, v)}{n - k} \\ge 0,$$\n\n\nwe need to show that\n\n\n$$\\max_{0 \\le k \\le n - 1} \\delta_n(s, v) - \\delta_k(s, v) \\ge 0.$$\n\n\nSince we have that $\\mu^* = 0$, there aren't any negative weight cycles. This means that we can't have the minimum cost of a path decrease as we increase the possible length of the path past $n - 1$. This means that there will be a path that at least ties for cheapest when we restrict to the path being less than length $n$. Note that there may also be cheapest path of longer length since we necessarily do have zero cost cycles. However, this isn't guaranteed since the zero cost cycle may not lie along a cheapest path from $s$ to $v$.\n\n\nc.\n Since the total cost of the cycle is $0$, and one part of it has cost $x$, in order to balance that out, the weight of the rest of the cycle has to be $-x$. So, suppose we have some shortest length path from $s$ to $u$, then, we could traverse the path from $u$ to $v$ along the cycle to get a path from $s$ to $u$ that has length $\\delta(s, u) + x$. This gets us that $\\delta(s, v) \\le \\delta(s, u) + x$. \n\n\nTo see the converse inequality, suppose that we have some shortest length path from $s$ to $v$. Then, we can traverse the cycle going from $v$ to $u$. We already said that this part of the cycle had total cost $-x$. This gets us that $\\delta(s, u) \\le \\delta(s, v) - x$. Or, rearranging, we have $\\delta(s, u) + x \\le \\delta(s, v)$. Since we have inequalities both ways, we must have equality.\n\n\nd.\n To see this, we find a vertex $v$ and natural number $k \\le n - 1$ so that $\\delta_n(s, v) - \\delta_k(s, v) = 0$. To do this, we will first take any shortest length, smallest number of edges path from $s$ to any vertex on the cycle. Then, we will just keep on walking around the cycle until we've walked along $n$ edges. Whatever vertex we end up on at that point will be our $v$. Since we did not change the $d$ value of $v$ after looking at length $n$ paths, by part (a), we know that there was some length of this path, say $k$, which had the same cost. That is, we have $\\delta_n(s, v) = \\delta_k(s,v)$.\n\n\ne.\n This is an immediate result of the previous problem and part (b). Part (a) says that the inequality holds for all $v$, so, we have\n\n\n$$\\min_{v \\in V} \\max_{0 \\le k \\le n - 1} \\frac{\\delta_n(s, v) - \\delta(s, v)}{n - k} \\ge 0.$$\n\n\nThe previous part says that there is some $v$ on each minimum weight cycle so that\n\n\n$$\\max_{0 \\le k \\le n - 1} \\frac{\\delta_n(s, v) - \\delta(s, v)}{n - k} = 0,$$\n\n\nwhich means that\n\n\n$$\\min_{v \\in V} \\max_{0 \\le k \\le n - 1} \\frac{\\delta_n(s, v) - \\delta_k(s, v)}{n - k} \\le 0.$$\n\n\nPutting the two inequalities together, we have the desired equality.\n\n\nf.\n If we add $t$ to the weight of each edge, the mean weight of any cycle becomes\n\n\n$$\\mu(c) = \\frac{1}{k} \\sum_{i = 1}^k (w(e_i) + t) = \\frac{1}{k} \\Big(\\sum_i^k w(e_i) \\Big) + \\frac{kt}{k} = \\frac{1}{k} \\Big(\\sum_i^k w(e_i) \\Big) + t.$$\n\n\nThis is the original, unmodified mean weight cycle, plus $t$. Since this is how the mean weight of every cycle is changed, the lowest mean weight cycle stays the lowest mean weight cycle. This means that $\\mu^*$ will increase by $t$. Suppose that we first compute $\\mu^*$. Then, we subtract from every edge weight the value $\\mu^*$. This will make the new $\\mu^*$ equal zero, which by part (e) means that\n\n\n$$\\min_{v \\in V} \\max_{0 \\le k \\le n - 1} \\frac{\\delta_n(s, v) - \\delta_k(s, v)}{n - k} = 0.$$\n\n\nSince they are both equal to zero, they are both equal to each other.\n\n\ng.\n By the previous part, it suffices to compute the expression on the previ- ous line. We will start by creating a table that lists $\\delta_k(s, v)$ for every $k \\in {1, \\ldots, n}$ and $v \\in V$. This can be done in time $O(V(E + V))$ by creating a $|V|$ by $|V|$ table, where the $k$th row and vth column represent $\\delta)k(s, v)$ when wanting to compute a particular entry, we need look at a number of entries in the previous row equal to the in degree of the vertex we want to compute. \n\n\nSo, summing over the computation required for each row, we need $O(E + V)$. Note that this total runtime can be bumped down to $O(VE)$ by not including in the table any isolated vertices, this will ensure that $E \\in \\Omega(V)$. So, $O(V(E + V))$ becomes $O(VE)$. Once we have this table of values computed, it is simple to just replace each row with the last row minus what it was, and divide each entry by $n - k$, then, find the min column in each row, and take the max of those numbers.",
            "title": "24-5 Karp's minimum mean-weight cycle algorithm"
        },
        {
            "location": "/Chap24/Problems/24-6/",
            "text": "A sequence is \nbitonic\n if it monotonically increases and then monotonically decreases, or if by a circular shift it monotonically increases and then monotonically decreases. For example the sequences $\\langle 1, 4, 6, 8, 3, -2 \\rangle$, $\\langle 9, 2, -4, -10, -5 \\rangle$, and $\\langle 1, 2, 3, 4 \\rangle$ are bitonic, but $\\langle 1, 3, 12, 4, 2, 10 \\rangle$ is not bitonic. (See Problem 15-3 for the bitonic euclidean traveling-salesman problem.)\n\n\nSuppose that we are given a directed graph $G = (V, E)$ with weight function $w: E \\to \\mathbb R$, where all edge weights are unique, and we wish to find single-source shortest paths from a source vertex $s$. We are given one additional piece of information: for each vertex $v \\in V$, the weights of the edges along any shortest path from $s$ to $v$ form a bitonic sequence.\n\n\nGive the most efficient algorithm you can to solve this problem, and analyze its running time.\n\n\n\n\nObserve that a bitonic sequence can increase, then decrease, then increase, or it can decrease, then increase, then decrease. That is, there can be at most two changes of direction in a bitonic sequence. Any sequence that increases, then decreases, then increases, then decreases has a bitonic sequence as a subsequence.\n\n\nNow, let us suppose that we had an even stronger condition than the bitonic property given in the problem: for each vertex $v \\in V$, the weights of the edges along any shortest path from $s$ to $v$ are increasing. Then we could call $\\text{INITIALIZE-SINGLE-SOURCE}$ and then just relax all edges one time, going in increasing order of weight. Then the edges along every shortest path would be relaxed in order of their appearance on the path. (We rely on the uniqueness of edge weights to ensure that the ordering is correct.) The path-relaxation property (Lemma 24.15) would guarantee that we would have computed correct shortest paths from $s$ to each vertex.\n\n\nIf we weaken the condition so that the weights of the edges along any shortest path increase and then decrease, we could relax all edges one time, in increasing order of weight, and then one more time, in decreasing order of weight. That order, along with uniqueness of edge weights, would ensure that we had relaxed the edges of every shortest path in order, and again the path-relaxation property would guarantee that we would have computed correct shortest paths.\n\n\nTo make sure that we handle all bitonic sequences, we do as suggested above. That is, we perform four passes, relaxing each edge once in each pass. The first and third passes relax edges in increasing order of weight, and the second and fourth passes in decreasing order. Again, by the path-relaxation property and the uniqueness of edge weights, we have computed correct shortest paths.\n\n\nThe total time is $O(V + E\\lg V)$, as follows. The time to sort $|E|$ edges by weight is $O(E\\lg E) = O(E\\lg V)$ (since $|E| = O(V^2)$). $\\text{INITIALIZE-SINGLE-SOURCE}$ takes $O(V)$ time. Each of the four passes takes $O(E)$ time. Thus, the total time is $O(E\\lg V + V + E) = O(V + E\\lg V)$.",
            "title": "24-6 Bitonic shortest paths"
        },
        {
            "location": "/Chap25/25.1/",
            "text": "25.1-1\n\n\n\n\nRun $\\text{SLOW-ALL-PAIRS-SHORTEST-PATHS}$ on the weighted, directed graph of Figure 25.2, showing the matrices that result for each iteration of the loop. Then do the same for $\\text{FASTER-ALL-PAIRS-SHORTEST-PATHS}$.\n\n\n\n\n\n\n\n\nInitial:\n\n\n\\begin{pmatrix}\n     0 & \\infty & \\infty & \\infty &     -1 & \\infty \\\\\n     1 &      0 & \\infty &      2 & \\infty & \\infty \\\\\n\\infty &      2 &      0 & \\infty & \\infty &     -8 \\\\\n    -4 & \\infty & \\infty &      0 &      3 & \\infty \\\\\n\\infty &      7 & \\infty & \\infty &      0 & \\infty \\\\\n\\infty &      5 &     10 & \\infty & \\infty & 0\n\\end{pmatrix}\n\n\n\n\n\n\nSlow:\n\n\n$m = 2$:\n\n\n\\begin{pmatrix}\n 0 &  6 & \\infty & \\infty &     -1 & \\infty \\\\\n-2 &  0 & \\infty &      2 &      0 & \\infty \\\\\n 3 & -3 &      0 &      4 & \\infty &     -8 \\\\\n-4 & 10 & \\infty &      0 &     -5 & \\infty \\\\\n 8 &  7 & \\infty &      9 &      0 & \\infty \\\\\n 6 &  5 &     10 &      7 & \\infty & 0\n\\end{pmatrix}\n\n\n$m = 3$:\n\n\n\\begin{pmatrix}\n 0 &  6 & \\infty &  8 & -1 & \\infty \\\\\n-2 &  0 & \\infty &  2 & -3 & \\infty \\\\\n-2 & -3 &      0 & -1 &  2 &     -8 \\\\\n-4 &  2 & \\infty &  0 & -5 & \\infty \\\\\n 5 &  7 & \\infty &  9 &  0 & \\infty \\\\\n 3 &  5 &     10 &  7 &  5 & 0\n\\end{pmatrix}\n\n\n$m = 4$:\n\n\n\\begin{pmatrix}\n 0 &  6 & \\infty &  8 & -1 & \\infty \\\\\n-2 &  0 & \\infty &  2 & -3 & \\infty \\\\\n-5 & -3 &      0 & -1 & -3 &     -8 \\\\\n-4 &  2 & \\infty &  0 & -5 & \\infty \\\\\n 5 &  7 & \\infty &  9 &  0 & \\infty \\\\\n 3 &  5 &     10 &  7 &  2 & 0\n\\end{pmatrix}\n\n\n$m = 5$:\n\n\n\\begin{pmatrix}\n 0 &  6 & \\infty &  8 & -1 & \\infty \\\\\n-2 &  0 & \\infty &  2 & -3 & \\infty \\\\\n-5 & -3 &      0 & -1 & -6 &     -8 \\\\\n-4 &  2 & \\infty &  0 & -5 & \\infty \\\\\n 5 &  7 & \\infty &  9 & 0  & \\infty \\\\\n 3 &  5 &     10 &  7 & 2  & 0\n\\end{pmatrix}\n\n\n\n\n\n\nFast:\n\n\n$m = 2$:\n\n\n\\begin{pmatrix}\n 0 &  6 & \\infty & \\infty &     -1 & \\infty \\\\\n-2 &  0 & \\infty &      2 &      0 & \\infty \\\\\n 3 & -3 &      0 &      4 & \\infty &     -8 \\\\\n-4 & 10 & \\infty &      0 &     -5 & \\infty \\\\\n 8 &  7 & \\infty &      9 &      0 & \\infty \\\\\n 6 &  5 &     10 &      7 & \\infty & 0\n\\end{pmatrix}\n\n\n$m = 4$:\n\n\n\\begin{pmatrix}\n 0 &  6 & \\infty &  8 & -1 & \\infty \\\\\n-2 &  0 & \\infty &  2 & -3 & \\infty \\\\\n-5 & -3 &      0 & -1 & -3 &     -8 \\\\\n-4 &  2 & \\infty &  0 & -5 & \\infty \\\\\n 5 &  7 & \\infty &  9 &  0 & \\infty \\\\\n 3 &  5 &     10 &  7 &  2 & 0\n\\end{pmatrix}\n\n\n$m = 8$:\n\n\n\\begin{pmatrix}\n 0 &  6 & \\infty &  8 & -1 & \\infty \\\\\n-2 &  0 & \\infty &  2 & -3 & \\infty \\\\\n-5 & -3 &      0 & -1 & -6 &     -8 \\\\\n-4 &  2 & \\infty &  0 & -5 & \\infty \\\\\n 5 &  7 & \\infty &  9 &  0 & \\infty \\\\\n 3 &  5 &     10 &  7 &  2 & 0\n\\end{pmatrix}\n\n\n\n\n\n\n25.1-2\n\n\n\n\nWhy do we require that $w_{ii} = 0$ for all $1 \\le i \\le n$?\n\n\n\n\nThis is consistent with the fact that the shortest path from a vertex to itself is the empty path of weight $0$. If there were another path of weight less than $0$ then it must be a negative-weight cycle, since it starts and ends at $v_i$.\n\n\n25.1-3\n\n\n\n\nWhat does the matrix\n\n\n$$\nL^{(0)} = \n\\begin{pmatrix}\n     0 & \\infty & \\infty & \\cdots & \\infty \\\\\n\\infty &      0 & \\infty & \\cdots & \\infty \\\\\n\\infty & \\infty &      0 & \\cdots & \\infty \\\\\n\\vdots & \\vdots & \\vdots & \\ddots & \\vdots \\\\\n\\infty & \\infty & \\infty & \\cdots & 0\n\\end{pmatrix}\n$$\n\n\nused in the shortest-paths algorithms correspond to in regular matrix multiplication?\n\n\n\n\nThe matrix $L^{(0)}$ corresponds to the identity matrix\n\n\n$$\nI =\n\\begin{pmatrix}\n1 & 0 & 0 & \\cdots & 0 \\\\\n0 & 1 & 0 & \\cdots & 0 \\\\\n0 & 0 & 1 & \\cdots & 0 \\\\\n\\vdots & \\vdots & \\vdots & \\ddots & \\vdots \\\\\n0 & 0 & 0 & \\cdots & 1\n\\end{pmatrix}\n$$\n\n\nof regular matrix multiplication. Substitute $0$ (the identity for $+$) for $\\infty$ (the identity for $\\min$), and $1$ (the identity for $\\cdot$) for $0$ (the identity for $+$).\n\n\n25.1-4\n\n\n\n\nShow that matrix multiplication defined by $\\text{EXTEND-SHORTEST-PATHS}$ is associative.\n\n\n\n\nTo verify associativity, we need to check that $(W^iW^j)W^p = W^i(W^jW^p)$ for all $i$, $j$ and $p$, where we use the matrix multiplication defined by the $\\text{EXTEND-SHORTEST-PATHS}$ procedure. Consider entry $(a, b)$ of the left hand side. This is:\n\n\n\\begin{align}\n\\min_{1 \\le k \\le n} [W^iW^j]_{a, k} + W_{k, b}^p\n    & = \\min_{1 \\le k \\le n} \\min_{1 \\le q \\le n} W_{a, q}^i + W_{q, k}^j + W_{k, b}^p \\\\\n    & = \\min_{1 \\le q \\le n} W_{a, q}^i + \\min_{1 \\le k \\le n} W_{q, k}^j + W_{k, b}^p \\\\\n    & = \\min_{1 \\le q \\le n} W_{a, q}^i + [W^jW^p]_{q, b},\n\\end{align}\n\n\nwhich is precisely entry $(a, b)$ of the right hand side.\n\n\n25.1-5\n\n\n\n\nShow how to express the single-source shortest-paths problem as a product of matrices and a vector. Describe how evaluating this product corresponds to a Bellman-Ford-like algorithm (see Section 24.1).\n\n\n\n\nThe all-pairs shortest-paths algorithm in Section 25.1 computes\n\n\n$$L^{(n - 1)} = W^{n - 1} = L^{(0)} \\cdot W^{n - 1},$$\n\n\nwhere $l_{ij}^{(n - 1)} = \\delta(i, j)$ and $L^{(0)}$ is the identity matrix. That is, the entry in the $i$th row and $j$th column of the matrix ''product'' is the shortest-path distance from vertex $i$ to vertex $j$, and row $i$ of the product is the solution to the single-source shortest-paths problem for vertex $i$.\n\n\nNotice that in a matrix ''product'' $C = A \\cdot B$, the $i$th row of $C$ is the $i$th row of $A$ ''multiplied'' by $B$. Since all we want is the $i$th row of $C$, we never need more than the $i$th row of $A$.\n\n\nThus the solution to the single-source shortest-paths from vertex $i$ is $L_i^{(0)} \\cdot W^{n - 1}$, where $L_i^{(0)}$ is the $i$th row of $L^{(0)}$\u2014a vector whose $i$th entry is $0$ and whose other entries are $\\infty$.\n\n\nDoing the above ''multiplications'' starting from the left is essentially the same as the $\\text{BELLMAN-FORD}$ algorithm. The vector corresponds to the $d$ values in $\\text{BELLMAN-FORD}$\u2014the shortest-path estimates from the source to each vertex.\n\n\n\n\nThe vector is initially $0$ for the source and $\\infty$ for all other vertices, the same as the values set up for $d$ by $\\text{INITIALIZE-SINGLE-SOURCE}$.\n\n\nEach ''multiplication'' of the current vector by $W$ relaxes all edges just as $\\text{BELLMAN-FORD}$ does. That is, a distance estimate in the row, say the distance to $v$, is updated to a smaller estimate, if any, formed by adding some $w(u, v)$ to the current estimate of the distance to $u$.\n\n\nThe relaxation/multiplication is done $n - 1$ times.\n\n\n\n\n25.1-6\n\n\n\n\nSuppose we also wish to compute the vertices on shortest paths in the algorithms of this section. Show how to compute the predecessor matrix $\\prod$ from the completed matrix $L$ of shortest-path weights in $O(n^3)$ time.\n\n\n\n\nFor each source vertex $v_i$ we need to compute the shortest-paths tree for $v_i$. To do this, we need to compute the predecessor for each $j \\ne i$. For fixed $i$ and $j$, this is the value of $k$ such that $L_{i, k} + w(k, j) = L_{i, j}$. Since there are $n$ vertices whose trees need computing, $n$ vertices for each such tree whose predecessors need computing, and it takes $O(n)$ to compute this for each one (checking each possible $k$), the total time is $O(n^3)$.\n\n\n25.1-7\n\n\n\n\nWe can also compute the vertices on shortest paths as we compute the shortestpath weights. Define $\\pi_{ij}^{(m)}$ as the predecessor of vertex $j$ on any minimum-weight path from $i$ to $j$ that contains at most $m$ edges. Modify the $\\text{EXTEND-SHORTESTPATHS}$ and $\\text{SLOW-ALL-PAIRS-SHORTEST-PATHS}$ procedures to compute the matrices$\\prod^{(1)}, \\prod^{(2)}, \\ldots, \\prod^{(n - 1)}$ as the matrices $L^{(1)}, L^{(2)}, \\ldots, L^{(n - 1)}$ are computed.\n\n\n\n\nTo have the procedure compute the predecessor along the shortest path, see the modified procedures, $\\text{EXTEND-SHORTEST-PATH-MOD}$ and $\\text{SLOW-ALL-PAIRS-SHORTEST-PATHS-MOD}$\n\n\nEXTEND\n-\nSHORTEST\n-\nPATH\n-\nMOD\n(\n\u220f\n,\n \nL\n,\n \nW\n)\n\n    \nn\n \n=\n \nL\n.\nrow\n\n    \nLet\n \nL\n'\n \n=\n \n(\nl\n'\n_\n{\ni\n,\n \nj\n})\n \nbe\n \na\n \nnew\n \nn\n \n\u00d7\n \nn\n \nmatirx\n\n    \n\u220f'\n \n=\n \n(\nPI\n'\n_\n{\ni\n,\n \nj\n})\n \nis\n \na\n \nnew\n \nn\n \n\u00d7\n \nn\n \nmatrix\n\n    \nfor\n \ni\n \n=\n \n1\n \nto\n \nn\n\n        \nfor\n \nj\n \n=\n \n1\n \nto\n \nn\n\n            \nl\n'\n_\n{\ni\n,\n \nj\n}\n \n=\n \n\u221e\n\n            \nPI_\n{\ni\n,\n \nj\n}\n \n=\n \nNIL\n\n            \nfor\n \nk\n \n=\n \n1\n \nto\n \nn\n\n                \nif\n \nl_\n{\ni\n,\n \nk\n}\n \n+\n \nl_\n{\nj\n,\n \nk\n}\n \n<\n \nl_\n{\ni\n,\n \nj\n}\n\n                    \nl_\n{\ni\n,\n \nj\n}\n \n=\n \nl_\n{\ni\n,\n \nk\n}\n \n+\n \nl_\n{\nj\n,\n \nk\n}\n\n                    \nPI\n'\n_\n{\ni\n,\n \nj\n}\n \n=\n \nPI_\n{\nk\n,\n \nj\n}\n\n    \nreturn\n \n\u220f'\n,\n \nL\n'\n\n\n\n\n\nSLOW-ALL-PAIRS-SHORTEST-PATHS-MOD(W)\n    n = W.rows\n    L^{(1)} = W\n    \u220f^{(1)} = (PI_{i, j}^{(1)}) where PI_{i, j}^{(1)} = i if there is an edge from i to j, and NIL otherwise.\n    for m = 2 to n - 1\n        \u220f^{(m)}, L^{(m)} = EXTEND-SHORTEST-PATH-MOD(\u220f^{(m - 1)}, L^{(m - 1)}, W)\n    return \u220f^{(n - 1)}, L^{(n - 1)}\n\n\n\n\n25.1-8\n\n\n\n\nThe $\\text{FASTER-ALL-PAIRS-SHORTEST-PATHS}$ procedure, as written, requires us to store $\\lceil \\lg(n - 1) \\rceil$ matrices, each with $n^2$ elements, for a total space requirement of $\\Theta(n^2\\lg n)$. Modify the procedure to require only $\\Theta(n^2)$ space by using only two $n \\times n$ matrices.\n\n\n\n\nWe can overwrite matrices as we go. Let $A \\star B$ denote multiplication defined by the $\\text{EXTEND-SHORTEST-PATHS}$ procedure. Then we modify $\\text{FASTER-ALL-EXTEND-SHORTEST-PATHS}(W)$. We initially create an $n$ by $n$ matrix $L$. Delete line 5 of the algorithm, and change line 6 to $L = W \\star W$, followed by $W = L$.\n\n\n25.1-9\n\n\n\n\nModify $\\text{FASTER-ALL-PAIRS-SHORTEST-PATHS}$ so that it can determine whether the graph contains a negative-weight cycle.\n\n\n\n\nFor the modification, keep computing for one step more than the original, that is, we compute all the way up to $L^{(2k + 1)}$ where $2^k > n - 1$. Then, if there aren't any negative weight cycles, then, we will have that the two matrices should be equal since having no negative weight cycles means that between any two vertices, there is a path that is tied for shortest and contains at most $n - 1$ edges. \n\n\nHowever, if there is a cycle of negative total weight, we know that it's length is at most $n$, so, since we are allowing paths to be larger by $2k \\ge n$ between these two matrices, we have that we would need to have all of the vertices on the cycle have their distance reduce by at least the negative weight of the cycle. Since we can detect exactly when there is a negative cycle, based on when these two matrices are different. This algorithm works. It also only takes time equal to a single matrix multiplication which is littlee oh of the unmodified algorithm.\n\n\n25.1-10\n\n\n\n\nGive an efficient algorithm to find the length (number of edges) of a minimum-length negative-weight cycle in a graph.\n\n\n\n\nRun $\\text{SLOW-ALL-PAIRS-SHORTEST-PATHS}$ on the graph. Look at the diagonal elements of $L^{(m)}$. Return the first value of $m$ for which one (or more) of the diagonal elements ($l_{ii}^{(m)}$) is negative. If $m$ reaches $n + 1$, then stop and declare that there are no negative-weight cycles.\n\n\nLet the number of edges in a minimum-length negative-weight cycle be $m^*$, where $m^* = \\infty$ if the graph has no negative-weight cycles.\n\n\nCorrectness\n\n\nLet's assume that for some value $m^* \\le n$ and some value of $i$, we find that $l_{ii}^{m^*} < 0$. Then the graph has a cycle with $m^*$ edges that goes from vertex $i$ to itself, and this cycle has negative weight (stored in $l_{ii}^{m^*}$). This is the minimum-length negative-weight cycle because $\\text{SLOW-ALL-PAIRS-SHORTEST-PATHS}$ computes all paths of $1$ edge, then all paths of $2$ edges, and so on, and all cycles shorter than $m^*$ edges were checked before and did not have negative weight. Now assume that for all $m \\le n$, there is no negative $l_{ii}^{(m)}$ element. Then, there is no negativeweight cycle in the graph, because all cycles have length at most $n$.\n\n\nTime\n\n\n$O(n^4)$. More precisely, $\\Theta(n^3 \\cdot \\min(n, m^*))$.\n\n\nFaster solution\n\n\nRun $\\text{FASTER-ALL-PAIRS-SHORTEST-PATHS}$ on the graph until the first time that the matrix $L^{(m)}$ has one or more negative values on the diagonal, or until we have computed $L^{(m)}$ for some $m > n$. If we find any negative entries on the diagonal, we know that the minimum-length negative-weight cycle has more than $m / 2$ edges and at most $m$ edges. We just need to binary search for the value of $m^*$ in the range $m / 2 < m^* \\le m$. The key observation is that on our way to computing $L^{(m)}$ , we computed $L^{(1)}, L^{(2)}, L^{(4)}, L^{(8)}, \\ldots, L^{(m / 2)}$, and these matrices suffice to compute every matrix we'll need. Here's pseudocode:\n\n\nFIND\n-\nMIN\n-\nLENGTH\n-\nNEG\n-\nWEIGHT\n-\nCYCLE\n(\nW\n)\n\n    \nn\n \n=\n \nW\n.\nrows\n\n    \nL\n(\n1\n)\n \n=\n \nW\n\n    \nm\n \n=\n \n1\n\n    \nwhiel\n \nm\n \n\u2264\n \nn\n \nand\n \nno\n \ndiagonal\n \nentries\n \nof\n \nL\n(\nm\n)\n \nare\n \nnegative\n\n        \nL\n(\n2\nm\n)\n \n=\n \nEXTEND\n-\nSHORTEST\n-\nPATHS\n(\nL\n(\nm\n),\n \nL\n(\nm\n))\n\n        \nm\n \n=\n \n2\nm\n\n    \nif\n \nm\n \n>\n \nn\n \nand\n \nno\n \ndiagonal\n \nentries\n \nof\n \nL\n(\nm\n)\n \nare\n \nnegative\n\n        \nreturn\n \n\"no negative-weight cycles\"\n\n    \neles\n \nif\n \nm\n \n\u2264\n \n2\n\n        \nreturn\n \nm\n\n    \nelse\n\n        \nlow\n \n=\n \nm\n \n/\n \n2\n\n        \nhigh\n \n=\n \nm\n\n        \nd\n \n=\n \nm\n \n/\n \n4\n\n        \nwhile\n \nd\n \n\u2265\n \n1\n\n            \ns\n \n=\n \nlow\n \n+\n \nd\n\n            \nL\n(\ns\n)\n \n=\n \nEXTEND\n-\nSHORTEST\n-\nPATHS\n(\nL\n(\nlow\n),\n \nL\n(\nd\n))\n\n            \nif\n \nL\n(\ns\n)\n \nhas\n \nany\n \nnegative\n \nentries\n \non\n \nthe\n \ndiagonal\n\n                \nhigh\n \n=\n \ns\n\n            \nelse\n \nlow\n \n=\n \ns\n\n            \nd\n \n=\n \nd\n \n/\n \n2\n\n        \nreturn\n \nhigh\n\n\n\n\n\nCorrectness\n \n\n\nIf, after the first \nwhile\n loop, $m > n$ and no diagonal entries of $L^{(m)}$ are negative, then there is no negative-weight cycle. Otherwise, if $m \\le 2$, then either $m = 1$ or $m = 2$, and $L^{(m)}$ is the first matrix with a negative entry on the diagonal. Thus, the correct value to return is $m$.\n\n\nIf $m > 2$, then we maintain an interval bracketed by the values $low$ and $high$, such that the correct value $m^*$ is in the range $low < m^* \\le high$. We use the following loop invariant:\n\n\nLoop invariant:\n At the start of each iteration of the ''\nwhile\n $d \\ge 1$'' loop,\n\n\n\n\n$d = 2^p$ for some integer $p \\ge -1$,\n\n\n$d = (high - low) / 2$,\n\n\n$low < m^* \\le high$.\n\n\n\n\nInitialization:\n Initially, $m$ is an integer power of $2$ and $m > 2$. Since $d = m / 4$, we have that $d$ is an integer power of $2$ and $d > 1 / 2$, so that $d = 2^p$ for some integer $p \\ge 0$. We also have \n\n\n(high - low) / 2 = (m - (m / 2)) / 2 = m / 4 = d.\n\n\nFinally, $L^{(m)}$ has a negative entry on the diagonal and $L^{(m / 2)}$ does not. Since $low = m / 2$ and $high = m$, we have that $low < m^* \\le high$.\n\n\nMaintenance:\n We use $high$, $low$, and $d$ to denote variable values in a given iteration, and $high'$, $low'$, and $d'$ to denote the same variable values in the next iteration. Thus, we wish to show that $d = 2^p$ for some integer $p \\ge -1$ implies $d' = 2^p$ for some integer $p' \\ge -1$, that $d = (high - low) / 2$ implies $d' = (high' - low') / 2$, and that $low < m^* \\le high$ implies $low' < m^* \\le high'$.\n\n\nTo see that $d' = 2^{p'}$, note that $d' = d / 2$, and so $d = 2^{p - 1}$. The condition that $d \\ge 1$ implies that $p \\ge 0$, and so $p' \\ge -1$.\n\n\nWithin each iteration, $s$ is set to $low + d$, and one of the following actions occurs:\n\n\n\n\n\n\nIf $L^{(s)}$ has any negative entries on the diagonal, then $high'$ is set to s and $d'$ is set to $d / 2$. Upon entering the next iteration, \n\n\n$$(high' - low') / 2 = (s - low') / 2 = ((low + d) - low) / 2 = d / 2 = d'.$$\n\n\nSince $L^{(s)}$ has a negative diagonal entry, we know that $m^* \\le s$. Because $high' = s$ and $low'= low$, we have that $low' < m^* \\le high'$.\n\n\n\n\n\n\nIf $L^{(s)}$ has no negative entries on the diagonal, then $low'$ is set to $s$, and $d'$ is set to $d / 2$. Upon entering the next iteration, \n\n\n$$(high' - low') / 2 = (high' - s) / 2 = (high - (low + d)) / 2 = (high - low) / 2 - d / 2 = d - d / 2 = d / 2 = d'.$$\n\n\nSince $L^{(s)}$ has no negative diagonal entries, we know that $m^* > s$. Because $low' = s$ and $high' = high$, we have that $low' < m^* \\le high'$.\n\n\n\n\n\n\nTermination:\n At termination, $d < 1$. Since $d = 2^p$ for some integer $p \\ge -1$, we must have $p = -1$, so that $d = 1 / 2$. By the second part of the loop invariant, if we multiply both sides by $2$, we get that $high - low = 2d = 1$. By the third part of the loop invariant, we know that $low < m^* \\le high$. Since $high - low = 2d = 1$ and $m^* > low$, the only possible value for $m^*$ is high, which the procedure returns.\n\n\nTime\n\n\nIf there is no negative-weight cycle, the first \nwhile\n loop iterates $\\Theta(\\lg n)$ times, and the total time is $\\Theta(n^3\\lg n)$.\n\n\nNow suppose that there is a negative-weight cycle. We claim that each time we call $\\text{EXTEND-SHORTEST-PATHS}(L^{(low)}, L^{(d)})$, we have already computed $L^{(low)}$ and $L^{(d)}$. Initially, since $low = m / 2$, we had already computed $L^{(low)}$ in the first \nwhile\n loop. In succeeding iterations of the second \nwhile\n loop, the only way that low changes is when it gets the value of $s$, and we have just computed $L^{(s)}$. As for $L^{(d)}$, observe that $d$ takes on the values $m / 4$, $m / 8$, $m / 16$, $\\ldots$, $1$, and again, we computed all of these $L$ matrices in the first \nwhile\n loop. Thus, the claim is proven. Each of the two \nwhile\n loops iterates $\\Theta(\\lg m^*)$ times. Since we have already computed the parameters to each call of $\\text{EXTEND-SHORTEST-PATHS}$, each iteration is dominated by the $\\Theta(n^3)$-time call to $\\text{EXTEND-SHORTEST-PATHS}$. Thus, the total time is $\\Theta(n^3\\lg m^*)$.\n\n\nIn general, therefore, the running time is $\\Theta(n^3\\lg\\min(n, m^*))$.\n\n\nSpace\n\n\nThe slower algorithm needs to keep only three matrices at any time, and so its space requirement is $\\Theta(n^3)$. This faster algorithm needs to maintain $\\Theta(\\lg\\min(n, m^*))$ matrices, and so the space requirement increases to $\\Theta(n^3\\lg\\min(n, m^*))$.",
            "title": "25.1 Shortest paths and matrix multiplication"
        },
        {
            "location": "/Chap25/25.1/#251-1",
            "text": "Run $\\text{SLOW-ALL-PAIRS-SHORTEST-PATHS}$ on the weighted, directed graph of Figure 25.2, showing the matrices that result for each iteration of the loop. Then do the same for $\\text{FASTER-ALL-PAIRS-SHORTEST-PATHS}$.     Initial:  \\begin{pmatrix}\n     0 & \\infty & \\infty & \\infty &     -1 & \\infty \\\\\n     1 &      0 & \\infty &      2 & \\infty & \\infty \\\\\n\\infty &      2 &      0 & \\infty & \\infty &     -8 \\\\\n    -4 & \\infty & \\infty &      0 &      3 & \\infty \\\\\n\\infty &      7 & \\infty & \\infty &      0 & \\infty \\\\\n\\infty &      5 &     10 & \\infty & \\infty & 0\n\\end{pmatrix}    Slow:  $m = 2$:  \\begin{pmatrix}\n 0 &  6 & \\infty & \\infty &     -1 & \\infty \\\\\n-2 &  0 & \\infty &      2 &      0 & \\infty \\\\\n 3 & -3 &      0 &      4 & \\infty &     -8 \\\\\n-4 & 10 & \\infty &      0 &     -5 & \\infty \\\\\n 8 &  7 & \\infty &      9 &      0 & \\infty \\\\\n 6 &  5 &     10 &      7 & \\infty & 0\n\\end{pmatrix}  $m = 3$:  \\begin{pmatrix}\n 0 &  6 & \\infty &  8 & -1 & \\infty \\\\\n-2 &  0 & \\infty &  2 & -3 & \\infty \\\\\n-2 & -3 &      0 & -1 &  2 &     -8 \\\\\n-4 &  2 & \\infty &  0 & -5 & \\infty \\\\\n 5 &  7 & \\infty &  9 &  0 & \\infty \\\\\n 3 &  5 &     10 &  7 &  5 & 0\n\\end{pmatrix}  $m = 4$:  \\begin{pmatrix}\n 0 &  6 & \\infty &  8 & -1 & \\infty \\\\\n-2 &  0 & \\infty &  2 & -3 & \\infty \\\\\n-5 & -3 &      0 & -1 & -3 &     -8 \\\\\n-4 &  2 & \\infty &  0 & -5 & \\infty \\\\\n 5 &  7 & \\infty &  9 &  0 & \\infty \\\\\n 3 &  5 &     10 &  7 &  2 & 0\n\\end{pmatrix}  $m = 5$:  \\begin{pmatrix}\n 0 &  6 & \\infty &  8 & -1 & \\infty \\\\\n-2 &  0 & \\infty &  2 & -3 & \\infty \\\\\n-5 & -3 &      0 & -1 & -6 &     -8 \\\\\n-4 &  2 & \\infty &  0 & -5 & \\infty \\\\\n 5 &  7 & \\infty &  9 & 0  & \\infty \\\\\n 3 &  5 &     10 &  7 & 2  & 0\n\\end{pmatrix}    Fast:  $m = 2$:  \\begin{pmatrix}\n 0 &  6 & \\infty & \\infty &     -1 & \\infty \\\\\n-2 &  0 & \\infty &      2 &      0 & \\infty \\\\\n 3 & -3 &      0 &      4 & \\infty &     -8 \\\\\n-4 & 10 & \\infty &      0 &     -5 & \\infty \\\\\n 8 &  7 & \\infty &      9 &      0 & \\infty \\\\\n 6 &  5 &     10 &      7 & \\infty & 0\n\\end{pmatrix}  $m = 4$:  \\begin{pmatrix}\n 0 &  6 & \\infty &  8 & -1 & \\infty \\\\\n-2 &  0 & \\infty &  2 & -3 & \\infty \\\\\n-5 & -3 &      0 & -1 & -3 &     -8 \\\\\n-4 &  2 & \\infty &  0 & -5 & \\infty \\\\\n 5 &  7 & \\infty &  9 &  0 & \\infty \\\\\n 3 &  5 &     10 &  7 &  2 & 0\n\\end{pmatrix}  $m = 8$:  \\begin{pmatrix}\n 0 &  6 & \\infty &  8 & -1 & \\infty \\\\\n-2 &  0 & \\infty &  2 & -3 & \\infty \\\\\n-5 & -3 &      0 & -1 & -6 &     -8 \\\\\n-4 &  2 & \\infty &  0 & -5 & \\infty \\\\\n 5 &  7 & \\infty &  9 &  0 & \\infty \\\\\n 3 &  5 &     10 &  7 &  2 & 0\n\\end{pmatrix}",
            "title": "25.1-1"
        },
        {
            "location": "/Chap25/25.1/#251-2",
            "text": "Why do we require that $w_{ii} = 0$ for all $1 \\le i \\le n$?   This is consistent with the fact that the shortest path from a vertex to itself is the empty path of weight $0$. If there were another path of weight less than $0$ then it must be a negative-weight cycle, since it starts and ends at $v_i$.",
            "title": "25.1-2"
        },
        {
            "location": "/Chap25/25.1/#251-3",
            "text": "What does the matrix  $$\nL^{(0)} = \n\\begin{pmatrix}\n     0 & \\infty & \\infty & \\cdots & \\infty \\\\\n\\infty &      0 & \\infty & \\cdots & \\infty \\\\\n\\infty & \\infty &      0 & \\cdots & \\infty \\\\\n\\vdots & \\vdots & \\vdots & \\ddots & \\vdots \\\\\n\\infty & \\infty & \\infty & \\cdots & 0\n\\end{pmatrix}\n$$  used in the shortest-paths algorithms correspond to in regular matrix multiplication?   The matrix $L^{(0)}$ corresponds to the identity matrix  $$\nI =\n\\begin{pmatrix}\n1 & 0 & 0 & \\cdots & 0 \\\\\n0 & 1 & 0 & \\cdots & 0 \\\\\n0 & 0 & 1 & \\cdots & 0 \\\\\n\\vdots & \\vdots & \\vdots & \\ddots & \\vdots \\\\\n0 & 0 & 0 & \\cdots & 1\n\\end{pmatrix}\n$$  of regular matrix multiplication. Substitute $0$ (the identity for $+$) for $\\infty$ (the identity for $\\min$), and $1$ (the identity for $\\cdot$) for $0$ (the identity for $+$).",
            "title": "25.1-3"
        },
        {
            "location": "/Chap25/25.1/#251-4",
            "text": "Show that matrix multiplication defined by $\\text{EXTEND-SHORTEST-PATHS}$ is associative.   To verify associativity, we need to check that $(W^iW^j)W^p = W^i(W^jW^p)$ for all $i$, $j$ and $p$, where we use the matrix multiplication defined by the $\\text{EXTEND-SHORTEST-PATHS}$ procedure. Consider entry $(a, b)$ of the left hand side. This is:  \\begin{align}\n\\min_{1 \\le k \\le n} [W^iW^j]_{a, k} + W_{k, b}^p\n    & = \\min_{1 \\le k \\le n} \\min_{1 \\le q \\le n} W_{a, q}^i + W_{q, k}^j + W_{k, b}^p \\\\\n    & = \\min_{1 \\le q \\le n} W_{a, q}^i + \\min_{1 \\le k \\le n} W_{q, k}^j + W_{k, b}^p \\\\\n    & = \\min_{1 \\le q \\le n} W_{a, q}^i + [W^jW^p]_{q, b},\n\\end{align}  which is precisely entry $(a, b)$ of the right hand side.",
            "title": "25.1-4"
        },
        {
            "location": "/Chap25/25.1/#251-5",
            "text": "Show how to express the single-source shortest-paths problem as a product of matrices and a vector. Describe how evaluating this product corresponds to a Bellman-Ford-like algorithm (see Section 24.1).   The all-pairs shortest-paths algorithm in Section 25.1 computes  $$L^{(n - 1)} = W^{n - 1} = L^{(0)} \\cdot W^{n - 1},$$  where $l_{ij}^{(n - 1)} = \\delta(i, j)$ and $L^{(0)}$ is the identity matrix. That is, the entry in the $i$th row and $j$th column of the matrix ''product'' is the shortest-path distance from vertex $i$ to vertex $j$, and row $i$ of the product is the solution to the single-source shortest-paths problem for vertex $i$.  Notice that in a matrix ''product'' $C = A \\cdot B$, the $i$th row of $C$ is the $i$th row of $A$ ''multiplied'' by $B$. Since all we want is the $i$th row of $C$, we never need more than the $i$th row of $A$.  Thus the solution to the single-source shortest-paths from vertex $i$ is $L_i^{(0)} \\cdot W^{n - 1}$, where $L_i^{(0)}$ is the $i$th row of $L^{(0)}$\u2014a vector whose $i$th entry is $0$ and whose other entries are $\\infty$.  Doing the above ''multiplications'' starting from the left is essentially the same as the $\\text{BELLMAN-FORD}$ algorithm. The vector corresponds to the $d$ values in $\\text{BELLMAN-FORD}$\u2014the shortest-path estimates from the source to each vertex.   The vector is initially $0$ for the source and $\\infty$ for all other vertices, the same as the values set up for $d$ by $\\text{INITIALIZE-SINGLE-SOURCE}$.  Each ''multiplication'' of the current vector by $W$ relaxes all edges just as $\\text{BELLMAN-FORD}$ does. That is, a distance estimate in the row, say the distance to $v$, is updated to a smaller estimate, if any, formed by adding some $w(u, v)$ to the current estimate of the distance to $u$.  The relaxation/multiplication is done $n - 1$ times.",
            "title": "25.1-5"
        },
        {
            "location": "/Chap25/25.1/#251-6",
            "text": "Suppose we also wish to compute the vertices on shortest paths in the algorithms of this section. Show how to compute the predecessor matrix $\\prod$ from the completed matrix $L$ of shortest-path weights in $O(n^3)$ time.   For each source vertex $v_i$ we need to compute the shortest-paths tree for $v_i$. To do this, we need to compute the predecessor for each $j \\ne i$. For fixed $i$ and $j$, this is the value of $k$ such that $L_{i, k} + w(k, j) = L_{i, j}$. Since there are $n$ vertices whose trees need computing, $n$ vertices for each such tree whose predecessors need computing, and it takes $O(n)$ to compute this for each one (checking each possible $k$), the total time is $O(n^3)$.",
            "title": "25.1-6"
        },
        {
            "location": "/Chap25/25.1/#251-7",
            "text": "We can also compute the vertices on shortest paths as we compute the shortestpath weights. Define $\\pi_{ij}^{(m)}$ as the predecessor of vertex $j$ on any minimum-weight path from $i$ to $j$ that contains at most $m$ edges. Modify the $\\text{EXTEND-SHORTESTPATHS}$ and $\\text{SLOW-ALL-PAIRS-SHORTEST-PATHS}$ procedures to compute the matrices$\\prod^{(1)}, \\prod^{(2)}, \\ldots, \\prod^{(n - 1)}$ as the matrices $L^{(1)}, L^{(2)}, \\ldots, L^{(n - 1)}$ are computed.   To have the procedure compute the predecessor along the shortest path, see the modified procedures, $\\text{EXTEND-SHORTEST-PATH-MOD}$ and $\\text{SLOW-ALL-PAIRS-SHORTEST-PATHS-MOD}$  EXTEND - SHORTEST - PATH - MOD ( \u220f ,   L ,   W ) \n     n   =   L . row \n     Let   L '   =   ( l ' _ { i ,   j })   be   a   new   n   \u00d7   n   matirx \n     \u220f'   =   ( PI ' _ { i ,   j })   is   a   new   n   \u00d7   n   matrix \n     for   i   =   1   to   n \n         for   j   =   1   to   n \n             l ' _ { i ,   j }   =   \u221e \n             PI_ { i ,   j }   =   NIL \n             for   k   =   1   to   n \n                 if   l_ { i ,   k }   +   l_ { j ,   k }   <   l_ { i ,   j } \n                     l_ { i ,   j }   =   l_ { i ,   k }   +   l_ { j ,   k } \n                     PI ' _ { i ,   j }   =   PI_ { k ,   j } \n     return   \u220f' ,   L '   SLOW-ALL-PAIRS-SHORTEST-PATHS-MOD(W)\n    n = W.rows\n    L^{(1)} = W\n    \u220f^{(1)} = (PI_{i, j}^{(1)}) where PI_{i, j}^{(1)} = i if there is an edge from i to j, and NIL otherwise.\n    for m = 2 to n - 1\n        \u220f^{(m)}, L^{(m)} = EXTEND-SHORTEST-PATH-MOD(\u220f^{(m - 1)}, L^{(m - 1)}, W)\n    return \u220f^{(n - 1)}, L^{(n - 1)}",
            "title": "25.1-7"
        },
        {
            "location": "/Chap25/25.1/#251-8",
            "text": "The $\\text{FASTER-ALL-PAIRS-SHORTEST-PATHS}$ procedure, as written, requires us to store $\\lceil \\lg(n - 1) \\rceil$ matrices, each with $n^2$ elements, for a total space requirement of $\\Theta(n^2\\lg n)$. Modify the procedure to require only $\\Theta(n^2)$ space by using only two $n \\times n$ matrices.   We can overwrite matrices as we go. Let $A \\star B$ denote multiplication defined by the $\\text{EXTEND-SHORTEST-PATHS}$ procedure. Then we modify $\\text{FASTER-ALL-EXTEND-SHORTEST-PATHS}(W)$. We initially create an $n$ by $n$ matrix $L$. Delete line 5 of the algorithm, and change line 6 to $L = W \\star W$, followed by $W = L$.",
            "title": "25.1-8"
        },
        {
            "location": "/Chap25/25.1/#251-9",
            "text": "Modify $\\text{FASTER-ALL-PAIRS-SHORTEST-PATHS}$ so that it can determine whether the graph contains a negative-weight cycle.   For the modification, keep computing for one step more than the original, that is, we compute all the way up to $L^{(2k + 1)}$ where $2^k > n - 1$. Then, if there aren't any negative weight cycles, then, we will have that the two matrices should be equal since having no negative weight cycles means that between any two vertices, there is a path that is tied for shortest and contains at most $n - 1$ edges.   However, if there is a cycle of negative total weight, we know that it's length is at most $n$, so, since we are allowing paths to be larger by $2k \\ge n$ between these two matrices, we have that we would need to have all of the vertices on the cycle have their distance reduce by at least the negative weight of the cycle. Since we can detect exactly when there is a negative cycle, based on when these two matrices are different. This algorithm works. It also only takes time equal to a single matrix multiplication which is littlee oh of the unmodified algorithm.",
            "title": "25.1-9"
        },
        {
            "location": "/Chap25/25.1/#251-10",
            "text": "Give an efficient algorithm to find the length (number of edges) of a minimum-length negative-weight cycle in a graph.   Run $\\text{SLOW-ALL-PAIRS-SHORTEST-PATHS}$ on the graph. Look at the diagonal elements of $L^{(m)}$. Return the first value of $m$ for which one (or more) of the diagonal elements ($l_{ii}^{(m)}$) is negative. If $m$ reaches $n + 1$, then stop and declare that there are no negative-weight cycles.  Let the number of edges in a minimum-length negative-weight cycle be $m^*$, where $m^* = \\infty$ if the graph has no negative-weight cycles.  Correctness  Let's assume that for some value $m^* \\le n$ and some value of $i$, we find that $l_{ii}^{m^*} < 0$. Then the graph has a cycle with $m^*$ edges that goes from vertex $i$ to itself, and this cycle has negative weight (stored in $l_{ii}^{m^*}$). This is the minimum-length negative-weight cycle because $\\text{SLOW-ALL-PAIRS-SHORTEST-PATHS}$ computes all paths of $1$ edge, then all paths of $2$ edges, and so on, and all cycles shorter than $m^*$ edges were checked before and did not have negative weight. Now assume that for all $m \\le n$, there is no negative $l_{ii}^{(m)}$ element. Then, there is no negativeweight cycle in the graph, because all cycles have length at most $n$.  Time  $O(n^4)$. More precisely, $\\Theta(n^3 \\cdot \\min(n, m^*))$.  Faster solution  Run $\\text{FASTER-ALL-PAIRS-SHORTEST-PATHS}$ on the graph until the first time that the matrix $L^{(m)}$ has one or more negative values on the diagonal, or until we have computed $L^{(m)}$ for some $m > n$. If we find any negative entries on the diagonal, we know that the minimum-length negative-weight cycle has more than $m / 2$ edges and at most $m$ edges. We just need to binary search for the value of $m^*$ in the range $m / 2 < m^* \\le m$. The key observation is that on our way to computing $L^{(m)}$ , we computed $L^{(1)}, L^{(2)}, L^{(4)}, L^{(8)}, \\ldots, L^{(m / 2)}$, and these matrices suffice to compute every matrix we'll need. Here's pseudocode:  FIND - MIN - LENGTH - NEG - WEIGHT - CYCLE ( W ) \n     n   =   W . rows \n     L ( 1 )   =   W \n     m   =   1 \n     whiel   m   \u2264   n   and   no   diagonal   entries   of   L ( m )   are   negative \n         L ( 2 m )   =   EXTEND - SHORTEST - PATHS ( L ( m ),   L ( m )) \n         m   =   2 m \n     if   m   >   n   and   no   diagonal   entries   of   L ( m )   are   negative \n         return   \"no negative-weight cycles\" \n     eles   if   m   \u2264   2 \n         return   m \n     else \n         low   =   m   /   2 \n         high   =   m \n         d   =   m   /   4 \n         while   d   \u2265   1 \n             s   =   low   +   d \n             L ( s )   =   EXTEND - SHORTEST - PATHS ( L ( low ),   L ( d )) \n             if   L ( s )   has   any   negative   entries   on   the   diagonal \n                 high   =   s \n             else   low   =   s \n             d   =   d   /   2 \n         return   high   Correctness    If, after the first  while  loop, $m > n$ and no diagonal entries of $L^{(m)}$ are negative, then there is no negative-weight cycle. Otherwise, if $m \\le 2$, then either $m = 1$ or $m = 2$, and $L^{(m)}$ is the first matrix with a negative entry on the diagonal. Thus, the correct value to return is $m$.  If $m > 2$, then we maintain an interval bracketed by the values $low$ and $high$, such that the correct value $m^*$ is in the range $low < m^* \\le high$. We use the following loop invariant:  Loop invariant:  At the start of each iteration of the '' while  $d \\ge 1$'' loop,   $d = 2^p$ for some integer $p \\ge -1$,  $d = (high - low) / 2$,  $low < m^* \\le high$.   Initialization:  Initially, $m$ is an integer power of $2$ and $m > 2$. Since $d = m / 4$, we have that $d$ is an integer power of $2$ and $d > 1 / 2$, so that $d = 2^p$ for some integer $p \\ge 0$. We also have   (high - low) / 2 = (m - (m / 2)) / 2 = m / 4 = d.  Finally, $L^{(m)}$ has a negative entry on the diagonal and $L^{(m / 2)}$ does not. Since $low = m / 2$ and $high = m$, we have that $low < m^* \\le high$.  Maintenance:  We use $high$, $low$, and $d$ to denote variable values in a given iteration, and $high'$, $low'$, and $d'$ to denote the same variable values in the next iteration. Thus, we wish to show that $d = 2^p$ for some integer $p \\ge -1$ implies $d' = 2^p$ for some integer $p' \\ge -1$, that $d = (high - low) / 2$ implies $d' = (high' - low') / 2$, and that $low < m^* \\le high$ implies $low' < m^* \\le high'$.  To see that $d' = 2^{p'}$, note that $d' = d / 2$, and so $d = 2^{p - 1}$. The condition that $d \\ge 1$ implies that $p \\ge 0$, and so $p' \\ge -1$.  Within each iteration, $s$ is set to $low + d$, and one of the following actions occurs:    If $L^{(s)}$ has any negative entries on the diagonal, then $high'$ is set to s and $d'$ is set to $d / 2$. Upon entering the next iteration,   $$(high' - low') / 2 = (s - low') / 2 = ((low + d) - low) / 2 = d / 2 = d'.$$  Since $L^{(s)}$ has a negative diagonal entry, we know that $m^* \\le s$. Because $high' = s$ and $low'= low$, we have that $low' < m^* \\le high'$.    If $L^{(s)}$ has no negative entries on the diagonal, then $low'$ is set to $s$, and $d'$ is set to $d / 2$. Upon entering the next iteration,   $$(high' - low') / 2 = (high' - s) / 2 = (high - (low + d)) / 2 = (high - low) / 2 - d / 2 = d - d / 2 = d / 2 = d'.$$  Since $L^{(s)}$ has no negative diagonal entries, we know that $m^* > s$. Because $low' = s$ and $high' = high$, we have that $low' < m^* \\le high'$.    Termination:  At termination, $d < 1$. Since $d = 2^p$ for some integer $p \\ge -1$, we must have $p = -1$, so that $d = 1 / 2$. By the second part of the loop invariant, if we multiply both sides by $2$, we get that $high - low = 2d = 1$. By the third part of the loop invariant, we know that $low < m^* \\le high$. Since $high - low = 2d = 1$ and $m^* > low$, the only possible value for $m^*$ is high, which the procedure returns.  Time  If there is no negative-weight cycle, the first  while  loop iterates $\\Theta(\\lg n)$ times, and the total time is $\\Theta(n^3\\lg n)$.  Now suppose that there is a negative-weight cycle. We claim that each time we call $\\text{EXTEND-SHORTEST-PATHS}(L^{(low)}, L^{(d)})$, we have already computed $L^{(low)}$ and $L^{(d)}$. Initially, since $low = m / 2$, we had already computed $L^{(low)}$ in the first  while  loop. In succeeding iterations of the second  while  loop, the only way that low changes is when it gets the value of $s$, and we have just computed $L^{(s)}$. As for $L^{(d)}$, observe that $d$ takes on the values $m / 4$, $m / 8$, $m / 16$, $\\ldots$, $1$, and again, we computed all of these $L$ matrices in the first  while  loop. Thus, the claim is proven. Each of the two  while  loops iterates $\\Theta(\\lg m^*)$ times. Since we have already computed the parameters to each call of $\\text{EXTEND-SHORTEST-PATHS}$, each iteration is dominated by the $\\Theta(n^3)$-time call to $\\text{EXTEND-SHORTEST-PATHS}$. Thus, the total time is $\\Theta(n^3\\lg m^*)$.  In general, therefore, the running time is $\\Theta(n^3\\lg\\min(n, m^*))$.  Space  The slower algorithm needs to keep only three matrices at any time, and so its space requirement is $\\Theta(n^3)$. This faster algorithm needs to maintain $\\Theta(\\lg\\min(n, m^*))$ matrices, and so the space requirement increases to $\\Theta(n^3\\lg\\min(n, m^*))$.",
            "title": "25.1-10"
        },
        {
            "location": "/Chap25/25.2/",
            "text": "25.2-1\n\n\n\n\nRun the Floyd-Warshall algorithm on the weighted, directed graph of Figure 25.2. Show the matrix $D^{(k)}$ that results for each iteration of the outer loop.\n\n\n\n\n$k = 1$:\n\n\n\\begin{pmatrix}\n     0 & \\infty & \\infty & \\infty &     -1 & \\infty \\\\\n     1 &      0 & \\infty &      2 &      0 & \\infty \\\\\n\\infty &      2 &      0 & \\infty & \\infty &     -8 \\\\\n    -4 & \\infty & \\infty &      0 &     -5 & \\infty \\\\\n\\infty &      7 & \\infty & \\infty &      0 & \\infty \\\\\n\\infty &      5 &     10 & \\infty & \\infty & 0\n\\end{pmatrix}\n\n\n$k = 2$:\n\n\n\\begin{pmatrix}\n 0 & \\infty & \\infty & \\infty & -1 & \\infty \\\\\n 1 &      0 & \\infty &      2 &  0 & \\infty \\\\\n 3 &      2 &      0 &      4 &  2 & -    8 \\\\\n-4 & \\infty & \\infty &      0 & -5 & \\infty \\\\\n 8 &      7 & \\infty &      9 &  0 & \\infty \\\\\n 6 &      5 &     10 &      7 &  5 & 0\n\\end{pmatrix}\n\n\n$k = 3$:\n\n\n\\begin{pmatrix}\n 0 & \\infty & \\infty & \\infty & -1 & \\infty \\\\\n 1 &      0 & \\infty &      2 &  0 & \\infty \\\\\n 3 &      2 &      0 &      4 &  2 &     -8 \\\\\n-4 & \\infty & \\infty &      0 & -5 & \\infty \\\\\n 8 &      7 & \\infty &      9 &  0 & \\infty \\\\\n 6 &      5 &     10 &      7 &  5 & 0\n\\end{pmatrix}\n\n\n$k = 4$:\n\n\n\\begin{pmatrix}\n 0 & \\infty & \\infty & \\infty & -1 & \\infty \\\\\n-2 &      0 & \\infty &      2 & -3 & \\infty \\\\\n 0 &      2 &      0 &      4 & -1 &     -8 \\\\\n-4 & \\infty & \\infty &      0 & -5 & \\infty \\\\\n 5 &      7 & \\infty &      9 &  0 & \\infty \\\\\n 3 &      5 &     10 &      7 &  2 & 0\n\\end{pmatrix}\n\n\n$k = 5$:\n\n\n\\begin{pmatrix}\n 0 & 6 & \\infty & 8 & -1 & \\infty \\\\\n-2 & 0 & \\infty & 2 & -3 & \\infty \\\\\n 0 & 2 &      0 & 4 & -1 &     -8 \\\\\n-4 & 2 & \\infty & 0 & -5 & \\infty \\\\\n 5 & 7 & \\infty & 9 &  0 & \\infty \\\\\n 3 & 5 &     10 & 7 &  2 & 0\n\\end{pmatrix}\n\n\n$k = 6$:\n\n\n\\begin{pmatrix}\n 0 &  6 & \\infty &  8 & -1 & \\infty \\\\\n-2 &  0 & \\infty &  2 & -3 & \\infty \\\\\n-5 & -3 &      0 & -1 & -6 &     -8 \\\\\n-4 &  2 & \\infty &  0 & -5 & \\infty \\\\\n 5 &  7 & \\infty &  9 &  0 & \\infty \\\\\n 3 &  5 &     10 &  7 &  2 & 0\n\\end{pmatrix}\n\n\n25.2-2\n\n\n\n\nShow how to compute the transitive closure using the technique of Section 25.1.\n\n\n\n\nWe set $w_{ij} = 1$ if $(i, j)$ is an edge, and $w_{ij} = 0$ otherwise. Then we replace line 7 of $\\text{EXTEND-SHORTEST-PATHS}(L, W)$ by $l''_{ij} = l''_{ij} \\lor (l_{ik} \\land w_{kj})$. Then run the $\\text{SLOW-ALL-PAIRS-SHORTEST-PATHS}$ algorithm.\n\n\n25.2-3\n\n\n\n\nModify the $\\text{FLOYD-WARSHALL}$ procedure to compute the $\\prod^{(k)}$ matrices according to equations $\\text{(25.6)}$ and $\\text{(25.7)}$. Prove rigorously that for all $i \\in V$, the predecessor subgraph $G_{\\pi, i}$ is a shortest-paths tree with root $i$. ($\\textit{Hint:}$ To show that $G_{\\pi, i}$ is acyclic, first show that $\\pi_{ij}^{(k)} = l$ implies $d_{ij}^{(k)} \\ge d_{il}^{(k)} + w_{lj}$, according to the definition of $\\pi_{ij}^{(k)}$. Then, adapt the proof of Lemma 23.16.)\n\n\n\n\nMOD-FLOYD-WARSHALL(W)\n    n = W.rows\n    D^0 = W\n    PI^0 is a matrix with NIL in every entry\n    for i = 1 to n\n        for j = 1 to n\n            if i \u2260 j and D^0_{i, j} < \u221e\n                PI^0_{i, j} = i\n    for k = 1 to n\n        let D^k be a new n \u00d7 n matrix.\n        let PI^k be a new n \u00d7 n matrix\n        for i = 1 to n\n            for j = 1 to n\n                if d^{k - 1}_{ij} \u2264 d^{k - 1}_{ik} + d^{k - 1}_{kj}\n                    d^k_{ij} = d^{k - 1}_{ij}\n                    PI^k_{ij} = PI^{k - 1}_{ij}\n                else\n                    d^k_{ij} = d^{k - 1}_{ik} + d^{k - 1}_{kj}\n                    PI^k_{ij} = PI^{k - 1}_{kj}\n\n\n\n\nIn order to have that $\\pi^{(k)}_{ij} = l$, we need that $d^{(k)}_{ij} \\ge d^{(k)}_{il} + w_{lj}$. To see this fact, we will note that having $\\pi^{(k)}_{ij} = l$ means that a shortest path from $i$ to $j$ last goes through $l$. A path that last goes through $l$ corresponds to taking a chepest path from $i$ to $l$ and then following the single edge from $l$ to $j$. However, This means that $d_{il} \\le d_{ij} - w_{ij}$, which we can rearrange to get the desired inequality. We can just continue following this inequality\naround, and if we ever get some cycle, $i_1, i_2, \\ldots, i_c$, then we would have that $d_{ii_1} \\le d_{ii_1} + w_{i_1i_2} + w_{i_2i_3} + \\cdots + w_{i_ci_1}$. So, if we subtract the common term sfrom both sides, we get that $0 \\le w_{i_ci_1} + \\sum_{q = 1}^{c - 1} w_{i_qi_{q + 1}}$. So, we have that we would only have a cycle in the precedessor graph if we ahvt that there is a zero weight cycle in the original graph. However, we would never have to go around the weight zero cycle since the constructed path of shortest weight favors ones with a fewer number of edges because of the way that we handle the equality case in equation $\\text{(25.7)}$.\n\n\n25.2-4\n\n\n\n\nAs it appears above, the Floyd-Warshall algorithm requires $\\Theta(n^3)$ space, since we compute $d_{ij}^{(k)}$ for $i, j, k = 1, 2, \\ldots, n$. Show that the following procedure, which simply drops all the superscripts, is correct, and thus only $\\Theta(n^2)$ space is required.\n\n\nFLOYD\n-\nWARSHALL\n'\n(\nW\n)\n\n    \nn\n \n=\n \nW\n.\nrows\n\n    \nD\n \n=\n \nW\n\n    \nfor\n \nk\n \n=\n \n1\n \nto\n \nn\n\n        \nfor\n \ni\n \n=\n \n1\n \nto\n \nn\n\n            \nfor\n \nj\n \n=\n \n1\n \nto\n \nn\n\n                \nd\n[\ni\n][\nj\n]\n \n=\n \nmin\n(\nd\n[\ni\n][\nj\n],\n \nd\n[\ni\n][\nk\n]\n \n+\n \nd\n[\nk\n][\nj\n])\n\n    \nreturn\n \nD\n\n\n\n\n\n\n\nWith the superscripts, the computation is $d_{ij}^{(k)} = \\min(d_{ij}^{(k - 1)}, d_{ik}^{(k - 1)} + d_{kj}^{(k - 1)})$. If, having dropped the superscripts, we were to compute and store $d_{ik}$ or $d_{kj}$ before using these values to compute $d_{ij}$, we might be computing one of the following:\n\n\n\\begin{align}\nd_{ij}^{(k)} & = \\min(d_{ij}^{(k - 1)}, d_{ik}^{(k)} + d_{kj}^{(k - 1)}), \\\\\nd_{ij}^{(k)} & = \\min(d_{ij}^{(k - 1)}, d_{ik}^{(k - 1)} + d_{kj}^{(k)}), \\\\\nd_{ij}^{(k)} & = \\min(d_{ij}^{(k - 1)}, d_{ik}^{(k)} + d_{kj}^{(k)}),\n\\end{align}\n\n\nIn any of these scenarios, we're computing the weight of a shortest path from $i$ to $j$ with all intermediate vertices in $\\{1, 2, \\ldots, k\\}$. If we use $d_{ik}^{(k)}$, rather than $d_{ik}^{(k - 1)}$, in the computation, then we're using a subpath from $i$ to $k$ with all intermediate vertices in $\\{1, 2, \\ldots, k\\}$. But $k$ cannot be an \nintermediate\n vertex on a shortest path from $i$ to $k$, since otherwise there would be a cycle on this shortest path. Thus, $d_{ik}^{(k)} = d_{ik}^{(k - 1)}$. A similar argument applies to show that $d_{kj}^{(k)} = d_{kj}^{(k - 1)}$. Hence, we can drop the superscripts in the computation.\n\n\n25.2-5\n\n\n\n\nSuppose that we modify the way in which equation $\\text{(25.7)}$ handles equality:\n\n\n$$\n\\pi_{ij}^{(k)} =\n\\begin{cases}\n\\pi_{ij}^{(k - 1)} & \\text{ if } d_{ij}^{(k - 1)} <   d_{ik}^{(k - 1)} + d_{kj}^{(k - 1)}, \\\\\n\\pi_{kj}^{(k - 1)} & \\text{ if } d_{ij}^{(k - 1)} \\ge d_{ik}^{(k - 1)} + d_{kj}^{(k - 1)}.\n\\end{cases}\n$$\n\n\nIs this alternative definition of the predecessor matrix $\\prod$ correct?\n\n\n\n\nIf we change the way that we handle the equality case, we will still be generating a the correct values for the $\\pi$ matrix. This is because updating the $\\pi$ values to make paths that are longer but still tied for the lowest weight. Making $\\pi_{ij} = \\pi_{kj}$ means that we are making the shortest path from $i$ to $j$ passes through $k$ at some point. This has the same cost as just going from $i$ to $j$, since $d_{ij} = d_{ik} + d_{kj}$.\n\n\n25.2-6\n\n\n\n\nHow can we use the output of the Floyd-Warshall algorithm to detect the presence of a negative-weight cycle?\n\n\n\n\nHere are two ways to detect negative-weight cycles:\n\n\n\n\n\n\nCheck the main-diagonal entries of the result matrix for a negative value. There is a negative weight cycle if and only if $d_{ii}^{(n)} < 0$ for some vertex $i$:\n\n\n\n\n$d_{ii}^{(n)}$ is a path weight from $i$ to itself; so if it is negative, there is a path from $i$ to itself (i.e., a cycle), with negative weight.\n\n\nIf there is a negative-weight cycle, consider the one with the fewest vertices.  \n\n\nIf it has just one vertex, then some $w_{ii} < 0$, so $d_{ii}$ starts out negative, and since $d$ values are never increased, it is also negative when the algorithm terminates.\n\n\nIf it has at least two vertices, let $k$ be the highest-numbered vertex in the cycle, and let $i$ be some other vertex in the cycle. $d_{ik}^{(k - 1)}$ and $d_{ki}^{(k - 1)}$ have correct shortest-path weights, because they are not based on negativeweight cycles. (Neither $d_{ik}^{(k - 1)}$ nor $d_{ki}^{(k - 1)}$ can include $k$ as an intermediate vertex, and $i$ and $k$ are on the negative-weight cycle with the fewest vertices.) Since $i \\leadsto k \\leadsto i$ is a negative-weight cycle, the sum of those two weights is negative, so $d_{ii}^{(k)}$ will be set to a negative value. Since $d$ values are never increased, it is also negative when the algorithm terminates.\n\n\n\n\n\n\n\n\nIn fact, it suffices to check whether $d_{ii}^{(n - 1)} < 0$ for some vertex $i$. Here's why. A negative-weight cycle containing vertex $i$ either contains vertex $n$ or it does not. If it does not, then clearly $d_{ii}^{(n - 1)} < 0$. If the negative-weight cycle contains vertex $n$, then consider $d_{nn}^{(n - 1)}$. This value must be negative, since the cycle, starting and ending at vertex $n$, does not include vertex $n$ as an intermediate vertex. \n\n\n\n\n\n\nAlternatively, one could just run the normal $\\text{FLOYD-WARSHALL}$ algorithm one extra iteration to see if any of the $d$ values change. If there are negative cycles, then some shortest-path cost will be cheaper. If there are no such cycles, then no $d$ values will change because the algorithm gives the correct shortest paths.\n\n\n\n\n\n\n25.2-7\n\n\n\n\nAnother way to reconstruct shortest paths in the Floyd-Warshall algorithm uses values $\\phi_{ij}^{(k)}$ for $i, j, k = 1, 2, \\ldots, n$, where $\\phi_{ij}^{(k)}$ is the highest-numbered intermediate vertex of a shortest path from $i$ to $j$ in which all intermediate vertices are in the set $\\{1, 2, \\ldots, k \\}$. Give a recursive formulation for $\\phi_{ij}^{(k)}$, modify the $\\text{FLOYD-WARSHALL}$ procedure to compute the $\\phi_{ij}^{(k)}$ values, and rewrite the $\\text{PRINT-ALLPAIRS-SHORTEST-PATH}$ procedure to take the matrix $\\Phi = (\\phi_{ij}^{(n)})$ as an input. How is the matrix $\\Phi$ like the $s$ table in the matrix-chain multiplication problem of Section 15.2?\n\n\n\n\nWe can recursively compute the values of $\\phi_{ij}^{(n)}$ by, letting it be $\\phi_{ij}^{(k - 1)}$ if $d(k) + d_{ik}^{(k)} + d_{ik}^{(k)} \\ge d_{ij}(k - 1)$, and otherwise, let it be $k$. This works correctly because it perfectly captures whether we decided to use vertex $k$ when we were repeatedly allowing ourselves use of each vertex one at a time. To modify Floyd-Warshall to compute this, we would just need to stick within the innermost for loop, something that computes $\\phi(k)$ by this recursive rule, this would only be a constant amount of work in this innermost for loop, and so would not cause the asymptotic runtime to increase. It is similar to the s table in matrix-chain multiplication because it is computed by a similar recurrence.\n\n\nIf we already have the $n^3$ values in $\\phi_{ij}^{(k)}$ provided, then we can reconstruct the shortest path from $i$ to $j$ because we know that the largest vertex in the path from $i$ to $j$ is $\\phi_{ij}^{(n)}$, call it $a_1$. Then, we know that the largest vertex in the path before $a_1$ will be $\\phi_{ia_1}^{(a_1 - 1)}$ and the largest after $a_1$ will be $\\phi_{a_1j}^{(a_1 - 1)}$. By continuing to recurse until we get that the largest element showing up at some point is $\\text{NIL}$, we will be able to continue subdividing the path until it is entirely constructed.\n\n\n25.2-8\n\n\n\n\nGive an $O(VE)$-time algorithm for computing the transitive closure of a directed\ngraph $G = (V, E)$.\n\n\n\n\nCreate an $n$ by $n$ matrix $A$ filled with $0$'s. We are done if we can determine the vertices reachable from a particular vertex in $O(E)$ time, since we can just compute this for each $v \\in V$. To do this, assign each edge weight $1$. Then we have $\\delta(v, u) \\le |E|$ for all $u \\in V$. By Problem 24-4 (a) we can compute $\\delta(v, u)$ in $O(E)$ forall $u \\in V$. If $\\delta(v, u) < \\infty$, set $A_{ij} = 1$. Otherwise, leave it as $0$.\n\n\n25.2-9\n\n\n\n\nSuppose that we can compute the transitive closure of a directed acyclic graph in $f(|V|, |E|)$ time, where $f$ is a monotonically increasing function of $|V|$ and $|E|$. Show that the time to compute the transitive closure $G' = (V, E')$ of a general directed graph $G = (V, E)$ is then $f(|V|, |E|) + O(V + E')$.\n\n\n\n\nFirst, compute the strongly connected components of the directed graph, and look at it's component graph. This component graph is going to be acyclic and have at most as many vertices and at most as many edges as the original graph. Since it is acyclic, we can run our transitive closure algorithm on it. Then, for every edge $(S_1, S_2)$ that shows up in the transitive closure of the component graph, we add an edge from each vertex in $S_1$ to a vertex in $S_2$. This takes time equal to $O(V + E')$. So, the total time required is $\\le f(|V|, |E|) + O(V + E)$.",
            "title": "25.2 The Floyd-Warshall algorithm"
        },
        {
            "location": "/Chap25/25.2/#252-1",
            "text": "Run the Floyd-Warshall algorithm on the weighted, directed graph of Figure 25.2. Show the matrix $D^{(k)}$ that results for each iteration of the outer loop.   $k = 1$:  \\begin{pmatrix}\n     0 & \\infty & \\infty & \\infty &     -1 & \\infty \\\\\n     1 &      0 & \\infty &      2 &      0 & \\infty \\\\\n\\infty &      2 &      0 & \\infty & \\infty &     -8 \\\\\n    -4 & \\infty & \\infty &      0 &     -5 & \\infty \\\\\n\\infty &      7 & \\infty & \\infty &      0 & \\infty \\\\\n\\infty &      5 &     10 & \\infty & \\infty & 0\n\\end{pmatrix}  $k = 2$:  \\begin{pmatrix}\n 0 & \\infty & \\infty & \\infty & -1 & \\infty \\\\\n 1 &      0 & \\infty &      2 &  0 & \\infty \\\\\n 3 &      2 &      0 &      4 &  2 & -    8 \\\\\n-4 & \\infty & \\infty &      0 & -5 & \\infty \\\\\n 8 &      7 & \\infty &      9 &  0 & \\infty \\\\\n 6 &      5 &     10 &      7 &  5 & 0\n\\end{pmatrix}  $k = 3$:  \\begin{pmatrix}\n 0 & \\infty & \\infty & \\infty & -1 & \\infty \\\\\n 1 &      0 & \\infty &      2 &  0 & \\infty \\\\\n 3 &      2 &      0 &      4 &  2 &     -8 \\\\\n-4 & \\infty & \\infty &      0 & -5 & \\infty \\\\\n 8 &      7 & \\infty &      9 &  0 & \\infty \\\\\n 6 &      5 &     10 &      7 &  5 & 0\n\\end{pmatrix}  $k = 4$:  \\begin{pmatrix}\n 0 & \\infty & \\infty & \\infty & -1 & \\infty \\\\\n-2 &      0 & \\infty &      2 & -3 & \\infty \\\\\n 0 &      2 &      0 &      4 & -1 &     -8 \\\\\n-4 & \\infty & \\infty &      0 & -5 & \\infty \\\\\n 5 &      7 & \\infty &      9 &  0 & \\infty \\\\\n 3 &      5 &     10 &      7 &  2 & 0\n\\end{pmatrix}  $k = 5$:  \\begin{pmatrix}\n 0 & 6 & \\infty & 8 & -1 & \\infty \\\\\n-2 & 0 & \\infty & 2 & -3 & \\infty \\\\\n 0 & 2 &      0 & 4 & -1 &     -8 \\\\\n-4 & 2 & \\infty & 0 & -5 & \\infty \\\\\n 5 & 7 & \\infty & 9 &  0 & \\infty \\\\\n 3 & 5 &     10 & 7 &  2 & 0\n\\end{pmatrix}  $k = 6$:  \\begin{pmatrix}\n 0 &  6 & \\infty &  8 & -1 & \\infty \\\\\n-2 &  0 & \\infty &  2 & -3 & \\infty \\\\\n-5 & -3 &      0 & -1 & -6 &     -8 \\\\\n-4 &  2 & \\infty &  0 & -5 & \\infty \\\\\n 5 &  7 & \\infty &  9 &  0 & \\infty \\\\\n 3 &  5 &     10 &  7 &  2 & 0\n\\end{pmatrix}",
            "title": "25.2-1"
        },
        {
            "location": "/Chap25/25.2/#252-2",
            "text": "Show how to compute the transitive closure using the technique of Section 25.1.   We set $w_{ij} = 1$ if $(i, j)$ is an edge, and $w_{ij} = 0$ otherwise. Then we replace line 7 of $\\text{EXTEND-SHORTEST-PATHS}(L, W)$ by $l''_{ij} = l''_{ij} \\lor (l_{ik} \\land w_{kj})$. Then run the $\\text{SLOW-ALL-PAIRS-SHORTEST-PATHS}$ algorithm.",
            "title": "25.2-2"
        },
        {
            "location": "/Chap25/25.2/#252-3",
            "text": "Modify the $\\text{FLOYD-WARSHALL}$ procedure to compute the $\\prod^{(k)}$ matrices according to equations $\\text{(25.6)}$ and $\\text{(25.7)}$. Prove rigorously that for all $i \\in V$, the predecessor subgraph $G_{\\pi, i}$ is a shortest-paths tree with root $i$. ($\\textit{Hint:}$ To show that $G_{\\pi, i}$ is acyclic, first show that $\\pi_{ij}^{(k)} = l$ implies $d_{ij}^{(k)} \\ge d_{il}^{(k)} + w_{lj}$, according to the definition of $\\pi_{ij}^{(k)}$. Then, adapt the proof of Lemma 23.16.)   MOD-FLOYD-WARSHALL(W)\n    n = W.rows\n    D^0 = W\n    PI^0 is a matrix with NIL in every entry\n    for i = 1 to n\n        for j = 1 to n\n            if i \u2260 j and D^0_{i, j} < \u221e\n                PI^0_{i, j} = i\n    for k = 1 to n\n        let D^k be a new n \u00d7 n matrix.\n        let PI^k be a new n \u00d7 n matrix\n        for i = 1 to n\n            for j = 1 to n\n                if d^{k - 1}_{ij} \u2264 d^{k - 1}_{ik} + d^{k - 1}_{kj}\n                    d^k_{ij} = d^{k - 1}_{ij}\n                    PI^k_{ij} = PI^{k - 1}_{ij}\n                else\n                    d^k_{ij} = d^{k - 1}_{ik} + d^{k - 1}_{kj}\n                    PI^k_{ij} = PI^{k - 1}_{kj}  In order to have that $\\pi^{(k)}_{ij} = l$, we need that $d^{(k)}_{ij} \\ge d^{(k)}_{il} + w_{lj}$. To see this fact, we will note that having $\\pi^{(k)}_{ij} = l$ means that a shortest path from $i$ to $j$ last goes through $l$. A path that last goes through $l$ corresponds to taking a chepest path from $i$ to $l$ and then following the single edge from $l$ to $j$. However, This means that $d_{il} \\le d_{ij} - w_{ij}$, which we can rearrange to get the desired inequality. We can just continue following this inequality\naround, and if we ever get some cycle, $i_1, i_2, \\ldots, i_c$, then we would have that $d_{ii_1} \\le d_{ii_1} + w_{i_1i_2} + w_{i_2i_3} + \\cdots + w_{i_ci_1}$. So, if we subtract the common term sfrom both sides, we get that $0 \\le w_{i_ci_1} + \\sum_{q = 1}^{c - 1} w_{i_qi_{q + 1}}$. So, we have that we would only have a cycle in the precedessor graph if we ahvt that there is a zero weight cycle in the original graph. However, we would never have to go around the weight zero cycle since the constructed path of shortest weight favors ones with a fewer number of edges because of the way that we handle the equality case in equation $\\text{(25.7)}$.",
            "title": "25.2-3"
        },
        {
            "location": "/Chap25/25.2/#252-4",
            "text": "As it appears above, the Floyd-Warshall algorithm requires $\\Theta(n^3)$ space, since we compute $d_{ij}^{(k)}$ for $i, j, k = 1, 2, \\ldots, n$. Show that the following procedure, which simply drops all the superscripts, is correct, and thus only $\\Theta(n^2)$ space is required.  FLOYD - WARSHALL ' ( W ) \n     n   =   W . rows \n     D   =   W \n     for   k   =   1   to   n \n         for   i   =   1   to   n \n             for   j   =   1   to   n \n                 d [ i ][ j ]   =   min ( d [ i ][ j ],   d [ i ][ k ]   +   d [ k ][ j ]) \n     return   D    With the superscripts, the computation is $d_{ij}^{(k)} = \\min(d_{ij}^{(k - 1)}, d_{ik}^{(k - 1)} + d_{kj}^{(k - 1)})$. If, having dropped the superscripts, we were to compute and store $d_{ik}$ or $d_{kj}$ before using these values to compute $d_{ij}$, we might be computing one of the following:  \\begin{align}\nd_{ij}^{(k)} & = \\min(d_{ij}^{(k - 1)}, d_{ik}^{(k)} + d_{kj}^{(k - 1)}), \\\\\nd_{ij}^{(k)} & = \\min(d_{ij}^{(k - 1)}, d_{ik}^{(k - 1)} + d_{kj}^{(k)}), \\\\\nd_{ij}^{(k)} & = \\min(d_{ij}^{(k - 1)}, d_{ik}^{(k)} + d_{kj}^{(k)}),\n\\end{align}  In any of these scenarios, we're computing the weight of a shortest path from $i$ to $j$ with all intermediate vertices in $\\{1, 2, \\ldots, k\\}$. If we use $d_{ik}^{(k)}$, rather than $d_{ik}^{(k - 1)}$, in the computation, then we're using a subpath from $i$ to $k$ with all intermediate vertices in $\\{1, 2, \\ldots, k\\}$. But $k$ cannot be an  intermediate  vertex on a shortest path from $i$ to $k$, since otherwise there would be a cycle on this shortest path. Thus, $d_{ik}^{(k)} = d_{ik}^{(k - 1)}$. A similar argument applies to show that $d_{kj}^{(k)} = d_{kj}^{(k - 1)}$. Hence, we can drop the superscripts in the computation.",
            "title": "25.2-4"
        },
        {
            "location": "/Chap25/25.2/#252-5",
            "text": "Suppose that we modify the way in which equation $\\text{(25.7)}$ handles equality:  $$\n\\pi_{ij}^{(k)} =\n\\begin{cases}\n\\pi_{ij}^{(k - 1)} & \\text{ if } d_{ij}^{(k - 1)} <   d_{ik}^{(k - 1)} + d_{kj}^{(k - 1)}, \\\\\n\\pi_{kj}^{(k - 1)} & \\text{ if } d_{ij}^{(k - 1)} \\ge d_{ik}^{(k - 1)} + d_{kj}^{(k - 1)}.\n\\end{cases}\n$$  Is this alternative definition of the predecessor matrix $\\prod$ correct?   If we change the way that we handle the equality case, we will still be generating a the correct values for the $\\pi$ matrix. This is because updating the $\\pi$ values to make paths that are longer but still tied for the lowest weight. Making $\\pi_{ij} = \\pi_{kj}$ means that we are making the shortest path from $i$ to $j$ passes through $k$ at some point. This has the same cost as just going from $i$ to $j$, since $d_{ij} = d_{ik} + d_{kj}$.",
            "title": "25.2-5"
        },
        {
            "location": "/Chap25/25.2/#252-6",
            "text": "How can we use the output of the Floyd-Warshall algorithm to detect the presence of a negative-weight cycle?   Here are two ways to detect negative-weight cycles:    Check the main-diagonal entries of the result matrix for a negative value. There is a negative weight cycle if and only if $d_{ii}^{(n)} < 0$ for some vertex $i$:   $d_{ii}^{(n)}$ is a path weight from $i$ to itself; so if it is negative, there is a path from $i$ to itself (i.e., a cycle), with negative weight.  If there is a negative-weight cycle, consider the one with the fewest vertices.    If it has just one vertex, then some $w_{ii} < 0$, so $d_{ii}$ starts out negative, and since $d$ values are never increased, it is also negative when the algorithm terminates.  If it has at least two vertices, let $k$ be the highest-numbered vertex in the cycle, and let $i$ be some other vertex in the cycle. $d_{ik}^{(k - 1)}$ and $d_{ki}^{(k - 1)}$ have correct shortest-path weights, because they are not based on negativeweight cycles. (Neither $d_{ik}^{(k - 1)}$ nor $d_{ki}^{(k - 1)}$ can include $k$ as an intermediate vertex, and $i$ and $k$ are on the negative-weight cycle with the fewest vertices.) Since $i \\leadsto k \\leadsto i$ is a negative-weight cycle, the sum of those two weights is negative, so $d_{ii}^{(k)}$ will be set to a negative value. Since $d$ values are never increased, it is also negative when the algorithm terminates.     In fact, it suffices to check whether $d_{ii}^{(n - 1)} < 0$ for some vertex $i$. Here's why. A negative-weight cycle containing vertex $i$ either contains vertex $n$ or it does not. If it does not, then clearly $d_{ii}^{(n - 1)} < 0$. If the negative-weight cycle contains vertex $n$, then consider $d_{nn}^{(n - 1)}$. This value must be negative, since the cycle, starting and ending at vertex $n$, does not include vertex $n$ as an intermediate vertex.     Alternatively, one could just run the normal $\\text{FLOYD-WARSHALL}$ algorithm one extra iteration to see if any of the $d$ values change. If there are negative cycles, then some shortest-path cost will be cheaper. If there are no such cycles, then no $d$ values will change because the algorithm gives the correct shortest paths.",
            "title": "25.2-6"
        },
        {
            "location": "/Chap25/25.2/#252-7",
            "text": "Another way to reconstruct shortest paths in the Floyd-Warshall algorithm uses values $\\phi_{ij}^{(k)}$ for $i, j, k = 1, 2, \\ldots, n$, where $\\phi_{ij}^{(k)}$ is the highest-numbered intermediate vertex of a shortest path from $i$ to $j$ in which all intermediate vertices are in the set $\\{1, 2, \\ldots, k \\}$. Give a recursive formulation for $\\phi_{ij}^{(k)}$, modify the $\\text{FLOYD-WARSHALL}$ procedure to compute the $\\phi_{ij}^{(k)}$ values, and rewrite the $\\text{PRINT-ALLPAIRS-SHORTEST-PATH}$ procedure to take the matrix $\\Phi = (\\phi_{ij}^{(n)})$ as an input. How is the matrix $\\Phi$ like the $s$ table in the matrix-chain multiplication problem of Section 15.2?   We can recursively compute the values of $\\phi_{ij}^{(n)}$ by, letting it be $\\phi_{ij}^{(k - 1)}$ if $d(k) + d_{ik}^{(k)} + d_{ik}^{(k)} \\ge d_{ij}(k - 1)$, and otherwise, let it be $k$. This works correctly because it perfectly captures whether we decided to use vertex $k$ when we were repeatedly allowing ourselves use of each vertex one at a time. To modify Floyd-Warshall to compute this, we would just need to stick within the innermost for loop, something that computes $\\phi(k)$ by this recursive rule, this would only be a constant amount of work in this innermost for loop, and so would not cause the asymptotic runtime to increase. It is similar to the s table in matrix-chain multiplication because it is computed by a similar recurrence.  If we already have the $n^3$ values in $\\phi_{ij}^{(k)}$ provided, then we can reconstruct the shortest path from $i$ to $j$ because we know that the largest vertex in the path from $i$ to $j$ is $\\phi_{ij}^{(n)}$, call it $a_1$. Then, we know that the largest vertex in the path before $a_1$ will be $\\phi_{ia_1}^{(a_1 - 1)}$ and the largest after $a_1$ will be $\\phi_{a_1j}^{(a_1 - 1)}$. By continuing to recurse until we get that the largest element showing up at some point is $\\text{NIL}$, we will be able to continue subdividing the path until it is entirely constructed.",
            "title": "25.2-7"
        },
        {
            "location": "/Chap25/25.2/#252-8",
            "text": "Give an $O(VE)$-time algorithm for computing the transitive closure of a directed\ngraph $G = (V, E)$.   Create an $n$ by $n$ matrix $A$ filled with $0$'s. We are done if we can determine the vertices reachable from a particular vertex in $O(E)$ time, since we can just compute this for each $v \\in V$. To do this, assign each edge weight $1$. Then we have $\\delta(v, u) \\le |E|$ for all $u \\in V$. By Problem 24-4 (a) we can compute $\\delta(v, u)$ in $O(E)$ forall $u \\in V$. If $\\delta(v, u) < \\infty$, set $A_{ij} = 1$. Otherwise, leave it as $0$.",
            "title": "25.2-8"
        },
        {
            "location": "/Chap25/25.2/#252-9",
            "text": "Suppose that we can compute the transitive closure of a directed acyclic graph in $f(|V|, |E|)$ time, where $f$ is a monotonically increasing function of $|V|$ and $|E|$. Show that the time to compute the transitive closure $G' = (V, E')$ of a general directed graph $G = (V, E)$ is then $f(|V|, |E|) + O(V + E')$.   First, compute the strongly connected components of the directed graph, and look at it's component graph. This component graph is going to be acyclic and have at most as many vertices and at most as many edges as the original graph. Since it is acyclic, we can run our transitive closure algorithm on it. Then, for every edge $(S_1, S_2)$ that shows up in the transitive closure of the component graph, we add an edge from each vertex in $S_1$ to a vertex in $S_2$. This takes time equal to $O(V + E')$. So, the total time required is $\\le f(|V|, |E|) + O(V + E)$.",
            "title": "25.2-9"
        },
        {
            "location": "/Chap25/25.3/",
            "text": "25.3-1\n\n\n\n\nUse Johnson's algorithm to find the shortest paths between all pairs of vertices in the graph of Figure 25.2. Show the values of $h$ and $\\hat w$ computed by the algorithm.\n\n\n\n\n\\begin{array}{c|c}\nv & h(v) \\\\\n\\hline\n1 & -5 \\\\\n2 & -3 \\\\\n3 &  0 \\\\\n4 & -1 \\\\\n5 & -6 \\\\\n6 & -8\n\\end{array}\n\n\n\\begin{array}{ccc|ccc}\nu & v & \\hat w(u, v) & u & v & \\hat w(u, v) \\\\\n\\hline\n1 & 2 & \\text{NIL} & 4 & 1 & 0          \\\\\n1 & 3 & \\text{NIL} & 4 & 2 & \\text{NIL} \\\\\n1 & 4 & \\text{NIL} & 4 & 3 & \\text{NIL} \\\\\n1 & 5 & 0          & 4 & 5 & 8          \\\\\n1 & 6 & \\text{NIL} & 4 & 6 & \\text{NIL} \\\\\n2 & 1 & 3          & 5 & 1 & \\text{NIL} \\\\\n2 & 3 & \\text{NIL} & 5 & 2 & 4          \\\\\n2 & 4 & 0          & 5 & 3 & \\text{NIL} \\\\\n2 & 5 & \\text{NIL} & 5 & 4 & \\text{NIL} \\\\\n2 & 6 & \\text{NIL} & 5 & 6 & \\text{NIL} \\\\\n3 & 1 & \\text{NIL} & 6 & 1 & \\text{NIL} \\\\\n3 & 2 & 5          & 6 & 2 & 0          \\\\\n3 & 4 & \\text{NIL} & 6 & 3 & 18         \\\\\n3 & 5 & \\text{NIL} & 6 & 4 & \\text{NIL} \\\\\n3 & 6 & 0          & 6 & 5 & \\text{NIL} \\\\\n\\end{array}\n\n\nSo, the $d_{ij}$ values that we get are\n\n\n$$\n\\begin{pmatrix}\n 0 &  6 & \\infty &  8 & -1 & \\infty \\\\\n-2 &  0 & \\infty &  2 & -3 & \\infty \\\\\n-5 & -3 &      0 & -1 & -6 &     -8 \\\\\n-4 &  2 & \\infty &  0 & -5 & \\infty \\\\\n 5 &  7 & \\infty &  9 &  0 & \\infty \\\\\n 3 &  5 &     10 &  7 &  2 &      0\n\\end{pmatrix}\n.\n$$\n\n\n25.3-2\n\n\n\n\nWhat is the purpose of adding the new vertex $s$ to $V'$, yielding $V'$?\n\n\n\n\nThis is only important when there are negative-weight cycles in the graph. Using a dummy vertex gets us around the problem of trying to compute $-\\infty + \\infty$ to find $\\hat w$. Moreover, if we had instead used a vertex $v$ in the graph instead of the new vertex $s$, then we run into trouble if a vertex fails to be reachable from $v$.\n\n\n25.3-3\n\n\n\n\nSuppose that $w(u, v) \\ge 0$ for all edges $(u, v) \\in E$. What is the relationship between the weight functions $w$ and $\\hat w$?\n\n\n\n\nIf all the edge weights are nonnegative, then the values computed as the shortest distances when running Bellman-Ford will be all zero. This is because when constructing $G'$ on the first line of Johnson's algorithm, we place an edge of weight zero from s to every other vertex. Since any path within the graph has no negative edges, its cost cannot be negative, and so, cannot beat the trivial path that goes straight from $s$ to any given vertex. Since we have that $h(u) = h(v)$ for every $u$ and $v$, the reweighting that occurs only adds and subtracts $0$, and so we have that $w(u, v) = \\hat w(u, v)$\n\n\n25.3-4\n\n\n\n\nProfessor Greenstreet claims that there is a simpler way to reweight edges than the method used in Johnson's algorithm. Letting $w^* = \\min_{(u, v) \\in E} \\{w(u, v)\\}$, just define $\\hat w(u, v) = w(u, v) - w^*$ for all edges $(u, v) \\in E$. What is wrong with the professor's method of reweighting?\n\n\n\n\nIt changes shortest paths. Consider the following graph. $V = \\{s, x, y, z\\}$, and there are 4 edges: $w(s, x) = 2$, $w(x, y) = 2$, $w(s, y) = 5$, and $w(s, z) = -10$. So we'd add $10$ to every weight to make $\\hat w$. With $w$, the shortest path from $s$ to $y$ is $s \\to x \\to y$, with weight $4$. With $\\hat w$, the shortest path from $s$ to $y$ is $s \\to y$, with weight $15$. (The path $s \\to x \\to y$ has weight $24$.) The problem is that by just adding the same amount to every edge, you penalize paths with more edges, even if their weights are low.\n\n\n25.3-5\n\n\n\n\nSuppose that we run Johnson's algorithm on a directed graph $G$ with weight function $w$. Show that if $G$ contains a $0$-weight cycle $c$, then $\\hat w(u, v) = 0$ for every edge $(u, v)$ in $c$.\n\n\n\n\nIf $\\delta(s, v) - \\delta(s, u) \\le w(u, v)$, we have\n\n\n$$\\delta(s, u) \\le \\delta(s, v) + (0 - w(u, v)) < \\delta(s, u) + w(u, v) - w(u, v) = \\delta(s, u),$$\n\n\nwhich is impossible, thus $\\delta(s, v) - \\delta(s, u) = w(u, v)$, $\\hat w(u, v) = w(u, v) + \\delta(s, u) - \\delta(s, v) = 0$.\n\n\n25.3-6\n\n\n\n\nProfessor Michener claims that there is no need to create a new source vertex in line 1 of $\\text{JOHNSON}$. He claims that instead we can just use $G' = G$ and let $s$ be any vertex. Give an example of a weighted, directed graph $G$ for which incorporating the professor's idea into $\\text{JOHNSON}$ causes incorrect answers. Then show that if $G$ is strongly connected (every vertex is reachable from every other vertex), the results returned by $\\text{JOHNSON}$ with the professor's modification are correct.\n\n\n\n\nIn this solution, we assume that $\\infty - \\infty$ is undefined, in particular, it's not $0$.\n\n\nLet $G = (V, E)$, where $V = {s, u}$, $E = \\{(u, s)\\}$, and $w(u, s) = 0$. There is only one edge, and it enters $s$. When we run Bellman-Ford from $s$, we get $h(s) = \\delta(s, s) = 0$ and $h(u) = \\delta(s, u) = \\infty$. When we reweight, we get $\\hat w(u, s) = 0 + \\infty - 0 = \\infty$. We compute $\\hat\\delta(u, s) = \\infty$, and so we compute $d_{us} = \\infty + 0 - \\infty \\ne 0$. Since $\\delta(u, s) = 0$, we get an incorrect answer.\n\n\nIf the graph $G$ is strongly connected, then we get $h(v) = \\delta(s, v) < \\infty$ for all vertices $v \\in V$. Thus, the triangle inequality says that $h(v) \\le h(u) + w(u, v)$ for all edges $(u, v) \\in E$, and so $\\hat w(u, v) = w(u, v) + h(u) - h(v) \\ge 0$. Moreover, all edge weights $\\hat w(u, v)$ used in Lemma 25.1 are finite, and so the lemma holds. Therefore, the conditions we need in order to use Johnson's algorithm hold: that reweighting does not change shortest paths, and that all edge weights $\\hat w(u, v)$ are nonnegative. Again relying on $G$ being strongly connected, we get that $\\hat\\delta(u, v) < \\infty$ for all edges $(u, v) \\in E$, which means that $d_{uv} = \\hat\\delta(u, v) + h(v) - h(u)$ is finite and correct.",
            "title": "25.3 Johnson's algorithm for sparse graphs"
        },
        {
            "location": "/Chap25/25.3/#253-1",
            "text": "Use Johnson's algorithm to find the shortest paths between all pairs of vertices in the graph of Figure 25.2. Show the values of $h$ and $\\hat w$ computed by the algorithm.   \\begin{array}{c|c}\nv & h(v) \\\\\n\\hline\n1 & -5 \\\\\n2 & -3 \\\\\n3 &  0 \\\\\n4 & -1 \\\\\n5 & -6 \\\\\n6 & -8\n\\end{array}  \\begin{array}{ccc|ccc}\nu & v & \\hat w(u, v) & u & v & \\hat w(u, v) \\\\\n\\hline\n1 & 2 & \\text{NIL} & 4 & 1 & 0          \\\\\n1 & 3 & \\text{NIL} & 4 & 2 & \\text{NIL} \\\\\n1 & 4 & \\text{NIL} & 4 & 3 & \\text{NIL} \\\\\n1 & 5 & 0          & 4 & 5 & 8          \\\\\n1 & 6 & \\text{NIL} & 4 & 6 & \\text{NIL} \\\\\n2 & 1 & 3          & 5 & 1 & \\text{NIL} \\\\\n2 & 3 & \\text{NIL} & 5 & 2 & 4          \\\\\n2 & 4 & 0          & 5 & 3 & \\text{NIL} \\\\\n2 & 5 & \\text{NIL} & 5 & 4 & \\text{NIL} \\\\\n2 & 6 & \\text{NIL} & 5 & 6 & \\text{NIL} \\\\\n3 & 1 & \\text{NIL} & 6 & 1 & \\text{NIL} \\\\\n3 & 2 & 5          & 6 & 2 & 0          \\\\\n3 & 4 & \\text{NIL} & 6 & 3 & 18         \\\\\n3 & 5 & \\text{NIL} & 6 & 4 & \\text{NIL} \\\\\n3 & 6 & 0          & 6 & 5 & \\text{NIL} \\\\\n\\end{array}  So, the $d_{ij}$ values that we get are  $$\n\\begin{pmatrix}\n 0 &  6 & \\infty &  8 & -1 & \\infty \\\\\n-2 &  0 & \\infty &  2 & -3 & \\infty \\\\\n-5 & -3 &      0 & -1 & -6 &     -8 \\\\\n-4 &  2 & \\infty &  0 & -5 & \\infty \\\\\n 5 &  7 & \\infty &  9 &  0 & \\infty \\\\\n 3 &  5 &     10 &  7 &  2 &      0\n\\end{pmatrix}\n.\n$$",
            "title": "25.3-1"
        },
        {
            "location": "/Chap25/25.3/#253-2",
            "text": "What is the purpose of adding the new vertex $s$ to $V'$, yielding $V'$?   This is only important when there are negative-weight cycles in the graph. Using a dummy vertex gets us around the problem of trying to compute $-\\infty + \\infty$ to find $\\hat w$. Moreover, if we had instead used a vertex $v$ in the graph instead of the new vertex $s$, then we run into trouble if a vertex fails to be reachable from $v$.",
            "title": "25.3-2"
        },
        {
            "location": "/Chap25/25.3/#253-3",
            "text": "Suppose that $w(u, v) \\ge 0$ for all edges $(u, v) \\in E$. What is the relationship between the weight functions $w$ and $\\hat w$?   If all the edge weights are nonnegative, then the values computed as the shortest distances when running Bellman-Ford will be all zero. This is because when constructing $G'$ on the first line of Johnson's algorithm, we place an edge of weight zero from s to every other vertex. Since any path within the graph has no negative edges, its cost cannot be negative, and so, cannot beat the trivial path that goes straight from $s$ to any given vertex. Since we have that $h(u) = h(v)$ for every $u$ and $v$, the reweighting that occurs only adds and subtracts $0$, and so we have that $w(u, v) = \\hat w(u, v)$",
            "title": "25.3-3"
        },
        {
            "location": "/Chap25/25.3/#253-4",
            "text": "Professor Greenstreet claims that there is a simpler way to reweight edges than the method used in Johnson's algorithm. Letting $w^* = \\min_{(u, v) \\in E} \\{w(u, v)\\}$, just define $\\hat w(u, v) = w(u, v) - w^*$ for all edges $(u, v) \\in E$. What is wrong with the professor's method of reweighting?   It changes shortest paths. Consider the following graph. $V = \\{s, x, y, z\\}$, and there are 4 edges: $w(s, x) = 2$, $w(x, y) = 2$, $w(s, y) = 5$, and $w(s, z) = -10$. So we'd add $10$ to every weight to make $\\hat w$. With $w$, the shortest path from $s$ to $y$ is $s \\to x \\to y$, with weight $4$. With $\\hat w$, the shortest path from $s$ to $y$ is $s \\to y$, with weight $15$. (The path $s \\to x \\to y$ has weight $24$.) The problem is that by just adding the same amount to every edge, you penalize paths with more edges, even if their weights are low.",
            "title": "25.3-4"
        },
        {
            "location": "/Chap25/25.3/#253-5",
            "text": "Suppose that we run Johnson's algorithm on a directed graph $G$ with weight function $w$. Show that if $G$ contains a $0$-weight cycle $c$, then $\\hat w(u, v) = 0$ for every edge $(u, v)$ in $c$.   If $\\delta(s, v) - \\delta(s, u) \\le w(u, v)$, we have  $$\\delta(s, u) \\le \\delta(s, v) + (0 - w(u, v)) < \\delta(s, u) + w(u, v) - w(u, v) = \\delta(s, u),$$  which is impossible, thus $\\delta(s, v) - \\delta(s, u) = w(u, v)$, $\\hat w(u, v) = w(u, v) + \\delta(s, u) - \\delta(s, v) = 0$.",
            "title": "25.3-5"
        },
        {
            "location": "/Chap25/25.3/#253-6",
            "text": "Professor Michener claims that there is no need to create a new source vertex in line 1 of $\\text{JOHNSON}$. He claims that instead we can just use $G' = G$ and let $s$ be any vertex. Give an example of a weighted, directed graph $G$ for which incorporating the professor's idea into $\\text{JOHNSON}$ causes incorrect answers. Then show that if $G$ is strongly connected (every vertex is reachable from every other vertex), the results returned by $\\text{JOHNSON}$ with the professor's modification are correct.   In this solution, we assume that $\\infty - \\infty$ is undefined, in particular, it's not $0$.  Let $G = (V, E)$, where $V = {s, u}$, $E = \\{(u, s)\\}$, and $w(u, s) = 0$. There is only one edge, and it enters $s$. When we run Bellman-Ford from $s$, we get $h(s) = \\delta(s, s) = 0$ and $h(u) = \\delta(s, u) = \\infty$. When we reweight, we get $\\hat w(u, s) = 0 + \\infty - 0 = \\infty$. We compute $\\hat\\delta(u, s) = \\infty$, and so we compute $d_{us} = \\infty + 0 - \\infty \\ne 0$. Since $\\delta(u, s) = 0$, we get an incorrect answer.  If the graph $G$ is strongly connected, then we get $h(v) = \\delta(s, v) < \\infty$ for all vertices $v \\in V$. Thus, the triangle inequality says that $h(v) \\le h(u) + w(u, v)$ for all edges $(u, v) \\in E$, and so $\\hat w(u, v) = w(u, v) + h(u) - h(v) \\ge 0$. Moreover, all edge weights $\\hat w(u, v)$ used in Lemma 25.1 are finite, and so the lemma holds. Therefore, the conditions we need in order to use Johnson's algorithm hold: that reweighting does not change shortest paths, and that all edge weights $\\hat w(u, v)$ are nonnegative. Again relying on $G$ being strongly connected, we get that $\\hat\\delta(u, v) < \\infty$ for all edges $(u, v) \\in E$, which means that $d_{uv} = \\hat\\delta(u, v) + h(v) - h(u)$ is finite and correct.",
            "title": "25.3-6"
        },
        {
            "location": "/Chap25/Problems/25-1/",
            "text": "Suppose that we wish to maintain the transitive closure of a directed graph $G = (V, E)$ as we insert edges into $E$. That is, after each edge has been inserted, we want to update the transitive closure of the edges inserted so far. Assume that the graph $G$ has no edges initially and that we represent the transitive closure as a boolean matrix.\n\n\na.\n Show how to update the transitive closure $G^* = (V, E^*)$ of a graph $G = (V, E)$ in $O(V^2)$ time when a new edge is added to $G$.\n\n\nb.\n Give an example of a graph $G$ and an edge $e$ such that $\\Omega(V^2)$ time is required to update the transitive closure after the insertion of $e$ into $G$, no matter what algorithm is used.\n\n\nc.\n Describe an efficient algorithm for updating the transitive closure as edges are inserted into the graph. For any sequence of $n$ insertions, your algorithm should run in total time $\\sum_{i = 1}^n t_i = O(V^3)$, where $t_i$ is the time to update the transitive closure upon inserting the $i$th edge. Prove that your algorithm attains this time bound.\n\n\n\n\na.\n Let $T = (t_{ij})$ be the $|V| \\times |V|$ matrix representing the transitive closure, such that $t_{ij}$ is $1$ if there is a path from $i$ to $j$, and $0$ otherwise.\n\n\nInitialize $T$ (when there are no edge in $G$) as follows:\n\n\n$$\nt_{ij} =\n\\begin{cases}\n1 & \\text{if $i = j$}, \\\\\n0 & \\text{otherwise}.\n\\end{cases}\n$$\n\n\nWe update $T$ as follows when an edge $(u, v)$ is added to $G$:\n\n\nTRANSITIVE\n-\nCLOSURE\n-\nUPDATE\n(\nT\n,\n \nu\n,\n \nv\n)\n\n    \nlet\n \nT\n \nbe\n \n|\nV\n|\n \n\u00d7\n \n|\nV\n|\n\n    \nfor\n \ni\n \n=\n \n1\n \nto\n \n|\nV\n|\n\n        \nfor\n \nj\n \n=\n \n1\n \nto\n \n|\nV\n|\n\n            \nif\n \nt\n[\ni\n][\nu\n]\n \n==\n \n1\n \nand\n \nt\n[\nv\n][\nj\n]\n \n==\n \n1\n\n                \nt\n[\ni\n][\nj\n]\n \n=\n \n1\n\n\n\n\n\n\n\nWith this procedure, the effect of adding edge $(u, v)$ is to create a path (via the new edge) from every vertex that could already reach $u$ to every vertex that could already be reached from $v$.\n\n\nNote that the procedure sets $t_{uv} = 1$, because both $t_{uu}$ and $t_{vv}$ are initialized to $1$.\n\n\nThis procedure takes $\\Theta(V^2)$ time because of the two nested loops.\n\n\n\n\nb.\n Consider inserting the edge $(v_{|V|}, v_1)$ into the straight-line graph $v_1 \\to v_2 \\to \\cdots \\to v_{|V|}$.\n\n\nBefore this edge is inserted, only $|V|(|V| + 1) / 2$ entries in $T$ are $1$ (the entries on and above the main diagonal). After the edge is inserted, the graph is a cycle in which every vertex can reach every other vertex, so all $|V|^2$ entries in $T$ are $1$. Hence $|V|^2 - (|V|(|V| + 2) / 2) = \\Theta(V^2)$ entries must be changed in $T$, so any algorithm to update the transitive closure must take $\\Omega(V^2)$ time on this graph.\n\n\nc.\n The algorithm in part (a) would take $\\Theta(V^4)$ time to insert all possible $\\Theta(V^2)$ edges, so we need a more ef\ufb01cient algorithm in order for any sequence of insertions to take only $O(V^3)$ total time.\n\n\nTo improve the algorithm, notice that the loop over $j$ is pointless when $t_{iv} = 1$. That is, if there is already a path $i \\leadsto v$, then adding the edge $(u, v)$ cannot make any new vertices reachable from $i$. The loop to set $t_{ij}$ to $1$ for $j$ such that there exists a path $v \\leadsto j$ is just setting entries that are already $1$. Eliminate this redundant processing as follows:\n\n\nTRANSITIVE\n-\nCLOSURE\n-\nUPDATE\n(\nT\n,\n \nu\n,\n \nv\n)\n\n    \nlet\n \nT\n \nbe\n \n|\nV\n|\n \n\u00d7\n \n|\nV\n|\n\n    \nfor\n \ni\n \n=\n \n1\n \nto\n \n|\nV\n|\n\n        \nif\n \nt\n[\ni\n][\nu\n]\n \n==\n \n1\n \nand\n \nt\n[\ni\n][\nv\n]\n \n==\n \n0\n\n            \nfor\n \nj\n \n=\n \n1\n \nto\n \n|\nV\n|\n\n                \nif\n \nt\n[\nv\n][\nj\n]\n \n==\n \n1\n\n                    \nt\n[\ni\n][\nj\n]\n \n=\n \n1\n\n\n\n\n\nWe show that this procedure takes $O(V^3)$ time to update the transitive closure for any sequence of $n$ insertions:\n\n\n\n\nThere cannot be more than $|V|^2$ edges in $G$, so $n \\le |V|^2$.\n\n\nSummed over $n$ insertions, the time for the outer \nfor\n loop header and the test for $t_{iu} == 1$ and $t_{iv} == 0$ is $O(nV) = O(V^3)$.\n\n\nThe last three lines, which take $O(V^2)$ time, are executed only $O(V^2)$ times for $n$ insertions. To see why, notice that the last three lines are executed only when $t_{iv}$ equals $0$, and in that case, the last line sets $t_{iv} = 1$. Thus, the number of $0$ entries in $T$ is reduced by at least $1$ each time the last three lines run. Since there are only $|V|^2$ entries in $T$, these lines can run at most $|V|^2$ times.\n\n\nHence, the total running time over $n$ insertions is $O(V^3)$.",
            "title": "25-1 Transitive closure of a dynamic graph"
        },
        {
            "location": "/Chap25/Problems/25-2/",
            "text": "A graph $G = (V, E)$ is \n$\\epsilon$-dense\n if $|E| = \\Theta(V^{1 + \\epsilon})$ for some constant $\\epsilon$ in the range $0 < \\epsilon \\le 1$. By using $d$-ary min-heaps (see Problem 6-2) in shortest-paths algorithms on $\\epsilon$-dense graphs, we can match the running times of Fibonacci-heap-based algorithms without using as complicated a data structure.\n\n\na.\n What are the asymptotic running times for $\\text{INSERT}$, $\\text{EXTRACT-MIN}$, and $\\text{DECREASE-KEY}$, as a function of $d$ and the number $n$ of elements in a $d$-ary min-heap? What are these running times if we choose $d = \\Theta(n^\\alpha)$ for some constant $0 < \\alpha \\le 1$? Compare these running times to the amortized costs of these operations for a Fibonacci heap.\n\n\nb.\n Show how to compute shortest paths from a single source on an $\\epsilon$-dense directed graph $G = (V, E)$ with no negative-weight edges in $O(E)$ time. ($\\textit{Hint:}$ Pick $d$ as a function of $\\epsilon$.)\n\n\nc.\n Show how to solve the all-pairs shortest-paths problem on an $\\epsilon$-dense directed graph $G = (V, E)$ with no negative-weight edges in $O(VE)$ time. \n\n\nd.\n Show how to solve the all-pairs shortest-paths problem in $O(VE)$ time on an $\\epsilon$-dense directed graph $G = (V, E)$ that may have negative-weight edges but has no negative-weight cycles.\n\n\n\n\na.\n \n\n\n\n\n$\\text{INSERT}$: $\\Theta(\\log_d n) = \\Theta(1 / \\alpha)$.\n\n\n$\\text{EXTRACT-MIN}$: $\\Theta(d\\log_d n) = \\Theta(n^\\alpha / \\alpha)$.\n\n\n$\\text{DECREASE-KEY}$: $\\Theta(\\log_d n) = \\Theta(1 / \\alpha)$.\n\n\n\n\nb.\n Dijkstra, $O(d\\log_d V \\cdot V + \\log_d V \\cdot E)$, if $d = V^\\epsilon$, then\n\n\n\\begin{align}\nO(d \\log_d V \\cdot V + \\log_d V \\cdot E) \n& = O(V^\\epsilon \\cdot V / \\epsilon + E / \\epsilon) \\\\\n& = O((V^{1+\\epsilon} + E) / \\epsilon) \\\\\n& = O((E + E) / \\epsilon) \\\\\n& = O(E).\n\\end{align}\n\n\nc.\n Run $|V|$ times Dijkstra, since the algorithm is $O(E)$ based on (b), the total time is $O(VE)$.\n\n\nd.\n Johnson's reweight is $O(VE)$.",
            "title": "25-2 Shortest paths in epsilon-dense graphs"
        },
        {
            "location": "/Chap26/26.1/",
            "text": "26.1-1\n\n\n\n\nShow that splitting an edge in a flow network yields an equivalent network. More formally, suppose that flow network $G$ contains edge $(u, v)$, and we create a new flow network $G'$ by creating a new vertex $x$ and replacing $(u, v)$ by new edges $(u, x)$ and $(x, v)$ with $c(u, x) = c(x, v) = c(u, v)$. Show that a maximum flow in $G'$ has the same value as a maximum flow in $G$.\n\n\n\n\nWe will prove that for every flow in $G = (V, E)$, we can construct a flow in $G' = (V', E')$ that has the same value as that of the flow in $G$. The required result follows since a maximum flow in $G$ is also a flow. Let $f$ be a flow in $G$. By construction, $V' = V \\cup \\{x\\}$ and $E' = (E - \\{(u, v)\\}) \\cup \\{(u, x), (x, v)\\}$. Construct $f'$ in $G'$ as follows:\n\n\n$$\nf'(y, z) =\n\\begin{cases}\nf(y, z) & \\text{if $(y, z) \\ne (u, x)$ and $(y, z) \\ne (x, v)$}, \\\\\nf(u, z) & \\text{if $(y, z) =   (u, x)$ or  $(y, z) =   (x, v)$}.\n\\end{cases}\n$$\n\n\nInformally, $f'$ is the same as $f$, except that the flow $f(u, v)$ now passes through an intermediate vertex $x$. The vertex $x$ has incoming flow (if any) only from $u$, and has outgoing flow (if any) only to vertex $v$.\n\n\nWe first prove that $f'$ satisfies the required properties of a flow. It is obvious that the capacity constraint is satisfied for every edge in $E'$ and that every vertex in $V' - \\{u, v, x\\}$ obeys flow conservation.\n\n\nTo show that edges $(u, x)$ and $(x, v)$ obey the capacity constraint, we have\n\n\n\\begin{align}\nf(u, x) = f(u, v) & \\le c(u, v) = c(u, x), \\\\\nf(x, v) = f(u, v) & \\le c(u, v) = c(x, v). \n\\end{align}\n\n\nWe now prove flow conservation for $u$. Assuming that $u \\ne \\{s, t\\}$, we have\n\n\n\\begin{align}\n\\sum_{y \\in V'} f'(u, y)\n    & = \\sum_{y \\in V' -{x}} f'(u, y) + f'(u, x) \\\\\n    & = \\sum_{y \\in V- {v}} f(u, y) + f(u, v) \\\\\n    & = \\sum_{y \\in V} f(u, y) \\\\\n    & = \\sum_{y \\in V} f(y, u) \\quad \\text{(because $f$ obeys flow conservation)} \\\\\n    & = \\sum_{y \\in V'} f'(y, u).\n\\end{align}\n\n\nFor vertex $v$, a symmetric argument proves flow conservation.\n\n\nFor vertex $x$, we have\n\n\n\\begin{align}\n\\sum_{y \\in V'} f'(y, x)\n    & = f'(u, x) \\\\\n    & = f'(x, v) \\\\\n    & = \\sum_{y \\in V'} f'(x, y).\n\\end{align}\n\n\nThus, $f'$ is a valid flow in $G'$.\n\n\nWe now prove that the values of the flow in both cases are equal. If the source $s$ is not in $\\{u, v\\}$, the proof is trivial, since our construction assigns the same flows to incoming and outgoing edges of $s$. If $s = u$, then\n\n\n\\begin{align}\n|f'| & = \\sum_{y \\in V'} f'(u, y) - \\sum_{y \\in V'} f'(y, u) \\\\\n     & = \\sum_{y \\in V' - {x}} f'(u, y) - \\sum_{y \\in V'} f'(y, u) + f'(u, x) \\\\\n     & = \\sum_{y \\in V - {v}} f(u, y) - \\sum_{y \\in V} f(y, u) + f(u, v) \\\\\n     & = \\sum_{y \\in V} f(u, y) - \\sum_{y \\in V} f(y, u) \\\\\n     & = |f|.\n\\end{align}\n\n\nThe case when $s = v$ is symmetric. We conclude that $f'$ is a valid flow in $G'$ with $|f'| = |f|$.\n\n\n26.1-2\n\n\n\n\nExtend the flow properties and definitions to the multiple-source, multiple-sink problem. Show that any flow in a multiple-source, multiple-sink flow network corresponds to a flow of identical value in the single-source, single-sink network obtained by adding a supersource and a supersink, and vice versa.\n\n\n\n\nCapacity constraint: for all $u, v \\in V$, we require $0 \\le f(u, v) \\le c(u, v)$.\n\n\nFlow conservation: for all $u \\in V - S - T$, we require $\\sum_{v \\in V} f(v, u) = \\sum_{v \\in V} f(u, v)$.\n\n\n26.1-3\n\n\n\n\nSuppose that a flow network $G = (V, E)$ violates the assumption that the network contains a path $s \\leadsto v \\leadsto t$ for all vertices $v \\in V$. Let $u$ be a vertex for which there is no path $s \\leadsto u \\leadsto t$. Show that there must exist a maximum flow $f$ in $G$ such that $f(u, v) = f(v, u) = 0$ for all vertices $v \\in V$.\n\n\n\n\nWe show that, given any flow $f'$ in the flow network $G = (V, E)$, we can construct a flow $f$ as stated in the exercise. The result will follow when $f'$ is a maximum flow. The idea is that even if there is a path from $s$ to the connected component of $u$, no flow can enter the component, since the flow has no path to reach $t$. Thus, all the flow inside the component must be cyclic, which can be made zero without affecting the net value of the flow.\n\n\nTwo cases are possible: where $u$ is not connected to $t$, and where $u$ is not connected to $s$. We only analyze the former case. The analysis for the latter case is similar.\n\n\nLet $Y$ be the set of all vertices that have no path to $t$. Our roadmap will be to first prove that no flow can leave $Y$. We use this result and flow conservation to prove that no flow can enter $Y$. We shall then constuct the flow $f$, which has the required properties, and prove that $|f| = |f'|$.\n\n\nThe first step is to prove that there can be no flow from a vertex $y \\in Y$ to a vertex $v \\in V - Y$. That is, $f'(y, v) = 0$. This is so, because there are no edges $(y, v)$ in $E$. If there were an edge $(y, v) \\in E$, then there would be a path from $y$ to $t$, which contradicts how we defined the set $Y$.\n\n\nWe will now prove that $f'(v, y) = 0$, too. We will do so by applying flow conservation to each vertex in $Y$ and taking the sum over $Y$. By flow conservation, we have\n\n\n$$\\sum_{y \\in Y} \\sum_{v \\in V} f'(y, v) = \\sum_{y \\in Y} \\sum_{v \\in V} f'(v, y).$$\n\n\nPartitioning $V$ into $Y$ and $V - Y$ gives\n\n\n$$\\sum_{y \\in Y} \\sum_{v \\in V - Y} f'(y, v) + \\sum_{y \\in Y} \\sum_{v \\in V} f'(y, v) = \\sum_{y \\in Y} \\sum_{v \\in V - Y} f'(v, y) + \\sum_{y \\in Y} \\sum_{v \\in Y} f'(v, y). \\tag{*}$$\n\n\nBut we also have\n\n\n$$\\sum_{y \\in Y} \\sum_{v \\in Y} f'(y, v) = \\sum_{y \\in Y} \\sum_{v \\in Y} f'(v, y),$$\n\n\nsince the left-hand side is the same as the right-hand side, except for a change of variable names $v$ and $y$. We also have\n\n\n$$\\sum_{y \\in Y} \\sum_{v \\in V - Y} f'(y, v) = 0,$$\n\n\nsince $f'(y, v) = 0$ for each $y \\in Y$ and $v \\in V - Y$. Thus, equation $(*)$ simplifies to\n\n\n$$\\sum_{y \\in Y} \\sum_{v \\in V - Y} f'(v, y) = 0.$$\n\n\nBecause the flow function is nonnegative, $f(v, y) = 0$ for each $v \\in V$ and $y \\in Y$. We conclude that there can be no flow between any vertex in $Y$ and any vertex in $V - Y$.\n\n\nThe same technique can show that if there is a path from $u$ to $t$ but not from $s$ to $u$, and we define $Z$ as the set of vertices that do not have have a path from $s$ to $u$, then there can be no flow between any vertex in $Z$ and any vertex in $V - Z$. Let $X = Y \\cup Z$. We thus have $f'(v, x) = f'(x, v) = 0$ if $x \\in X$ and $v \\ne X$.\n\n\nWe are now ready to construct flow $f$:\n\n\n$$\nf(u, v) =\n\\begin{cases}\nf'(u, v) & \\text{if $u, v \\ne X$}, \\\\\n0        & \\text{otherwise}.\n\\end{cases}\n$$\n\n\nWe note that $f$ satisfies the requirements of the exercise. We now prove that $f$ also satisfies the requirements of a flow function.\n\n\nThe capacity constraint is satisfied, since whenever $f(u, v) = f'(u, v)$, we have $f(u, v) = f'(u, v) \\le c(u, v)$ and whenever $f(u, v) = 0$, we have $f(u, v) = 0 \\le c(u, v)$.\n\n\nFor flow conservation, let $x$ be some vertex other than $s$ or $t$. If $x \\in X$, then from the construction of $f$, we have\n\n\n$$\\sum_{v \\in V} f(x, v) = \\sum_{v \\in V} f(v, x) = 0.$$\n\n\nOtherwise, if $x \\ne X$, note that $f(x, v) = f'(x, v)$ and $f(v, x) = f'(v, x)$ for all vertices $v \\in V$. Thus,\n\n\n\\begin{align}\n\\sum_{v \\in V} f(x, v)\n    & = \\sum_{v \\in V} f'(x, v) \\\\\n    & = \\sum_{v \\in V} f'(v, x) \\quad \\text{(because $f'$ obeys flow conservation)} \\\\\n    & = \\sum_{v \\in V} f(v, x).\n\\end{align}\n\n\nFinally, we prove that the value of the flow remains the same. Since $s \\ne X$, we have $f(s, v) = f'(s, v)$ and $f(v, x) = f'(v, x)$ for all vertices $v \\in V$, and so\n\n\n\\begin{align}\n|f| & = \\sum_{v \\in V} f(s, v) - \\sum_{v \\in V} f(v, s) \\\\\n    & = \\sum_{v \\in V} f'(s, v) - \\sum_{v \\in V} f'(v, s) \\\\\n    & = |f'|.\n\\end{align}\n\n\n26.1-4\n\n\n\n\nLet $f$ be a flow in a network, and let $\\alpha$ be a real number. The \nscalar flow product\n, denoted $\\alpha f$, is a function from $V \\times V$ to $\\mathbb{R}$ defined by\n\n\n$(\\alpha f)(u, v) = \\alpha \\cdot f(u, v)$.\n\n\nProve that the flows in a network form a \nconvex set\n. That is, show that if $f_1$ and $f_2$ are flows, then so is $\\alpha f_1 + (1 - \\alpha) f_2$ for all $\\alpha$ in the range $0 \\le \\alpha \\le 1$.\n\n\n\n\nTo see that the flows form a convex set, we show that if $f_1$ and $f_2$ are flows, then so is $\\alpha f_1 + (1 - \\alpha) f_2$ for all $\\alpha$ such that $0 \\le \\alpha \\le 1$.\n\n\nFor the capacity constraint, first observe that $\\alpha \\le 1$ implies that $1 - \\alpha \\ge 0$. Thus, for any $u, v \\in V$, we have\n\n\n\\begin{align}\n\\alpha f_1(u, v) + (1 - \\alpha) f_2(u, v)\n    & \\ge 0 \\cdot f_1(u, v) + 0 \\cdot (1 - \\alpha) f_2(u, v) \\\\\n    & =   0.\n\\end{align}\n\n\nSince $f_1(u, v) \\le c(u, v)$ and $f_2(u, v) \\le c(u, v)$, we also have\n\n\n\\begin{align}\n\\alpha f_1(u, v) + (1 - \\alpha) f_2(u, v)\n    & \\le \\alpha c(u, v) + (1 - \\alpha) c(u, v) \\\\\n    & =   (\\alpha + (1 - \\alpha))c(u, v) \\\\\n    & =   c(u, v).\n\\end{align}\n\n\nFor flow conservation, observe that since $f_1$ and $f_2$ obey flow conservation, we have $\\sum_{v \\in V} f_1(v, u) = \\sum_{v \\in V} f_1(u, v)$ and $\\sum_{v \\in V} f_1(v, u) = \\sum_{v \\in V} f_1(u, v)$ for any $u \\in V - \\{s, t\\}$. We need to show that\n\n\n$$\\sum_{v \\in V} (\\alpha f_1(v, u) + (1 - \\alpha) f_2(v, u)) = \\sum_{v \\in V} (\\alpha f_1(u, v) + (1 - \\alpha) f_2(u, v))$$\n\n\nfor any $u \\in V - \\{s, t\\}$. We multiply both sides of the equality for $f_1$ by $\\alpha$, multiply both sides of the equality for $f_2$ by $1 - \\alpha$, and add the left-hand and right-hand sides of the resulting equalities to get\n\n\n$$\\alpha \\sum_{v \\in V} f_1(v, u) + (1 - \\alpha) \\sum_{v \\in V} f_2(v, u) = \\alpha \\sum_{v \\in V} f_1(u, v) + (1 - \\alpha) \\sum_{v \\in V} f_2(u, v).$$\n\n\nObserving that\n\n\n\\begin{align}\n\\alpha \\sum_{v \\in V} f_1(v, u) + (1 - \\alpha) \\sum_{v \\in V} f_2(v, u)\n\n    & = \\sum_{v \\in V} \\alpha f_1(v, u) + \\sum_{v \\in V} (1 - \\alpha) f_2(v, u) \\\\\n    & = \\sum_{v \\in V} (\\alpha f_1(v, u) + (1 - \\alpha) f_2(v, u))\n\\end{align}\n\n\nand, likewise, that\n\n\n$$\\alpha \\sum_{v \\in V} f_1(u, v) + (1 - \\alpha) \\sum_{v \\in V} f_2(u, v) = \\sum_{v \\in V} (\\alpha f_1(u, v) + (1 - \\alpha)f_2(u, v))$$\n\n\ncompletes the proof that flow conservation holds, and thus that flows form a convex set.\n\n\n26.1-5\n\n\n\n\nState the maximum-flow problem as a linear-programming problem.\n\n\n\n\n\\begin{array}{ll}\n\\max & \\sum\\limits_{v \\in V} f(s, v) - \\sum\\limits_{v \\in V} f(v, s) \\\\\ns.t. & 0 \\le f(u, v) \\le c(u, v) \\\\\n     & \\sum\\limits_{v \\in V} f(v, u) - \\sum\\limits_{v \\in V} f(u, v) = 0\n\\end{array}\n\n\n26.1-6\n\n\n\n\nProfessor Adam has two children who, unfortunately, dislike each other. The problem is so severe that not only do they refuse to walk to school together, but in fact each one refuses to walk on any block that the other child has stepped on that day. The children have no problem with their paths crossing at a corner. Fortunately both the professor's house and the school are on corners, but beyond that he is not sure if it is going to be possible to send both of his children to the same school. The professor has a map of his town. Show how to formulate the problem of determining whether both his children can go to the same school as a maximum-flow problem.\n\n\n\n\nCreate a vertex for each corner, and if there is a street between corners $u$ and $v$, create directed edges $(u, v)$ and $(v, u)$. Set the capacity of each edge to $1$. Let the source be corner on which the professor's house sits, and let the sink be the corner on which the school is located. We wish to find a flow of value $2$ that also has the property that $f(u, v)$ is an integer for all vertices $u$ and $v$. Such a flow represents two edge-disjoint paths from the house to the school.\n\n\n26.1-7\n\n\n\n\nSuppose that, in addition to edge capacities, a flow network has \nvertex capacities\n. That is each vertex $v$ has a limit $l(v)$ on how much flow can pass though $v$. Show how to transform a flow network $G = (V, E)$ with vertex capacities into an equivalent flow network $G' = (V', E')$ without vertex capacities, such that a maximum flow in $G'$ has the same value as a maximum flow in $G$. How many vertices and edges does $G'$ have?\n\n\n\n\nWe will construct $G'$ by splitting each vertex $v$ of $G$ into two vertices $v_1$, $v_2$, joined by an edge of capacity $l(v)$. All incoming edges of $v$ are now incoming edges to $v_1$. All outgoing edges from $v$ are now outgoing edges from $v_2$.\n\n\nMore formally, construct $G' = (V', E')$ with capacity function $c'$ as follows. For every $v \\in V$, create two vertices $v_1$, $v_2$ in $V'$. Add an edge $(v_1, v_2)$ in $E'$ with $c'(v_1, v_2) = l(v)$. For every edge $(u, v) \\in E$, create an edge $(u_2, v_1)$ in $E'$ with capacity $c'(u_2, v_1) = c(u, v)$. Make $s_1$ and $t_2$ as the new source and target vertices in $G'$. Clearly, $|V'| = 2|V|$ and $|E'| = |E| + |V|$.\n\n\nLet $f$ be a flow in $G$ that respects vertex capacities. Create a flow function $f'$ in $G'$ as follows. For each edge $(u, v) \\in G$, let $f'(u_2, v_1) = f(u, v)$. For each vertex $u \\in V - \\{t\\}$, let $f'(u_1, u_2) = \\sum_{v \\in V} f(u, v)$. Let $f'(t_1, t_2) = \\sum_{v \\in V} f(v, t)$.\n\n\nWe readily see that there is a one-to-one correspondence between flows that respect vertex capacities in $G$ and flows in $G'$. For the capacity constraint, every edge in $G'$ of the form $(u_2, v_1)$ has a corresponding edge in $G$ with a corresponding capacity and flow and thus satisfies the capacity constraint. For edges in $E'$ of the form $(u_1, u_2)$, the capacities reflect the vertex capacities in $G$. Therefore, for $u \\in V - \\{s, t\\}$, we have $f'(u_1, u_2) = \\sum_{v \\in V} f(u, v) \\le l(u) = c'(u_1, u_2)$. We also have $f'(t_1, t_2) = \\sum_{v \\in V} f(v, t) \\le l(t) = c'(t_1, t_2)$. Note that this constraint also enforces the vertex capacities in $G$.\n\n\nNow, we prove flow conservation. By construction, every vertex of the form $u_1$ in $G'$ has exactly one outgoing edge $(u_1, u_2)$, and every incoming edge to $u_1$ corresponds to an incoming edge of $u \\in G$. Thus, for all vertices $u \\in V - \\{s, t\\}$, we have\n\n\n\\begin{align}\n\\text{incoming flow to $u_1$}\n    & = \\sum_{v \\in V'} f'(v, u_1) \\\\\n    & = \\sum_{v \\in V} f(v, u) \\\\\n    & = \\sum_{v \\in V} f(u, v) \\qquad \\text{(because $f$ obeys flow conservation)} \\\\\n    & = f'(u_1, u_2) \\\\\n    & = \\text{outgoing flow from $u_1$}.\n\\end{align}\n\n\nFor $t_1$, we have\n\n\n\\begin{align}\n\\text{incoming flow}\n    & = \\sum_{v \\in V'} f'(v, t_1) \\\\\n    & = \\sum_{v \\in V} f(v, u) \\\\\n    & = f'(t_1, t_2) \\\\\n    & = \\text{outgoing flow}.\n\\end{align}\n\n\nVertices of the form $u_2$ have exactly one incoming edge $(u_1, u_2)$, and every outgoing edge of $u_2$ corresponds to an outgoing edge of $u \\in G$. Thus, for $u_2 \\ne t_2$,\n\n\n\\begin{align}\n\\text{incoming flow}\n    & = f'(u_1, u_2) \\\\\n    & = \\sum_{v \\in V} f(u, v) \\\\\n    & = \\sum_{v \\in V'} f'(u_2, v) \\\\  \n\n    & = \\text{outgoing flow}.\n\\end{align}\n\n\nFinally, we prove that $|f'| = |f|$:\n\n\n\\begin{align}\n|f'| & = \\sum_{v \\in V'} f'(s_1, v) \\\\\n     & = f'(s_1, s_2) \\qquad \\text{(because there are no other outgoing edges from $s_1$)} \\\\\n     & = \\sum_{v \\in V} f(s, v) \\\\\n     & = |f|.\n\\end{align}",
            "title": "26.1 Flow networks"
        },
        {
            "location": "/Chap26/26.1/#261-1",
            "text": "Show that splitting an edge in a flow network yields an equivalent network. More formally, suppose that flow network $G$ contains edge $(u, v)$, and we create a new flow network $G'$ by creating a new vertex $x$ and replacing $(u, v)$ by new edges $(u, x)$ and $(x, v)$ with $c(u, x) = c(x, v) = c(u, v)$. Show that a maximum flow in $G'$ has the same value as a maximum flow in $G$.   We will prove that for every flow in $G = (V, E)$, we can construct a flow in $G' = (V', E')$ that has the same value as that of the flow in $G$. The required result follows since a maximum flow in $G$ is also a flow. Let $f$ be a flow in $G$. By construction, $V' = V \\cup \\{x\\}$ and $E' = (E - \\{(u, v)\\}) \\cup \\{(u, x), (x, v)\\}$. Construct $f'$ in $G'$ as follows:  $$\nf'(y, z) =\n\\begin{cases}\nf(y, z) & \\text{if $(y, z) \\ne (u, x)$ and $(y, z) \\ne (x, v)$}, \\\\\nf(u, z) & \\text{if $(y, z) =   (u, x)$ or  $(y, z) =   (x, v)$}.\n\\end{cases}\n$$  Informally, $f'$ is the same as $f$, except that the flow $f(u, v)$ now passes through an intermediate vertex $x$. The vertex $x$ has incoming flow (if any) only from $u$, and has outgoing flow (if any) only to vertex $v$.  We first prove that $f'$ satisfies the required properties of a flow. It is obvious that the capacity constraint is satisfied for every edge in $E'$ and that every vertex in $V' - \\{u, v, x\\}$ obeys flow conservation.  To show that edges $(u, x)$ and $(x, v)$ obey the capacity constraint, we have  \\begin{align}\nf(u, x) = f(u, v) & \\le c(u, v) = c(u, x), \\\\\nf(x, v) = f(u, v) & \\le c(u, v) = c(x, v). \n\\end{align}  We now prove flow conservation for $u$. Assuming that $u \\ne \\{s, t\\}$, we have  \\begin{align}\n\\sum_{y \\in V'} f'(u, y)\n    & = \\sum_{y \\in V' -{x}} f'(u, y) + f'(u, x) \\\\\n    & = \\sum_{y \\in V- {v}} f(u, y) + f(u, v) \\\\\n    & = \\sum_{y \\in V} f(u, y) \\\\\n    & = \\sum_{y \\in V} f(y, u) \\quad \\text{(because $f$ obeys flow conservation)} \\\\\n    & = \\sum_{y \\in V'} f'(y, u).\n\\end{align}  For vertex $v$, a symmetric argument proves flow conservation.  For vertex $x$, we have  \\begin{align}\n\\sum_{y \\in V'} f'(y, x)\n    & = f'(u, x) \\\\\n    & = f'(x, v) \\\\\n    & = \\sum_{y \\in V'} f'(x, y).\n\\end{align}  Thus, $f'$ is a valid flow in $G'$.  We now prove that the values of the flow in both cases are equal. If the source $s$ is not in $\\{u, v\\}$, the proof is trivial, since our construction assigns the same flows to incoming and outgoing edges of $s$. If $s = u$, then  \\begin{align}\n|f'| & = \\sum_{y \\in V'} f'(u, y) - \\sum_{y \\in V'} f'(y, u) \\\\\n     & = \\sum_{y \\in V' - {x}} f'(u, y) - \\sum_{y \\in V'} f'(y, u) + f'(u, x) \\\\\n     & = \\sum_{y \\in V - {v}} f(u, y) - \\sum_{y \\in V} f(y, u) + f(u, v) \\\\\n     & = \\sum_{y \\in V} f(u, y) - \\sum_{y \\in V} f(y, u) \\\\\n     & = |f|.\n\\end{align}  The case when $s = v$ is symmetric. We conclude that $f'$ is a valid flow in $G'$ with $|f'| = |f|$.",
            "title": "26.1-1"
        },
        {
            "location": "/Chap26/26.1/#261-2",
            "text": "Extend the flow properties and definitions to the multiple-source, multiple-sink problem. Show that any flow in a multiple-source, multiple-sink flow network corresponds to a flow of identical value in the single-source, single-sink network obtained by adding a supersource and a supersink, and vice versa.   Capacity constraint: for all $u, v \\in V$, we require $0 \\le f(u, v) \\le c(u, v)$.  Flow conservation: for all $u \\in V - S - T$, we require $\\sum_{v \\in V} f(v, u) = \\sum_{v \\in V} f(u, v)$.",
            "title": "26.1-2"
        },
        {
            "location": "/Chap26/26.1/#261-3",
            "text": "Suppose that a flow network $G = (V, E)$ violates the assumption that the network contains a path $s \\leadsto v \\leadsto t$ for all vertices $v \\in V$. Let $u$ be a vertex for which there is no path $s \\leadsto u \\leadsto t$. Show that there must exist a maximum flow $f$ in $G$ such that $f(u, v) = f(v, u) = 0$ for all vertices $v \\in V$.   We show that, given any flow $f'$ in the flow network $G = (V, E)$, we can construct a flow $f$ as stated in the exercise. The result will follow when $f'$ is a maximum flow. The idea is that even if there is a path from $s$ to the connected component of $u$, no flow can enter the component, since the flow has no path to reach $t$. Thus, all the flow inside the component must be cyclic, which can be made zero without affecting the net value of the flow.  Two cases are possible: where $u$ is not connected to $t$, and where $u$ is not connected to $s$. We only analyze the former case. The analysis for the latter case is similar.  Let $Y$ be the set of all vertices that have no path to $t$. Our roadmap will be to first prove that no flow can leave $Y$. We use this result and flow conservation to prove that no flow can enter $Y$. We shall then constuct the flow $f$, which has the required properties, and prove that $|f| = |f'|$.  The first step is to prove that there can be no flow from a vertex $y \\in Y$ to a vertex $v \\in V - Y$. That is, $f'(y, v) = 0$. This is so, because there are no edges $(y, v)$ in $E$. If there were an edge $(y, v) \\in E$, then there would be a path from $y$ to $t$, which contradicts how we defined the set $Y$.  We will now prove that $f'(v, y) = 0$, too. We will do so by applying flow conservation to each vertex in $Y$ and taking the sum over $Y$. By flow conservation, we have  $$\\sum_{y \\in Y} \\sum_{v \\in V} f'(y, v) = \\sum_{y \\in Y} \\sum_{v \\in V} f'(v, y).$$  Partitioning $V$ into $Y$ and $V - Y$ gives  $$\\sum_{y \\in Y} \\sum_{v \\in V - Y} f'(y, v) + \\sum_{y \\in Y} \\sum_{v \\in V} f'(y, v) = \\sum_{y \\in Y} \\sum_{v \\in V - Y} f'(v, y) + \\sum_{y \\in Y} \\sum_{v \\in Y} f'(v, y). \\tag{*}$$  But we also have  $$\\sum_{y \\in Y} \\sum_{v \\in Y} f'(y, v) = \\sum_{y \\in Y} \\sum_{v \\in Y} f'(v, y),$$  since the left-hand side is the same as the right-hand side, except for a change of variable names $v$ and $y$. We also have  $$\\sum_{y \\in Y} \\sum_{v \\in V - Y} f'(y, v) = 0,$$  since $f'(y, v) = 0$ for each $y \\in Y$ and $v \\in V - Y$. Thus, equation $(*)$ simplifies to  $$\\sum_{y \\in Y} \\sum_{v \\in V - Y} f'(v, y) = 0.$$  Because the flow function is nonnegative, $f(v, y) = 0$ for each $v \\in V$ and $y \\in Y$. We conclude that there can be no flow between any vertex in $Y$ and any vertex in $V - Y$.  The same technique can show that if there is a path from $u$ to $t$ but not from $s$ to $u$, and we define $Z$ as the set of vertices that do not have have a path from $s$ to $u$, then there can be no flow between any vertex in $Z$ and any vertex in $V - Z$. Let $X = Y \\cup Z$. We thus have $f'(v, x) = f'(x, v) = 0$ if $x \\in X$ and $v \\ne X$.  We are now ready to construct flow $f$:  $$\nf(u, v) =\n\\begin{cases}\nf'(u, v) & \\text{if $u, v \\ne X$}, \\\\\n0        & \\text{otherwise}.\n\\end{cases}\n$$  We note that $f$ satisfies the requirements of the exercise. We now prove that $f$ also satisfies the requirements of a flow function.  The capacity constraint is satisfied, since whenever $f(u, v) = f'(u, v)$, we have $f(u, v) = f'(u, v) \\le c(u, v)$ and whenever $f(u, v) = 0$, we have $f(u, v) = 0 \\le c(u, v)$.  For flow conservation, let $x$ be some vertex other than $s$ or $t$. If $x \\in X$, then from the construction of $f$, we have  $$\\sum_{v \\in V} f(x, v) = \\sum_{v \\in V} f(v, x) = 0.$$  Otherwise, if $x \\ne X$, note that $f(x, v) = f'(x, v)$ and $f(v, x) = f'(v, x)$ for all vertices $v \\in V$. Thus,  \\begin{align}\n\\sum_{v \\in V} f(x, v)\n    & = \\sum_{v \\in V} f'(x, v) \\\\\n    & = \\sum_{v \\in V} f'(v, x) \\quad \\text{(because $f'$ obeys flow conservation)} \\\\\n    & = \\sum_{v \\in V} f(v, x).\n\\end{align}  Finally, we prove that the value of the flow remains the same. Since $s \\ne X$, we have $f(s, v) = f'(s, v)$ and $f(v, x) = f'(v, x)$ for all vertices $v \\in V$, and so  \\begin{align}\n|f| & = \\sum_{v \\in V} f(s, v) - \\sum_{v \\in V} f(v, s) \\\\\n    & = \\sum_{v \\in V} f'(s, v) - \\sum_{v \\in V} f'(v, s) \\\\\n    & = |f'|.\n\\end{align}",
            "title": "26.1-3"
        },
        {
            "location": "/Chap26/26.1/#261-4",
            "text": "Let $f$ be a flow in a network, and let $\\alpha$ be a real number. The  scalar flow product , denoted $\\alpha f$, is a function from $V \\times V$ to $\\mathbb{R}$ defined by  $(\\alpha f)(u, v) = \\alpha \\cdot f(u, v)$.  Prove that the flows in a network form a  convex set . That is, show that if $f_1$ and $f_2$ are flows, then so is $\\alpha f_1 + (1 - \\alpha) f_2$ for all $\\alpha$ in the range $0 \\le \\alpha \\le 1$.   To see that the flows form a convex set, we show that if $f_1$ and $f_2$ are flows, then so is $\\alpha f_1 + (1 - \\alpha) f_2$ for all $\\alpha$ such that $0 \\le \\alpha \\le 1$.  For the capacity constraint, first observe that $\\alpha \\le 1$ implies that $1 - \\alpha \\ge 0$. Thus, for any $u, v \\in V$, we have  \\begin{align}\n\\alpha f_1(u, v) + (1 - \\alpha) f_2(u, v)\n    & \\ge 0 \\cdot f_1(u, v) + 0 \\cdot (1 - \\alpha) f_2(u, v) \\\\\n    & =   0.\n\\end{align}  Since $f_1(u, v) \\le c(u, v)$ and $f_2(u, v) \\le c(u, v)$, we also have  \\begin{align}\n\\alpha f_1(u, v) + (1 - \\alpha) f_2(u, v)\n    & \\le \\alpha c(u, v) + (1 - \\alpha) c(u, v) \\\\\n    & =   (\\alpha + (1 - \\alpha))c(u, v) \\\\\n    & =   c(u, v).\n\\end{align}  For flow conservation, observe that since $f_1$ and $f_2$ obey flow conservation, we have $\\sum_{v \\in V} f_1(v, u) = \\sum_{v \\in V} f_1(u, v)$ and $\\sum_{v \\in V} f_1(v, u) = \\sum_{v \\in V} f_1(u, v)$ for any $u \\in V - \\{s, t\\}$. We need to show that  $$\\sum_{v \\in V} (\\alpha f_1(v, u) + (1 - \\alpha) f_2(v, u)) = \\sum_{v \\in V} (\\alpha f_1(u, v) + (1 - \\alpha) f_2(u, v))$$  for any $u \\in V - \\{s, t\\}$. We multiply both sides of the equality for $f_1$ by $\\alpha$, multiply both sides of the equality for $f_2$ by $1 - \\alpha$, and add the left-hand and right-hand sides of the resulting equalities to get  $$\\alpha \\sum_{v \\in V} f_1(v, u) + (1 - \\alpha) \\sum_{v \\in V} f_2(v, u) = \\alpha \\sum_{v \\in V} f_1(u, v) + (1 - \\alpha) \\sum_{v \\in V} f_2(u, v).$$  Observing that  \\begin{align}\n\\alpha \\sum_{v \\in V} f_1(v, u) + (1 - \\alpha) \\sum_{v \\in V} f_2(v, u) \n    & = \\sum_{v \\in V} \\alpha f_1(v, u) + \\sum_{v \\in V} (1 - \\alpha) f_2(v, u) \\\\\n    & = \\sum_{v \\in V} (\\alpha f_1(v, u) + (1 - \\alpha) f_2(v, u))\n\\end{align}  and, likewise, that  $$\\alpha \\sum_{v \\in V} f_1(u, v) + (1 - \\alpha) \\sum_{v \\in V} f_2(u, v) = \\sum_{v \\in V} (\\alpha f_1(u, v) + (1 - \\alpha)f_2(u, v))$$  completes the proof that flow conservation holds, and thus that flows form a convex set.",
            "title": "26.1-4"
        },
        {
            "location": "/Chap26/26.1/#261-5",
            "text": "State the maximum-flow problem as a linear-programming problem.   \\begin{array}{ll}\n\\max & \\sum\\limits_{v \\in V} f(s, v) - \\sum\\limits_{v \\in V} f(v, s) \\\\\ns.t. & 0 \\le f(u, v) \\le c(u, v) \\\\\n     & \\sum\\limits_{v \\in V} f(v, u) - \\sum\\limits_{v \\in V} f(u, v) = 0\n\\end{array}",
            "title": "26.1-5"
        },
        {
            "location": "/Chap26/26.1/#261-6",
            "text": "Professor Adam has two children who, unfortunately, dislike each other. The problem is so severe that not only do they refuse to walk to school together, but in fact each one refuses to walk on any block that the other child has stepped on that day. The children have no problem with their paths crossing at a corner. Fortunately both the professor's house and the school are on corners, but beyond that he is not sure if it is going to be possible to send both of his children to the same school. The professor has a map of his town. Show how to formulate the problem of determining whether both his children can go to the same school as a maximum-flow problem.   Create a vertex for each corner, and if there is a street between corners $u$ and $v$, create directed edges $(u, v)$ and $(v, u)$. Set the capacity of each edge to $1$. Let the source be corner on which the professor's house sits, and let the sink be the corner on which the school is located. We wish to find a flow of value $2$ that also has the property that $f(u, v)$ is an integer for all vertices $u$ and $v$. Such a flow represents two edge-disjoint paths from the house to the school.",
            "title": "26.1-6"
        },
        {
            "location": "/Chap26/26.1/#261-7",
            "text": "Suppose that, in addition to edge capacities, a flow network has  vertex capacities . That is each vertex $v$ has a limit $l(v)$ on how much flow can pass though $v$. Show how to transform a flow network $G = (V, E)$ with vertex capacities into an equivalent flow network $G' = (V', E')$ without vertex capacities, such that a maximum flow in $G'$ has the same value as a maximum flow in $G$. How many vertices and edges does $G'$ have?   We will construct $G'$ by splitting each vertex $v$ of $G$ into two vertices $v_1$, $v_2$, joined by an edge of capacity $l(v)$. All incoming edges of $v$ are now incoming edges to $v_1$. All outgoing edges from $v$ are now outgoing edges from $v_2$.  More formally, construct $G' = (V', E')$ with capacity function $c'$ as follows. For every $v \\in V$, create two vertices $v_1$, $v_2$ in $V'$. Add an edge $(v_1, v_2)$ in $E'$ with $c'(v_1, v_2) = l(v)$. For every edge $(u, v) \\in E$, create an edge $(u_2, v_1)$ in $E'$ with capacity $c'(u_2, v_1) = c(u, v)$. Make $s_1$ and $t_2$ as the new source and target vertices in $G'$. Clearly, $|V'| = 2|V|$ and $|E'| = |E| + |V|$.  Let $f$ be a flow in $G$ that respects vertex capacities. Create a flow function $f'$ in $G'$ as follows. For each edge $(u, v) \\in G$, let $f'(u_2, v_1) = f(u, v)$. For each vertex $u \\in V - \\{t\\}$, let $f'(u_1, u_2) = \\sum_{v \\in V} f(u, v)$. Let $f'(t_1, t_2) = \\sum_{v \\in V} f(v, t)$.  We readily see that there is a one-to-one correspondence between flows that respect vertex capacities in $G$ and flows in $G'$. For the capacity constraint, every edge in $G'$ of the form $(u_2, v_1)$ has a corresponding edge in $G$ with a corresponding capacity and flow and thus satisfies the capacity constraint. For edges in $E'$ of the form $(u_1, u_2)$, the capacities reflect the vertex capacities in $G$. Therefore, for $u \\in V - \\{s, t\\}$, we have $f'(u_1, u_2) = \\sum_{v \\in V} f(u, v) \\le l(u) = c'(u_1, u_2)$. We also have $f'(t_1, t_2) = \\sum_{v \\in V} f(v, t) \\le l(t) = c'(t_1, t_2)$. Note that this constraint also enforces the vertex capacities in $G$.  Now, we prove flow conservation. By construction, every vertex of the form $u_1$ in $G'$ has exactly one outgoing edge $(u_1, u_2)$, and every incoming edge to $u_1$ corresponds to an incoming edge of $u \\in G$. Thus, for all vertices $u \\in V - \\{s, t\\}$, we have  \\begin{align}\n\\text{incoming flow to $u_1$}\n    & = \\sum_{v \\in V'} f'(v, u_1) \\\\\n    & = \\sum_{v \\in V} f(v, u) \\\\\n    & = \\sum_{v \\in V} f(u, v) \\qquad \\text{(because $f$ obeys flow conservation)} \\\\\n    & = f'(u_1, u_2) \\\\\n    & = \\text{outgoing flow from $u_1$}.\n\\end{align}  For $t_1$, we have  \\begin{align}\n\\text{incoming flow}\n    & = \\sum_{v \\in V'} f'(v, t_1) \\\\\n    & = \\sum_{v \\in V} f(v, u) \\\\\n    & = f'(t_1, t_2) \\\\\n    & = \\text{outgoing flow}.\n\\end{align}  Vertices of the form $u_2$ have exactly one incoming edge $(u_1, u_2)$, and every outgoing edge of $u_2$ corresponds to an outgoing edge of $u \\in G$. Thus, for $u_2 \\ne t_2$,  \\begin{align}\n\\text{incoming flow}\n    & = f'(u_1, u_2) \\\\\n    & = \\sum_{v \\in V} f(u, v) \\\\\n    & = \\sum_{v \\in V'} f'(u_2, v) \\\\   \n    & = \\text{outgoing flow}.\n\\end{align}  Finally, we prove that $|f'| = |f|$:  \\begin{align}\n|f'| & = \\sum_{v \\in V'} f'(s_1, v) \\\\\n     & = f'(s_1, s_2) \\qquad \\text{(because there are no other outgoing edges from $s_1$)} \\\\\n     & = \\sum_{v \\in V} f(s, v) \\\\\n     & = |f|.\n\\end{align}",
            "title": "26.1-7"
        },
        {
            "location": "/Chap26/26.2/",
            "text": "26.2-1\n\n\n\n\nProve that the summations in equation $\\text{(26.6)}$ equal the summations in equation $\\text{(26.7)}$.\n\n\n\n\nLemma\n\n\n\n\nIf $v \\notin V_1$, then $f(s, v) = 0$.\n\n\nIf $v \\notin V_2$, then $f(v, s) = 0$.\n\n\nIf $v \\notin V_1 \\cup V_2$, then $f'(s, v) = 0$.\n\n\nIf $v \\notin V_1 \\cup V_2$, then $f'(v, s) = 0$.\n\n\n\n\nProof\n\n\n\n\nLet $v \\notin V_1$ be some vertex. From the definition of $V_1$, there is no edge from $s$ to $v$. Thus, $f(s, v) = 0$.\n\n\nLet $v \\notin V_2$ be some vertex. From the definition of $V_2$, there is no edge from $v$ to $s$. Thus, $f(v, s) = 0$.\n\n\nLet $v \\notin V_1 \\cup V_2$ be some vertex. From the definition of $V_1$ and $V_2$, neither $(s, v)$ nor $(v, s)$ exists. Therefore, the third condition of the definition of residual capacity (equation $\\text{(26.2)}$) applies, and $c_f(s, v) = 0$. Thus, $f'(s, v) = 0$.\n\n\nLet $v \\notin V_1 \\cup V_2$ be some vertex. By equation $\\text{(26.2)}$, we have that $c_f(v, s) = 0$ and thus $f'(v, s) = 0$.\n\n\n\n\n26.2-2\n\n\n\n\nIn Figure $\\text{26.1}$(b), what is the flow across the cut $(\\{s, v_2, v_4\\}, \\{v_1, v_3, t\\})$? What is the capacity of this cut?\n\n\n\n\n\\begin{align}\nf(S, T) & = f(s, v_1) + f(v_2, v_1) + f(v_4, v_3) + f(v_4, t) - f(v_3, v_2) = 11 + 1 + 7 + 4 - 4 = 19, \\\\\nc(S, T) & = c(s, v_1) + c(v_2, v_1) + c(v_4, v_3) + c(v_4, t) = 16 + 4 + 7 + 4 = 31.\n\\end{align}\n\n\n26.2-3\n\n\n\n\nShow the execution of the Edmonds-Karp algorithm on the flow network of Figure 26.1(a).\n\n\n\n\nIf we perform a breadth first search where we consider the neighbors of a vertex as they appear in the ordering $\\{s, v_1, v_2, v_3, v_4, t\\}$, the first path that we will find is $s, v_1, v_3, t$. The min capacity of this augmenting path is $12$, so we send $12$ units along it. We perform a $\\text{BFS}$ on the resulting residual network. This gets us the path $s, v_2, v_4, t$. The min capacity along this path is $4$, so we send $4$ units along it. Then, the only path remaining in the residual network is $\\{s, v_2, v_4, v_3\\}$ which has a min capacity of $7$, since that's all that's left, we find it in our $\\text{BFS}$. Putting it all together, the total flow that we have found has a value of $23$.\n\n\n26.2-4\n\n\n\n\nIn the example of Figure 26.6, what is the minimum cut corresponding to the maximum flow shown? Of the augmenting paths appearing in the example, which one cancels flow?\n\n\n\n\nA minimum cut corresponding to the maximum flow is $S = \\{s, v_1, v_2, v_4\\}$ and $T = \\{v_3, t\\}$. The augmenting path in part (c) cancels flow on edge $(v_3, v_2)$.\n\n\n26.2-5\n\n\n\n\nRecall that the construction in Section 26.1 that converts a flow network with multiple sources and sinks into a single-source, single-sink network adds edges with infinite capacity. Prove that any flow in the resulting network has a finite value if the edges of the original network with multiple sources and sinks have finite capacity.\n\n\n\n\nSince the only edges that have infinite value are those going from the supersource or to the supersink, as long as we pick a cut that has the supersource and all the original sources on one side, and the other side has the supersink as well as all the original sinks, then it will only cut through edges of finite capacity. Then, by Corollary 26.5, we have that the value of the flow is bounded above by the value of any of these types of cuts, which is finite.\n\n\n26.2-6\n\n\n\n\nSuppose that each source $s_i$ in a flow network with multiple sources and sinks produces exactly $p_i$ units of flow, so that $\\sum_{v \\in V} f(s_i, v) = p_i$. Suppose also that each sink $t_j$ consumes exactly $q_j$ units, so that $\\sum_{v \\in V} f(v, t_j) = q_j$, where $\\sum_i p_i = \\sum_j q_j$. Show how to convert the problem of finding a flow $f$ that obeys these additional constraints into the problem of finding a maximum flow in a single-source, single-sink flow network.\n\n\n\n\n$c(s, s_i) = p_i$, $c(t_j, t) = q_j$.\n\n\n26.2-7\n\n\n\n\nProve Lemma 26.2.\n\n\n\n\nTo check that $f_p$ is a flow, we make sure that it satisfies both the capacity constraints and the flow constraints. First, the capacity constraints. To see this, we recall our definition of $c_f(p)$, that is, it is the smallest residual capacity of any of the edges along the path $p$. Since we have that the residual capacity is always less than or equal to the initial capacity, we have that each value of the flow is less than the capacity. Second, we check the flow constraints, Since the only edges that are given any flow are along a path, we have that at each vertex interior to the path, the flow in from one edge is immediately canceled by the flow out to the next vertex in the path. Lastly, we can check that its value is equal to $c_f(p)$ because, while $s$ may show up at spots later on in the path, it will be canceled out as it leaves to go to the next vertex. So, the only net flow from s is the initial edge along the path, since it (along with all the other edges) is given flow $c_f(p)$, that is the value of the flow $f_p$.\n\n\n26.2-8\n\n\n\n\nSuppose that we redefine the residual network to disallow edges into $s$. Argue that the procedure $\\text{FORD-FULKERSON}$ still correctly computes a maximum flow.\n\n\n\n\nLet $G_f$ be the residual network just before an iteration of the \nwhile\n loop of $\\text{FORD-FULKERSON}$, and let $E_s$ be the set of residual edges of $G_f$ into $s$. We'll show that the augmenting path $p$ chosen by $\\text{FORD-FULKERSON}$ does not include an edge in $E_s$. Thus, even if we redefine $G_f$ to disallow edges in $E_s$, the path $p$ still remains an augmenting path in the redefined network. Since $p$ remains unchanged, an iteration of the \nwhile\n loop of $\\text{FORD-FULKERSON}$ updates the flow in the same way as before the redefinition. Furthermore, by disallowing some edges, we do not introduce any new augmenting paths. Thus, $\\text{FORD-FULKERSON}$ still correctly computes a maximum flow.\n\n\nNow, we prove that $\\text{FORD-FULKERSON}$ never chooses an augmenting path $p$ that includes an edge $(v, s) \\in E_s$. Why? The path $p$ always starts from $s$, and if $p$ included an edge $(v, s)$, the vertex $s$ would be repeated twice in the path. Thus, $p$ would no longer be a \nsimple\n path. Since $\\text{FORD-FULKERSON}$ chooses only simple paths, $p$ cannot include $(v, s)$.\n\n\n26.2-9\n\n\n\n\nSuppose that both $f$ and $f'$ are flows in a network $G$ and we compute flow $f \\uparrow f'$. Does the augmented flow satisfy the flow conservation property? Does it satisfy the capacity constraint?\n\n\n\n\nThe augmented flow $f \\uparrow f'$ satisfies the flow conservation property but not the capacity constraint property.\n\n\nFirst, we prove that $f \\uparrow f'$ satisfies the flow conservation property. We note that if edge $(u, v) \\in E$, then $(v, u) \\ne E$ and $f'(v, u) = 0$. Thus, we can rewrite the definition of flow augmentation (equation $\\text{(26.4)}$), when applied to two flows, as\n\n\n$$\n(f \\uparrow f')(u, v) =\n\\begin{cases}\nf(u, v) + f'(u, v) & \\text{if $(u, v) \\in E$}, \\\\\n0                  & \\text{otherwise}.\n\\end{cases}\n$$\n\n\nThe definition implies that the new flow on each edge is simply the sum of the two flows on that edge. We now prove that in $f \\uparrow f'$, the net incoming flow for each vertex equals the net outgoing flow. Let $u \\ne {s, t}$ be any vertex of $G$. We have\n\n\n\\begin{align}\n\\sum_{v \\in V} (f \\uparrow f') (v, u)\n    & = \\sum_{v \\in V} (f(v, u) + f'(v, u)) \\\\\n    & = \\sum_{v \\in V} f(v, u) + \\sum_{v \\in V} f'(v, u) \\\\\n    & = \\sum_{v \\in V} f(u, v) + \\sum_{v \\in V} f'(u, v) \\quad \\text{(because $f$, $f'$ obey flow conservation)} \\\\\n    & = \\sum_{v \\in V} (f(u, v) + f'(u, v)) \\\\\n    & = \\sum_{v \\in V} (f \\uparrow f') (u, v).\n\\end{align}\n\n\nWe conclude that $f \\uparrow f'$ satisfies flow conservation.\n\n\nWe now show that $f \\uparrow f'$ need not satisfy the capacity constraint by giving a simple counterexample. Let the flow network $G$ have just a source and a target vertex, with a single edge $(s, t)$ having $c(s, t) = 1$. Define the flows $f$ and $f'$ to have $f(s, t) = f'(s, t) = 1$. Then, we have $(f \\uparrow f')(s, t) = 2 > c(s, t)$. We conclude that $f \\uparrow f'$ need not satisfy the capacity constraint.\n\n\n26.2-10\n\n\n\n\nShow how to find a maximum flow in a network $G = (V, E)$ by a sequence of at most $|E|$ augmenting paths. ($\\textit{Hint:}$ Determine the paths after finding the maximum flow.)\n\n\n\n\nSuppose we already have a maximum flow $f$. Consider a new graph $G$ where we set the capacity of edge $(u, v)$ to $f(u, v)$. Run Ford-Fulkerson, with the modification that we remove an edge if its flow reaches its capacity. In other words, if $f(u, v) = c(u, v)$ then there should be no reverse edge appearing in residual network. This will still produce correct output in our case because we never exceed the actual maximum flow through an edge, so it is never advantageous to cancel flow. The augmenting paths chosen in this modified version of Ford-Fulkerson are precisely the ones we want. There are at most $|E|$ because every augmenting path produces at least one edge whose flow is equal to its capacity, which we set to be the actual flow for the edge in a maximum flow, and our modification prevents us from ever destroying this progress.\n\n\n26.2-11\n\n\n\n\nThe \nedge connectivity\n of an undirected graph is the minimum number $k$ of edges that must be removed to disconnect the graph. For example, the edge connectivity of a tree is $1$, and the edge connectivity of a cyclic chain of vertices is $2$. Show how to determine the edge connectivity of an undirected graph $G = (V, E)$ by running a maximum-flow algorithm on at most $|V|$ flow networks, each having $O(V)$ vertices and $O(E)$ edges.\n\n\n\n\nFor any two vertices $u$ and $v$ in $G$, we can define a flow network $G_{uv}$ consisting of the directed version of $G$ with $s = u$, $t = v$, and all edge capacities set to $1$. (The flow network $G_{uv}$ has $V$ vertices and $2|E|$ edges, so that it has $O(V)$ vertices and $O(E)$ edges, as required. We want all capacities to be $1$ so that the number of edges of $G$ crossing a cut equals the capacity of the cut in $G_{uv}$.) Let $f_{uv}$ denote a maximum flow in $G_{uv}$.\n\n\nWe claim that for any $u \\in V$, the edge connectivity $k$ equals $\\min\\limits_{v \\in V - \\{u\\}}\\{|f_{uv}|\\}$. We'll show below that this claim holds. Assuming that it holds, we can find $k$ as follows:\n\n\nEDGE\n-\nCONNECTIVITY\n(\nG\n)\n\n    \nk\n \n=\n \n\u221e\n\n    \nselect\n \nany\n \nvertex\n \nu\n \n\u2208\n \nG\n.\nV\n\n    \nfor\n \neach\n \nvertex\n \nv\n \n\u2208\n \nG\n.\nV\n \n-\n \n{\nu\n}\n\n        \nset\n \nup\n \nthe\n \nflow\n \nnetwork\n \nG_\n{\nuv\n}\n \nas\n \ndescribed\n \nabove\n\n        \nfind\n \nthe\n \nmaximum\n \nflow\n \nf_\n{\nuv\n}\n \non\n \nG_\n{\nuv\n}\n\n        \nk\n \n=\n \nmin\n(\nk\n,\n \n|\nf_\n{\nuv\n}\n|\n)\n\n    \nreturn\n \nk\n\n\n\n\n\nThe claim follows from the max-flow min-cut theorem and how we chose capacities so that the capacity of a cut is the number of edges crossing it. We prove that $k = \\min\\limits_{v \\in V - \\{u\\}}\\{|f_{uv}|\\}$ for any $u \\in V$ by showing separately that $k$ is at least this minimum and that $k$ is at most this minimum.\n\n\n\n\nProof that $k \\ge \\min\\limits_{v \\in V - \\{u\\}} \\{|f_{uv}|\\}$:\n\n    Let $m = \\min\\limits_{v \\in V - \\{u\\}} \\{|f_{uv}|\\}$. Suppose we remove only $m - 1$ edges from $G$. For any vertex $v$, by the max-flow min-cut theorem, $u$ and $v$ are still connected. (The max flow from $u$ to $v$ is at least $m$, hence any cut separating $u$ from $v$ has capacity at least $m$, which means at least $m$ edges cross any such cut. Thus at least one edge is left crossing the cut when we remove $m - 1$ edges.) Thus every vertex is connected to $u$, which implies that the graph is still connected. So at least $m$ edges must be removed to disconnect the graph\u2014i.e., $k \\ge \\min\\limits_{v \\in V - \\{u\\}} \\{|f_{uv}|\\}$. \n\n\nProof that $k \\le \\min\\limits_{v \\in V - \\{u\\}} \\{|f_{uv}|\\}$:\n\n    Consider a vertex $v$ with the minimum $|f_{uv}|$. By the max-flow min-cut theorem, there is a cut of capacity $|f_{uv}|$ separating $u$ and $v$. Since all edge capacities are $1$, exactly $|f_{uv}|$ edges cross this cut. If these edges are removed, there is no path from $u$ to $v$, and so our graph becomes disconnected. Hence $k \\le \\min\\limits_{v \\in V - \\{u\\}} \\{|f_{uv}|\\}$\n\n\nThus, the claim that $k = \\min\\limits_{v \\in V - \\{u\\}} \\{|f_{uv}|\\}$ for any $u \\in V$ is true.\n\n\n\n\n26.2-12\n\n\n\n\nSuppose that you are given a flow network $G$, and $G$ has edges entering the source $s$. Let $f$ be a flow in $G$ in which one of the edges $(v, s)$ entering the source has $f(v, s) = 1$. Prove that there must exist another flow $f'$ with $f'(v, s) = 0$ such that $|f| = |f'|$. Give an $O(E)$-time algorithm to compute $f'$, given $f$, and assuming that all edge capacities are integers.\n\n\n\n\nThe idea of the proof is that if $f(v, s) = 1$, then there must exist a cycle containing the edge $(v, s)$ and for which each edge carries one unit of flow. If we reduce the flow on each edge in the cycle by one unit, we can reduce $f(v, s)$ to $0$ without affecting the value of the flow.\n\n\nGiven the flow network $G$ and the flow $f$, we say that vertex $y$ is \nflow-connected\n to vertex $z$ if there exists a path $p$ from $y$ to $z$ such that each edge of $p$ has a positive flow on it. We also define $y$ to be flow-connected to itself. In particular, $s$ is flow-connected to $s$.\n\n\nWe start by proving the following lemma:\n\n\nLemma\n \n\n\nLet $G = (V, E)$ be a flow network and $f$ be a flow in $G$. If $s$ is not flow-connected to $v$, then $f(v, s) = 0$.\n\n\nProof\n \n\n\nThe idea is that since $s$ is not flow-connected to $v$, there cannot be any flow from $s$ to $v$. By using flow conservation, we will prove that there cannot be any flow from $v$ to $s$ either, and thus that $f(v, s) = 0$.\n\n\nLet $Y$ be the set of all vertices $y$ such that $s$ is flow-connected to $y$. By applying flow conservation to vertices in $V - Y$ and taking the sum, we obtain\n\n\n$$\\sum_{z \\in V - Y} \\sum_{x \\in V} f(x, z) = \\sum_{z \\in V - Y} \\sum_{x \\in V} f(z, x).$$\n\n\nPartitioning $V$ into $Y$ and $V - Y$ gives\n\n\n$$\\sum_{z \\in V - Y} \\sum_{x \\in V - Y} f(x, z) + \\sum_{z \\in V - Y} \\sum_{x \\in Y} f(x, z) = \\sum_{z \\in V - Y} \\sum_{x \\in V - Y} f(z, x) + \\sum_{z \\in V - Y} \\sum_{x \\in Y} f(z, x). \\tag{*}$$\n\n\nBut we have\n\n\n$$\\sum_{z \\in V - Y} \\sum_{x \\in V - Y} f(x, z) = \\sum_{z \\in V - Y} \\sum_{x \\in V - Y} f(z, x),$$\n\n\nsince the left-hand side is the same as the right-hand side, except for a change of variable names $x$ and $z$. We also have\n\n\n$$\\sum_{z \\in V - Y} \\sum_{x \\in Y} f(x, z) = 0,$$\n\n\nsince the flow from any vertex in $Y$ to any vertex in $V - Y$ must be $0$. Thus, equation $(*)$ simplifies to\n\n\n$$\\sum_{z \\in V - Y} \\sum_{x \\in Y} f(z, x) = 0.$$\n\n\nThe above equation implies that $f(z, x) = 0$ for each $z \\in V - Y$ and $x \\in Y$. In particular, since $v \\in V - Y$ and $s \\in Y$, we have that $f(v, s) = 0$.\n\n\nNow, we show how to construct the required flow $f'$. By the contrapositive of the lemma, $f(v, s) > 0$ implies that $s$ is flow-connected to $v$ through some path $p$. Let path $p'$ be the path $s \\overset{p}{\\leadsto} v \\to s$. Path $p'$ is a cycle that has positive flow on each edge. Because we assume that all edge capacities are integers, the flow on each edge of $p'$ is at least $1$. If we subtract $1$ from each edge of the cycle to obtain a flow $f'$, then $f'$ still satisfies the properties of a flow network and has the same value as $|f|$. Because edge $(v, s)$ is in the cycle, we have that $f'(v, s) = f(v, s) - 1 = 0$.\n\n\n26.2-13\n\n\n\n\nSuppose that you wish to find, among all minimum cuts in a flow network $G$ with integral capacities, one that contains the smallest number of edges. Show how to modify the capacities of $G$ to create a new flow network $G'$ in which any minimum cut in $G'$ is a minimum cut with the smallest number of edges in $G$.\n\n\n\n\nLet $(S, T)$ and $(X, Y)$ be two cuts in $G$ (and $G'$). Let $c'$ be the capacity function of $G'$. One way to define $c'$ is to add a small amount $\\delta$ to the capacity of each edge in $G$. That is, if $u$ and $v$ are two vertices, we set\n\n\n$$c'(u, v) = c(u, v) + \\delta.$$\n\n\nThus, if $c(S, T) = c(X, Y)$ and $(S, T)$ has fewer edges than $(X, Y)$, then we would have $c'(S, T) < c'(X, Y)$. We have to be careful and choose a small $\\delta$, lest we change the relative ordering of two unequal capacities. That is, if $c(S, T) < c(X, Y)$, then no matter many more edges $(S, T)$ has than $(X, Y)$, we still need to have $c'(S, T) < c'(X, Y)$. With this definition of $c'$, a minimum cut in $G'$ will be a minimum cut in $G$ that has the minimum number of edges.\n\n\nHow should we choose the value of $\\delta$? Let $m$ be the minimum difference between capacities of two unequal-capacity cuts in $G$. Choose $\\delta = m / (2|E|)$. For any cut $(S, T)$, since the cut can have at most $|E|$ edges, we can bound $c'(S, T)$ by\n\n\n$$c(S, T) \\le c'(S, T) \\le c(S, T) + |E| \\cdot \\delta.$$\n\n\nLet $c(S, T) < c(X, Y)$. We need to prove that $c'(S, T) < c'(X, Y)$. We have\n\n\n\\begin{align}\nc'(S, T)\n    & \\le c(S, T) + |E| \\cdot \\delta \\\\\n    & =   c(S, T) + m / 2 \\\\\n    & <   c(X, Y) \\qquad \\text{(since $c(X, Y) - c(S, T) \\ge m$)} \\\\\n    & \\le c'(X, Y).\n\\end{align}\n\n\nBecause all capacities are integral, we can choose $m = 1$, obtaining $\\delta = 1 / 2|E|$. To avoid dealing with fractional values, we can scale all capacities by $2|E|$ to obtain\n\n\n$$c'(u, v) = 2|E| \\cdot c(u, v) + 1.$$",
            "title": "26.2 The Ford-Fulkerson method"
        },
        {
            "location": "/Chap26/26.2/#262-1",
            "text": "Prove that the summations in equation $\\text{(26.6)}$ equal the summations in equation $\\text{(26.7)}$.   Lemma   If $v \\notin V_1$, then $f(s, v) = 0$.  If $v \\notin V_2$, then $f(v, s) = 0$.  If $v \\notin V_1 \\cup V_2$, then $f'(s, v) = 0$.  If $v \\notin V_1 \\cup V_2$, then $f'(v, s) = 0$.   Proof   Let $v \\notin V_1$ be some vertex. From the definition of $V_1$, there is no edge from $s$ to $v$. Thus, $f(s, v) = 0$.  Let $v \\notin V_2$ be some vertex. From the definition of $V_2$, there is no edge from $v$ to $s$. Thus, $f(v, s) = 0$.  Let $v \\notin V_1 \\cup V_2$ be some vertex. From the definition of $V_1$ and $V_2$, neither $(s, v)$ nor $(v, s)$ exists. Therefore, the third condition of the definition of residual capacity (equation $\\text{(26.2)}$) applies, and $c_f(s, v) = 0$. Thus, $f'(s, v) = 0$.  Let $v \\notin V_1 \\cup V_2$ be some vertex. By equation $\\text{(26.2)}$, we have that $c_f(v, s) = 0$ and thus $f'(v, s) = 0$.",
            "title": "26.2-1"
        },
        {
            "location": "/Chap26/26.2/#262-2",
            "text": "In Figure $\\text{26.1}$(b), what is the flow across the cut $(\\{s, v_2, v_4\\}, \\{v_1, v_3, t\\})$? What is the capacity of this cut?   \\begin{align}\nf(S, T) & = f(s, v_1) + f(v_2, v_1) + f(v_4, v_3) + f(v_4, t) - f(v_3, v_2) = 11 + 1 + 7 + 4 - 4 = 19, \\\\\nc(S, T) & = c(s, v_1) + c(v_2, v_1) + c(v_4, v_3) + c(v_4, t) = 16 + 4 + 7 + 4 = 31.\n\\end{align}",
            "title": "26.2-2"
        },
        {
            "location": "/Chap26/26.2/#262-3",
            "text": "Show the execution of the Edmonds-Karp algorithm on the flow network of Figure 26.1(a).   If we perform a breadth first search where we consider the neighbors of a vertex as they appear in the ordering $\\{s, v_1, v_2, v_3, v_4, t\\}$, the first path that we will find is $s, v_1, v_3, t$. The min capacity of this augmenting path is $12$, so we send $12$ units along it. We perform a $\\text{BFS}$ on the resulting residual network. This gets us the path $s, v_2, v_4, t$. The min capacity along this path is $4$, so we send $4$ units along it. Then, the only path remaining in the residual network is $\\{s, v_2, v_4, v_3\\}$ which has a min capacity of $7$, since that's all that's left, we find it in our $\\text{BFS}$. Putting it all together, the total flow that we have found has a value of $23$.",
            "title": "26.2-3"
        },
        {
            "location": "/Chap26/26.2/#262-4",
            "text": "In the example of Figure 26.6, what is the minimum cut corresponding to the maximum flow shown? Of the augmenting paths appearing in the example, which one cancels flow?   A minimum cut corresponding to the maximum flow is $S = \\{s, v_1, v_2, v_4\\}$ and $T = \\{v_3, t\\}$. The augmenting path in part (c) cancels flow on edge $(v_3, v_2)$.",
            "title": "26.2-4"
        },
        {
            "location": "/Chap26/26.2/#262-5",
            "text": "Recall that the construction in Section 26.1 that converts a flow network with multiple sources and sinks into a single-source, single-sink network adds edges with infinite capacity. Prove that any flow in the resulting network has a finite value if the edges of the original network with multiple sources and sinks have finite capacity.   Since the only edges that have infinite value are those going from the supersource or to the supersink, as long as we pick a cut that has the supersource and all the original sources on one side, and the other side has the supersink as well as all the original sinks, then it will only cut through edges of finite capacity. Then, by Corollary 26.5, we have that the value of the flow is bounded above by the value of any of these types of cuts, which is finite.",
            "title": "26.2-5"
        },
        {
            "location": "/Chap26/26.2/#262-6",
            "text": "Suppose that each source $s_i$ in a flow network with multiple sources and sinks produces exactly $p_i$ units of flow, so that $\\sum_{v \\in V} f(s_i, v) = p_i$. Suppose also that each sink $t_j$ consumes exactly $q_j$ units, so that $\\sum_{v \\in V} f(v, t_j) = q_j$, where $\\sum_i p_i = \\sum_j q_j$. Show how to convert the problem of finding a flow $f$ that obeys these additional constraints into the problem of finding a maximum flow in a single-source, single-sink flow network.   $c(s, s_i) = p_i$, $c(t_j, t) = q_j$.",
            "title": "26.2-6"
        },
        {
            "location": "/Chap26/26.2/#262-7",
            "text": "Prove Lemma 26.2.   To check that $f_p$ is a flow, we make sure that it satisfies both the capacity constraints and the flow constraints. First, the capacity constraints. To see this, we recall our definition of $c_f(p)$, that is, it is the smallest residual capacity of any of the edges along the path $p$. Since we have that the residual capacity is always less than or equal to the initial capacity, we have that each value of the flow is less than the capacity. Second, we check the flow constraints, Since the only edges that are given any flow are along a path, we have that at each vertex interior to the path, the flow in from one edge is immediately canceled by the flow out to the next vertex in the path. Lastly, we can check that its value is equal to $c_f(p)$ because, while $s$ may show up at spots later on in the path, it will be canceled out as it leaves to go to the next vertex. So, the only net flow from s is the initial edge along the path, since it (along with all the other edges) is given flow $c_f(p)$, that is the value of the flow $f_p$.",
            "title": "26.2-7"
        },
        {
            "location": "/Chap26/26.2/#262-8",
            "text": "Suppose that we redefine the residual network to disallow edges into $s$. Argue that the procedure $\\text{FORD-FULKERSON}$ still correctly computes a maximum flow.   Let $G_f$ be the residual network just before an iteration of the  while  loop of $\\text{FORD-FULKERSON}$, and let $E_s$ be the set of residual edges of $G_f$ into $s$. We'll show that the augmenting path $p$ chosen by $\\text{FORD-FULKERSON}$ does not include an edge in $E_s$. Thus, even if we redefine $G_f$ to disallow edges in $E_s$, the path $p$ still remains an augmenting path in the redefined network. Since $p$ remains unchanged, an iteration of the  while  loop of $\\text{FORD-FULKERSON}$ updates the flow in the same way as before the redefinition. Furthermore, by disallowing some edges, we do not introduce any new augmenting paths. Thus, $\\text{FORD-FULKERSON}$ still correctly computes a maximum flow.  Now, we prove that $\\text{FORD-FULKERSON}$ never chooses an augmenting path $p$ that includes an edge $(v, s) \\in E_s$. Why? The path $p$ always starts from $s$, and if $p$ included an edge $(v, s)$, the vertex $s$ would be repeated twice in the path. Thus, $p$ would no longer be a  simple  path. Since $\\text{FORD-FULKERSON}$ chooses only simple paths, $p$ cannot include $(v, s)$.",
            "title": "26.2-8"
        },
        {
            "location": "/Chap26/26.2/#262-9",
            "text": "Suppose that both $f$ and $f'$ are flows in a network $G$ and we compute flow $f \\uparrow f'$. Does the augmented flow satisfy the flow conservation property? Does it satisfy the capacity constraint?   The augmented flow $f \\uparrow f'$ satisfies the flow conservation property but not the capacity constraint property.  First, we prove that $f \\uparrow f'$ satisfies the flow conservation property. We note that if edge $(u, v) \\in E$, then $(v, u) \\ne E$ and $f'(v, u) = 0$. Thus, we can rewrite the definition of flow augmentation (equation $\\text{(26.4)}$), when applied to two flows, as  $$\n(f \\uparrow f')(u, v) =\n\\begin{cases}\nf(u, v) + f'(u, v) & \\text{if $(u, v) \\in E$}, \\\\\n0                  & \\text{otherwise}.\n\\end{cases}\n$$  The definition implies that the new flow on each edge is simply the sum of the two flows on that edge. We now prove that in $f \\uparrow f'$, the net incoming flow for each vertex equals the net outgoing flow. Let $u \\ne {s, t}$ be any vertex of $G$. We have  \\begin{align}\n\\sum_{v \\in V} (f \\uparrow f') (v, u)\n    & = \\sum_{v \\in V} (f(v, u) + f'(v, u)) \\\\\n    & = \\sum_{v \\in V} f(v, u) + \\sum_{v \\in V} f'(v, u) \\\\\n    & = \\sum_{v \\in V} f(u, v) + \\sum_{v \\in V} f'(u, v) \\quad \\text{(because $f$, $f'$ obey flow conservation)} \\\\\n    & = \\sum_{v \\in V} (f(u, v) + f'(u, v)) \\\\\n    & = \\sum_{v \\in V} (f \\uparrow f') (u, v).\n\\end{align}  We conclude that $f \\uparrow f'$ satisfies flow conservation.  We now show that $f \\uparrow f'$ need not satisfy the capacity constraint by giving a simple counterexample. Let the flow network $G$ have just a source and a target vertex, with a single edge $(s, t)$ having $c(s, t) = 1$. Define the flows $f$ and $f'$ to have $f(s, t) = f'(s, t) = 1$. Then, we have $(f \\uparrow f')(s, t) = 2 > c(s, t)$. We conclude that $f \\uparrow f'$ need not satisfy the capacity constraint.",
            "title": "26.2-9"
        },
        {
            "location": "/Chap26/26.2/#262-10",
            "text": "Show how to find a maximum flow in a network $G = (V, E)$ by a sequence of at most $|E|$ augmenting paths. ($\\textit{Hint:}$ Determine the paths after finding the maximum flow.)   Suppose we already have a maximum flow $f$. Consider a new graph $G$ where we set the capacity of edge $(u, v)$ to $f(u, v)$. Run Ford-Fulkerson, with the modification that we remove an edge if its flow reaches its capacity. In other words, if $f(u, v) = c(u, v)$ then there should be no reverse edge appearing in residual network. This will still produce correct output in our case because we never exceed the actual maximum flow through an edge, so it is never advantageous to cancel flow. The augmenting paths chosen in this modified version of Ford-Fulkerson are precisely the ones we want. There are at most $|E|$ because every augmenting path produces at least one edge whose flow is equal to its capacity, which we set to be the actual flow for the edge in a maximum flow, and our modification prevents us from ever destroying this progress.",
            "title": "26.2-10"
        },
        {
            "location": "/Chap26/26.2/#262-11",
            "text": "The  edge connectivity  of an undirected graph is the minimum number $k$ of edges that must be removed to disconnect the graph. For example, the edge connectivity of a tree is $1$, and the edge connectivity of a cyclic chain of vertices is $2$. Show how to determine the edge connectivity of an undirected graph $G = (V, E)$ by running a maximum-flow algorithm on at most $|V|$ flow networks, each having $O(V)$ vertices and $O(E)$ edges.   For any two vertices $u$ and $v$ in $G$, we can define a flow network $G_{uv}$ consisting of the directed version of $G$ with $s = u$, $t = v$, and all edge capacities set to $1$. (The flow network $G_{uv}$ has $V$ vertices and $2|E|$ edges, so that it has $O(V)$ vertices and $O(E)$ edges, as required. We want all capacities to be $1$ so that the number of edges of $G$ crossing a cut equals the capacity of the cut in $G_{uv}$.) Let $f_{uv}$ denote a maximum flow in $G_{uv}$.  We claim that for any $u \\in V$, the edge connectivity $k$ equals $\\min\\limits_{v \\in V - \\{u\\}}\\{|f_{uv}|\\}$. We'll show below that this claim holds. Assuming that it holds, we can find $k$ as follows:  EDGE - CONNECTIVITY ( G ) \n     k   =   \u221e \n     select   any   vertex   u   \u2208   G . V \n     for   each   vertex   v   \u2208   G . V   -   { u } \n         set   up   the   flow   network   G_ { uv }   as   described   above \n         find   the   maximum   flow   f_ { uv }   on   G_ { uv } \n         k   =   min ( k ,   | f_ { uv } | ) \n     return   k   The claim follows from the max-flow min-cut theorem and how we chose capacities so that the capacity of a cut is the number of edges crossing it. We prove that $k = \\min\\limits_{v \\in V - \\{u\\}}\\{|f_{uv}|\\}$ for any $u \\in V$ by showing separately that $k$ is at least this minimum and that $k$ is at most this minimum.   Proof that $k \\ge \\min\\limits_{v \\in V - \\{u\\}} \\{|f_{uv}|\\}$: \n    Let $m = \\min\\limits_{v \\in V - \\{u\\}} \\{|f_{uv}|\\}$. Suppose we remove only $m - 1$ edges from $G$. For any vertex $v$, by the max-flow min-cut theorem, $u$ and $v$ are still connected. (The max flow from $u$ to $v$ is at least $m$, hence any cut separating $u$ from $v$ has capacity at least $m$, which means at least $m$ edges cross any such cut. Thus at least one edge is left crossing the cut when we remove $m - 1$ edges.) Thus every vertex is connected to $u$, which implies that the graph is still connected. So at least $m$ edges must be removed to disconnect the graph\u2014i.e., $k \\ge \\min\\limits_{v \\in V - \\{u\\}} \\{|f_{uv}|\\}$.   Proof that $k \\le \\min\\limits_{v \\in V - \\{u\\}} \\{|f_{uv}|\\}$: \n    Consider a vertex $v$ with the minimum $|f_{uv}|$. By the max-flow min-cut theorem, there is a cut of capacity $|f_{uv}|$ separating $u$ and $v$. Since all edge capacities are $1$, exactly $|f_{uv}|$ edges cross this cut. If these edges are removed, there is no path from $u$ to $v$, and so our graph becomes disconnected. Hence $k \\le \\min\\limits_{v \\in V - \\{u\\}} \\{|f_{uv}|\\}$  Thus, the claim that $k = \\min\\limits_{v \\in V - \\{u\\}} \\{|f_{uv}|\\}$ for any $u \\in V$ is true.",
            "title": "26.2-11"
        },
        {
            "location": "/Chap26/26.2/#262-12",
            "text": "Suppose that you are given a flow network $G$, and $G$ has edges entering the source $s$. Let $f$ be a flow in $G$ in which one of the edges $(v, s)$ entering the source has $f(v, s) = 1$. Prove that there must exist another flow $f'$ with $f'(v, s) = 0$ such that $|f| = |f'|$. Give an $O(E)$-time algorithm to compute $f'$, given $f$, and assuming that all edge capacities are integers.   The idea of the proof is that if $f(v, s) = 1$, then there must exist a cycle containing the edge $(v, s)$ and for which each edge carries one unit of flow. If we reduce the flow on each edge in the cycle by one unit, we can reduce $f(v, s)$ to $0$ without affecting the value of the flow.  Given the flow network $G$ and the flow $f$, we say that vertex $y$ is  flow-connected  to vertex $z$ if there exists a path $p$ from $y$ to $z$ such that each edge of $p$ has a positive flow on it. We also define $y$ to be flow-connected to itself. In particular, $s$ is flow-connected to $s$.  We start by proving the following lemma:  Lemma    Let $G = (V, E)$ be a flow network and $f$ be a flow in $G$. If $s$ is not flow-connected to $v$, then $f(v, s) = 0$.  Proof    The idea is that since $s$ is not flow-connected to $v$, there cannot be any flow from $s$ to $v$. By using flow conservation, we will prove that there cannot be any flow from $v$ to $s$ either, and thus that $f(v, s) = 0$.  Let $Y$ be the set of all vertices $y$ such that $s$ is flow-connected to $y$. By applying flow conservation to vertices in $V - Y$ and taking the sum, we obtain  $$\\sum_{z \\in V - Y} \\sum_{x \\in V} f(x, z) = \\sum_{z \\in V - Y} \\sum_{x \\in V} f(z, x).$$  Partitioning $V$ into $Y$ and $V - Y$ gives  $$\\sum_{z \\in V - Y} \\sum_{x \\in V - Y} f(x, z) + \\sum_{z \\in V - Y} \\sum_{x \\in Y} f(x, z) = \\sum_{z \\in V - Y} \\sum_{x \\in V - Y} f(z, x) + \\sum_{z \\in V - Y} \\sum_{x \\in Y} f(z, x). \\tag{*}$$  But we have  $$\\sum_{z \\in V - Y} \\sum_{x \\in V - Y} f(x, z) = \\sum_{z \\in V - Y} \\sum_{x \\in V - Y} f(z, x),$$  since the left-hand side is the same as the right-hand side, except for a change of variable names $x$ and $z$. We also have  $$\\sum_{z \\in V - Y} \\sum_{x \\in Y} f(x, z) = 0,$$  since the flow from any vertex in $Y$ to any vertex in $V - Y$ must be $0$. Thus, equation $(*)$ simplifies to  $$\\sum_{z \\in V - Y} \\sum_{x \\in Y} f(z, x) = 0.$$  The above equation implies that $f(z, x) = 0$ for each $z \\in V - Y$ and $x \\in Y$. In particular, since $v \\in V - Y$ and $s \\in Y$, we have that $f(v, s) = 0$.  Now, we show how to construct the required flow $f'$. By the contrapositive of the lemma, $f(v, s) > 0$ implies that $s$ is flow-connected to $v$ through some path $p$. Let path $p'$ be the path $s \\overset{p}{\\leadsto} v \\to s$. Path $p'$ is a cycle that has positive flow on each edge. Because we assume that all edge capacities are integers, the flow on each edge of $p'$ is at least $1$. If we subtract $1$ from each edge of the cycle to obtain a flow $f'$, then $f'$ still satisfies the properties of a flow network and has the same value as $|f|$. Because edge $(v, s)$ is in the cycle, we have that $f'(v, s) = f(v, s) - 1 = 0$.",
            "title": "26.2-12"
        },
        {
            "location": "/Chap26/26.2/#262-13",
            "text": "Suppose that you wish to find, among all minimum cuts in a flow network $G$ with integral capacities, one that contains the smallest number of edges. Show how to modify the capacities of $G$ to create a new flow network $G'$ in which any minimum cut in $G'$ is a minimum cut with the smallest number of edges in $G$.   Let $(S, T)$ and $(X, Y)$ be two cuts in $G$ (and $G'$). Let $c'$ be the capacity function of $G'$. One way to define $c'$ is to add a small amount $\\delta$ to the capacity of each edge in $G$. That is, if $u$ and $v$ are two vertices, we set  $$c'(u, v) = c(u, v) + \\delta.$$  Thus, if $c(S, T) = c(X, Y)$ and $(S, T)$ has fewer edges than $(X, Y)$, then we would have $c'(S, T) < c'(X, Y)$. We have to be careful and choose a small $\\delta$, lest we change the relative ordering of two unequal capacities. That is, if $c(S, T) < c(X, Y)$, then no matter many more edges $(S, T)$ has than $(X, Y)$, we still need to have $c'(S, T) < c'(X, Y)$. With this definition of $c'$, a minimum cut in $G'$ will be a minimum cut in $G$ that has the minimum number of edges.  How should we choose the value of $\\delta$? Let $m$ be the minimum difference between capacities of two unequal-capacity cuts in $G$. Choose $\\delta = m / (2|E|)$. For any cut $(S, T)$, since the cut can have at most $|E|$ edges, we can bound $c'(S, T)$ by  $$c(S, T) \\le c'(S, T) \\le c(S, T) + |E| \\cdot \\delta.$$  Let $c(S, T) < c(X, Y)$. We need to prove that $c'(S, T) < c'(X, Y)$. We have  \\begin{align}\nc'(S, T)\n    & \\le c(S, T) + |E| \\cdot \\delta \\\\\n    & =   c(S, T) + m / 2 \\\\\n    & <   c(X, Y) \\qquad \\text{(since $c(X, Y) - c(S, T) \\ge m$)} \\\\\n    & \\le c'(X, Y).\n\\end{align}  Because all capacities are integral, we can choose $m = 1$, obtaining $\\delta = 1 / 2|E|$. To avoid dealing with fractional values, we can scale all capacities by $2|E|$ to obtain  $$c'(u, v) = 2|E| \\cdot c(u, v) + 1.$$",
            "title": "26.2-13"
        },
        {
            "location": "/Chap26/26.3/",
            "text": "26.3-1\n\n\n\n\nRun the Ford-Fulkerson algorithm on the flow network in Figure 26.8(c) and show the residual network after each flow augmentation. Number the vertices in $L$ top to bottom from 1 to 5 and in $R$ top to bottom from 6 to 9. For each iteration, pick the augmenting path that is lexicographically smallest.\n\n\n\n\nFirst, we pick an augmenting path that passes through vertices 1 and 6. Then, we pick the path going through 2 and 8. Then, we pick the path going through 3 and 7. Then, the resulting residual graph has no path from $s$ to $t$. So, we know that we are done, and that we are pairing up vertices $(1, 6)$, $(2, 8)$, and $(3, 7)$. This number of unit augmenting paths agrees with the value of the cut where you cut the edges $(s, 3)$, $(6, t)$, and $(7, t)$.\n\n\n26.3-2\n\n\n\n\nProve Theorem 26.10.\n\n\n\n\nWe proceed by induction on the number of iterations of the while loop of Ford-Fulkerson. After the first iteration, since $c$ only takes on integer values and $(u, v).f$ is set to $0$, $c_f$ only takes on integer values. Thus, lines 7 and 8 of Ford-Fulkerson only assign integer values to $(u, v).f$. Assume that $(u, v).f \\in \\mathbb Z$ for all $(u, v)$ after the $n$th iteration. On the $(n + 1)$th iteration $c_f(p)$ is set to the minimum of $c_f(u, v)$ which is an integer by the induction hypothesis. Lines 7 and 8 compute $(u, v).f$ or $(v, u).f$. Either way, these the the sum or difference of integers by assumption, so after the $(n + 1)$th iteration we have that $(u, v).f$ is an integer for all $(u, v) \\in E$. Since the value of the flow is a sum of flows of edges, we must have $|f| \\in \\mathbb Z$ as well.\n\n\n26.3-3\n\n\n\n\nLet $G = (V, E)$ be a bipartite graph with vertex partition $V = L \\cup R$, and let $G'$ be its corresponding flow network. Give a good upper bound on the length of any augmenting path found in $G'$ during the execution of $\\text{FORD-FULKERSON}$.\n\n\n\n\nBy definition, an augmenting path is a simple path $s \\leadsto t$ in the residual network $G_f'$. Since $G$ has no edges between vertices in $L$ and no edges between vertices in $R$, neither does the flow network $G'$ and hence neither does $G_f'$. Also, the only edges involving $s$ or $t$ connect $s$ to $L$ and $R$ to $t$. Note that although edges in $G'$ can go only from $L$ to $R$, edges in $G_f'$ can also go from $R$ to $L$.\n\n\nThus any augmenting path must go\n\n\n$$s \\to L \\to R \\to \\cdots \\to L \\to R \\to t,$$\n\n\ncrossing back and forth between $L$ and $R$ at most as many times as it can do so without using a vertex twice. It contains $s$, $t$, and equal numbers of distinct vertices from $L$ and $R$\u2014at most $2 + 2 \\cdot \\min(|L|, |R|)$ vertices in all. The length of an augmenting path (i.e., its number of edges) is thus bounded above by $2 \\cdot \\min(|L|, |R|) + 1$.\n\n\n26.3-4 $\\star$\n\n\n\n\nA \nperfect matching\n is a matching in which every vertex is matched. Let $G = (V, E)$ be an undirected bipartite graph with vertex partition $V = L \\cup R$, where $|L| = |R|$. For any $X \\subseteq V$, define the \nneighborhood\n of $X$ as\n\n\n$N(X) = \\{y \\in V: (x, y) \\in E \\text{ for some } x \\in X\\}$,\n\n\nthat is, the set of vertices adjacent to some member of $X$. Prove \nHall's theorem\n: there exists a perfect matching in $G$ if and only if $|A| \\le |N(A)|$ for every subset $A \\subseteq L$.\n\n\n\n\nFirst suppose there exists a perfect matching in $G$. Then for any subset $A \\subseteq L$, each vertex of $A$ is matched with a neighbor in $R$, and since it is a matching, no two such vertices are matched with the same vertex in $R$. Thus, there are at least $|A|$ vertices in the neighborhood of $A$.\n\n\nNow suppose that $|A| \\le |N(A)|$ for all $A \\subseteq L$. Run Ford-Fulkerson on the corresponding flow network. The flow is increased by $1$ each time an augmenting path is found, so it will suffice to show that this happens $|L|$ times. Suppose the while loop has run fewer than $L$ times, but there is no augmenting path. Then fewer than $L$ edges from $L$ to $R$ have flow $1$. \n\n\nLet $v_1 \\in L$ be such that no edge from $v_1$ to a vertex in $R$ has nonzero flow. By assumption, $v_1$ has at least one neighbor $v_1' \\in R$. If any of $v_1$'s neighbors are connected to $t$ in $G_f$ then there is a path, so assume this is not the case. Thus, there must be some edge $(v_2, v_1)$ with flow $1$. By assumption, $N(\\{v_1, v_2\\}) \\ge 2$, so there must exist $v_2' \\ne v_1'$ such that $v_2'\\in N(\\{v_1, v_2 \\})$. If $(v_2', t)$ is an edge in the residual network we're done since $v_2'$ must be a neighbor of $v_2$, so $s$, $v_1$, $v_1'$, $v_2$, $v_2'$, and $t$ is a path in $G_f$. Otherwise $v_2'$ must have a neighbor $v_3 \\in L$ such that $(v_3, v_2')$ is in $G_f$. Specifically, $v_3 \\ne v_1$ since $(v_3, v_2')$ has flow $1$, and $v_3 \\ne v_2$ since $(v_2, v_1')$ has flow $1$, so no more flow can leave $v_2$ without violating conservation of flow. Again by our hypothesis, $N(\\{v_1, v_2, v_3\\}) \\ge 3$, so there is another neighbor $v_3' \\in R$.\n\n\nContinuing in this fashion, we keep building up the neighborhood $v_i'$, expanding each time we find that $(v_i', t)$ is not an edge in $G_f$. This cannot happen $L$ times, since we have run the Ford-Fulkerson while-loop fewer than $|L|$ times, so there still exist edges into $t$ in $G_f$. Thus, the process must stop at some vertex $v_k'$, and we obtain an augmenting path \n\n\n$$s, v_1, v_1', v_2, v_2', v_3, \\ldots, v_k, v_k', t,$$\n\n\ncontradicting our assumption that there was no such path. Therefore the while loop runs at least $|L|$ times. By Corollary 26.3 the flow strictly increases each time by $f_p$. By Theorem 26.10 $f_p$ is an integer. In particular, it is equal to $1$. This implies that $|f| \\ge |L|$. It is clear that $|f| \\le |L|$, so we must have $|f| = |L|$. By Corollary 26.11 this is the cardinality of a maximum matching. Since $|L| = |R|$, any maximum matching must be a perfect matching.\n\n\n26.3-5 $\\star$\n\n\n\n\nWe say that a bipartite graph $G = (V, E)$, where $V = L \\cup R$, is \n$d$-regular\n if every vertex $v \\in V$ has degree exactly $d$. Every $d$-regular bipartite graph has $|L| = |R|$. Prove that every $d$-regular bipartite graph has a matching of cardinality $|L|$ by arguing that a minimum cut of the corresponding flow network has capacity $|L|$.\n\n\n\n\nWe convert the bipartite graph into a flow problem by making a new vertex for the source which has an edge of unit capacity going to each of the vertices in $L$, and a new vertex for the sink that has an edge from each of the vertices in $R$, each with unit capacity. We want to show that the number of edge between the two parts of the cut is at least $L$, this would get us by the max-flow-min-cut theorem that there is a flow of value at least $|L|$. The, we can apply the integrality theorem that all of the flow values are integers, meaning that we are selecting $|L|$ disjoint edges between $L$ and $R$.\n\n\nTo see that every cut must have capacity at lest $|L|$, let $S_1$ be the side of the cut containing the source and let $S_2$ be the side of the cut containing the sink. Then, look at $L \\cap S_1$. The source has an edge going to each of $L \\cap (S_1)^c$, and there is an edge from $R \\cap S_1$ to the sink that will be cut. This means that we need that there are at least $|L \\cap S_1| - |R \\cap S_1|$ many edges going from $L \\cap S_1$ to $R \\cap S_2$. If we look at the set of all neighbors of $L \\cap S_1$, we get that there must be at least the same number of neighbors in $R$, because otherwise we could sum up the degrees going from $L \\cap S_1$ to $R$ on both sides, and get that some of the vertices in $R$ would need to have a degree higher than $d$. This means that the number of neighbors of $L \\cap S_1$ is at least $L \\cap S_1$, but we have that they are in $S_1$, but there are only $|R \\cap S_1|$ of those, so, we have that the size of the set of neighbors of $L \\cap S_1$ that are in $S_2$ is at least $|L \\cap S_1| - |R \\cap S_1|$. Since each of these neighbors has an edge crossing the cut, we have that the total number of edges that the cut breaks is at least \n\n\n$$(|L| - |L \\cap S_1|) + (|L \\cap S_1| - |R \\cap S_1|) + |R \\cap S_1| = |L|.$$\n\n\nSince each of these edges is unit valued, the value of the cut is at least $|L|$.",
            "title": "26.3 Maximum bipartite matching"
        },
        {
            "location": "/Chap26/26.3/#263-1",
            "text": "Run the Ford-Fulkerson algorithm on the flow network in Figure 26.8(c) and show the residual network after each flow augmentation. Number the vertices in $L$ top to bottom from 1 to 5 and in $R$ top to bottom from 6 to 9. For each iteration, pick the augmenting path that is lexicographically smallest.   First, we pick an augmenting path that passes through vertices 1 and 6. Then, we pick the path going through 2 and 8. Then, we pick the path going through 3 and 7. Then, the resulting residual graph has no path from $s$ to $t$. So, we know that we are done, and that we are pairing up vertices $(1, 6)$, $(2, 8)$, and $(3, 7)$. This number of unit augmenting paths agrees with the value of the cut where you cut the edges $(s, 3)$, $(6, t)$, and $(7, t)$.",
            "title": "26.3-1"
        },
        {
            "location": "/Chap26/26.3/#263-2",
            "text": "Prove Theorem 26.10.   We proceed by induction on the number of iterations of the while loop of Ford-Fulkerson. After the first iteration, since $c$ only takes on integer values and $(u, v).f$ is set to $0$, $c_f$ only takes on integer values. Thus, lines 7 and 8 of Ford-Fulkerson only assign integer values to $(u, v).f$. Assume that $(u, v).f \\in \\mathbb Z$ for all $(u, v)$ after the $n$th iteration. On the $(n + 1)$th iteration $c_f(p)$ is set to the minimum of $c_f(u, v)$ which is an integer by the induction hypothesis. Lines 7 and 8 compute $(u, v).f$ or $(v, u).f$. Either way, these the the sum or difference of integers by assumption, so after the $(n + 1)$th iteration we have that $(u, v).f$ is an integer for all $(u, v) \\in E$. Since the value of the flow is a sum of flows of edges, we must have $|f| \\in \\mathbb Z$ as well.",
            "title": "26.3-2"
        },
        {
            "location": "/Chap26/26.3/#263-3",
            "text": "Let $G = (V, E)$ be a bipartite graph with vertex partition $V = L \\cup R$, and let $G'$ be its corresponding flow network. Give a good upper bound on the length of any augmenting path found in $G'$ during the execution of $\\text{FORD-FULKERSON}$.   By definition, an augmenting path is a simple path $s \\leadsto t$ in the residual network $G_f'$. Since $G$ has no edges between vertices in $L$ and no edges between vertices in $R$, neither does the flow network $G'$ and hence neither does $G_f'$. Also, the only edges involving $s$ or $t$ connect $s$ to $L$ and $R$ to $t$. Note that although edges in $G'$ can go only from $L$ to $R$, edges in $G_f'$ can also go from $R$ to $L$.  Thus any augmenting path must go  $$s \\to L \\to R \\to \\cdots \\to L \\to R \\to t,$$  crossing back and forth between $L$ and $R$ at most as many times as it can do so without using a vertex twice. It contains $s$, $t$, and equal numbers of distinct vertices from $L$ and $R$\u2014at most $2 + 2 \\cdot \\min(|L|, |R|)$ vertices in all. The length of an augmenting path (i.e., its number of edges) is thus bounded above by $2 \\cdot \\min(|L|, |R|) + 1$.",
            "title": "26.3-3"
        },
        {
            "location": "/Chap26/26.3/#263-4-star",
            "text": "A  perfect matching  is a matching in which every vertex is matched. Let $G = (V, E)$ be an undirected bipartite graph with vertex partition $V = L \\cup R$, where $|L| = |R|$. For any $X \\subseteq V$, define the  neighborhood  of $X$ as  $N(X) = \\{y \\in V: (x, y) \\in E \\text{ for some } x \\in X\\}$,  that is, the set of vertices adjacent to some member of $X$. Prove  Hall's theorem : there exists a perfect matching in $G$ if and only if $|A| \\le |N(A)|$ for every subset $A \\subseteq L$.   First suppose there exists a perfect matching in $G$. Then for any subset $A \\subseteq L$, each vertex of $A$ is matched with a neighbor in $R$, and since it is a matching, no two such vertices are matched with the same vertex in $R$. Thus, there are at least $|A|$ vertices in the neighborhood of $A$.  Now suppose that $|A| \\le |N(A)|$ for all $A \\subseteq L$. Run Ford-Fulkerson on the corresponding flow network. The flow is increased by $1$ each time an augmenting path is found, so it will suffice to show that this happens $|L|$ times. Suppose the while loop has run fewer than $L$ times, but there is no augmenting path. Then fewer than $L$ edges from $L$ to $R$ have flow $1$.   Let $v_1 \\in L$ be such that no edge from $v_1$ to a vertex in $R$ has nonzero flow. By assumption, $v_1$ has at least one neighbor $v_1' \\in R$. If any of $v_1$'s neighbors are connected to $t$ in $G_f$ then there is a path, so assume this is not the case. Thus, there must be some edge $(v_2, v_1)$ with flow $1$. By assumption, $N(\\{v_1, v_2\\}) \\ge 2$, so there must exist $v_2' \\ne v_1'$ such that $v_2'\\in N(\\{v_1, v_2 \\})$. If $(v_2', t)$ is an edge in the residual network we're done since $v_2'$ must be a neighbor of $v_2$, so $s$, $v_1$, $v_1'$, $v_2$, $v_2'$, and $t$ is a path in $G_f$. Otherwise $v_2'$ must have a neighbor $v_3 \\in L$ such that $(v_3, v_2')$ is in $G_f$. Specifically, $v_3 \\ne v_1$ since $(v_3, v_2')$ has flow $1$, and $v_3 \\ne v_2$ since $(v_2, v_1')$ has flow $1$, so no more flow can leave $v_2$ without violating conservation of flow. Again by our hypothesis, $N(\\{v_1, v_2, v_3\\}) \\ge 3$, so there is another neighbor $v_3' \\in R$.  Continuing in this fashion, we keep building up the neighborhood $v_i'$, expanding each time we find that $(v_i', t)$ is not an edge in $G_f$. This cannot happen $L$ times, since we have run the Ford-Fulkerson while-loop fewer than $|L|$ times, so there still exist edges into $t$ in $G_f$. Thus, the process must stop at some vertex $v_k'$, and we obtain an augmenting path   $$s, v_1, v_1', v_2, v_2', v_3, \\ldots, v_k, v_k', t,$$  contradicting our assumption that there was no such path. Therefore the while loop runs at least $|L|$ times. By Corollary 26.3 the flow strictly increases each time by $f_p$. By Theorem 26.10 $f_p$ is an integer. In particular, it is equal to $1$. This implies that $|f| \\ge |L|$. It is clear that $|f| \\le |L|$, so we must have $|f| = |L|$. By Corollary 26.11 this is the cardinality of a maximum matching. Since $|L| = |R|$, any maximum matching must be a perfect matching.",
            "title": "26.3-4 $\\star$"
        },
        {
            "location": "/Chap26/26.3/#263-5-star",
            "text": "We say that a bipartite graph $G = (V, E)$, where $V = L \\cup R$, is  $d$-regular  if every vertex $v \\in V$ has degree exactly $d$. Every $d$-regular bipartite graph has $|L| = |R|$. Prove that every $d$-regular bipartite graph has a matching of cardinality $|L|$ by arguing that a minimum cut of the corresponding flow network has capacity $|L|$.   We convert the bipartite graph into a flow problem by making a new vertex for the source which has an edge of unit capacity going to each of the vertices in $L$, and a new vertex for the sink that has an edge from each of the vertices in $R$, each with unit capacity. We want to show that the number of edge between the two parts of the cut is at least $L$, this would get us by the max-flow-min-cut theorem that there is a flow of value at least $|L|$. The, we can apply the integrality theorem that all of the flow values are integers, meaning that we are selecting $|L|$ disjoint edges between $L$ and $R$.  To see that every cut must have capacity at lest $|L|$, let $S_1$ be the side of the cut containing the source and let $S_2$ be the side of the cut containing the sink. Then, look at $L \\cap S_1$. The source has an edge going to each of $L \\cap (S_1)^c$, and there is an edge from $R \\cap S_1$ to the sink that will be cut. This means that we need that there are at least $|L \\cap S_1| - |R \\cap S_1|$ many edges going from $L \\cap S_1$ to $R \\cap S_2$. If we look at the set of all neighbors of $L \\cap S_1$, we get that there must be at least the same number of neighbors in $R$, because otherwise we could sum up the degrees going from $L \\cap S_1$ to $R$ on both sides, and get that some of the vertices in $R$ would need to have a degree higher than $d$. This means that the number of neighbors of $L \\cap S_1$ is at least $L \\cap S_1$, but we have that they are in $S_1$, but there are only $|R \\cap S_1|$ of those, so, we have that the size of the set of neighbors of $L \\cap S_1$ that are in $S_2$ is at least $|L \\cap S_1| - |R \\cap S_1|$. Since each of these neighbors has an edge crossing the cut, we have that the total number of edges that the cut breaks is at least   $$(|L| - |L \\cap S_1|) + (|L \\cap S_1| - |R \\cap S_1|) + |R \\cap S_1| = |L|.$$  Since each of these edges is unit valued, the value of the cut is at least $|L|$.",
            "title": "26.3-5 $\\star$"
        },
        {
            "location": "/Chap26/26.4/",
            "text": "26.4-1\n\n\n\n\nProve that, after the procedure $\\text{INITIALIZE-PREFLOW}(G, S)$ terminates, we have $s.e \\le -|f^*|$, where $f^*$ is a maximum flow for $G$.\n\n\n\n\nWe apply the definition of excess flow (equation $\\text{(26.14)}$) to the initial preflow $f$ created by $\\text{INITIALIZE-PREFLOW}$ (equation $\\text{(26.15)}$) to obtain\n\n\n\\begin{align}\ne(s) & = \\sum_{v \\in V} f(v, s) - \\sum_{v \\in V} f(s, v) \\\\\n     & = 0 - \\sum_{v \\in V} c(s, v) \\\\\n     & = -\\sum_{v \\in V} c(s, v).\n\\end{align}\n\n\nNow,\n\n\n\\begin{align}\n-|f^*| & =   \\sum_{v \\in V} f^*(v, s) - \\sum_{v \\in V} f^*(s, v) \\\\\n        & \\ge 0 - \\sum_{v \\in V} c(s, v) \\qquad \\text{(since $f^*(v, s) \\ge 0$ and $f^*(s, v) \\le c(s, v)$)} \\\\\n        & = e(s).\n\\end{align}\n\n\n26.4-2\n\n\n\n\nShow how to implement the generic push-relabel algorithm using $O(V)$ time per relabel operation, $O(1)$ time per push, and $O(1)$ time to select an applicable operation, for a total time of $O(V^2E)$.\n\n\n\n\nWe must select an appropriate data structure to store all the information which will allow us to select a valid operation in constant time. To do this, we will need to maintain a list of overflowing vertices. By Lemma 26.14, a push or a relabel operation always applies to an overflowing vertex. To determine which operation to perform, we need to determine whether $u.h = v.h + 1$ for some $v \\in N(u)$. We'll do this by maintaining a list $u.high$ of all neighbors of $u$ in $G_f$ which have height greater than or equal to $u$. We'll update these attributes in the $\\text{PUSH}$ and $\\text{RELABEL}$ functions. It is clear from the pseudocode given for $\\text{PUSH}$ that we can execute it in constant time, provided we have maintain the attributes $\\delta_f(u, v)$, $u.e$, $c_f(u, v)$, $(u, v).f$ and $u.h$. Each time we call $\\text{PUSH}(u, v)$ the result is that $u$ is no longer overflowing, so we must remove it from the list.\n\n\nMaintain a pointer $u.overflow$ to $u$'s position in the overflow list. If a vertex $u$ is not overflowing, set $u.overflow = \\text{NIL}$. Next, check if $v$ became overflowing. If so, set $v.overflow$ equal to the head of the overflow list. Since we can update the pointer in constant time and delete from a linked list given a pointer to the element to be deleted in constant time, we can maintain the list in $O(1)$.\n\n\nThe $\\text{RELABEL}$ operation takes $O(V)$ because we need to compute the minimum $v.h$ from among all $(u, v) \\in E_f$, and there could be $|V| - 1$ many such $v$. We will also need to update $u.high$ during $\\text{RELABEL}$. When $\\text{RELABEL}(u)$ is called, set $u.high$ equal to the empty list and for each vertex $v$ which is adjacent to $u$, if $v.h = u.h + 1$, add $u$ to the list $v.high$. Since this takes constant time per adjacent vertex we can maintain the attribute in $O(V)$ per call to relabel.\n\n\n26.4-3\n\n\n\n\nProve that the generic push-relabel algorithm spends a total of only $O(VE)$ time in performing all the $O(V^2)$ relabel operations.\n\n\n\n\nEach time we call $\\text{RELABEL}(u)$, we examine all edges $(u, v) \\in E_f$. Since the number of relabel operations is at most $2|V| - 1$ per vertex, edge $(u, v)$ will be examined during relabel operations at most $4|V| - 2 = O(V)$ times (at most $2|V| - 1$ times during calls to $\\text{RELABEL}(u)$ and at most $2|V| - 1$ times during calls to $\\text{RELABEL}(v)$). Summing up over all the possible residual edges, of which there are at most $2|E| = O(E)$, we see that the total time spent relabeling vertices is $O(VE)$.\n\n\n26.4-4\n\n\n\n\nSuppose that we have found a maximum flow in a flow network $G = (V, E)$ using a push-relabel algorithm. Give a fast algorithm to find a minimum cut in $G$.\n\n\n\n\nWe can find a minimum cut, given a maximum flow found in $G = (V, E)$ by a push-relabel algorithm, in $O(V)$ time. First, find a height $\\hat h$ such that $0 < \\hat h < |V|$ and there is no vertex whose height equals $\\hat h$ at termination of the algorithm. We need consider only $|V| - 2$ vertices, since $s.h = |V|$ and $t.h = 0$. Because $\\hat h$ can be one of at most $|V| - 1$ possible values, we know that for at least one number in $1, 2, \\ldots, |V| - 1$, there will be no vertex of that height. Hence, $\\hat h$ is well defined, and it is easy to find in $O(V)$ time by using a simple boolean array indexed by heights $1, 2, \\ldots, |V| - 1$.\n\n\nLet $S = {u \\in V: u.h > \\hat h}$ and $T = {v \\in V: v.h < \\hat h}$. Because we know that $s.h = |V| > \\hat h$, we have $s \\in S$, and because $t.h = 0 < \\hat h$, y we have $t \\in T$, as required for a cut.\n\n\nWe need to show that $f(u, v) = c(u, v)$, i.e., that $(u, v) \\notin E_f$, for all $u \\in S$ and $v \\in T$. Once we do that, we have that $f(S, T) = c(S, T)$, and by Corollary 26.5, $(S, T)$ is a minimum cut.\n\n\nSuppose for the purpose of contradiction that there exist vertices $u \\in S$ and $v \\in T$ such that $(u, v) \\in E_f$. Because $h$ is always maintained as a height function (Lemma 26.16), we have that $u.h \\le v.h + 1$. But we also have $v.h < \\hat h < u.h$, and because all values are integer, $v.h \\le u.h - 2$. Thus, we have $u.h \\le v.h + 1 \\le u.h - 2 + 1 = u.h - 1$, which gives the contradiction that $u.height \\le u.height - 1$. Thus, $(S, T)$ is a minimum cut.\n\n\n26.4-5\n\n\n\n\nGive an efficient push-relabel algorithm to find a maximum matching in a bipartite graph. Analyze your algorithm.\n\n\n\n\nFirst, construct the flow network for the bipartite graph as in the previous section. Then, we relabel everything in $L$. Then, we push from every vertex in $L$ to a vertex in $R$, so long as it is possible.\n\n\nKeeping track of those that vertices of $L$ that are still overflowing can be done by a simple bit vector. Then, we relabel everything in R and push to the last vertex. Once these operations have been done, The only possible valid operations are to relabel the vertices of $L$ that weren't able to find an edge that they could push their flow along, so could possibly have to get a push back from $R$ to $L$. This continues until there are no more operations to do. This takes time of $O(V(E + V))$.\n\n\n26.4-6\n\n\n\n\nSuppose that all edge capacities in a flow network $G = (V, E)$ are in the set ${1, 2, \\ldots, k}$. Analyze the running time of the generic push-relabel algorithm in terms of $|V|$, $|E|$, and $k$. ($\\textit{Hint:}$ How many times can each edge support a nonsaturating push before it becomes saturated?)\n\n\n\n\nThe number of relabel operations and saturating pushes is the same as before. An edge can handle at most $k$ nonsaturating pushes before it becomes saturated, so the number of nonsaturating pushes is at most $2k|V||E|$. Thus, the total number of basic operations is at most $2|V|^2 + 2|V||E| + 2k|V||E| = O(kVE)$.\n\n\n26.4-7\n\n\n\n\nShow that we could change line 6 of $\\text{INITIALIZE-PREFLOW}$ to \n\n\n \n6\n \ns\n.\nh\n \n=\n \n|\nG\n.\nV\n|\n \n-\n \n2\n \n\n\n\n\nwithout affecting the correctness or asymptotic performance of the generic pushrelabel algorithm.\n\n\n\n\nIf we set $s.h = |V| - 2$, we have to change our definition of a height function to allow $s.h = |V| - 2$, rather than $s.h = |V|$. The only change we need to make to the proof of correctness is to update the proof of Lemma 26.17. The original proof derives the contradiction that $s.h \\le k < |V|$, which is at odds with $s.h = |V|$. When $s.h = |V| - 2$, there is no contradiction.\n\n\nAs in the original proof, let us suppose that we have a simple augmenting path $\\langle v_0, v_1, \\ldots, v_k \\rangle$, where $v_0 = s$ and $v_k = t$, so that $k < |V|$. How could $(s, v_1)$ be a residual edge? It had been saturated in $\\text{INITIALIZE-PREFLOW}$, which means that we had to have pushed some flow from $v_1$ to $s$. In order for that to have happened, we must have had $v_1.h = s.h + 1$. If we set $s.h = |V| - 2$, then $v_1.h$ was $|V| - 1$ at the time. Since then, $v_1.h$ did not decrease, and so we have $v_1.h \\ge |V| - 1$. Working backwards over our augmenting path, we have $v_{k - i}.h \\le t.h + i$ for $i = 0, 1, \\ldots, k$. As before, because the augmenting path is simple, $k < |V|$. Letting $i = k - 1$, we have $v_1.h \\le t.h + k - 1 < 0 + |V| - 1$. We now have the contradiction that $v_1.h \\ge |V| - 1$ and $v_1.h < |V| - 1$, which shows that Lemma 26.17 still holds.\n\n\nNothing in the analysis changes asymptotically.\n\n\n26.4-8\n\n\n\n\nLet $\\delta_f(u, v)$ be the distance (number of edges) from $u$ to $v$ in the residual network $G_f$. Show that the $\\text{GENERIC-PUSH-RELABEL}$ procedure maintains the properties that $u.h < |V|$ implies $u.h \\le \\delta_f(u, t)$ and that $u.h \\ge |V|$ implies $u.h - |V| \\le \\delta_f(u, s)$.\n\n\n\n\nWe'll prove the claim by induction on the number of push and relabel operations. Initially, we have $u.h = |V|$ if $u = s$ and $0$ otherwise. We have $s.h - |V| = 0 \\le \\delta_f(s, s) = 0$ and $u.h = 0 \\le \\delta_f(u, t)$ for all $u \\ne s$, so the claim holds prior to the first iteration of the while loop on line 2 of the $\\text{GENERIC-PUSH-RELABEL}$ algorithm. \n\n\nSuppose that the properties have been maintained thus far. If the next iteration is a nonsaturating push then the properties are maintained because the heights and existence of edges in the residual network are preserved. If it is a saturating push then edge $(u, v)$ is removed from the residual network, which increases both $\\delta_f(u, t)$ and $\\delta_f(u, s)$, so the properties are maintained regardless of the height of $u$. \n\n\nNow suppose that the next iteration causes a relabel of vertex $u$. For all $v$ such that $(u, v) \\in E_f$ we must have $u.h \\le v.h$. Let $v' = \\min{v.h \\mid (u,v) \\in E_f}$. There are two cases to consider. \n\n\n\n\n\n\nFirst, suppose that $v.h < |V|$. Then after relabeling we have \n\n\n$$u.h = 1 + v'.h \\le 1 + \\min_{(u, v)} \\in E_f \\delta_f(v, t) = \\delta_f(u, t).$$\n\n\n\n\n\n\nSecond, suppose that $v'.h \\ge |V|$. Then after relabeling we have\n\n\n$$u.h = 1 + v'.h \\le 1 + |V| + \\min_{(u, v)} \\in E_f \\delta_f(v, s) = \\delta_f(u, s) + |V|,$$\n\n\nwhich implies that $u.h - |V| \\le \\delta_f(u, s)$.\n\n\n\n\n\n\nTherefore, the $\\text{GENERIC-PUSH-RELABEL}$ procedure maintains the desired properties.\n\n\n26.4-9 $\\star$\n\n\n\n\nAs in the previous exercise, let $\\delta_f(u, v)$ be the distance from $u$ to $v$ in the residual network $G_f$. Show how to modify the generic push-relabel algorithm to maintain the property that $u.h < |V|$ implies $u.h = \\delta_f(u, t)$ and that $u.h \\ge |V|$ implies $u.h - |V| = \\delta_f(u, s)$. The total time that your implementation dedicates to maintaining this property should be $O(VE)$.\n\n\n\n\nWhat we should do is to, for successive backwards neighborhoods of $t$, relabel everything in that neighborhood. This will only take at most $O(VE)$ time (see 26.4-3). This also has the upshot of making it so that once we are done with it, every vertex's height is equal to the quantity $\\delta_f(u, t)$. Then, since we begin with equality, after doing this, the inductive step we had in the solution to the previous exercise shows that this equality is preserved.\n\n\n26.4-10\n\n\n\n\nShow that the number of nonsaturating pushes executed by the $\\text{GENERIC-PUSH-RELABEL}$ procedure on a flow network $G = (V, E)$ is at most $4|V|^2|E|$ for $|V| \\ge 4$.\n\n\n\n\nEach vertex has maximum height $2|V| - 1$. Since heights don't decrease, and there are $|V| - 2$ vertices which can be overflowing, the maximum contribution of relabels to $\\Phi$ over all vertices is $(2|V| - 1)(|V| - 2)$. A saturating push from $u$ to $v$ increases $\\Phi$ by at most $v.h \\le 2|V| - 1$, and there are at most $2|V||E|$ saturating pushes, so the total contribution over all saturating pushes to $\\Phi$ is at most $(2|V| - 1)(2|V||E|)$. Since each nonsaturating push decrements $\\Phi$ by at least on and $\\Phi$ must equal zero upon termination, we must have that the number of nonsaturating pushes is at most\n\n\n$$(2|V| - 1)(|V| - 2) + (2|V| - 1)(2|V||E|) = 4|V|^2|E| + 2|V|^2 - 5|V| + 3 - 2|V||E|.$$\n\n\nUsing the fact that $|E| \\ge |V| - 1$ and $|V| \\ge 4$ we can bound the number of\nsaturating pushes by $4|V|^2|E|$.",
            "title": "26.4 Push-relabel algorithms"
        },
        {
            "location": "/Chap26/26.4/#264-1",
            "text": "Prove that, after the procedure $\\text{INITIALIZE-PREFLOW}(G, S)$ terminates, we have $s.e \\le -|f^*|$, where $f^*$ is a maximum flow for $G$.   We apply the definition of excess flow (equation $\\text{(26.14)}$) to the initial preflow $f$ created by $\\text{INITIALIZE-PREFLOW}$ (equation $\\text{(26.15)}$) to obtain  \\begin{align}\ne(s) & = \\sum_{v \\in V} f(v, s) - \\sum_{v \\in V} f(s, v) \\\\\n     & = 0 - \\sum_{v \\in V} c(s, v) \\\\\n     & = -\\sum_{v \\in V} c(s, v).\n\\end{align}  Now,  \\begin{align}\n-|f^*| & =   \\sum_{v \\in V} f^*(v, s) - \\sum_{v \\in V} f^*(s, v) \\\\\n        & \\ge 0 - \\sum_{v \\in V} c(s, v) \\qquad \\text{(since $f^*(v, s) \\ge 0$ and $f^*(s, v) \\le c(s, v)$)} \\\\\n        & = e(s).\n\\end{align}",
            "title": "26.4-1"
        },
        {
            "location": "/Chap26/26.4/#264-2",
            "text": "Show how to implement the generic push-relabel algorithm using $O(V)$ time per relabel operation, $O(1)$ time per push, and $O(1)$ time to select an applicable operation, for a total time of $O(V^2E)$.   We must select an appropriate data structure to store all the information which will allow us to select a valid operation in constant time. To do this, we will need to maintain a list of overflowing vertices. By Lemma 26.14, a push or a relabel operation always applies to an overflowing vertex. To determine which operation to perform, we need to determine whether $u.h = v.h + 1$ for some $v \\in N(u)$. We'll do this by maintaining a list $u.high$ of all neighbors of $u$ in $G_f$ which have height greater than or equal to $u$. We'll update these attributes in the $\\text{PUSH}$ and $\\text{RELABEL}$ functions. It is clear from the pseudocode given for $\\text{PUSH}$ that we can execute it in constant time, provided we have maintain the attributes $\\delta_f(u, v)$, $u.e$, $c_f(u, v)$, $(u, v).f$ and $u.h$. Each time we call $\\text{PUSH}(u, v)$ the result is that $u$ is no longer overflowing, so we must remove it from the list.  Maintain a pointer $u.overflow$ to $u$'s position in the overflow list. If a vertex $u$ is not overflowing, set $u.overflow = \\text{NIL}$. Next, check if $v$ became overflowing. If so, set $v.overflow$ equal to the head of the overflow list. Since we can update the pointer in constant time and delete from a linked list given a pointer to the element to be deleted in constant time, we can maintain the list in $O(1)$.  The $\\text{RELABEL}$ operation takes $O(V)$ because we need to compute the minimum $v.h$ from among all $(u, v) \\in E_f$, and there could be $|V| - 1$ many such $v$. We will also need to update $u.high$ during $\\text{RELABEL}$. When $\\text{RELABEL}(u)$ is called, set $u.high$ equal to the empty list and for each vertex $v$ which is adjacent to $u$, if $v.h = u.h + 1$, add $u$ to the list $v.high$. Since this takes constant time per adjacent vertex we can maintain the attribute in $O(V)$ per call to relabel.",
            "title": "26.4-2"
        },
        {
            "location": "/Chap26/26.4/#264-3",
            "text": "Prove that the generic push-relabel algorithm spends a total of only $O(VE)$ time in performing all the $O(V^2)$ relabel operations.   Each time we call $\\text{RELABEL}(u)$, we examine all edges $(u, v) \\in E_f$. Since the number of relabel operations is at most $2|V| - 1$ per vertex, edge $(u, v)$ will be examined during relabel operations at most $4|V| - 2 = O(V)$ times (at most $2|V| - 1$ times during calls to $\\text{RELABEL}(u)$ and at most $2|V| - 1$ times during calls to $\\text{RELABEL}(v)$). Summing up over all the possible residual edges, of which there are at most $2|E| = O(E)$, we see that the total time spent relabeling vertices is $O(VE)$.",
            "title": "26.4-3"
        },
        {
            "location": "/Chap26/26.4/#264-4",
            "text": "Suppose that we have found a maximum flow in a flow network $G = (V, E)$ using a push-relabel algorithm. Give a fast algorithm to find a minimum cut in $G$.   We can find a minimum cut, given a maximum flow found in $G = (V, E)$ by a push-relabel algorithm, in $O(V)$ time. First, find a height $\\hat h$ such that $0 < \\hat h < |V|$ and there is no vertex whose height equals $\\hat h$ at termination of the algorithm. We need consider only $|V| - 2$ vertices, since $s.h = |V|$ and $t.h = 0$. Because $\\hat h$ can be one of at most $|V| - 1$ possible values, we know that for at least one number in $1, 2, \\ldots, |V| - 1$, there will be no vertex of that height. Hence, $\\hat h$ is well defined, and it is easy to find in $O(V)$ time by using a simple boolean array indexed by heights $1, 2, \\ldots, |V| - 1$.  Let $S = {u \\in V: u.h > \\hat h}$ and $T = {v \\in V: v.h < \\hat h}$. Because we know that $s.h = |V| > \\hat h$, we have $s \\in S$, and because $t.h = 0 < \\hat h$, y we have $t \\in T$, as required for a cut.  We need to show that $f(u, v) = c(u, v)$, i.e., that $(u, v) \\notin E_f$, for all $u \\in S$ and $v \\in T$. Once we do that, we have that $f(S, T) = c(S, T)$, and by Corollary 26.5, $(S, T)$ is a minimum cut.  Suppose for the purpose of contradiction that there exist vertices $u \\in S$ and $v \\in T$ such that $(u, v) \\in E_f$. Because $h$ is always maintained as a height function (Lemma 26.16), we have that $u.h \\le v.h + 1$. But we also have $v.h < \\hat h < u.h$, and because all values are integer, $v.h \\le u.h - 2$. Thus, we have $u.h \\le v.h + 1 \\le u.h - 2 + 1 = u.h - 1$, which gives the contradiction that $u.height \\le u.height - 1$. Thus, $(S, T)$ is a minimum cut.",
            "title": "26.4-4"
        },
        {
            "location": "/Chap26/26.4/#264-5",
            "text": "Give an efficient push-relabel algorithm to find a maximum matching in a bipartite graph. Analyze your algorithm.   First, construct the flow network for the bipartite graph as in the previous section. Then, we relabel everything in $L$. Then, we push from every vertex in $L$ to a vertex in $R$, so long as it is possible.  Keeping track of those that vertices of $L$ that are still overflowing can be done by a simple bit vector. Then, we relabel everything in R and push to the last vertex. Once these operations have been done, The only possible valid operations are to relabel the vertices of $L$ that weren't able to find an edge that they could push their flow along, so could possibly have to get a push back from $R$ to $L$. This continues until there are no more operations to do. This takes time of $O(V(E + V))$.",
            "title": "26.4-5"
        },
        {
            "location": "/Chap26/26.4/#264-6",
            "text": "Suppose that all edge capacities in a flow network $G = (V, E)$ are in the set ${1, 2, \\ldots, k}$. Analyze the running time of the generic push-relabel algorithm in terms of $|V|$, $|E|$, and $k$. ($\\textit{Hint:}$ How many times can each edge support a nonsaturating push before it becomes saturated?)   The number of relabel operations and saturating pushes is the same as before. An edge can handle at most $k$ nonsaturating pushes before it becomes saturated, so the number of nonsaturating pushes is at most $2k|V||E|$. Thus, the total number of basic operations is at most $2|V|^2 + 2|V||E| + 2k|V||E| = O(kVE)$.",
            "title": "26.4-6"
        },
        {
            "location": "/Chap26/26.4/#264-7",
            "text": "Show that we could change line 6 of $\\text{INITIALIZE-PREFLOW}$ to     6   s . h   =   | G . V |   -   2    without affecting the correctness or asymptotic performance of the generic pushrelabel algorithm.   If we set $s.h = |V| - 2$, we have to change our definition of a height function to allow $s.h = |V| - 2$, rather than $s.h = |V|$. The only change we need to make to the proof of correctness is to update the proof of Lemma 26.17. The original proof derives the contradiction that $s.h \\le k < |V|$, which is at odds with $s.h = |V|$. When $s.h = |V| - 2$, there is no contradiction.  As in the original proof, let us suppose that we have a simple augmenting path $\\langle v_0, v_1, \\ldots, v_k \\rangle$, where $v_0 = s$ and $v_k = t$, so that $k < |V|$. How could $(s, v_1)$ be a residual edge? It had been saturated in $\\text{INITIALIZE-PREFLOW}$, which means that we had to have pushed some flow from $v_1$ to $s$. In order for that to have happened, we must have had $v_1.h = s.h + 1$. If we set $s.h = |V| - 2$, then $v_1.h$ was $|V| - 1$ at the time. Since then, $v_1.h$ did not decrease, and so we have $v_1.h \\ge |V| - 1$. Working backwards over our augmenting path, we have $v_{k - i}.h \\le t.h + i$ for $i = 0, 1, \\ldots, k$. As before, because the augmenting path is simple, $k < |V|$. Letting $i = k - 1$, we have $v_1.h \\le t.h + k - 1 < 0 + |V| - 1$. We now have the contradiction that $v_1.h \\ge |V| - 1$ and $v_1.h < |V| - 1$, which shows that Lemma 26.17 still holds.  Nothing in the analysis changes asymptotically.",
            "title": "26.4-7"
        },
        {
            "location": "/Chap26/26.4/#264-8",
            "text": "Let $\\delta_f(u, v)$ be the distance (number of edges) from $u$ to $v$ in the residual network $G_f$. Show that the $\\text{GENERIC-PUSH-RELABEL}$ procedure maintains the properties that $u.h < |V|$ implies $u.h \\le \\delta_f(u, t)$ and that $u.h \\ge |V|$ implies $u.h - |V| \\le \\delta_f(u, s)$.   We'll prove the claim by induction on the number of push and relabel operations. Initially, we have $u.h = |V|$ if $u = s$ and $0$ otherwise. We have $s.h - |V| = 0 \\le \\delta_f(s, s) = 0$ and $u.h = 0 \\le \\delta_f(u, t)$ for all $u \\ne s$, so the claim holds prior to the first iteration of the while loop on line 2 of the $\\text{GENERIC-PUSH-RELABEL}$ algorithm.   Suppose that the properties have been maintained thus far. If the next iteration is a nonsaturating push then the properties are maintained because the heights and existence of edges in the residual network are preserved. If it is a saturating push then edge $(u, v)$ is removed from the residual network, which increases both $\\delta_f(u, t)$ and $\\delta_f(u, s)$, so the properties are maintained regardless of the height of $u$.   Now suppose that the next iteration causes a relabel of vertex $u$. For all $v$ such that $(u, v) \\in E_f$ we must have $u.h \\le v.h$. Let $v' = \\min{v.h \\mid (u,v) \\in E_f}$. There are two cases to consider.     First, suppose that $v.h < |V|$. Then after relabeling we have   $$u.h = 1 + v'.h \\le 1 + \\min_{(u, v)} \\in E_f \\delta_f(v, t) = \\delta_f(u, t).$$    Second, suppose that $v'.h \\ge |V|$. Then after relabeling we have  $$u.h = 1 + v'.h \\le 1 + |V| + \\min_{(u, v)} \\in E_f \\delta_f(v, s) = \\delta_f(u, s) + |V|,$$  which implies that $u.h - |V| \\le \\delta_f(u, s)$.    Therefore, the $\\text{GENERIC-PUSH-RELABEL}$ procedure maintains the desired properties.",
            "title": "26.4-8"
        },
        {
            "location": "/Chap26/26.4/#264-9-star",
            "text": "As in the previous exercise, let $\\delta_f(u, v)$ be the distance from $u$ to $v$ in the residual network $G_f$. Show how to modify the generic push-relabel algorithm to maintain the property that $u.h < |V|$ implies $u.h = \\delta_f(u, t)$ and that $u.h \\ge |V|$ implies $u.h - |V| = \\delta_f(u, s)$. The total time that your implementation dedicates to maintaining this property should be $O(VE)$.   What we should do is to, for successive backwards neighborhoods of $t$, relabel everything in that neighborhood. This will only take at most $O(VE)$ time (see 26.4-3). This also has the upshot of making it so that once we are done with it, every vertex's height is equal to the quantity $\\delta_f(u, t)$. Then, since we begin with equality, after doing this, the inductive step we had in the solution to the previous exercise shows that this equality is preserved.",
            "title": "26.4-9 $\\star$"
        },
        {
            "location": "/Chap26/26.4/#264-10",
            "text": "Show that the number of nonsaturating pushes executed by the $\\text{GENERIC-PUSH-RELABEL}$ procedure on a flow network $G = (V, E)$ is at most $4|V|^2|E|$ for $|V| \\ge 4$.   Each vertex has maximum height $2|V| - 1$. Since heights don't decrease, and there are $|V| - 2$ vertices which can be overflowing, the maximum contribution of relabels to $\\Phi$ over all vertices is $(2|V| - 1)(|V| - 2)$. A saturating push from $u$ to $v$ increases $\\Phi$ by at most $v.h \\le 2|V| - 1$, and there are at most $2|V||E|$ saturating pushes, so the total contribution over all saturating pushes to $\\Phi$ is at most $(2|V| - 1)(2|V||E|)$. Since each nonsaturating push decrements $\\Phi$ by at least on and $\\Phi$ must equal zero upon termination, we must have that the number of nonsaturating pushes is at most  $$(2|V| - 1)(|V| - 2) + (2|V| - 1)(2|V||E|) = 4|V|^2|E| + 2|V|^2 - 5|V| + 3 - 2|V||E|.$$  Using the fact that $|E| \\ge |V| - 1$ and $|V| \\ge 4$ we can bound the number of\nsaturating pushes by $4|V|^2|E|$.",
            "title": "26.4-10"
        },
        {
            "location": "/Chap26/26.5/",
            "text": "26.5-1\n\n\n\n\nIllustrate the execution of $\\text{RELABEL-TO-FRONT}$ in the manner of Figure 26.10 for the flow network in Figure 26.1(a). Assume that the initial ordering of vertices in $L$ is $\\langle v_1, v_2, v_3, v_4 \\rangle$ and that the neighbor lists are\n\n\n\\begin{align}\nv_1.N & = \\langle s, v_2, v_3 \\rangle, \\\\\nv_2.N & = \\langle s, v_1, v_3, v_4 \\rangle, \\\\\nv_3.N & = \\langle v_1, v_2, v_4, t \\rangle, \\\\\nv_4.N & = \\langle v_2, v_3, t \\rangle.\n\\end{align}\n\n\n\n\nWhen we initialize the preflow, we have $26$ units of flow leaving $s$. Then, we consider $v_1$ since it is the first element in the $L$ list. When we discharge it, we increase it's height to $1$ so that it can dump $12$ of it's excess along its edge to vertex $v_3$, to discharge the rest of it, it has to increase it's height to $|V| + 1$ to discharge it back to $s$. It was already at the front, so, we consider $v_2$. We increase its height to $1$. Then, we send all of its excess along its edge to $v_4$. We move it to the front, which means we next consider $v_1$, and do nothing because it is not overflowing. Up next is vertex $v_3$. After increasing its height to $1$, it can send all of its excess to $t$. This puts $v_3$ at the front, and we consider the non-overflowing vertices $v_2$ and $v_1$. Then, we consider $v_4$, it increases its height to $1$, then sends $4$ units to $t$. Since it still has an excess of $10$ units, it increases its height once again. Then it becomes valid for it to send flow back to $v_2$ or to $v_3$. It considers $v_4$ first because of the ordering of its neighbor list. This means that $10$ units of flow are pushed back to $v_2$. Since $v_4.h$ increased, it moves to the front of the list Then, we consider $v_2$ since it is the only still overflowing vertex. We increase its height to $3$. Then, it is overflowing by $10$ so it increases its height to $3$ to send $6$ units to $v_4$. It's height increased so it goes to the  of the list. Then, we consider $v_4$, which is overflowing. it increases its height to $3$, then it sends $6$ units to $v_3$. Again, it goes to the front of the list. Up next is $v_2$ which is not overflowing, $v_3$ which is, so it increases it's height by $1$ to send $4$ units of flow to $t$. Then sends $2$ units to $v_4$ after increasing in height. The excess flow keeps bobbing around the four vertices, each time requiring them to increase their height a bit to discharge to a neighbor only to have that neighbor increase to discharge it back until $v_2$ has increased in height enough to send all of it's excess back to s, this completes and gives us a maximum flow of $23$.\n\n\n26.5-2 $\\star$\n\n\n\n\nWe would like to implement a push-relabel algorithm in which we maintain a firstin, first-out queue of overflowing vertices. The algorithm repeatedly discharges the vertex at the head of the queue, and any vertices that were not overflowing before the discharge but are overflowing afterward are placed at the end of the queue. After the vertex at the head of the queue is discharged, it is removed. When the queue is empty, the algorithm terminates. Show how to implement this algorithm to compute a maximum flow in $O(V^3)$ time.\n\n\n\n\nInitially, the vertices adjacent to $s$ are the only ones which are overflowing. The implementation is as follows:\n\n\nPUSH\n-\nRELABEL\n-\nQUEUE\n(\nG\n,\n \ns\n)\n\n    \nINITIALIZE\n-\nPREFLOW\n(\nG\n,\n \ns\n)\n\n    \nInitialize\n \nan\n \nempty\n \nqueue\n \nq\n\n    \nfor\n \nv\n \n\u2208\n \nG\n.\nAdj\n[\ns\n]\n\n        \nq\n.\npush\n(\nv\n)\n\n    \nwhile\n \nq\n.\nhead\n \n!=\n \nNIL\n\n        \nDISCHARGE\n(\nq\n.\nhead\n)\n\n        \nq\n.\npop\n()\n\n\n\n\n\nNote that we need to modify the $\\text{DISCHARGE}$ algorithm to push vertices $v$ onto the queue if $v$ was not overflowing before a discharge but is overflowing after one.\n\n\nBetween lines 7 and 8 of $\\text{DISCHARGE}(u)$, add the line ''if $v.e > 0$, $q.push(v)$.'' This is an implementation of the generic push-relabel algorithm, so we know it is correct. The analysis of runtime is almost identical to that of Theorem 26.30. We just need to verify that there are at most $|V|$ calls to $\\text{DISCHARGE}$ between two consecutive relabel operations. Observe that after calling $\\text{PUSH}(u, v)$, Corollary 26.28 tells us that no admissible edges are entering $v$. Thus, once $v$ is put into the queue because of the push, it can't be added again until it has been relabeled. Thus, at most $|V|$ vertices are added to the queue between relabel operations.\n\n\n26.5-3\n\n\n\n\nShow that the generic algorithm still works if $\\text{RELABEL}$ updates $u.h$ by simply computing $u.h = u.h + 1$. How would this change affect the analysis of $\\text{RELABEL-TO-FRONT}$?\n\n\n\n\nIf we change relabel to just increment the value of $u$, we will not be ruining the correctness of the Algorithm. This is because since it only applies when $u.h \\le v.h$, we won't be every creating a graph where $h$ ceases to be a height function, since $u.h$ will only ever be increasing by exactly $1$ whenever relabel is called, ensuring that $u.h + 1 \\le v.h$. This means that Lemmatae 26.15 and 26.16 will still hold. Even Corollary 26.21 holds since all it counts on is that relabel causes some vertex's $h$ value to increase by at least $1$, it will still work when we have all of the operations causing it to increase by exactly $1$. However, Lemma 26.28 will no longer hold. That is, it may require more than a single relabel operation to cause an admissible edge to appear, if for example, $u.h$ was strictly less than the $h$ values of all its neighbors. However, this lemma is not used in the proof of Exercise 26.4-3, which bounds the number of relabel operations. Since the number of relabel operations still have the same bound, and we know that we can simulate the old relabel operation by doing (possibly many) of these new relabel operations, we have the same bound as in the original algorithm with this different relabel operation.\n\n\n26.5-4 $\\star$\n\n\n\n\nShow that if we always discharge a highest overflowing vertex, we can make the\n\n\n\n\nWe'll keep track of the heights of the overflowing vertices using an array and a series of doubly linked lists. In particular, let $A$ be an array of size $|V|$, and let $A[i]$ store a list of the elements of height $i$. Now we create another list $L$, which is a list of lists. The head points to the list containing the vertices of highest height. The next pointer of this list points to the next nonempty list stored in $A$, and so on. This allows for constant time insertion of a vertex into $A$, and also constant time access to an element of largest height, and because all lists are doubly linked, we can add and delete elements in constant time. Essentially, we are implementing the algorithm of Exercise 26.5-2, but with the queue replaced by a priority queue with constant time operations. As before, it will suffice to show that there are at most $|V|$ calls to discharge between consecutive relabel operations.\n\n\nConsider what happens when a vertex $v$ is put into the priority queue. There must exist a vertex $u$ for which we have called $\\text{PUSH}(u, v)$. After this, no ad- missible edge is entering $v$, so it can't be added to the priority queue again until after a relabel operation has occurred on $v$. Moreover, every call to $\\text{DISCHARGE}$ terminates with a $\\text{PUSH}$, so for every call to $\\text{DISCHARGE}$ there is another vertex which can't be added until a relabel operation occurs. After $|V|$ $\\text{DISCHARGE}$ operations and no relabel operations, there are no remaining valid $\\text{PUSH}$ operations, so either the algorithm terminates, or there is a valid relabel operation which is performed. Thus, there are $O(V^3)$ calls to $\\text{DISCHARGE}$. By carrying out the rest of the analysis of Theorem 26.30, we conclude that the runtime is $O(V^3)$.\n\n\n26.5-5\n\n\n\n\nSuppose that at some point in the execution of a push-relabel algorithm, there exists an integer $0 < k \\le |V| - 1$ for which no vertex has $v.h = k$. Show that all vertices with $v.h > k$ are on the source side of a minimum cut. If such a $k$ exists, the \ngap heuristic\n updates every vertex $v \\in V - {s}$ for which $v.h > k$, to set $v.h = \\max(v.h, |V| + 1)$. Show that the resulting attribute $h$ is a height function. (The gap heuristic is crucial in making implementations of the push-relabel method perform well in practice.)\n\n\n\n\nSuppose to try and obtain a contradiction that there were some minimum cut for which a vertex that had $v.h > k$ were on the sink side of that cut. For that minimum cut, there is a residual flow network for which that cut is saturated. Then, if there were any vertices that were also on the sink side of the cut which had an edge going to $v$ in this residual flow network, since it's $h$ value cannot be equal to $k$, we know that it must be greater than $k$ since it could be only at most one less than $v$. We can continue in this way to let $S$ be the set of vertices on the sink side of the graph which have an $h$ value greater than $k$. Suppose that there were some simple path from a vertex in $S$ to $s$. Then, at each of these steps, the height could only decrease by at most $1$, since it cannot get from above $k$ to $0$ without going through $k$, we know that there is no path in the residual flow network going from a vertex in $S$ to $s$. Since a minimal cut corresponds to disconnected parts of the residual graph for a maximum flow, and we know there is no path from $S$ to $s$, there is a minimum cut for which $S$ lies entirely on the source side of the cut. This was a contradiction to how we selected $v$, and so have shown the first claim.\n\n\nNow we show that after updating the $h$ values as suggested, we are still left with a height function. Suppose we had an edge $(u, v)$ in the residual graph. We knew from before that $u.h \\le v.h + 1$. However, this means that if $u.h > k$, so must be $v.h$. So, if both were above $k$, we would be making them equal, causing the inequality to still hold. Also, if just $v.k$ were above $k$, then we have not decreased it's $h$ value, meaning that the inequality also still must hold. Since we have not changed the value of $s.h$, and $t.h$, we have all the required properties to have a height function after modifying the $h$ values as described.",
            "title": "26.5 The relabel-to-front algorithm"
        },
        {
            "location": "/Chap26/26.5/#265-1",
            "text": "Illustrate the execution of $\\text{RELABEL-TO-FRONT}$ in the manner of Figure 26.10 for the flow network in Figure 26.1(a). Assume that the initial ordering of vertices in $L$ is $\\langle v_1, v_2, v_3, v_4 \\rangle$ and that the neighbor lists are  \\begin{align}\nv_1.N & = \\langle s, v_2, v_3 \\rangle, \\\\\nv_2.N & = \\langle s, v_1, v_3, v_4 \\rangle, \\\\\nv_3.N & = \\langle v_1, v_2, v_4, t \\rangle, \\\\\nv_4.N & = \\langle v_2, v_3, t \\rangle.\n\\end{align}   When we initialize the preflow, we have $26$ units of flow leaving $s$. Then, we consider $v_1$ since it is the first element in the $L$ list. When we discharge it, we increase it's height to $1$ so that it can dump $12$ of it's excess along its edge to vertex $v_3$, to discharge the rest of it, it has to increase it's height to $|V| + 1$ to discharge it back to $s$. It was already at the front, so, we consider $v_2$. We increase its height to $1$. Then, we send all of its excess along its edge to $v_4$. We move it to the front, which means we next consider $v_1$, and do nothing because it is not overflowing. Up next is vertex $v_3$. After increasing its height to $1$, it can send all of its excess to $t$. This puts $v_3$ at the front, and we consider the non-overflowing vertices $v_2$ and $v_1$. Then, we consider $v_4$, it increases its height to $1$, then sends $4$ units to $t$. Since it still has an excess of $10$ units, it increases its height once again. Then it becomes valid for it to send flow back to $v_2$ or to $v_3$. It considers $v_4$ first because of the ordering of its neighbor list. This means that $10$ units of flow are pushed back to $v_2$. Since $v_4.h$ increased, it moves to the front of the list Then, we consider $v_2$ since it is the only still overflowing vertex. We increase its height to $3$. Then, it is overflowing by $10$ so it increases its height to $3$ to send $6$ units to $v_4$. It's height increased so it goes to the  of the list. Then, we consider $v_4$, which is overflowing. it increases its height to $3$, then it sends $6$ units to $v_3$. Again, it goes to the front of the list. Up next is $v_2$ which is not overflowing, $v_3$ which is, so it increases it's height by $1$ to send $4$ units of flow to $t$. Then sends $2$ units to $v_4$ after increasing in height. The excess flow keeps bobbing around the four vertices, each time requiring them to increase their height a bit to discharge to a neighbor only to have that neighbor increase to discharge it back until $v_2$ has increased in height enough to send all of it's excess back to s, this completes and gives us a maximum flow of $23$.",
            "title": "26.5-1"
        },
        {
            "location": "/Chap26/26.5/#265-2-star",
            "text": "We would like to implement a push-relabel algorithm in which we maintain a firstin, first-out queue of overflowing vertices. The algorithm repeatedly discharges the vertex at the head of the queue, and any vertices that were not overflowing before the discharge but are overflowing afterward are placed at the end of the queue. After the vertex at the head of the queue is discharged, it is removed. When the queue is empty, the algorithm terminates. Show how to implement this algorithm to compute a maximum flow in $O(V^3)$ time.   Initially, the vertices adjacent to $s$ are the only ones which are overflowing. The implementation is as follows:  PUSH - RELABEL - QUEUE ( G ,   s ) \n     INITIALIZE - PREFLOW ( G ,   s ) \n     Initialize   an   empty   queue   q \n     for   v   \u2208   G . Adj [ s ] \n         q . push ( v ) \n     while   q . head   !=   NIL \n         DISCHARGE ( q . head ) \n         q . pop ()   Note that we need to modify the $\\text{DISCHARGE}$ algorithm to push vertices $v$ onto the queue if $v$ was not overflowing before a discharge but is overflowing after one.  Between lines 7 and 8 of $\\text{DISCHARGE}(u)$, add the line ''if $v.e > 0$, $q.push(v)$.'' This is an implementation of the generic push-relabel algorithm, so we know it is correct. The analysis of runtime is almost identical to that of Theorem 26.30. We just need to verify that there are at most $|V|$ calls to $\\text{DISCHARGE}$ between two consecutive relabel operations. Observe that after calling $\\text{PUSH}(u, v)$, Corollary 26.28 tells us that no admissible edges are entering $v$. Thus, once $v$ is put into the queue because of the push, it can't be added again until it has been relabeled. Thus, at most $|V|$ vertices are added to the queue between relabel operations.",
            "title": "26.5-2 $\\star$"
        },
        {
            "location": "/Chap26/26.5/#265-3",
            "text": "Show that the generic algorithm still works if $\\text{RELABEL}$ updates $u.h$ by simply computing $u.h = u.h + 1$. How would this change affect the analysis of $\\text{RELABEL-TO-FRONT}$?   If we change relabel to just increment the value of $u$, we will not be ruining the correctness of the Algorithm. This is because since it only applies when $u.h \\le v.h$, we won't be every creating a graph where $h$ ceases to be a height function, since $u.h$ will only ever be increasing by exactly $1$ whenever relabel is called, ensuring that $u.h + 1 \\le v.h$. This means that Lemmatae 26.15 and 26.16 will still hold. Even Corollary 26.21 holds since all it counts on is that relabel causes some vertex's $h$ value to increase by at least $1$, it will still work when we have all of the operations causing it to increase by exactly $1$. However, Lemma 26.28 will no longer hold. That is, it may require more than a single relabel operation to cause an admissible edge to appear, if for example, $u.h$ was strictly less than the $h$ values of all its neighbors. However, this lemma is not used in the proof of Exercise 26.4-3, which bounds the number of relabel operations. Since the number of relabel operations still have the same bound, and we know that we can simulate the old relabel operation by doing (possibly many) of these new relabel operations, we have the same bound as in the original algorithm with this different relabel operation.",
            "title": "26.5-3"
        },
        {
            "location": "/Chap26/26.5/#265-4-star",
            "text": "Show that if we always discharge a highest overflowing vertex, we can make the   We'll keep track of the heights of the overflowing vertices using an array and a series of doubly linked lists. In particular, let $A$ be an array of size $|V|$, and let $A[i]$ store a list of the elements of height $i$. Now we create another list $L$, which is a list of lists. The head points to the list containing the vertices of highest height. The next pointer of this list points to the next nonempty list stored in $A$, and so on. This allows for constant time insertion of a vertex into $A$, and also constant time access to an element of largest height, and because all lists are doubly linked, we can add and delete elements in constant time. Essentially, we are implementing the algorithm of Exercise 26.5-2, but with the queue replaced by a priority queue with constant time operations. As before, it will suffice to show that there are at most $|V|$ calls to discharge between consecutive relabel operations.  Consider what happens when a vertex $v$ is put into the priority queue. There must exist a vertex $u$ for which we have called $\\text{PUSH}(u, v)$. After this, no ad- missible edge is entering $v$, so it can't be added to the priority queue again until after a relabel operation has occurred on $v$. Moreover, every call to $\\text{DISCHARGE}$ terminates with a $\\text{PUSH}$, so for every call to $\\text{DISCHARGE}$ there is another vertex which can't be added until a relabel operation occurs. After $|V|$ $\\text{DISCHARGE}$ operations and no relabel operations, there are no remaining valid $\\text{PUSH}$ operations, so either the algorithm terminates, or there is a valid relabel operation which is performed. Thus, there are $O(V^3)$ calls to $\\text{DISCHARGE}$. By carrying out the rest of the analysis of Theorem 26.30, we conclude that the runtime is $O(V^3)$.",
            "title": "26.5-4 $\\star$"
        },
        {
            "location": "/Chap26/26.5/#265-5",
            "text": "Suppose that at some point in the execution of a push-relabel algorithm, there exists an integer $0 < k \\le |V| - 1$ for which no vertex has $v.h = k$. Show that all vertices with $v.h > k$ are on the source side of a minimum cut. If such a $k$ exists, the  gap heuristic  updates every vertex $v \\in V - {s}$ for which $v.h > k$, to set $v.h = \\max(v.h, |V| + 1)$. Show that the resulting attribute $h$ is a height function. (The gap heuristic is crucial in making implementations of the push-relabel method perform well in practice.)   Suppose to try and obtain a contradiction that there were some minimum cut for which a vertex that had $v.h > k$ were on the sink side of that cut. For that minimum cut, there is a residual flow network for which that cut is saturated. Then, if there were any vertices that were also on the sink side of the cut which had an edge going to $v$ in this residual flow network, since it's $h$ value cannot be equal to $k$, we know that it must be greater than $k$ since it could be only at most one less than $v$. We can continue in this way to let $S$ be the set of vertices on the sink side of the graph which have an $h$ value greater than $k$. Suppose that there were some simple path from a vertex in $S$ to $s$. Then, at each of these steps, the height could only decrease by at most $1$, since it cannot get from above $k$ to $0$ without going through $k$, we know that there is no path in the residual flow network going from a vertex in $S$ to $s$. Since a minimal cut corresponds to disconnected parts of the residual graph for a maximum flow, and we know there is no path from $S$ to $s$, there is a minimum cut for which $S$ lies entirely on the source side of the cut. This was a contradiction to how we selected $v$, and so have shown the first claim.  Now we show that after updating the $h$ values as suggested, we are still left with a height function. Suppose we had an edge $(u, v)$ in the residual graph. We knew from before that $u.h \\le v.h + 1$. However, this means that if $u.h > k$, so must be $v.h$. So, if both were above $k$, we would be making them equal, causing the inequality to still hold. Also, if just $v.k$ were above $k$, then we have not decreased it's $h$ value, meaning that the inequality also still must hold. Since we have not changed the value of $s.h$, and $t.h$, we have all the required properties to have a height function after modifying the $h$ values as described.",
            "title": "26.5-5"
        },
        {
            "location": "/Chap26/Problems/26-1/",
            "text": "A$n \\times n$ \ngrid\n is an undirected graph consisting of $n$ rows and $n$ columns of vertices, as shown in Figure 26.11. We denote the vertex in the $i$th row and the $j$th column by $(i, j)$. All vertices in a grid have exactly four neighbors, except for the boundary vertices, which are the points $(i, j)$ for which $i = 1$, $i = n$, $j = 1$, or $j = n$.\n\n\nGiven $m \\le n^2$ starting points $(x_1, y_1), (x_2, y_2), \\ldots, (x_m, y_m)$ in the grid, the \nescape problem\n is to determine whether or not there are $m$ vertex-disjoint paths from the starting points to any $m$ different points on the boundary. For example, the grid in Figure 26.11(a) has an escape, but the grid in Figure 26.11(b) does not.\n\n\na.\n Consider a flow network in which vertices, as well as edges, have capacities. That is, the total positive flow entering any given vertex is subject to a capacity constraint. Show that determining the maximum flow in a network with edge and vertex capacities can be reduced to an ordinary maximum-flow problem on a flow network of comparable size.\n\n\nb.\n Describe an efficient algorithm to solve the escape problem, and analyze its running time.\n\n\n\n\na.\n This problem is identical to exercise 26.1-7.\n\n\nb.\n Construct a vertex constrained flow network from the instance of the escape problem by letting our flow network have a vertex (each with unit capacity) for each intersection of grid lines, and have a bidirectional edge with unit capacity for each pair of vertices that are adjacent in the grid. Then, we will put a unit capacity edge going from $s$ to each of the distinguished vertices, and a unit capacity edge going from each vertex on the sides of the grid to $t$. Then, we know that a solution to this problem will correspond to a solution to the escape problem because all of the augmenting paths will be a unit flow, because every edge has unit capacity. This means that the flows through the grid will be the paths taken. This gets us the escaping paths if the total flow is equal to $m$ (we know it cannot be greater than $m$ by looking at the cut which has $s$ by itself). And, if the max flow is less than $m$, we know that the escape problem is not solvable, because otherwise we could construct a flow with value $m$ from the list of disjoint paths that the people escaped along.",
            "title": "26-1 Escape problem"
        },
        {
            "location": "/Chap26/Problems/26-2/",
            "text": "A \npath cover\n of a directed graph $G = (V, E)$ is a set $P$ of vertex-disjoint paths such that every vertex in $V$ is included in exactly one path in $P$. Paths may start and end anywhere, and they may be of any length, including $0$. A \nminimum path cover\n of $G$ is a path cover containing the fewest possible paths.\n\n\na.\n Give an efficient algorithm to find a minimum path cover of a directed acyclic graph $G = (V, E)$. ($\\textit{Hint:}$ Assuming that $V = \\{1, 2, \\ldots, n\\}$, construct the graph $G' = (V', E')$, where\n\n\n\\begin{align}\nV' & = \\{x_0, x_1, \\ldots, x_n\\} \\cup \\{y_0, y_1, \\ldots, y_n\\}, \\\\\nE' & = \\{(x_0, x_i): i \\in V\\} \\cup \\{(y_i, y_0): i \\in V\\} \\cup \\{(x_i, y_j): (i, j) \\in E\\},\n\\end{align}\n\n\nand run a maximum-flow algorithm.)\n\n\nb.\n Does your algorithm work for directed graphs that contain cycles? Explain.\n\n\n\n\na.\n The idea is to use a maximum-flow algorithm to find a maximum bipartite matching that selects the edges to use in a minimum path cover. We must show how to formulate the max-flow problem and how to construct the path cover from the resulting matching, and we must prove that the algorithm indeed finds a minimum path cover.\n\n\nDefine $G'$ as suggested, with directed edges. Make $G'$ into a flow network with source $x_0$ and sink $y_0$ by defining all edge capacities to be $1$. $G'$ is the flow network corresponding to a bipartite graph $G''$ in which $L = \\{x_1, \\ldots, x_n\\}$, $R = \\{y_1, \\ldots, y_n\\}$, and the edges are the (undirected version of the) subset of $E'$ that doesn't involve $x_0$ or $y_0$ .\n\n\nThe relationship of $G$ to the bipartite graph $G''$ is that every vertex $i$ in $G$ is represented by two vertices, $x_i$ and $y_i$, in $G''$. Edge $(i, j)$ in $G$ corresponds to edge $(x_i, y_j)$ in $G''$. That is, an edge $(x_i, y_j)$ in $G''$ means that an edge in $G$ leaves $i$ and enters $j$. Vertex $x_i$ tells us about edges leaving $i$, and $y_i$ tells us about edges entering $i$.\n\n\nThe edges in a bipartite matching in $G''$ can be used in a path cover of $G$, for the following reasons:\n\n\n\n\nIn a bipartite matching, no vertex is used more than once. In a bipartite matching in $G''$, since no $x_i$ is used more than once, at most one edge in the matching leaves any vertex $i$ in $G$. Similarly, since no $y_j$ is used more than once, at most one edge in the matching enters any vertex $j$ in $G$.\n\n\nIn a path cover, since no vertex appears in more than one path, at most one path edge enters each vertex and at most one path edge leaves each vertex.\n\n\n\n\nWe can construct a path cover $P$ from any bipartite matching $M$ (not just a maximum matching) by moving from some $x_i$ to its matching $y_j$ (if any), then from $x_j$ to its matching $y_k$, and so on, as follows:\n\n\n\n\nStart a new path containing a vertex $i$ that has not yet been placed in a path.\n\n\nIf $x_i$ is unmatched, the path can't go any farther; just add it to $P$.\n\n\nIf $x_i$ is matched to some $y_j$, add $j$ to the current path. If $j$ has already been placed in a path (i.e., though we've just entered $j$ by processing $y_j$, we've already built a path that leaves $j$ by processing $x_j$), combine this path with that one and go back to step 1. Otherwise go to step 2 to process $x_j$.\n\n\n\n\nThis algorithm constructs a path cover, for the following reasons:\n\n\n\n\nEvery vertex is put into some path, because we keep picking an unused vertex from which to start a path until there are no unused vertices.\n\n\nNo vertex is put into two paths, because every $x_i$ is matched to at most one $y_j$, and vice versa. That is, at most one candidate edge leaves each vertex, and at most one candidate edge enters each vertex. When building a path, we start or enter a vertex and then leave it, building a single path. If we ever enter a vertex that was left earlier, it must have been the start of another path, since there are no cycles, and we combine those paths so that the vertex is entered and left on a single path.\n\n\n\n\nEvery edge in $M$ is used in some path because we visit every $x_i$, and we incorporate the single edge, if any, from each visited $x_i$. Thus, there is a one-to-one correspondence between edges in the matching and edges in the constructed path cover.\n\n\nWe now show that the path cover $P$ constructed above has the fewest possible paths when the matching is maximum.\n\n\nLet $f$ be the flow corresonding to the bipartite matching $M$.\n\n\n\\begin{align}\n|V| & = \\sum_{p \\in P} \\text{(# vertices in $p$)} & \\text{(every vertex is on exactly 1 path)} \\\\\n    & = \\sum_{p \\in P} \\text{(1 + # edges in $p$)} \\\\\n    & = \\sum_{p \\in P} 1 + \\sum_{p \\in P} \\text{(# edges in $p$)} \\\\\n    & = |P| + |M|                                 & \\text{(by 1-to-1 correspondence)} \\\\\n    & = |P| + |f|.                                & \\text{(by Lemma 26.9)}\n\\end{align}\n\n\nThus, for the fixed set $V$ in our graph $G$, $|P|$ (the number of paths) is minimized when the flow $f$ is maximized.\n\n\nThe overall algorithm is as follows:\n\n\n\n\nUse $\\text{FORD-FULKERSON}$ to find a maximum flow in $G'$ and hence a maximum bipartite matching $M$ in $G''$.\n\n\nConstruct the path cover as described above.\n\n\n\n\nTime\n\n\n$O(VE)$ total:\n\n\n\n\n$O(V + E)$ to set up $G'$, \n\n\n$O(VE)$ to find the maximum bipartite matching,\n\n\n$O(E)$ to trace the paths, because each edge $\\in M$ is traversed only once and there are $O(E)$ edges in $M$.\n\n\n\n\nb.\n The algorithm does not work if there are cycles.\n\n\nConsider a graph $G$ with $4$ vertices, consisting of a directed triangle and an edge pointing to the triangle:\n\n\n$$E = \\{(1, 2), (2, 3), (3, 1), (4, 1)\\}.$$\n\n\n$G$ can be covered with a single path: $4 \\to 1 \\to 2 \\to 3$, but our algorithm might find only a $2$-path cover.\n\n\nIn the bipartite graph $G'$, the edges $(x_i, y_j)$ are\n\n\n$$(x_1, y_2), (x_2, y_3), (x_3, y_1), (x_4, y_1).$$\n\n\nThere are $4$ edges from an $x_i$ to a $y_j$, but $2$ of them lead to $y_1$, so a maximum bipartite matching can have only $3$ edges (and the maximum flow in $G'$ has value $3$). In fact, there are $2$ possible maximum matchings. It is always possible to match $(x_1, y_2)$ and $(x_2, y_3)$, and then either $(x_3, y_1)$ or $(x_4, y_1)$ can be chosen, but not both.\n\n\nThe maximum flow found by one of our max-flow algorithms could find the flow corresponding to either of these matchings, since both are maximal. If it finds the matching with edge $(x_3, x_1)$, then the matching would not contain $(x_4, x_1)$; given that matching, our path algorithm is forced to produce $2$ paths, one of which contains just the vertex $4$.",
            "title": "26-2 Minimum path cover"
        },
        {
            "location": "/Chap26/Problems/26-3/",
            "text": "Professor Gore wants to open up an algorithmic consulting company. He has identified n important subareas of algorithms (roughly corresponding to different portions of this textbook), which he represents by the set $A = \\{A_1, A_2, \\ldots, A_n\\}$. In each subarea $A_k$, he can hire an expert in that area for $c_k$ dollars. The consulting company has lined up a set $J = \\{J_1, J_2, \\ldots, J_m\\}$ of potential jobs. In order to perform job $J_i$, the company needs to have hired experts in a subset $R_i \\subseteq A$ of subareas. Each expert can work on multiple jobs simultaneously. If the company chooses to accept job $J_i$, it must have hired experts in all subareas in $R_i$, and it will take in revenue of $p_i$ dollars.\n\n\nProfessor Gore's job is to determine which subareas to hire experts in and which jobs to accept in order to maximize the net revenue, which is the total income from jobs accepted minus the total cost of employing the experts.\n\n\nConsider the following flow network $G$. It contains a source vertex $s$, vertices $A_1, A_2, \\ldots, A_n$, vertices $J_1, J_2, \\ldots, J_m$, and a sink vertex $t$. For $k = 1, 2, \\ldots, n$, the flow network contains an edge $(s, A_k)$ with capacity $c(s, A_k) = c_k$, and for $i = 1, 2, \\ldots, m$, the flow network contains an edge $(J_i, t)$ with capacity $c(J_i, t) = p_i$. For $k = 1, 2, \\ldots, n$ and $i = 1, 2, \\ldots, m$, if $A_k \\in R_i$, then $G$ contains an edge $(A_k, J_i)$ with capacity $c(A_k, J_i) = \\infty$.\n\n\na.\n Show that if $J_i \\in T$ for a finite-capacity cut $(S, T)$ of $G$, then $A_k \\in T$ for each $A_k \\in R_i$.\n\n\nb.\n Show how to determine the maximum net revenue from the capacity of a minimum cut of $G$ and the given $p_i$ values.\n\n\nc.\n Give an efficient algorithm to determine which jobs to accept and which experts to hire. Analyze the running time of your algorithm in terms of $m$, $n$, and $r = \\sum_{i = 1}^m |R_i|$.\n\n\n\n\na.\n Assume for the sake of contradiction that $A_k \\notin T$ for some $A_k \\in R_i$. Since $A_k \\notin T$, we must have $A_k \\in S$. On the other hand, we have $J_i \\in T$. Thus, the edge $(A_k, J_i)$ crosses the cut $(S, T)$. But $c(A_k, J_i) = \\infty$ by construction, which contradicts the assumption that $(S, T)$ is a finite-capacity cut.\n\n\nb.\n Let us define a \nproject-plan\n as a set of jobs to accept and experts to hire. Let $P$ be a project-plan. We assume that $P$ has two attributes. The attribute $P.J$ denotes the set of accepted jobs, and $P.A$ denotes the set of hired experts.\n\n\nA \nvalid\n project-plan is one in which we have hired all experts that are required by the accepted jobs. Specifically, let $P$ be a valid project plan. If $J_i \\in P.J$, then $A_k \\in P.A$ for each $A_k \\in R_i$. Note that Professor Gore might decide to hire more experts than those that are actually required.\n\n\nWe define the \nrevenue\n of a project-plan as the total profit from the accepted jobs minus the total cost of the hired experts. The problem asks us to find a valid project plan with maximum revenue.\n\n\nWe start by proving the following lemma, which establishes the relationship between the capacity of a cut in flow network $G$ and the revenue of a valid project-plan.\n\n\nLemma (Min-cut max-revenue)\n \n\n\nThere exists a finite-capacity cut $(S, T)$ of $G$ with capacity $c(S, T)$ if and only if there exists a valid project-plan with net revenue $(\\sum_{J_i \\in J} p_i) - c(S, T)$.\n\n\nProof\n \n\n\nLet $(S, T)$ be a finite-capacity cut of $G$ with capacity $c(S, T)$. We prove one direction of the lemma by constructing the required project-plan.\n\n\nConstruct the project-plan $P$ by including $J_i$ in $P.J$ if and only if $J_i \\in T$ and including $A_k$ in $P.A$ if and only if $A_k \\in T$. From part (a), $P$ is a valid project-plan, since, for every $J_i \\in P.J$, we have $A_k \\in P.A$ for each $A_k \\in R_i$.\n\n\nSince the capacity of the cut is finite, there cannot be any edges of the form $(A_k, J_i)$ crossing the cut, where $A_k \\in S$ and $J_i \\in T$. All edges going from a vertex in $S$ to a vertex in $T$ must be either of the form $(s, A_k)$ or of the form $(J_i, t)$. Let $E_A$ be the set of edges of the form $(s, A_k)$ that cross the cut, and let $E_J$ be the set of edges of the form $(J_i, t)$ that cross the cut, so that\n\n\n$$c(S, T) = \\sum_{(s, A_k) \\in E_A} c(s, A_k) + \\sum_{(J_i, j) \\in E_J} c(J_i, t).$$\n\n\nConsider edges of the form $(s, A_k)$. We have\n\n\n\\begin{align}\n(s, A_k) \\in E_A\n    & \\text{ if and only if $A_k \\in T$} \\\\\n    & \\text{ if and only if $A_k \\in P.A$}.\n\\end{align}\n\n\nBy construction, $c(s, A_k) = c_k$. Taking summations over $E_A$ and over $P.A$, we obtain\n\n\n$$\\sum_{(s, A_k) \\in E_A} c(s, A_k) = \\sum_{A_k \\in P.A} c_k.$$\n\n\nSimilarly, consider edges of the form $(J_i, t)$. We have\n\n\n\\begin{align}\n(J_i, t) \\in E_J\n    & \\text{ if and only if $J_i \\in S$} \\\\\n    & \\text{ if and only if $J_i \\notin T$} \\\\\n    & \\text{ if and only if $J_i \\notin P.J$}.\n\\end{align}\n\n\nBy construction, $c(J_i, t) = p_i$. Taking summations over $E_J$ and over $P.J$, we obtain\n\n\n$$\\sum_{(J_i, t) \\in E_J} c(J_i, t) = \\sum_{J_i \\notin P.J} p_i.$$\n\n\nLet $v$ be the net revenue of $P$. Then, we have\n\n\n\\begin{align}\nv & = \\sum_{J_i \\in P.J} p_i - \\sum_{A_k \\in P.A} c_k \\\\\n  & = \\Bigg( \\sum_{J_i \\in J} p_i - \\sum_{J_i \\notin P.J} p_i \\Bigg) - \\sum_{A_k \\in P.A} c_k \\\\\n  & = \\sum_{J_i \\in J} p_i - \\Bigg( \\sum_{J_i \\notin P.J} p_i + \\sum_{A_k \\in P.A} c_k \\Bigg) \\\\\n  & = \\sum_{J_i \\in J} p_i - \\Bigg( \\sum_{(J_i, t) \\in E_J} c(J_i, t) + \\sum_{(s, A_k) \\in E_A} c(s, A_k) \\Bigg) \\\\\n  & = \\Bigg( \\sum_{J_i \\in J} p_i \\Bigg) - c(S, T).\n\\end{align}\n\n\nNow, we prove the other direction of the lemma by constructing the required cut from a valid project-plan.\n\n\nConstruct the cut $(S, T)$ as follows. For every $J_i \\in P.J$, let $J_i \\in T$. For every $A_k \\in P.A$, let $A_k \\in T$.\n\n\nFirst, we prove that the cut $(S, T)$ is a finite-capacity cut. Since edges of the form $(A_k, J_i)$ are the only infinite-capacity edges, it suffices to prove that there are no edges $(A_k, J_i)$ such that $A_k \\in S$ and $J_i \\in T$.\n\n\nFor the purpose of contradiction, assume there is an edge $(A_k, J_i)$ such that $A_k \\in S$ and $J_i \\in T$. By our constuction, we must have $J_i \\in P.J$ and $A_k \\notin P.A$. But since the edge $(A_k, J_i)$ exists, we have $A_k \\in R_i$. Since $P$ is a valid project-plan, we derive the contradiction that $A_k$ must have been in $P.A$.\n\n\nFrom here on, the analysis is the same as the previous direction. In particular, the last equation from the previous analysis holds: the net revenue $v$ equals $(\\sum_{J_i \\in J} p_i) - c(S, T)$.\n\n\nWe conclude that the problem of finding a maximum-revenue project-plan reduces to the problem of finding a minimum cut in $G$. Let $(S, T)$ be a minimum cut. From the lemma, the maximum net revenue is given by\n\n\n$$\\Bigg( \\sum_{j_i \\in J} p_i \\Bigg) - c(S, T).$$\n\n\nc.\n Construct the flow network $G$ as shown in the problem statement. Obtain a minimum cut $(S, T)$ by running any of the maximum-flow algorithms (say, Edmonds-Karp). Construct the project plan $P$ as follows: add $J_i$ to $P.J$ if and only if $J_i \\in T$. Add $A_k$ to $P.A$ if and only if $A_k \\in T$.\n\n\nFirst, we note that the number of vertices in $G$ is $|V| = m + n + 2$, and the number of edges in $G$ is $|E| = r + m + n$. Constructing $G$ and recovering the project-plan from the minimum cut are clearly linear-time operations. The running time of our algorithm is thus asymptotically the same as the running time of the algorithm used to find the minimum cut. If we use Edmonds-Karp to find the minimum cut, the running time is $O(VE^2)$.",
            "title": "26-3 Algorithmic consulting"
        },
        {
            "location": "/Chap26/Problems/26-4/",
            "text": "Let $G = (V, E)$ be a flow network with source $s$, sink $t$, and integer capacities. Suppose that we are given a maximum flow in $G$.\n\n\na.\n Suppose that we increase the capacity of a single edge $(u, v) \\in E$ by $1$. Give an $O(V + E)$-time algorithm to update the maximum flow.\n\n\nb.\n Suppose that we decrease the capacity of a single edge $(u, v) \\in E$ by $1$. Give an $O(V + E)$-time algorithm to update the maximum flow.\n\n\n\n\na.\n Just execute one iteration of the Ford-Fulkerson algorithm. The edge $(u, v)$ in $E$ with increased capacity ensures that the edge $(u, v)$ is in the residual network. So look for an augmenting path and update the flow if a path is found.\n\n\nTime\n\n\n$O(V + E) = O(E)$ if we find the augmenting path with either depth-first or breadth-first search.\n\n\nTo see that only one iteration is needed, consider separately the cases in which $(u, v)$ is or is not an edge that crosses a minimum cut. If $(u, v)$ does not cross a minimum cut, then increasing its capacity does not change the capacity of any minimum cut, and hence the value of the maximum flow does not change. If $(u, v)$ does cross a minimum cut, then increasing its capacity by $1$ increases the capacity of that minimum cut by $1$, and hence possibly the value of the maximum flow by $1$. In this case, there is either no augmenting path (in which case there was some other minimum cut that $(u, v)$ does not cross), or the augmenting path increases flow by $1$. No matter what, one iteration of Ford-Fulkerson suffices.\n\n\nb.\n Let $f$ be the maximum flow before reducing $c(u, v)$.\n\n\n\n\nIf $f(u, v) = 0$, we don't need to do anything.\n\n\nIf $f(u, v) > 0$, we will need to update the maximum flow. Assume from now on that $f(u, v) > 0$, which in turn implies that $f(u, v) \\ge 1$.\n\n\n\n\nDefine $f'(x, y) = f(x, y)$ for all $x, y \\in V$, except that $f'(u, v) = f(u, v) - 1$. Although $f'$ obeys all capacity contraints, even after $c(u, v)$ has been reduced, it is not a legal flow, as it violates flow conservation at $u$ (unless $u = s$) and $v$ (unless $v = t$). $f'$ has one more unit of flow entering $u$ than leaving $u$, and it has one more unit of flow leaving $v$ than entering $v$.\n\n\nThe idea is to try to reroute this unit of flow so that it goes out of $u$ and into $v$ via some other path. If that is not possible, we must reduce the flow from $s$ to $u$ and from $v$ to $t$ by one unit.\n\n\nLook for an augmenting path from $u$ to $v$ (note: \nnot\n from $s$ to $t$).\n\n\n\n\nIf there is such a path, augment the flow along that path.\n\n\nIf there is no such path, reduce the flow from $s$ to $u$ by augmenting the flow from $u$ to $s$. That is, find an augmenting path $u \\leadsto s$ and augment the flow along that path. (There definitely is such a path, because there is flow from $s$ to $u$.) Similarly, reduce the flow from $v$ to $t$ by finding an augmenting path $t \\leadsto v$ and augmenting the flow along that path.\n\n\n\n\nTime\n\n\n$O(V + E) = O(E)$ if we find the paths with either $\\text{DFS}$ or $\\text{BFS}$.",
            "title": "26-4 Updating maximum flow"
        },
        {
            "location": "/Chap26/Problems/26-5/",
            "text": "Let $G = (V, E)$ be a flow network with source $s$, sink $t$, and an integer capacity $c(u, v)$ on each edge $(u, v) \\in E$. Let $C = \\max_{(u, v) \\in E} c(u, v)$.\n\n\na.\n Argue that a minimum cut of $G$ has capacity at most $C|E|$.\n\n\nb.\n For a given number $K$, show how to find an augmenting path of capacity at least $K$ in $O(E)$ time, if such a path exists.\n\n\nWe can use the following modification of $\\text{FORD-FULKERSON-METHOD}$ to compute a maximum flow in $G$:\n\n\nMAX\n-\nFLOW\n-\nBY\n-\nSCALING\n(\nG\n,\n \ns\n,\n \nt\n)\n\n    \nC\n \n=\n \nmax_\n{(\nu\n,\n \nv\n)\n \n\u2208\n \nE\n}\n \nc\n(\nu\n,\n \nv\n)\n\n    \ninitialize\n \nflow\n \nf\n \nto\n \n0\n\n    \nK\n \n=\n \n2\n^\n{\nfloor\n(\nlg\n \nC\n)}\n\n    \nwhile\n \nK\n \n\u2265\n \n1\n\n        \nwhile\n \nthere\n \nexists\n \nan\n \naugmenting\n \npath\n \np\n \nof\n \ncapacity\n \nat\n \nleast\n \nK\n \naugment\n \nflow\n \nf\n \nalong\n \np\n\n        \nK\n \n=\n \nK\n \n/\n \n2\n\n    \nreturn\n \nf\n\n\n\n\n\nc.\n Argue that $\\text{MAX-FLOW-BY-SCALING}$ returns a maximum flow.\n\n\nd.\n Show that the capacity of a minimum cut of the residual network $G_f$ is at most $2K|E|$ each time line 4 is executed.\n\n\ne.\n Argue that the inner \nwhile\n loop of lines 5\u20136 executes $O(E)$ times for each value of $K$.\n\n\nf.\n Conclude that $\\text{MAX-FLOW-BY-SCALING}$ can be implemented so that it runs in $O(E^2\\lg C)$ time.\n\n\n\n\na.\n The capacity of a cut is defined to be the sum of the capacities of the edges crossing it. Since the number of such edges is at most $|E|$, and the capacity of each edge is at most $C$, the capacity of \nany\n cut of $G$ is at most $C|E|$.\n\n\nb.\n The capacity of an augmenting path is the minimum capacity of any edge on the path, so we are looking for an augmenting path whose edges \nall\n have capacity at least $K$. Do a breadth-first search or depth-first-search as usual to find the path, considering only edges with residual capacity at least $K$. (Treat lower-capacity edges as though they don't exist.) This search takes $O(V + E) = O(E)$ time. (Note that $|V| = O(E)$ in a flow network.)\n\n\nc.\n $\\text{MAX-FLOW-BY-SCALING}$ uses the Ford-Fulkerson method. It repeatedly augments the flow along an augmenting path until there are no augmenting paths with capacity at least $1$. Since all the capacities are integers, and the capacity of an augmenting path is positive, when there are no augmenting paths with capacity at least $1$, there must be no augmenting paths whatsoever in the residual network. Thus, by the max-flow min-cut theorem, $\\text{MAX-FLOW-BY-SCALING}$ returns a maximum flow.\n\n\nd.\n \n\n\n\n\nThe first time line 4 is executed, the capacity of any edge in $G_f$ equals its capacity in G, and by part (a) the capacity of a minimum cut of $G$ is at most $C|E|$. Initially $K = 2^{\\lfloor \\lg C \\rfloor}$, and so $2K = 2 \\cdot 2^{\\lfloor \\lg C \\rfloor + 1} > 2^{\\lg C} = C$. Thus, the capacity of a minimum cut of $G_f$ is initially less than $2K|E|$.\n\n\nThe other times line 4 is executed, $K$ has just been halved, and so the capacity of a cut of $G_f$ is at most $2K|E|$ at line 4 if and only if that capacity was at most $K|E|$ when the \nwhile\n loop of lines 5\u20136 last terminated. Thus, we want to show that when line 7 is reached, the capacity of a minimum cut of $G_f$ is at most $K|E|$.\n\n    Let $G_f$ be the residual network when line 7 is reached. When we reach line 7, $G_f$ contains no augmenting path with capacity at least $K$. Therefore, a maximum flow $f'$ in $G_f$ has value $|f'| < K|E|$. Then, by the max-flow min-cut theorem, a minimum cut in $G_f$ has capacity less than $K|E|$.\n\n\n\n\ne.\n By part (d), when line 4 is reached, the capacity of a minimum cut of $G_f$ is at most $2K|E|$, and thus the maximum flow in $G_f$ is at most $2K|E|$. The following lemma shows that the value of a maximum flow in $G$ equals the value of the current flow $f$ in $G$ plus the value of a maximum flow in $G_f$.\n\n\nLemma\n \n\n\nLet $f$ be a flow in flow network $G$, and $f'$ be a maximum flow in the residual network $G_f$. Then $f \\uparrow f'$ is a maximum flow in $G$.\n\n\nProof\n \n\n\nBy the max-flow min-cut theorem, $|f'| = c_f(S, T)$ for some cut $(S, T)$ of $G_f$, which is also a cut of $G$. By Lemma 26.4, $|f| = f(S, T)$. By Lemma 26.1, $f \\uparrow f'$ is a flow in $G$ with value $|f \\uparrow f'| = |f| + |f'|$. We will show that $|f| + |f'| = c(S, T)$ which, by the max-flow min-cut theorem, will prove that $f \\uparrow f'$ is a maximum flow in $G$.\n\n\nWe have\n\n\n\\begin{align}\n|f| + |f'|\n    & = f(S, T) + c_f(S, T) \\\\\n    & = \\Bigg( \\sum_{u \\in S} \\sum_{v \\in T} f(u, v) - \\sum_{u \\in S} \\sum_{v \\in T} f(v, u) \\Bigg) + \\sum_{u \\in S} \\sum_{v \\in T} c_f(u, v) \\\\\n    & = \\Bigg( \\sum_{u \\in S, v \\in T} f(u, v) - \\sum_{u \\in S, v \\in T} f(v, u) \\Bigg) + \\Bigg( \\sum_{u \\in S, v \\in T, (u, v) \\in E} c(u, v) - \\sum_{u \\in S, v \\in T, (u, v) \\in E} f(u, v) + \\sum_{u \\in S, v \\in T, (v, u) \\in E} f(v, u) \\Bigg). \n\\end{align}\n\n\nNoting that $(u, v) \\notin E$ implies $f(u, v) = 0$, we have that\n\n\n$$\\sum_{u \\in S, v \\in T} f(u, v) = \\sum_{u \\in S, v \\in T, (u, v) \\in E} f(u, v).$$\n\n\nSimilarly,\n\n\n$$\\sum_{u \\in S, v \\in T} f(v, u) = \\sum_{u \\in S, v \\in T, (v, u) \\in E} f(v, u).$$\n\n\nThus, the summations of $f(u, v)$ cancel each other out, as do the summations of $f(v, u)$. Therefore,\n\n\n\\begin{align}\n|f| + |f'|\n    & = \\sum_{u \\in S, v \\in T, (u, v) \\in E} c(u, v) \\\\\n    & = \\sum_{u \\in S} \\sum_{v \\in T} c(u, v) \\\\\n    & = c(S, T).\n\\end{align}\n\n\nBy this lemma, we see that the value of a maximum flow in $G$ is at most $2K|E|$ more than the value of the current flow $f$ in $G$. Every time the inner \nwhile\n loop finds an augmenting path of capacity at least $K$, the flow in $G$ increases by at least $K$. Since the flow cannot increase by more than $2K|E|$, the loop executes at most $(2K|E|) / K = 2|E|$ times.\n\n\nf.\n The time complexity is dominated by the \nwhile\n loop of lines 4\u20137. (The lines outside the loop take $O(E)$ time.) The outer \nwhile\n loop executes $O(\\lg C)$ times, since $K$ is initially $O(C)$ and is halved on each iteration, until $K < 1$. By part (e), the inner \nwhile\n loop executes $O(E)$ times for each value of $K$, and by part (b), each iteration takes $O(E)$ time. Thus, the total time is $O(E^2 \\lg C)$.",
            "title": "26-5 Maximum flow by scaling"
        },
        {
            "location": "/Chap26/Problems/26-6/",
            "text": "In this problem, we describe a faster algorithm, due to Hopcroft and Karp, for $p$ finding a maximum matching in a bipartite graph. The algorithm runs in $O(\\sqrt V E)$ time. Given an undirected, bipartite graph $G = (V, E)$, where $V = L \\cup R$ and all edges have exactly one endpoint in $L$, let $M$ be a matching in $G$. We say that a simple path $P$ in $G$ is an \naugmenting path\n with respect to $M$ if it starts at an unmatched vertex in $L$, ends at an unmatched vertex in $R$, and its edges belong alternately to $M$ and $E - M$. (This definition of an augmenting path is related to, but different from, an augmenting path in a flow network.) In this problem, we treat a path as a sequence of edges, rather than as a sequence of vertices. A shortest augmenting path with respect to a matching $M$ is an augmenting path with a minimum number of edges.\n\n\nGiven two sets $A$ and $B$, the \nsymmetric difference\n $A \\oplus B$ is defined as $(A - B) \\cup (B - A)$, that is, the elements that are in exactly one of the two sets.\n\n\na.\n Show that if $M$ is a matching and $P$ is an augmenting path with respect to $M$, then the symmetric difference $M \\oplus P$ is a matching and $M \\oplus P = |M| + 1$. Show that if $P_1, P_2, \\ldots, P_k$ are vertex-disjoint augmenting paths with respect to $M$, then the symmetric difference $M \\oplus (P_1 \\cup P_2 \\cup \\cdots \\cup P_k)$ is a matching with cardinality $|M| + k$.\n\n\nThe general structure of our algorithm is the following:\n\n\nHOPCROPFT\n-\nKARP\n(\nG\n)\n\n    \nM\n \n=\n \n\u2205\n\n    \nrepeat\n\n        \nlet\n \nP\n \n=\n \n{\nP1\n,\n \nP2\n,...,\nPk\n}\n \nbe\n \na\n \nmaximal\n \nset\n \nof\n \nvertex\n-\ndisjoint\n \nshortest\n \naugmenting\n \npaths\n \nwith\n \nrespect\n \nto\n \nM\n\n        \nM\n \n=\n \nM\n \n\u2a01\n \n(\nP1\n \n\u222a\n \nP2\n \n\u222a\n \n...\n \n\u222a\n \nPk\n)\n\n    \nuntil\n \nP\n \n==\n \n\u2205\n\n    \nreturn\n \nM\n\n\n\n\n\nThe remainder of this problem asks you to analyze the number of iterations in the algorithm (that is, the number of iterations in the repeat loop) and to describe an implementation of line 3.\n\n\nb.\n Given two matchings $M$ and $M^*$ in $G$, show that every vertex in the graph $G' = (V, M \\oplus M^*)$ has degree at most $2$. Conclude that $G'$ is a disjoint union of simple paths or cycles. Argue that edges in each such simple path or cycle belong alternately to $M$ or $M^*$. Prove that if $|M| \\le |M^*|$, then $M \\oplus M^*$ contains at least $|M^*| - |M|$ vertex-disjoint augmenting paths with respect to $M$.\n\n\nLet $l$ be the length of a shortest augmenting path with respect to a matching $M$, and let $P_1, P_2, \\ldots, P_k$ be a maximal set of vertex-disjoint augmenting paths of length $l$ with respect to $M$. Let $M' = M \\oplus (P_1 \\cup \\cdots \\cup P_k)$, and suppose that $P$ is a shortest augmenting path with respect to $M'$.\n\n\nc.\n Show that if $P$ is vertex-disjoint from $P_1, P_2, \\ldots, P_k$ , then $P$ has more than $l$ edges.\n\n\nd.\n Now suppose that $P$ is not vertex-disjoint from $P_1, P_2, \\ldots, P_k$ . Let $A$ be the set of edges $(M \\oplus M') \\oplus P$. Show that $A = (P_1 \\cup P_2 \\cup \\cdots \\cup P_k) \\oplus P$ and that $|A| \\ge (k + 1)l$. Conclude that $P$ has more than $l$ edges.\n\n\ne.\n Prove that if a shortest augmenting path with respect to $M$ has $l$ edges, the size of the maximum matching is at most $|M| + |V| / (l + 1)$.\n\n\nf.\n Show that the number of \nrepeat\n loop iterations in the algorithm is at most $2\\sqrt{|V|}$. ($\\textit{Hint:}$ By how much can $M$ grow after iteration number $\\sqrt{|V|}$?)\n\n\ng.\n Give an algorithm that runs in $O(E)$ time to find a maximal set of vertexdisjoint shortest augmenting paths $P_1, P_2, \\ldots, P_k$ for a given matching $M$. Conclude that the total running time of $\\text{HOPCROFT-KARP}$ is $O(\\sqrt V E)$.\n\n\n\n\na.\n Suppose $M$ is a matching and $P$ is an augmenting path with respect to $M$. Then $P$ consists of $k$ edges in $M$, and $k + 1$ edges not in $M$. This is because the first edge of $P$ touches an unmatched vertex in $L$, so it cannot be in $M$. Similarly, the last edge in $P$ touches an unmatched vertex in $R$, so the last edge cannot be in $M$. Since the edges alternate being in or not in $M$, there must be exactly one more edge not in $M$ than in $M$. This implies that\n\n\n$$|M \\oplus P| = |M| + |P| - 2k = |M| + 2k + 1 - 2k = |M| + 1,$$\n\n\nsince we must remove each edge of $M$ which is in $P$ from both $M$ and $P$. Now suppose $P_1, P_2, \\ldots, P_k$ are vertex-disjoint augmenting paths with respect to $M$. Let $k_i$ be the number of edges in $P_i$ which are in $M$, so that $|P_i| = 2k + i + 1$. Then we have\n\n\n$$M \\oplus (P_1 \\cup P_2 \\cup \\cdots \\cup P_k) = |M| + |P_1| + \\cdots + |P_k| - 2k_1 - 2k_2 - \\cdots - 2k_k = |M| + k.$$\n\n\nTo see that we in fact get a matching, suppose that there was some vertex $v$ which had at least $2$ incident edges $e$ and $e'$. They cannot both come from $M$, since $M$ is a matching. They cannot both come from $P$ since $P$ is simple and every other edge of $P$ is removed. Thus, $e \\in M$ and $e' \\in P \\backslash M$. However, if $e \\in M$ then $e \\in P$, so $e \\notin M \\oplus P$, a contradiction. A similar argument gives the case of $M \\oplus (P_1 \\cup \\cdots \\cup P_k)$.\n\n\nb.\n Suppose some vertex in $G'$ has degree at least $3$. Since the edges of $G'$ come from $M \\oplus M^*$, at least $2$ of these edges come from the same matching. However, a matching never contains two edges with the same endpoint, so this is impossible. Thus every vertex has degree at most $2$, so $G'$ is a disjoint union of simple paths and cycles. If edge $(u, v)$ is followed by edge $(z, w)$ in a simple path or cycle then we must have $v = z$. Since two edges with the same endpoint cannot appear in a matching, they must belong alternately to $M$ and $M^*$. Since edges alternate, every cycle has the same number of edges in each matching and every path has at most one more edge in one matching than in the other. Thus, if $|M| \\le |M^*|$ there must be at least $|M^*| - |M|$ vertex-disjoint augmenting paths with respect to $M$.\n\n\nc.\n Every vertex matched by $M$ must be incident with some edge in $M'$. Since $P$ is augmenting with respect to $M$\u2032, the left endpoint of the first edge of $P$ isn't incident to a vertex touched by an edge in $M'$. In particular, $P$ starts at a vertex in $L$ which is unmatched by $M$ since every vertex of $M$ is incident with an edge in $M'$. Since $P$ is vertex disjoint from $P_1, P_2, \\ldots, P_k$, any edge of $P$ which is in $M'$ must in fact be in $M$ and any edge of $P$ which is not in $M'$ cannot be in $M$. Since $P$ has edges alternately in $M'$ and $E - M'$, $P$ must in fact have edges alternately in $M$ and $E - M$. Finally, the last edge of $P$ must be incident to a vertex in $R$ which is unmatched by $M'$. Any vertex unmatched by $M'$ is also unmatched by $M$, so $P$ is an augmenting path for $M$. $P$ must have length at least $l$ since $l$ is the length of the shortest augmenting path with respect to $M$. If $P$ had length exactly $l$, then this would contradict the fact that $P_1 \\cup \\cdots \\cup P_k$ is a maximal set of vertex disjoint paths of length $l$ because we could add $P$ to the set. Thus $P$ has more than $l$ edges.\n\n\nd.\n Any edge in $M \\oplus M'$ is in exactly one of $M$ or $M'$. Thus, the only possible contributing edges from $M'$ are from $P_1 \\cup \\cdots \\cup P_k$. An edge from $M$ can contribute if and only if it is not in exactly one of $M$ and $P_1 \\cup \\cdots \\cup P_k$, which means it must be in both. Thus, the edges from $M$ are redundant so $M \\oplus M' = (P_1 \\cup \\cdots \\cup P_k)$ which implies $A = (P_1 \\cup \\cdots \\cup P_k) \\oplus P$.\n\n\nNow we'll show that $P$ is edge disjoint from each $P_i$. Suppose that an edge $e$ of $P$ is also an edge of $P_i$ for some $i$. Since $P$ is an augmenting path with respect to $M'$ either $e \\in M'$ or $e \\in E - M'$. Suppose $e \\in M'$. Since $P$ is also augmenting with respect to $M$, we must have $e \\in M$. However, if $e$ is in $M$ and $M'$, then $e$ cannot be in any of the $P_i$'s by the definition of $M'$. Now suppose $e \\in E - M'$. Then $e \\in E - M$ since $P$ is augmenting with respect to $M$. Since $e$ is an edge of $P_i$, $e \\in E - M'$ implies that $e \\in M$, a contradiction.\n\n\nSince $P$ has edges alternately in $M'$ and $E - M'$ and is edge disjoint from $P_1 \\cup \\cdots \\cup P_k$, $P$ is also an augmenting path for $M$, which implies $|P| \\ge l$. Since every edge in $A$ is disjoint we conclude that $|A| \\ge (k + 1)l$.\n\n\ne.\n Suppose $M^*$ is a matching with strictly more than $|M| + |V| / (l + 1)$ edges. By part (b) there are strictly more than $|V| / (l + 1)$ vertex-disjoint augmenting paths with respect to $M$. Each one of these contains at least $l$ edges, so it is incident on $l + 1$ vertices. Since the paths are vertex disjoint, there are strictly more than $|V|(l + 1) / (l + 1)$ distinct vertices incident with these paths, a contradiction. Thus, the size of the maximum matching is at most $|M| + |V| / (l + 1)$.\n\n\nf.\n Consider what happens after iteration number $\\sqrt{|V|}$. Let $M^*$ be a maximal matching in $G$. Then $|M^*| \\ge |M|$ so by part (b), $M \\oplus M^*$ contains at least $|M^*| - |M|$ vertex disjoint augmenting paths with respect to $M$. By part (c), each of these is also a an augmenting path for $M$. Since each has length  $\\sqrt{|V|}$, there can be at most $\\sqrt{|V|}$ such paths, so $|M^*| - |M| \\le \\sqrt{|V|}$. Thus, only $\\sqrt{|V|}$ additional iterations of the repeat loop can occur, so there are at most $2\\sqrt{|V|}$ iterations in total.\n\n\ng.\n For each unmatched vertex in $L$ we can perform a modified $\\text{BFS}$ to find the length of the shortest path to an unmatched vertex in $R$. Modify the $\\text{BFS}$ to ensure that we only traverse an edge if it causes the path to alternate between an edge in $M$ and an edge in $E - M$. The first time an unmatched vertex in $R$ is reached we know the length $k$ of a shortest augmenting path.\n\n\nWe can use this to stop our search early if at any point we have traversed more than that number of edges. To find disjoint paths, start at the vertices of $R$ which were found at distance $k$ in the $\\text{BFS}$. Run a $\\text{DFS}$ backwards from these, which maintains the property that the next vertex we pick has distance one fewer, and the edges alternate between being in $M$ and $E - M$. As we build up a path, mark the vertices as used so that we never traverse them again. This takes $O(E)$, so by part (f) the total runtime is $O(\\sqrt VE)$.",
            "title": "26-6 The Hopcroft-Karp bipartite matching algorithm"
        }
    ]
}